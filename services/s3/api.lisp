;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/s3/api
  (:use)
  (:nicknames #:aws/s3)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/s3/api)
(common-lisp:progn
 (common-lisp:define-condition s3-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 's3-error))
(common-lisp:progn
 (common-lisp:defclass s3-request (aws-sdk/rest-xml-request:rest-xml-request)
                       common-lisp:nil
                       (:default-initargs :service "s3" :api-version
                        "2006-03-01" :host-prefix "s3" :signing-name
                        common-lisp:nil :global-host "s3.amazonaws.com"))
 (common-lisp:export 's3-request))
(common-lisp:defvar *error-map*
  '(("BucketAlreadyExists" . bucket-already-exists)
    ("BucketAlreadyOwnedByYou" . bucket-already-owned-by-you)
    ("InvalidObjectState" . invalid-object-state)
    ("NoSuchBucket" . no-such-bucket) ("NoSuchKey" . no-such-key)
    ("NoSuchUpload" . no-such-upload)
    ("ObjectAlreadyInActiveTierError" . object-already-in-active-tier-error)
    ("ObjectNotInActiveTierError" . object-not-in-active-tier-error)))
(common-lisp:deftype abort-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (abort-incomplete-multipart-upload (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-incomplete-multipart-upload-"))
   (days-after-initiation common-lisp:nil :type
    (common-lisp:or days-after-initiation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-incomplete-multipart-upload
                    'make-abort-incomplete-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (abort-multipart-upload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-multipart-upload-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-output
                    'make-abort-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (abort-multipart-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-abort-multipart-upload-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (upload-id (common-lisp:error ":upload-id is required") :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-request
                    'make-abort-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   common-lisp:nil))
(common-lisp:deftype abort-rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (accelerate-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-accelerate-configuration-"))
   (status common-lisp:nil :type
    (common-lisp:or bucket-accelerate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accelerate-configuration 'make-accelerate-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   common-lisp:nil))
(common-lisp:deftype accept-ranges () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-policy-"))
   (grants common-lisp:nil :type (common-lisp:or grants common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-policy 'make-access-control-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-translation (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-translation-"))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or owner-override common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-translation
                    'make-access-control-translation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   common-lisp:nil))
(common-lisp:deftype access-key-id-value () 'common-lisp:string)
(common-lisp:deftype access-point-alias () 'common-lisp:boolean)
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype allow-quoted-record-delimiter () 'common-lisp:boolean)
(common-lisp:deftype allowed-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-headers ()
   '(trivial-types:proper-list allowed-header))
 (common-lisp:defun make-allowed-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-methods ()
   '(trivial-types:proper-list allowed-method))
 (common-lisp:defun make-allowed-methods
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-origins ()
   '(trivial-types:proper-list allowed-origin))
 (common-lisp:defun make-allowed-origins
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-origin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analytics-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-analytics-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analytics-and-operator 'make-analytics-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analytics-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-analytics-configuration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or analytics-id common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or analytics-filter common-lisp:null))
   (storage-class-analysis
    (common-lisp:error ":storage-class-analysis is required") :type
    (common-lisp:or storage-class-analysis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analytics-configuration 'make-analytics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-class-analysis))
      (common-lisp:list
       (common-lisp:cons "StorageClassAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-configuration-list ()
   '(trivial-types:proper-list analytics-configuration))
 (common-lisp:defun make-analytics-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analytics-export-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-analytics-export-destination-"))
   (s3bucket-destination
    (common-lisp:error ":s3bucket-destination is required") :type
    (common-lisp:or analytics-s3bucket-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analytics-export-destination
                    'make-analytics-export-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analytics-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-analytics-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or analytics-and-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analytics-filter 'make-analytics-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analytics-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analytics-s3bucket-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-analytics-s3bucket-destination-"))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or analytics-s3export-file-format common-lisp:null))
   (bucket-account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analytics-s3bucket-destination
                    'make-analytics-s3bucket-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   common-lisp:nil))
(common-lisp:deftype analytics-s3export-file-format () 'common-lisp:string)
(common-lisp:deftype archive-status () 'common-lisp:string)
(common-lisp:deftype body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket (:copier common-lisp:nil) (:conc-name "struct-shape-bucket-"))
   (name common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:deftype bucket-accelerate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bucket-already-exists
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-exists)))
(common-lisp:progn
 (common-lisp:define-condition bucket-already-owned-by-you
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-owned-by-you)))
(common-lisp:deftype bucket-canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-info-"))
   (data-redundancy common-lisp:nil :type
    (common-lisp:or data-redundancy common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or bucket-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-info 'make-bucket-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-redundancy))
      (common-lisp:list
       (common-lisp:cons "DataRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-info))
   common-lisp:nil))
(common-lisp:deftype bucket-key-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-lifecycle-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-lifecycle-configuration-"))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or lifecycle-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-lifecycle-configuration
                    'make-bucket-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   common-lisp:nil))
(common-lisp:deftype bucket-location-constraint () 'common-lisp:string)
(common-lisp:deftype bucket-location-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-logging-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-logging-status-"))
   (logging-enabled common-lisp:nil :type
    (common-lisp:or logging-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-logging-status 'make-bucket-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   common-lisp:nil))
(common-lisp:deftype bucket-logs-permission () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-type () 'common-lisp:string)
(common-lisp:deftype bucket-versioning-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-buckets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bypass-governance-retention () 'common-lisp:boolean)
(common-lisp:deftype bytes-processed () 'common-lisp:integer)
(common-lisp:deftype bytes-returned () 'common-lisp:integer)
(common-lisp:deftype bytes-scanned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (corsconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-corsconfiguration-"))
   (corsrules (common-lisp:error ":corsrules is required") :type
    (common-lisp:or corsrules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'corsconfiguration 'make-corsconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (corsrule (:copier common-lisp:nil) (:conc-name "struct-shape-corsrule-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (allowed-headers common-lisp:nil :type
    (common-lisp:or allowed-headers common-lisp:null))
   (allowed-methods (common-lisp:error ":allowed-methods is required") :type
    (common-lisp:or allowed-methods common-lisp:null))
   (allowed-origins (common-lisp:error ":allowed-origins is required") :type
    (common-lisp:or allowed-origins common-lisp:null))
   (expose-headers common-lisp:nil :type
    (common-lisp:or expose-headers common-lisp:null))
   (max-age-seconds common-lisp:nil :type
    (common-lisp:or max-age-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'corsrule 'make-corsrule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-headers))
      (common-lisp:list
       (common-lisp:cons "AllowedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-methods))
      (common-lisp:list
       (common-lisp:cons "AllowedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-origins))
      (common-lisp:list
       (common-lisp:cons "AllowedOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxAgeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsrule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype corsrules () '(trivial-types:proper-list corsrule))
 (common-lisp:defun make-corsrules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list corsrule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (csvinput (:copier common-lisp:nil) (:conc-name "struct-shape-csvinput-"))
   (file-header-info common-lisp:nil :type
    (common-lisp:or file-header-info common-lisp:null))
   (comments common-lisp:nil :type (common-lisp:or comments common-lisp:null))
   (quote-escape-character common-lisp:nil :type
    (common-lisp:or quote-escape-character common-lisp:null))
   (record-delimiter common-lisp:nil :type
    (common-lisp:or record-delimiter common-lisp:null))
   (field-delimiter common-lisp:nil :type
    (common-lisp:or field-delimiter common-lisp:null))
   (quote-character common-lisp:nil :type
    (common-lisp:or quote-character common-lisp:null))
   (allow-quoted-record-delimiter common-lisp:nil :type
    (common-lisp:or allow-quoted-record-delimiter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'csvinput 'make-csvinput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-header-info))
      (common-lisp:list
       (common-lisp:cons "FileHeaderInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-quoted-record-delimiter))
      (common-lisp:list
       (common-lisp:cons "AllowQuotedRecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (csvoutput (:copier common-lisp:nil)
      (:conc-name "struct-shape-csvoutput-"))
   (quote-fields common-lisp:nil :type
    (common-lisp:or quote-fields common-lisp:null))
   (quote-escape-character common-lisp:nil :type
    (common-lisp:or quote-escape-character common-lisp:null))
   (record-delimiter common-lisp:nil :type
    (common-lisp:or record-delimiter common-lisp:null))
   (field-delimiter common-lisp:nil :type
    (common-lisp:or field-delimiter common-lisp:null))
   (quote-character common-lisp:nil :type
    (common-lisp:or quote-character common-lisp:null)))
 (common-lisp:export (common-lisp:list 'csvoutput 'make-csvoutput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-fields))
      (common-lisp:list
       (common-lisp:cons "QuoteFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvoutput))
   common-lisp:nil))
(common-lisp:deftype cache-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (checksum (:copier common-lisp:nil) (:conc-name "struct-shape-checksum-"))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'checksum 'make-checksum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input checksum))
   common-lisp:nil))
(common-lisp:deftype checksum-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype checksum-algorithm-list ()
   '(trivial-types:proper-list checksum-algorithm))
 (common-lisp:defun make-checksum-algorithm-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list checksum-algorithm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype checksum-crc32 () 'common-lisp:string)
(common-lisp:deftype checksum-crc32c () 'common-lisp:string)
(common-lisp:deftype checksum-mode () 'common-lisp:string)
(common-lisp:deftype checksum-sha1 () 'common-lisp:string)
(common-lisp:deftype checksum-sha256 () 'common-lisp:string)
(common-lisp:deftype cloud-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-function-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-function-configuration-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (event common-lisp:nil :type (common-lisp:or event common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null))
   (cloud-function common-lisp:nil :type
    (common-lisp:or cloud-function common-lisp:null))
   (invocation-role common-lisp:nil :type
    (common-lisp:or cloud-function-invocation-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-function-configuration
                    'make-cloud-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-function))
      (common-lisp:list
       (common-lisp:cons "CloudFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-role))
      (common-lisp:list
       (common-lisp:cons "InvocationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   common-lisp:nil))
(common-lisp:deftype cloud-function-invocation-role () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:deftype comments () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (common-prefix (:copier common-lisp:nil)
      (:conc-name "struct-shape-common-prefix-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null)))
 (common-lisp:export (common-lisp:list 'common-prefix 'make-common-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input common-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype common-prefix-list ()
   '(trivial-types:proper-list common-prefix))
 (common-lisp:defun make-common-prefix-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-multipart-upload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-multipart-upload-output-"))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-output
                    'make-complete-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (complete-multipart-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-complete-multipart-upload-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (multipart-upload common-lisp:nil :type
    (common-lisp:or completed-multipart-upload common-lisp:null))
   (upload-id (common-lisp:error ":upload-id is required") :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-request
                    'make-complete-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multipart-upload))
      (common-lisp:list
       (common-lisp:cons "MultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'multipart-upload)))
(common-lisp:progn
 (common-lisp:defstruct
     (completed-multipart-upload (:copier common-lisp:nil)
      (:conc-name "struct-shape-completed-multipart-upload-"))
   (parts common-lisp:nil :type
    (common-lisp:or completed-part-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'completed-multipart-upload
                    'make-completed-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (completed-part (:copier common-lisp:nil)
      (:conc-name "struct-shape-completed-part-"))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (part-number common-lisp:nil :type
    (common-lisp:or part-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'completed-part 'make-completed-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input completed-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype completed-part-list ()
   '(trivial-types:proper-list completed-part))
 (common-lisp:defun make-completed-part-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list completed-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-"))
   (http-error-code-returned-equals common-lisp:nil :type
    (common-lisp:or http-error-code-returned-equals common-lisp:null))
   (key-prefix-equals common-lisp:nil :type
    (common-lisp:or key-prefix-equals common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-error-code-returned-equals))
      (common-lisp:list
       (common-lisp:cons "HttpErrorCodeReturnedEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix-equals))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype confirm-remove-self-bucket-access () 'common-lisp:boolean)
(common-lisp:deftype content-disposition () 'common-lisp:string)
(common-lisp:deftype content-encoding () 'common-lisp:string)
(common-lisp:deftype content-language () 'common-lisp:string)
(common-lisp:deftype content-length () 'common-lisp:integer)
(common-lisp:deftype content-md5 () 'common-lisp:string)
(common-lisp:deftype content-range () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (continuation-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-continuation-event-")))
 (common-lisp:export
  (common-lisp:list 'continuation-event 'make-continuation-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input continuation-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-object-output-"))
   (copy-object-result common-lisp:nil :type
    (common-lisp:or copy-object-result common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (copy-source-version-id common-lisp:nil :type
    (common-lisp:or copy-source-version-id common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-object-output 'make-copy-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-object-result))
      (common-lisp:list
       (common-lisp:cons "CopyObjectResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'copy-object-result)))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-object-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or object-canned-acl common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (copy-source (common-lisp:error ":copy-source is required") :type
    (common-lisp:or copy-source common-lisp:null))
   (copy-source-if-match common-lisp:nil :type
    (common-lisp:or copy-source-if-match common-lisp:null))
   (copy-source-if-modified-since common-lisp:nil :type
    (common-lisp:or copy-source-if-modified-since common-lisp:null))
   (copy-source-if-none-match common-lisp:nil :type
    (common-lisp:or copy-source-if-none-match common-lisp:null))
   (copy-source-if-unmodified-since common-lisp:nil :type
    (common-lisp:or copy-source-if-unmodified-since common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (metadata-directive common-lisp:nil :type
    (common-lisp:or metadata-directive common-lisp:null))
   (tagging-directive common-lisp:nil :type
    (common-lisp:or tagging-directive common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (website-redirect-location common-lisp:nil :type
    (common-lisp:or website-redirect-location common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (copy-source-ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-algorithm common-lisp:null))
   (copy-source-ssecustomer-key common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-key common-lisp:null))
   (copy-source-ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (tagging common-lisp:nil :type
    (common-lisp:or tagging-header common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (expected-source-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-object-request 'make-copy-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-directive))
      (common-lisp:cons "x-amz-metadata-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging-directive))
      (common-lisp:cons "x-amz-tagging-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-object-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-object-result-"))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-object-result 'make-copy-object-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-part-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-part-result-"))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-part-result 'make-copy-part-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-part-result))
   common-lisp:nil))
(common-lisp:deftype copy-source () 'common-lisp:string)
(common-lisp:deftype copy-source-if-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-modified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-if-none-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-unmodified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-range () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:deftype copy-source-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-configuration-"))
   (location-constraint common-lisp:nil :type
    (common-lisp:or bucket-location-constraint common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-info common-lisp:null))
   (bucket common-lisp:nil :type
    (common-lisp:or bucket-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-configuration
                    'make-create-bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-output-"))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-output 'make-create-bucket-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or bucket-canned-acl common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (create-bucket-configuration common-lisp:nil :type
    (common-lisp:or create-bucket-configuration common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write common-lisp:nil :type
    (common-lisp:or grant-write common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (object-lock-enabled-for-bucket common-lisp:nil :type
    (common-lisp:or object-lock-enabled-for-bucket common-lisp:null))
   (object-ownership common-lisp:nil :type
    (common-lisp:or object-ownership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-enabled-for-bucket))
      (common-lisp:cons "x-amz-bucket-object-lock-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:cons "x-amz-object-ownership"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-bucket-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateBucketConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-bucket-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multipart-upload-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multipart-upload-output-"))
   (abort-date common-lisp:nil :type
    (common-lisp:or abort-date common-lisp:null))
   (abort-rule-id common-lisp:nil :type
    (common-lisp:or abort-rule-id common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (upload-id common-lisp:nil :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-output
                    'make-create-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multipart-upload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multipart-upload-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or object-canned-acl common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (website-redirect-location common-lisp:nil :type
    (common-lisp:or website-redirect-location common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (tagging common-lisp:nil :type
    (common-lisp:or tagging-header common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-request
                    'make-create-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-output-"))
   (credentials (common-lisp:error ":credentials is required") :type
    (common-lisp:or session-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-output 'make-create-session-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-request-"))
   (session-mode common-lisp:nil :type
    (common-lisp:or session-mode common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-mode))
      (common-lisp:cons "x-amz-create-session-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype data-redundancy () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype days-after-initiation () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (default-retention (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-retention-"))
   (mode common-lisp:nil :type
    (common-lisp:or object-lock-retention-mode common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (years common-lisp:nil :type (common-lisp:or years common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-retention 'make-default-retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'years))
      (common-lisp:list
       (common-lisp:cons "Years"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-retention))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete (:copier common-lisp:nil) (:conc-name "struct-shape-delete-"))
   (objects (common-lisp:error ":objects is required") :type
    (common-lisp:or object-identifier-list common-lisp:null))
   (quiet common-lisp:nil :type (common-lisp:or quiet common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delete 'make-delete))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet))
      (common-lisp:list
       (common-lisp:cons "Quiet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-analytics-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-bucket-analytics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or analytics-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-analytics-configuration-request
                    'make-delete-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-cors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-cors-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-cors-request
                    'make-delete-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-encryption-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-encryption-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-encryption-request
                    'make-delete-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-intelligent-tiering-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-bucket-intelligent-tiering-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or intelligent-tiering-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-intelligent-tiering-configuration-request
                    'make-delete-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-inventory-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-bucket-inventory-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or inventory-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-inventory-configuration-request
                    'make-delete-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-lifecycle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-lifecycle-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-lifecycle-request
                    'make-delete-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-metrics-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-metrics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or metrics-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-metrics-configuration-request
                    'make-delete-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-ownership-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-ownership-controls-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-ownership-controls-request
                    'make-delete-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-policy-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-policy-request
                    'make-delete-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-replication-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-replication-request
                    'make-delete-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-tagging-request
                    'make-delete-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-website-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-website-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-website-request
                    'make-delete-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   common-lisp:nil))
(common-lisp:deftype delete-marker () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-marker-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-marker-entry-"))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (is-latest common-lisp:nil :type
    (common-lisp:or is-latest common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-marker-entry 'make-delete-marker-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-marker-replication (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-marker-replication-"))
   (status common-lisp:nil :type
    (common-lisp:or delete-marker-replication-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-marker-replication
                    'make-delete-marker-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   common-lisp:nil))
(common-lisp:deftype delete-marker-replication-status () 'common-lisp:string)
(common-lisp:deftype delete-marker-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-markers ()
   '(trivial-types:proper-list delete-marker-entry))
 (common-lisp:defun make-delete-markers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-marker-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-output-"))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-output 'make-delete-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (mfa common-lisp:nil :type (common-lisp:or mfa common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (bypass-governance-retention common-lisp:nil :type
    (common-lisp:or bypass-governance-retention common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-request 'make-delete-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-tagging-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-tagging-output-"))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-output
                    'make-delete-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-request
                    'make-delete-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-objects-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-objects-output-"))
   (deleted common-lisp:nil :type
    (common-lisp:or deleted-objects common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (errors common-lisp:nil :type (common-lisp:or errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-objects-output 'make-delete-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-objects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-objects-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (delete (common-lisp:error ":delete is required") :type
    (common-lisp:or delete common-lisp:null))
   (mfa common-lisp:nil :type (common-lisp:or mfa common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (bypass-governance-retention common-lisp:nil :type
    (common-lisp:or bypass-governance-retention common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-objects-request 'make-delete-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete))
      (common-lisp:list
       (common-lisp:cons "Delete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'delete)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-public-access-block-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-public-access-block-request
                    'make-delete-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deleted-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-deleted-object-"))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (delete-marker-version-id common-lisp:nil :type
    (common-lisp:or delete-marker-version-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deleted-object 'make-deleted-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:list
       (common-lisp:cons "DeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-version-id))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deleted-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deleted-objects ()
   '(trivial-types:proper-list deleted-object))
 (common-lisp:defun make-deleted-objects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deleted-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (account common-lisp:nil :type (common-lisp:or account-id common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (access-control-translation common-lisp:nil :type
    (common-lisp:or access-control-translation common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (replication-time common-lisp:nil :type
    (common-lisp:or replication-time common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-translation))
      (common-lisp:list
       (common-lisp:cons "AccessControlTranslation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype directory-bucket-token () 'common-lisp:string)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype etag () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype enable-request-progress () 'common-lisp:boolean)
(common-lisp:deftype encoding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-"))
   (encryption-type (common-lisp:error ":encryption-type is required") :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (kmscontext common-lisp:nil :type
    (common-lisp:or kmscontext common-lisp:null)))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmscontext))
      (common-lisp:list
       (common-lisp:cons "KMSContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (replica-kms-key-id common-lisp:nil :type
    (common-lisp:or replica-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ReplicaKmsKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype end () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (end-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-end-event-")))
 (common-lisp:export (common-lisp:list 'end-event 'make-end-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (error (:copier common-lisp:nil) (:conc-name "struct-shape-error-"))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (code common-lisp:nil :type (common-lisp:or code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error 'make-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-document-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-document 'make-error-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-document))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype errors () '(trivial-types:proper-list error))
 (common-lisp:defun make-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-bridge-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-bridge-configuration-")))
 (common-lisp:export
  (common-lisp:list 'event-bridge-configuration
                    'make-event-bridge-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (existing-object-replication (:copier common-lisp:nil)
      (:conc-name "struct-shape-existing-object-replication-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or existing-object-replication-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'existing-object-replication
                    'make-existing-object-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   common-lisp:nil))
(common-lisp:deftype existing-object-replication-status () 'common-lisp:string)
(common-lisp:deftype expiration () 'common-lisp:string)
(common-lisp:deftype expiration-status () 'common-lisp:string)
(common-lisp:deftype expired-object-delete-marker () 'common-lisp:boolean)
(common-lisp:deftype expires () 'common-lisp:string)
(common-lisp:deftype expose-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype expose-headers ()
   '(trivial-types:proper-list expose-header))
 (common-lisp:defun make-expose-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expose-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:deftype expression-type () 'common-lisp:string)
(common-lisp:deftype fetch-owner () 'common-lisp:boolean)
(common-lisp:deftype field-delimiter () 'common-lisp:string)
(common-lisp:deftype file-header-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-rule-"))
   (name common-lisp:nil :type
    (common-lisp:or filter-rule-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or filter-rule-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-rule 'make-filter-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-rule-list ()
   '(trivial-types:proper-list filter-rule))
 (common-lisp:defun make-filter-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-rule-name () 'common-lisp:string)
(common-lisp:deftype filter-rule-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-accelerate-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-accelerate-configuration-output-"))
   (status common-lisp:nil :type
    (common-lisp:or bucket-accelerate-status common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-output
                    'make-get-bucket-accelerate-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-accelerate-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-accelerate-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-request
                    'make-get-bucket-accelerate-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-acl-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-acl-output-"))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (grants common-lisp:nil :type (common-lisp:or grants common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-output 'make-get-bucket-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-acl-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-request 'make-get-bucket-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-analytics-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-analytics-configuration-output-"))
   (analytics-configuration common-lisp:nil :type
    (common-lisp:or analytics-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-output
                    'make-get-bucket-analytics-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'analytics-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-analytics-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-analytics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or analytics-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-request
                    'make-get-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-cors-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-cors-output-"))
   (corsrules common-lisp:nil :type
    (common-lisp:or corsrules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-output 'make-get-bucket-cors-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-cors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-cors-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-request 'make-get-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-encryption-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-encryption-output-"))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-output
                    'make-get-bucket-encryption-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'server-side-encryption-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-encryption-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-encryption-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-request
                    'make-get-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-intelligent-tiering-configuration-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-bucket-intelligent-tiering-configuration-output-"))
   (intelligent-tiering-configuration common-lisp:nil :type
    (common-lisp:or intelligent-tiering-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-output
                    'make-get-bucket-intelligent-tiering-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-intelligent-tiering-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-bucket-intelligent-tiering-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or intelligent-tiering-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-request
                    'make-get-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-inventory-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-inventory-configuration-output-"))
   (inventory-configuration common-lisp:nil :type
    (common-lisp:or inventory-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-output
                    'make-get-bucket-inventory-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'inventory-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-inventory-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-inventory-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or inventory-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-request
                    'make-get-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-configuration-output-"))
   (rules common-lisp:nil :type
    (common-lisp:or lifecycle-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-output
                    'make-get-bucket-lifecycle-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-request
                    'make-get-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-output-"))
   (rules common-lisp:nil :type (common-lisp:or rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-output
                    'make-get-bucket-lifecycle-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-lifecycle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-lifecycle-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-request
                    'make-get-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-location-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-location-output-"))
   (location-constraint common-lisp:nil :type
    (common-lisp:or bucket-location-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-output
                    'make-get-bucket-location-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-location-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-location-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-request
                    'make-get-bucket-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-logging-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-logging-output-"))
   (logging-enabled common-lisp:nil :type
    (common-lisp:or logging-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-output
                    'make-get-bucket-logging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-logging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-logging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-request
                    'make-get-bucket-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-metrics-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-metrics-configuration-output-"))
   (metrics-configuration common-lisp:nil :type
    (common-lisp:or metrics-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-output
                    'make-get-bucket-metrics-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'metrics-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-metrics-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-metrics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or metrics-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-request
                    'make-get-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-notification-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-bucket-notification-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-notification-configuration-request
                    'make-get-bucket-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-ownership-controls-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-ownership-controls-output-"))
   (ownership-controls common-lisp:nil :type
    (common-lisp:or ownership-controls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-output
                    'make-get-bucket-ownership-controls-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'ownership-controls)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-ownership-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-ownership-controls-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-request
                    'make-get-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-output-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-output 'make-get-bucket-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-request
                    'make-get-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-status-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-status-output-"))
   (policy-status common-lisp:nil :type
    (common-lisp:or policy-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-output
                    'make-get-bucket-policy-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy-status)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-policy-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-policy-status-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-request
                    'make-get-bucket-policy-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-replication-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-replication-output-"))
   (replication-configuration common-lisp:nil :type
    (common-lisp:or replication-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-output
                    'make-get-bucket-replication-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'replication-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-replication-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-request
                    'make-get-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-request-payment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-request-payment-output-"))
   (payer common-lisp:nil :type (common-lisp:or payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-output
                    'make-get-bucket-request-payment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-request-payment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-request-payment-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-request
                    'make-get-bucket-request-payment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-tagging-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-tagging-output-"))
   (tag-set (common-lisp:error ":tag-set is required") :type
    (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-output
                    'make-get-bucket-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-request
                    'make-get-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-versioning-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-versioning-output-"))
   (status common-lisp:nil :type
    (common-lisp:or bucket-versioning-status common-lisp:null))
   (mfadelete common-lisp:nil :type
    (common-lisp:or mfadelete-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-output
                    'make-get-bucket-versioning-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-versioning-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-versioning-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-request
                    'make-get-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-website-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-website-output-"))
   (redirect-all-requests-to common-lisp:nil :type
    (common-lisp:or redirect-all-requests-to common-lisp:null))
   (index-document common-lisp:nil :type
    (common-lisp:or index-document common-lisp:null))
   (error-document common-lisp:nil :type
    (common-lisp:or error-document common-lisp:null))
   (routing-rules common-lisp:nil :type
    (common-lisp:or routing-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-output
                    'make-get-bucket-website-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-website-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-website-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-request
                    'make-get-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-acl-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-acl-output-"))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (grants common-lisp:nil :type (common-lisp:or grants common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-output 'make-get-object-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-acl-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-request 'make-get-object-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-attributes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-attributes-output-"))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum common-lisp:nil :type (common-lisp:or checksum common-lisp:null))
   (object-parts common-lisp:nil :type
    (common-lisp:or get-object-attributes-parts common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (object-size common-lisp:nil :type
    (common-lisp:or object-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-output
                    'make-get-object-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "Checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-parts))
      (common-lisp:list
       (common-lisp:cons "ObjectParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-size))
      (common-lisp:list
       (common-lisp:cons "ObjectSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-attributes-parts (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-attributes-parts-"))
   (total-parts-count common-lisp:nil :type
    (common-lisp:or parts-count common-lisp:null))
   (part-number-marker common-lisp:nil :type
    (common-lisp:or part-number-marker common-lisp:null))
   (next-part-number-marker common-lisp:nil :type
    (common-lisp:or next-part-number-marker common-lisp:null))
   (max-parts common-lisp:nil :type
    (common-lisp:or max-parts common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (parts common-lisp:nil :type (common-lisp:or parts-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-parts
                    'make-get-object-attributes-parts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-parts-count))
      (common-lisp:list
       (common-lisp:cons "TotalPartsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-attributes-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (max-parts common-lisp:nil :type
    (common-lisp:or max-parts common-lisp:null))
   (part-number-marker common-lisp:nil :type
    (common-lisp:or part-number-marker common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (object-attributes (common-lisp:error ":object-attributes is required")
    :type (common-lisp:or object-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-request
                    'make-get-object-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:cons "x-amz-max-parts" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:cons "x-amz-part-number-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-attributes))
      (common-lisp:cons "x-amz-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-legal-hold-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-legal-hold-output-"))
   (legal-hold common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-output
                    'make-get-object-legal-hold-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'legal-hold)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-legal-hold-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-legal-hold-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-request
                    'make-get-object-legal-hold-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-lock-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-lock-configuration-output-"))
   (object-lock-configuration common-lisp:nil :type
    (common-lisp:or object-lock-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-output
                    'make-get-object-lock-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'object-lock-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-lock-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-lock-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-request
                    'make-get-object-lock-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-output-"))
   (body common-lisp:nil :type
    (common-lisp:or body common-lisp:stream common-lisp:pathname
                    common-lisp:string common-lisp:null))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (accept-ranges common-lisp:nil :type
    (common-lisp:or accept-ranges common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (restore common-lisp:nil :type (common-lisp:or restore common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or content-length common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (missing-meta common-lisp:nil :type
    (common-lisp:or missing-meta common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-range common-lisp:nil :type
    (common-lisp:or content-range common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (website-redirect-location common-lisp:nil :type
    (common-lisp:or website-redirect-location common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (replication-status common-lisp:nil :type
    (common-lisp:or replication-status common-lisp:null))
   (parts-count common-lisp:nil :type
    (common-lisp:or parts-count common-lisp:null))
   (tag-count common-lisp:nil :type
    (common-lisp:or tag-count common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-output 'make-get-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "Content-Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-tagging-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (if-match common-lisp:nil :type (common-lisp:or if-match common-lisp:null))
   (if-modified-since common-lisp:nil :type
    (common-lisp:or if-modified-since common-lisp:null))
   (if-none-match common-lisp:nil :type
    (common-lisp:or if-none-match common-lisp:null))
   (if-unmodified-since common-lisp:nil :type
    (common-lisp:or if-unmodified-since common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (range common-lisp:nil :type (common-lisp:or range common-lisp:null))
   (response-cache-control common-lisp:nil :type
    (common-lisp:or response-cache-control common-lisp:null))
   (response-content-disposition common-lisp:nil :type
    (common-lisp:or response-content-disposition common-lisp:null))
   (response-content-encoding common-lisp:nil :type
    (common-lisp:or response-content-encoding common-lisp:null))
   (response-content-language common-lisp:nil :type
    (common-lisp:or response-content-language common-lisp:null))
   (response-content-type common-lisp:nil :type
    (common-lisp:or response-content-type common-lisp:null))
   (response-expires common-lisp:nil :type
    (common-lisp:or response-expires common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (part-number common-lisp:nil :type
    (common-lisp:or part-number common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (checksum-mode common-lisp:nil :type
    (common-lisp:or checksum-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-request 'make-get-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-request))
   common-lisp:nil))
(common-lisp:deftype get-object-response-status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-retention-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-retention-output-"))
   (retention common-lisp:nil :type
    (common-lisp:or object-lock-retention common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-output
                    'make-get-object-retention-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'retention)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-retention-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-retention-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-request
                    'make-get-object-retention-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-tagging-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-tagging-output-"))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (tag-set (common-lisp:error ":tag-set is required") :type
    (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-output
                    'make-get-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-request
                    'make-get-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-torrent-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-torrent-output-"))
   (body common-lisp:nil :type
    (common-lisp:or body common-lisp:stream common-lisp:pathname
                    common-lisp:string common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-output
                    'make-get-object-torrent-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-torrent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-torrent-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-request
                    'make-get-object-torrent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-public-access-block-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-public-access-block-output-"))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or public-access-block-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-output
                    'make-get-public-access-block-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-public-access-block-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-request
                    'make-get-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (glacier-job-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-glacier-job-parameters-"))
   (tier (common-lisp:error ":tier is required") :type
    (common-lisp:or tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glacier-job-parameters 'make-glacier-job-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grant (:copier common-lisp:nil) (:conc-name "struct-shape-grant-"))
   (grantee common-lisp:nil :type (common-lisp:or grantee common-lisp:null))
   (permission common-lisp:nil :type
    (common-lisp:or permission common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grant 'make-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant))
   common-lisp:nil))
(common-lisp:deftype grant-full-control () 'common-lisp:string)
(common-lisp:deftype grant-read () 'common-lisp:string)
(common-lisp:deftype grant-read-acp () 'common-lisp:string)
(common-lisp:deftype grant-write () 'common-lisp:string)
(common-lisp:deftype grant-write-acp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (grantee (:copier common-lisp:nil) (:conc-name "struct-shape-grantee-"))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (email-address common-lisp:nil :type
    (common-lisp:or email-address common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grantee 'make-grantee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grantee))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grants () '(trivial-types:proper-list grant))
 (common-lisp:defun make-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (head-bucket-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-head-bucket-output-"))
   (bucket-location-type common-lisp:nil :type
    (common-lisp:or location-type common-lisp:null))
   (bucket-location-name common-lisp:nil :type
    (common-lisp:or bucket-location-name common-lisp:null))
   (bucket-region common-lisp:nil :type
    (common-lisp:or region common-lisp:null))
   (access-point-alias common-lisp:nil :type
    (common-lisp:or access-point-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'head-bucket-output 'make-head-bucket-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-bucket-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-location-type))
      (common-lisp:cons "x-amz-bucket-location-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-location-name))
      (common-lisp:cons "x-amz-bucket-location-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-region))
      (common-lisp:cons "x-amz-bucket-region" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-alias))
      (common-lisp:cons "x-amz-access-point-alias"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-bucket-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-bucket-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (head-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-head-bucket-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'head-bucket-request 'make-head-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (head-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-head-object-output-"))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (accept-ranges common-lisp:nil :type
    (common-lisp:or accept-ranges common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (restore common-lisp:nil :type (common-lisp:or restore common-lisp:null))
   (archive-status common-lisp:nil :type
    (common-lisp:or archive-status common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or content-length common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (missing-meta common-lisp:nil :type
    (common-lisp:or missing-meta common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (website-redirect-location common-lisp:nil :type
    (common-lisp:or website-redirect-location common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (replication-status common-lisp:nil :type
    (common-lisp:or replication-status common-lisp:null))
   (parts-count common-lisp:nil :type
    (common-lisp:or parts-count common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'head-object-output 'make-head-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-status))
      (common-lisp:cons "x-amz-archive-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (head-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-head-object-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (if-match common-lisp:nil :type (common-lisp:or if-match common-lisp:null))
   (if-modified-since common-lisp:nil :type
    (common-lisp:or if-modified-since common-lisp:null))
   (if-none-match common-lisp:nil :type
    (common-lisp:or if-none-match common-lisp:null))
   (if-unmodified-since common-lisp:nil :type
    (common-lisp:or if-unmodified-since common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (range common-lisp:nil :type (common-lisp:or range common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (part-number common-lisp:nil :type
    (common-lisp:or part-number common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (checksum-mode common-lisp:nil :type
    (common-lisp:or checksum-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'head-object-request 'make-head-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-request))
   common-lisp:nil))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype http-error-code-returned-equals () 'common-lisp:string)
(common-lisp:deftype http-redirect-code () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype if-match () 'common-lisp:string)
(common-lisp:deftype if-modified-since () 'common-lisp:string)
(common-lisp:deftype if-none-match () 'common-lisp:string)
(common-lisp:deftype if-unmodified-since () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (index-document (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-document-"))
   (suffix (common-lisp:error ":suffix is required") :type
    (common-lisp:or suffix common-lisp:null)))
 (common-lisp:export (common-lisp:list 'index-document 'make-index-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-document))
   common-lisp:nil))
(common-lisp:deftype initiated () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (initiator (:copier common-lisp:nil)
      (:conc-name "struct-shape-initiator-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'initiator 'make-initiator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input initiator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-serialization (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-serialization-"))
   (csv common-lisp:nil :type (common-lisp:or csvinput common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (json common-lisp:nil :type (common-lisp:or jsoninput common-lisp:null))
   (parquet common-lisp:nil :type
    (common-lisp:or parquet-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-serialization 'make-input-serialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet))
      (common-lisp:list
       (common-lisp:cons "Parquet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-serialization))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-access-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (intelligent-tiering-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-intelligent-tiering-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-and-operator
                    'make-intelligent-tiering-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (intelligent-tiering-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-intelligent-tiering-configuration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or intelligent-tiering-id common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or intelligent-tiering-filter common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or intelligent-tiering-status common-lisp:null))
   (tierings (common-lisp:error ":tierings is required") :type
    (common-lisp:or tiering-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-configuration
                    'make-intelligent-tiering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tierings))
      (common-lisp:list
       (common-lisp:cons "Tierings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intelligent-tiering-configuration-list ()
   '(trivial-types:proper-list intelligent-tiering-configuration))
 (common-lisp:defun make-intelligent-tiering-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            intelligent-tiering-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype intelligent-tiering-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (intelligent-tiering-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-intelligent-tiering-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or intelligent-tiering-and-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-filter
                    'make-intelligent-tiering-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-id () 'common-lisp:string)
(common-lisp:deftype intelligent-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-object-state
     (s3-error)
     ((storage-class :initarg :storage-class :initform common-lisp:nil :reader
       invalid-object-state-storage-class)
      (access-tier :initarg :access-tier :initform common-lisp:nil :reader
       invalid-object-state-access-tier)))
 (common-lisp:export
  (common-lisp:list 'invalid-object-state 'invalid-object-state-storage-class
                    'invalid-object-state-access-tier)))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-configuration-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or inventory-destination common-lisp:null))
   (is-enabled (common-lisp:error ":is-enabled is required") :type
    (common-lisp:or is-enabled common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or inventory-filter common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or inventory-id common-lisp:null))
   (included-object-versions
    (common-lisp:error ":included-object-versions is required") :type
    (common-lisp:or inventory-included-object-versions common-lisp:null))
   (optional-fields common-lisp:nil :type
    (common-lisp:or inventory-optional-fields common-lisp:null))
   (schedule (common-lisp:error ":schedule is required") :type
    (common-lisp:or inventory-schedule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-configuration 'make-inventory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-object-versions))
      (common-lisp:list
       (common-lisp:cons "IncludedObjectVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-fields))
      (common-lisp:list
       (common-lisp:cons "OptionalFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-configuration-list ()
   '(trivial-types:proper-list inventory-configuration))
 (common-lisp:defun make-inventory-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-destination-"))
   (s3bucket-destination
    (common-lisp:error ":s3bucket-destination is required") :type
    (common-lisp:or inventory-s3bucket-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-destination 'make-inventory-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-encryption-"))
   (sses3 common-lisp:nil :type (common-lisp:or sses3 common-lisp:null))
   (ssekms common-lisp:nil :type (common-lisp:or ssekms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-encryption 'make-inventory-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-filter-"))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-format () 'common-lisp:string)
(common-lisp:deftype inventory-frequency () 'common-lisp:string)
(common-lisp:deftype inventory-id () 'common-lisp:string)
(common-lisp:deftype inventory-included-object-versions () 'common-lisp:string)
(common-lisp:deftype inventory-optional-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-optional-fields ()
   '(trivial-types:proper-list inventory-optional-field))
 (common-lisp:defun make-inventory-optional-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-optional-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-s3bucket-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-s3bucket-destination-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or inventory-format common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (encryption common-lisp:nil :type
    (common-lisp:or inventory-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-s3bucket-destination
                    'make-inventory-s3bucket-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inventory-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-inventory-schedule-"))
   (frequency (common-lisp:error ":frequency is required") :type
    (common-lisp:or inventory-frequency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inventory-schedule 'make-inventory-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-schedule))
   common-lisp:nil))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:deftype is-latest () 'common-lisp:boolean)
(common-lisp:deftype is-public () 'common-lisp:boolean)
(common-lisp:deftype is-restore-in-progress () 'common-lisp:boolean)
(common-lisp:deftype is-truncated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (jsoninput (:copier common-lisp:nil)
      (:conc-name "struct-shape-jsoninput-"))
   (type common-lisp:nil :type (common-lisp:or jsontype common-lisp:null)))
 (common-lisp:export (common-lisp:list 'jsoninput 'make-jsoninput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsoninput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jsonoutput (:copier common-lisp:nil)
      (:conc-name "struct-shape-jsonoutput-"))
   (record-delimiter common-lisp:nil :type
    (common-lisp:or record-delimiter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'jsonoutput 'make-jsonoutput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsonoutput))
   common-lisp:nil))
(common-lisp:deftype jsontype () 'common-lisp:string)
(common-lisp:deftype kmscontext () 'common-lisp:string)
(common-lisp:deftype key-count () 'common-lisp:integer)
(common-lisp:deftype key-marker () 'common-lisp:string)
(common-lisp:deftype key-prefix-equals () 'common-lisp:string)
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-configuration-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (lambda-function-arn (common-lisp:error ":lambda-function-arn is required")
    :type (common-lisp:or lambda-function-arn common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or event-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or notification-configuration-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-configuration
                    'make-lambda-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-function-configuration-list ()
   '(trivial-types:proper-list lambda-function-configuration))
 (common-lisp:defun make-lambda-function-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lambda-function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-configuration-"))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration 'make-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-expiration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-expiration-"))
   (date common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (expired-object-delete-marker common-lisp:nil :type
    (common-lisp:or expired-object-delete-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-expiration 'make-lifecycle-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-"))
   (expiration common-lisp:nil :type
    (common-lisp:or lifecycle-expiration common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or lifecycle-rule-filter common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or expiration-status common-lisp:null))
   (transitions common-lisp:nil :type
    (common-lisp:or transition-list common-lisp:null))
   (noncurrent-version-transitions common-lisp:nil :type
    (common-lisp:or noncurrent-version-transition-list common-lisp:null))
   (noncurrent-version-expiration common-lisp:nil :type
    (common-lisp:or noncurrent-version-expiration common-lisp:null))
   (abort-incomplete-multipart-upload common-lisp:nil :type
    (common-lisp:or abort-incomplete-multipart-upload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lifecycle-rule 'make-lifecycle-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null))
   (object-size-greater-than common-lisp:nil :type
    (common-lisp:or object-size-greater-than-bytes common-lisp:null))
   (object-size-less-than common-lisp:nil :type
    (common-lisp:or object-size-less-than-bytes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-and-operator
                    'make-lifecycle-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-rule-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-rule-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (object-size-greater-than common-lisp:nil :type
    (common-lisp:or object-size-greater-than-bytes common-lisp:null))
   (object-size-less-than common-lisp:nil :type
    (common-lisp:or object-size-less-than-bytes common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or lifecycle-rule-and-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-filter 'make-lifecycle-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-rules ()
   '(trivial-types:proper-list lifecycle-rule))
 (common-lisp:defun make-lifecycle-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-analytics-configurations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bucket-analytics-configurations-output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (next-continuation-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (analytics-configuration-list common-lisp:nil :type
    (common-lisp:or analytics-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-output
                    'make-list-bucket-analytics-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-analytics-configurations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-bucket-analytics-configurations-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-request
                    'make-list-bucket-analytics-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-intelligent-tiering-configurations-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-bucket-intelligent-tiering-configurations-output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (next-continuation-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (intelligent-tiering-configuration-list common-lisp:nil :type
    (common-lisp:or intelligent-tiering-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-output
                    'make-list-bucket-intelligent-tiering-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration-list))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-intelligent-tiering-configurations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-bucket-intelligent-tiering-configurations-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-request
                    'make-list-bucket-intelligent-tiering-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-inventory-configurations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bucket-inventory-configurations-output-"))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (inventory-configuration-list common-lisp:nil :type
    (common-lisp:or inventory-configuration-list common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (next-continuation-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-output
                    'make-list-bucket-inventory-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration-list))
      (common-lisp:list
       (common-lisp:cons "InventoryConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-inventory-configurations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-bucket-inventory-configurations-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-request
                    'make-list-bucket-inventory-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-metrics-configurations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bucket-metrics-configurations-output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (next-continuation-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (metrics-configuration-list common-lisp:nil :type
    (common-lisp:or metrics-configuration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-output
                    'make-list-bucket-metrics-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "MetricsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bucket-metrics-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bucket-metrics-configurations-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-request
                    'make-list-bucket-metrics-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-buckets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-buckets-output-"))
   (buckets common-lisp:nil :type (common-lisp:or buckets common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-buckets-output 'make-list-buckets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-buckets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directory-buckets-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directory-buckets-output-"))
   (buckets common-lisp:nil :type (common-lisp:or buckets common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or directory-bucket-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directory-buckets-output
                    'make-list-directory-buckets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directory-buckets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directory-buckets-request-"))
   (continuation-token common-lisp:nil :type
    (common-lisp:or directory-bucket-token common-lisp:null))
   (max-directory-buckets common-lisp:nil :type
    (common-lisp:or max-directory-buckets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directory-buckets-request
                    'make-list-directory-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multipart-uploads-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multipart-uploads-output-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (key-marker common-lisp:nil :type
    (common-lisp:or key-marker common-lisp:null))
   (upload-id-marker common-lisp:nil :type
    (common-lisp:or upload-id-marker common-lisp:null))
   (next-key-marker common-lisp:nil :type
    (common-lisp:or next-key-marker common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (next-upload-id-marker common-lisp:nil :type
    (common-lisp:or next-upload-id-marker common-lisp:null))
   (max-uploads common-lisp:nil :type
    (common-lisp:or max-uploads common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (uploads common-lisp:nil :type
    (common-lisp:or multipart-upload-list common-lisp:null))
   (common-prefixes common-lisp:nil :type
    (common-lisp:or common-prefix-list common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-output
                    'make-list-multipart-uploads-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "UploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextUploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-uploads))
      (common-lisp:list
       (common-lisp:cons "MaxUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uploads))
      (common-lisp:list
       (common-lisp:cons "Uploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multipart-uploads-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multipart-uploads-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (key-marker common-lisp:nil :type
    (common-lisp:or key-marker common-lisp:null))
   (max-uploads common-lisp:nil :type
    (common-lisp:or max-uploads common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (upload-id-marker common-lisp:nil :type
    (common-lisp:or upload-id-marker common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-request
                    'make-list-multipart-uploads-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-versions-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-versions-output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (key-marker common-lisp:nil :type
    (common-lisp:or key-marker common-lisp:null))
   (version-id-marker common-lisp:nil :type
    (common-lisp:or version-id-marker common-lisp:null))
   (next-key-marker common-lisp:nil :type
    (common-lisp:or next-key-marker common-lisp:null))
   (next-version-id-marker common-lisp:nil :type
    (common-lisp:or next-version-id-marker common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or object-version-list common-lisp:null))
   (delete-markers common-lisp:nil :type
    (common-lisp:or delete-markers common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (common-prefixes common-lisp:nil :type
    (common-lisp:or common-prefix-list common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-output
                    'make-list-object-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id-marker))
      (common-lisp:list
       (common-lisp:cons "VersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-version-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextVersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-markers))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-versions-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (key-marker common-lisp:nil :type
    (common-lisp:or key-marker common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (version-id-marker common-lisp:nil :type
    (common-lisp:or version-id-marker common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (optional-object-attributes common-lisp:nil :type
    (common-lisp:or optional-object-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-request
                    'make-list-object-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-objects-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-objects-output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (contents common-lisp:nil :type
    (common-lisp:or object-list common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (common-prefixes common-lisp:nil :type
    (common-lisp:or common-prefix-list common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-objects-output 'make-list-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-objects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-objects-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (optional-object-attributes common-lisp:nil :type
    (common-lisp:or optional-object-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-objects-request 'make-list-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-objects-v2output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-objects-v2output-"))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (contents common-lisp:nil :type
    (common-lisp:or object-list common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (common-prefixes common-lisp:nil :type
    (common-lisp:or common-prefix-list common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (key-count common-lisp:nil :type
    (common-lisp:or key-count common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (next-continuation-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or start-after common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2output 'make-list-objects-v2output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-count))
      (common-lisp:list
       (common-lisp:cons "KeyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "StartAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-objects-v2request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-objects-v2request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or delimiter common-lisp:null))
   (encoding-type common-lisp:nil :type
    (common-lisp:or encoding-type common-lisp:null))
   (max-keys common-lisp:nil :type (common-lisp:or max-keys common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or token common-lisp:null))
   (fetch-owner common-lisp:nil :type
    (common-lisp:or fetch-owner common-lisp:null))
   (start-after common-lisp:nil :type
    (common-lisp:or start-after common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (optional-object-attributes common-lisp:nil :type
    (common-lisp:or optional-object-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2request 'make-list-objects-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-parts-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-parts-output-"))
   (abort-date common-lisp:nil :type
    (common-lisp:or abort-date common-lisp:null))
   (abort-rule-id common-lisp:nil :type
    (common-lisp:or abort-rule-id common-lisp:null))
   (bucket common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (upload-id common-lisp:nil :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (part-number-marker common-lisp:nil :type
    (common-lisp:or part-number-marker common-lisp:null))
   (next-part-number-marker common-lisp:nil :type
    (common-lisp:or next-part-number-marker common-lisp:null))
   (max-parts common-lisp:nil :type
    (common-lisp:or max-parts common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or is-truncated common-lisp:null))
   (parts common-lisp:nil :type (common-lisp:or parts common-lisp:null))
   (initiator common-lisp:nil :type
    (common-lisp:or initiator common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-parts-output 'make-list-parts-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-parts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-parts-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (max-parts common-lisp:nil :type
    (common-lisp:or max-parts common-lisp:null))
   (part-number-marker common-lisp:nil :type
    (common-lisp:or part-number-marker common-lisp:null))
   (upload-id (common-lisp:error ":upload-id is required") :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-parts-request 'make-list-parts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-request))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (location-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-location-info-"))
   (type common-lisp:nil :type (common-lisp:or location-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or location-name-as-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location-info 'make-location-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-info))
   common-lisp:nil))
(common-lisp:deftype location-name-as-string () 'common-lisp:string)
(common-lisp:deftype location-prefix () 'common-lisp:string)
(common-lisp:deftype location-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logging-enabled (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-enabled-"))
   (target-bucket (common-lisp:error ":target-bucket is required") :type
    (common-lisp:or target-bucket common-lisp:null))
   (target-grants common-lisp:nil :type
    (common-lisp:or target-grants common-lisp:null))
   (target-prefix (common-lisp:error ":target-prefix is required") :type
    (common-lisp:or target-prefix common-lisp:null))
   (target-object-key-format common-lisp:nil :type
    (common-lisp:or target-object-key-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging-enabled 'make-logging-enabled))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-grants))
      (common-lisp:list
       (common-lisp:cons "TargetGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-prefix))
      (common-lisp:list
       (common-lisp:cons "TargetPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-object-key-format))
      (common-lisp:list
       (common-lisp:cons "TargetObjectKeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-enabled))
   common-lisp:nil))
(common-lisp:deftype mfa () 'common-lisp:string)
(common-lisp:deftype mfadelete () 'common-lisp:string)
(common-lisp:deftype mfadelete-status () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-age-seconds () 'common-lisp:integer)
(common-lisp:deftype max-directory-buckets () 'common-lisp:integer)
(common-lisp:deftype max-keys () 'common-lisp:integer)
(common-lisp:deftype max-parts () 'common-lisp:integer)
(common-lisp:deftype max-uploads () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-directive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-entry-"))
   (name common-lisp:nil :type (common-lisp:or metadata-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or metadata-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metadata-entry 'make-metadata-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-entry))
   common-lisp:nil))
(common-lisp:deftype metadata-key () 'common-lisp:string)
(common-lisp:deftype metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metrics (:copier common-lisp:nil) (:conc-name "struct-shape-metrics-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or metrics-status common-lisp:null))
   (event-threshold common-lisp:nil :type
    (common-lisp:or replication-time-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-threshold))
      (common-lisp:list
       (common-lisp:cons "EventThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or access-point-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metrics-and-operator 'make-metrics-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-configuration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or metrics-id common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or metrics-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metrics-configuration 'make-metrics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics-configuration-list ()
   '(trivial-types:proper-list metrics-configuration))
 (common-lisp:defun make-metrics-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metrics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or access-point-arn common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or metrics-and-operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics-filter 'make-metrics-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-filter))
   common-lisp:nil))
(common-lisp:deftype metrics-id () 'common-lisp:string)
(common-lisp:deftype metrics-status () 'common-lisp:string)
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:deftype missing-meta () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (multipart-upload (:copier common-lisp:nil)
      (:conc-name "struct-shape-multipart-upload-"))
   (upload-id common-lisp:nil :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (initiated common-lisp:nil :type
    (common-lisp:or initiated common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (initiator common-lisp:nil :type
    (common-lisp:or initiator common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multipart-upload 'make-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "Initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multipart-upload))
   common-lisp:nil))
(common-lisp:deftype multipart-upload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype multipart-upload-list ()
   '(trivial-types:proper-list multipart-upload))
 (common-lisp:defun make-multipart-upload-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multipart-upload))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-key-marker () 'common-lisp:string)
(common-lisp:deftype next-marker () 'common-lisp:string)
(common-lisp:deftype next-part-number-marker () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype next-upload-id-marker () 'common-lisp:string)
(common-lisp:deftype next-version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-bucket
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-bucket)))
(common-lisp:progn
 (common-lisp:define-condition no-such-key
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-key)))
(common-lisp:progn
 (common-lisp:define-condition no-such-upload
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-upload)))
(common-lisp:progn
 (common-lisp:defstruct
     (noncurrent-version-expiration (:copier common-lisp:nil)
      (:conc-name "struct-shape-noncurrent-version-expiration-"))
   (noncurrent-days common-lisp:nil :type
    (common-lisp:or days common-lisp:null))
   (newer-noncurrent-versions common-lisp:nil :type
    (common-lisp:or version-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-expiration
                    'make-noncurrent-version-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (noncurrent-version-transition (:copier common-lisp:nil)
      (:conc-name "struct-shape-noncurrent-version-transition-"))
   (noncurrent-days common-lisp:nil :type
    (common-lisp:or days common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or transition-storage-class common-lisp:null))
   (newer-noncurrent-versions common-lisp:nil :type
    (common-lisp:or version-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-transition
                    'make-noncurrent-version-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype noncurrent-version-transition-list ()
   '(trivial-types:proper-list noncurrent-version-transition))
 (common-lisp:defun make-noncurrent-version-transition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            noncurrent-version-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-"))
   (topic-configurations common-lisp:nil :type
    (common-lisp:or topic-configuration-list common-lisp:null))
   (queue-configurations common-lisp:nil :type
    (common-lisp:or queue-configuration-list common-lisp:null))
   (lambda-function-configurations common-lisp:nil :type
    (common-lisp:or lambda-function-configuration-list common-lisp:null))
   (event-bridge-configuration common-lisp:nil :type
    (common-lisp:or event-bridge-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations))
      (common-lisp:list
       (common-lisp:cons "TopicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'queue-configurations))
      (common-lisp:list
       (common-lisp:cons "QueueConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-configurations))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-configuration))
      (common-lisp:list
       (common-lisp:cons "EventBridgeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration-deprecated (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-deprecated-"))
   (topic-configuration common-lisp:nil :type
    (common-lisp:or topic-configuration-deprecated common-lisp:null))
   (queue-configuration common-lisp:nil :type
    (common-lisp:or queue-configuration-deprecated common-lisp:null))
   (cloud-function-configuration common-lisp:nil :type
    (common-lisp:or cloud-function-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-deprecated
                    'make-notification-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-configuration))
      (common-lisp:list
       (common-lisp:cons "TopicConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configuration))
      (common-lisp:list
       (common-lisp:cons "QueueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-function-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudFunctionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-filter-"))
   (key common-lisp:nil :type (common-lisp:or s3key-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-filter
                    'make-notification-configuration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   common-lisp:nil))
(common-lisp:deftype notification-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object (:copier common-lisp:nil) (:conc-name "struct-shape-object-"))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm-list common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or object-storage-class common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (restore-status common-lisp:nil :type
    (common-lisp:or restore-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'object 'make-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition object-already-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-already-in-active-tier-error)))
(common-lisp:deftype object-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-attributes-list ()
   '(trivial-types:proper-list object-attributes))
 (common-lisp:defun make-object-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-identifier-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-identifier 'make-object-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-identifier-list ()
   '(trivial-types:proper-list object-identifier))
 (common-lisp:defun make-object-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-list () '(trivial-types:proper-list object))
 (common-lisp:defun make-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (object-lock-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lock-configuration-"))
   (object-lock-enabled common-lisp:nil :type
    (common-lisp:or object-lock-enabled common-lisp:null))
   (rule common-lisp:nil :type
    (common-lisp:or object-lock-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lock-configuration
                    'make-object-lock-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-enabled))
      (common-lisp:list
       (common-lisp:cons "ObjectLockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   common-lisp:nil))
(common-lisp:deftype object-lock-enabled () 'common-lisp:string)
(common-lisp:deftype object-lock-enabled-for-bucket () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (object-lock-legal-hold (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lock-legal-hold-"))
   (status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lock-legal-hold 'make-object-lock-legal-hold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   common-lisp:nil))
(common-lisp:deftype object-lock-legal-hold-status () 'common-lisp:string)
(common-lisp:deftype object-lock-mode () 'common-lisp:string)
(common-lisp:deftype object-lock-retain-until-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-lock-retention (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lock-retention-"))
   (mode common-lisp:nil :type
    (common-lisp:or object-lock-retention-mode common-lisp:null))
   (retain-until-date common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lock-retention 'make-object-lock-retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-until-date))
      (common-lisp:list
       (common-lisp:cons "RetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   common-lisp:nil))
(common-lisp:deftype object-lock-retention-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-lock-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-lock-rule-"))
   (default-retention common-lisp:nil :type
    (common-lisp:or default-retention common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-lock-rule 'make-object-lock-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-retention))
      (common-lisp:list
       (common-lisp:cons "DefaultRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-lock-rule))
   common-lisp:nil))
(common-lisp:deftype object-lock-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition object-not-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-not-in-active-tier-error)))
(common-lisp:deftype object-ownership () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-part (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-part-"))
   (part-number common-lisp:nil :type
    (common-lisp:or part-number common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'object-part 'make-object-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-part))
   common-lisp:nil))
(common-lisp:deftype object-size () 'common-lisp:integer)
(common-lisp:deftype object-size-greater-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-size-less-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (object-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-version-"))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm-list common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or object-version-storage-class common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (is-latest common-lisp:nil :type
    (common-lisp:or is-latest common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (restore-status common-lisp:nil :type
    (common-lisp:or restore-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'object-version 'make-object-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-version))
   common-lisp:nil))
(common-lisp:deftype object-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-version-list ()
   '(trivial-types:proper-list object-version))
 (common-lisp:defun make-object-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-version-storage-class () 'common-lisp:string)
(common-lisp:deftype optional-object-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype optional-object-attributes-list ()
   '(trivial-types:proper-list optional-object-attributes))
 (common-lisp:defun make-optional-object-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            optional-object-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (output-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-location-"))
   (s3 common-lisp:nil :type (common-lisp:or s3location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-location 'make-output-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-serialization (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-serialization-"))
   (csv common-lisp:nil :type (common-lisp:or csvoutput common-lisp:null))
   (json common-lisp:nil :type (common-lisp:or jsonoutput common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-serialization 'make-output-serialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-serialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (owner (:copier common-lisp:nil) (:conc-name "struct-shape-owner-"))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'owner 'make-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner))
   common-lisp:nil))
(common-lisp:deftype owner-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ownership-controls (:copier common-lisp:nil)
      (:conc-name "struct-shape-ownership-controls-"))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or ownership-controls-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ownership-controls 'make-ownership-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ownership-controls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ownership-controls-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-ownership-controls-rule-"))
   (object-ownership (common-lisp:error ":object-ownership is required") :type
    (common-lisp:or object-ownership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ownership-controls-rule 'make-ownership-controls-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:list
       (common-lisp:cons "ObjectOwnership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ownership-controls-rules ()
   '(trivial-types:proper-list ownership-controls-rule))
 (common-lisp:defun make-ownership-controls-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ownership-controls-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parquet-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-parquet-input-")))
 (common-lisp:export (common-lisp:list 'parquet-input 'make-parquet-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parquet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (part (:copier common-lisp:nil) (:conc-name "struct-shape-part-"))
   (part-number common-lisp:nil :type
    (common-lisp:or part-number common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'part 'make-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input part))
   common-lisp:nil))
(common-lisp:deftype part-number () 'common-lisp:integer)
(common-lisp:deftype part-number-marker () 'common-lisp:integer)
(common-lisp:deftype partition-date-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (partitioned-prefix (:copier common-lisp:nil)
      (:conc-name "struct-shape-partitioned-prefix-"))
   (partition-date-source common-lisp:nil :type
    (common-lisp:or partition-date-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partitioned-prefix 'make-partitioned-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-date-source))
      (common-lisp:list
       (common-lisp:cons "PartitionDateSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parts () '(trivial-types:proper-list part))
 (common-lisp:defun make-parts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parts-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parts-list () '(trivial-types:proper-list object-part))
 (common-lisp:defun make-parts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype payer () 'common-lisp:string)
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-status-"))
   (is-public common-lisp:nil :type
    (common-lisp:or is-public common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-status 'make-policy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "IsPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-status))
   common-lisp:nil))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (progress (:copier common-lisp:nil) (:conc-name "struct-shape-progress-"))
   (bytes-scanned common-lisp:nil :type
    (common-lisp:or bytes-scanned common-lisp:null))
   (bytes-processed common-lisp:nil :type
    (common-lisp:or bytes-processed common-lisp:null))
   (bytes-returned common-lisp:nil :type
    (common-lisp:or bytes-returned common-lisp:null)))
 (common-lisp:export (common-lisp:list 'progress 'make-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (progress-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-progress-event-"))
   (details common-lisp:nil :type (common-lisp:or progress common-lisp:null)))
 (common-lisp:export (common-lisp:list 'progress-event 'make-progress-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-event))
   common-lisp:nil))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (public-access-block-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-access-block-configuration-"))
   (block-public-acls common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (ignore-public-acls common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (block-public-policy common-lisp:nil :type
    (common-lisp:or setting common-lisp:null))
   (restrict-public-buckets common-lisp:nil :type
    (common-lisp:or setting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-access-block-configuration
                    'make-public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-accelerate-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-accelerate-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (accelerate-configuration
    (common-lisp:error ":accelerate-configuration is required") :type
    (common-lisp:or accelerate-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-accelerate-configuration-request
                    'make-put-bucket-accelerate-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerate-configuration))
      (common-lisp:list
       (common-lisp:cons "AccelerateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'accelerate-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-acl-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or bucket-canned-acl common-lisp:null))
   (access-control-policy common-lisp:nil :type
    (common-lisp:or access-control-policy common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write common-lisp:nil :type
    (common-lisp:or grant-write common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-acl-request 'make-put-bucket-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'access-control-policy)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-analytics-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-analytics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or analytics-id common-lisp:null))
   (analytics-configuration
    (common-lisp:error ":analytics-configuration is required") :type
    (common-lisp:or analytics-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-analytics-configuration-request
                    'make-put-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'analytics-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-cors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-cors-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (corsconfiguration (common-lisp:error ":corsconfiguration is required")
    :type (common-lisp:or corsconfiguration common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-cors-request 'make-put-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsconfiguration))
      (common-lisp:list
       (common-lisp:cons "CORSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'corsconfiguration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-encryption-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-encryption-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (server-side-encryption-configuration
    (common-lisp:error ":server-side-encryption-configuration is required")
    :type
    (common-lisp:or server-side-encryption-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-encryption-request
                    'make-put-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'server-side-encryption-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-intelligent-tiering-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-bucket-intelligent-tiering-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or intelligent-tiering-id common-lisp:null))
   (intelligent-tiering-configuration
    (common-lisp:error ":intelligent-tiering-configuration is required") :type
    (common-lisp:or intelligent-tiering-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-intelligent-tiering-configuration-request
                    'make-put-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-inventory-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-inventory-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or inventory-id common-lisp:null))
   (inventory-configuration
    (common-lisp:error ":inventory-configuration is required") :type
    (common-lisp:or inventory-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-inventory-configuration-request
                    'make-put-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'inventory-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-lifecycle-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-lifecycle-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (lifecycle-configuration common-lisp:nil :type
    (common-lisp:or bucket-lifecycle-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-configuration-request
                    'make-put-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'lifecycle-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-lifecycle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-lifecycle-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (lifecycle-configuration common-lisp:nil :type
    (common-lisp:or lifecycle-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-request
                    'make-put-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'lifecycle-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-logging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-logging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-logging-status
    (common-lisp:error ":bucket-logging-status is required") :type
    (common-lisp:or bucket-logging-status common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-logging-request
                    'make-put-bucket-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-logging-status))
      (common-lisp:list
       (common-lisp:cons "BucketLoggingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'bucket-logging-status)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-metrics-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-metrics-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or metrics-id common-lisp:null))
   (metrics-configuration
    (common-lisp:error ":metrics-configuration is required") :type
    (common-lisp:or metrics-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-metrics-configuration-request
                    'make-put-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'metrics-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-notification-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-bucket-notification-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (notification-configuration
    (common-lisp:error ":notification-configuration is required") :type
    (common-lisp:or notification-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (skip-destination-validation common-lisp:nil :type
    (common-lisp:or skip-validation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-configuration-request
                    'make-put-bucket-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skip-destination-validation))
      (common-lisp:cons "x-amz-skip-destination-validation"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'notification-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-notification-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-notification-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (notification-configuration
    (common-lisp:error ":notification-configuration is required") :type
    (common-lisp:or notification-configuration-deprecated common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-request
                    'make-put-bucket-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'notification-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-ownership-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-ownership-controls-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (ownership-controls (common-lisp:error ":ownership-controls is required")
    :type (common-lisp:or ownership-controls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-ownership-controls-request
                    'make-put-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'ownership-controls)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-policy-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (confirm-remove-self-bucket-access common-lisp:nil :type
    (common-lisp:or confirm-remove-self-bucket-access common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-policy-request
                    'make-put-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirm-remove-self-bucket-access))
      (common-lisp:cons "x-amz-confirm-remove-self-bucket-access"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-replication-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-replication-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (replication-configuration
    (common-lisp:error ":replication-configuration is required") :type
    (common-lisp:or replication-configuration common-lisp:null))
   (token common-lisp:nil :type
    (common-lisp:or object-lock-token common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-replication-request
                    'make-put-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'replication-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-request-payment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-request-payment-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (request-payment-configuration
    (common-lisp:error ":request-payment-configuration is required") :type
    (common-lisp:or request-payment-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-request-payment-request
                    'make-put-bucket-request-payment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-payment-configuration))
      (common-lisp:list
       (common-lisp:cons "RequestPaymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'request-payment-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (tagging (common-lisp:error ":tagging is required") :type
    (common-lisp:or tagging common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-tagging-request
                    'make-put-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tagging)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-versioning-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-versioning-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (mfa common-lisp:nil :type (common-lisp:or mfa common-lisp:null))
   (versioning-configuration
    (common-lisp:error ":versioning-configuration is required") :type
    (common-lisp:or versioning-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-versioning-request
                    'make-put-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "VersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'versioning-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-bucket-website-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-bucket-website-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (website-configuration
    (common-lisp:error ":website-configuration is required") :type
    (common-lisp:or website-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-bucket-website-request
                    'make-put-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-configuration))
      (common-lisp:list
       (common-lisp:cons "WebsiteConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'website-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-acl-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-acl-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-output 'make-put-object-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-acl-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-acl-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or object-canned-acl common-lisp:null))
   (access-control-policy common-lisp:nil :type
    (common-lisp:or access-control-policy common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write common-lisp:nil :type
    (common-lisp:or grant-write common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-request 'make-put-object-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'access-control-policy)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-legal-hold-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-legal-hold-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-output
                    'make-put-object-legal-hold-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-legal-hold-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-legal-hold-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (legal-hold common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-request
                    'make-put-object-legal-hold-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'legal-hold)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-lock-configuration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-lock-configuration-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-output
                    'make-put-object-lock-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-lock-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-lock-configuration-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (object-lock-configuration common-lisp:nil :type
    (common-lisp:or object-lock-configuration common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (token common-lisp:nil :type
    (common-lisp:or object-lock-token common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-request
                    'make-put-object-lock-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'object-lock-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-output-"))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-output 'make-put-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-request-"))
   (acl common-lisp:nil :type
    (common-lisp:or object-canned-acl common-lisp:null))
   (body common-lisp:nil :type
    (common-lisp:or body common-lisp:stream common-lisp:pathname
                    common-lisp:string common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or content-length common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (grant-full-control common-lisp:nil :type
    (common-lisp:or grant-full-control common-lisp:null))
   (grant-read common-lisp:nil :type
    (common-lisp:or grant-read common-lisp:null))
   (grant-read-acp common-lisp:nil :type
    (common-lisp:or grant-read-acp common-lisp:null))
   (grant-write-acp common-lisp:nil :type
    (common-lisp:or grant-write-acp common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (website-redirect-location common-lisp:nil :type
    (common-lisp:or website-redirect-location common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssekmsencryption-context common-lisp:nil :type
    (common-lisp:or ssekmsencryption-context common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (tagging common-lisp:nil :type
    (common-lisp:or tagging-header common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-request 'make-put-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-retention-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-retention-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-output
                    'make-put-object-retention-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-retention-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-retention-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (retention common-lisp:nil :type
    (common-lisp:or object-lock-retention common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (bypass-governance-retention common-lisp:nil :type
    (common-lisp:or bypass-governance-retention common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-request
                    'make-put-object-retention-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'retention)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-tagging-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-tagging-output-"))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-output
                    'make-put-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-object-tagging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-object-tagging-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (tagging (common-lisp:error ":tagging is required") :type
    (common-lisp:or tagging common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-request
                    'make-put-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tagging)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-public-access-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-public-access-block-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (public-access-block-configuration
    (common-lisp:error ":public-access-block-configuration is required") :type
    (common-lisp:or public-access-block-configuration common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-public-access-block-request
                    'make-put-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration)))
(common-lisp:deftype queue-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (queue-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-configuration-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (queue-arn (common-lisp:error ":queue-arn is required") :type
    (common-lisp:or queue-arn common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or event-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or notification-configuration-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'queue-configuration 'make-queue-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (queue-configuration-deprecated (:copier common-lisp:nil)
      (:conc-name "struct-shape-queue-configuration-deprecated-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (event common-lisp:nil :type (common-lisp:or event common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null))
   (queue common-lisp:nil :type (common-lisp:or queue-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'queue-configuration-deprecated
                    'make-queue-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-configuration-list ()
   '(trivial-types:proper-list queue-configuration))
 (common-lisp:defun make-queue-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quiet () 'common-lisp:boolean)
(common-lisp:deftype quote-character () 'common-lisp:string)
(common-lisp:deftype quote-escape-character () 'common-lisp:string)
(common-lisp:deftype quote-fields () 'common-lisp:string)
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:deftype record-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (records-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-records-event-"))
   (payload common-lisp:nil :type (common-lisp:or body common-lisp:null)))
 (common-lisp:export (common-lisp:list 'records-event 'make-records-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input records-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redirect (:copier common-lisp:nil) (:conc-name "struct-shape-redirect-"))
   (host-name common-lisp:nil :type
    (common-lisp:or host-name common-lisp:null))
   (http-redirect-code common-lisp:nil :type
    (common-lisp:or http-redirect-code common-lisp:null))
   (protocol common-lisp:nil :type (common-lisp:or protocol common-lisp:null))
   (replace-key-prefix-with common-lisp:nil :type
    (common-lisp:or replace-key-prefix-with common-lisp:null))
   (replace-key-with common-lisp:nil :type
    (common-lisp:or replace-key-with common-lisp:null)))
 (common-lisp:export (common-lisp:list 'redirect 'make-redirect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-redirect-code))
      (common-lisp:list
       (common-lisp:cons "HttpRedirectCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-key-prefix-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyPrefixWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-key-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redirect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redirect-all-requests-to (:copier common-lisp:nil)
      (:conc-name "struct-shape-redirect-all-requests-to-"))
   (host-name (common-lisp:error ":host-name is required") :type
    (common-lisp:or host-name common-lisp:null))
   (protocol common-lisp:nil :type (common-lisp:or protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redirect-all-requests-to 'make-redirect-all-requests-to))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype replace-key-prefix-with () 'common-lisp:string)
(common-lisp:deftype replace-key-with () 'common-lisp:string)
(common-lisp:deftype replica-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replica-modifications (:copier common-lisp:nil)
      (:conc-name "struct-shape-replica-modifications-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replica-modifications-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replica-modifications 'make-replica-modifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   common-lisp:nil))
(common-lisp:deftype replica-modifications-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-configuration-"))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or replication-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or replication-rule-filter common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replication-rule-status common-lisp:null))
   (source-selection-criteria common-lisp:nil :type
    (common-lisp:or source-selection-criteria common-lisp:null))
   (existing-object-replication common-lisp:nil :type
    (common-lisp:or existing-object-replication common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or destination common-lisp:null))
   (delete-marker-replication common-lisp:nil :type
    (common-lisp:or delete-marker-replication common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SourceSelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-object-replication))
      (common-lisp:list
       (common-lisp:cons "ExistingObjectReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-replication))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule-and-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-and-operator-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-and-operator
                    'make-replication-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (replication-rule-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-rule-filter-"))
   (prefix common-lisp:nil :type (common-lisp:or prefix common-lisp:null))
   (tag common-lisp:nil :type (common-lisp:or tag common-lisp:null))
   (and common-lisp:nil :type
    (common-lisp:or replication-rule-and-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-rule-filter 'make-replication-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   common-lisp:nil))
(common-lisp:deftype replication-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-rules ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun make-replication-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-time-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or replication-time-status common-lisp:null))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or replication-time-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-time 'make-replication-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-time))
   common-lisp:nil))
(common-lisp:deftype replication-time-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (replication-time-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-replication-time-value-"))
   (minutes common-lisp:nil :type (common-lisp:or minutes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replication-time-value 'make-replication-time-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   common-lisp:nil))
(common-lisp:deftype request-charged () 'common-lisp:string)
(common-lisp:deftype request-payer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (request-payment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-payment-configuration-"))
   (payer (common-lisp:error ":payer is required") :type
    (common-lisp:or payer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-payment-configuration
                    'make-request-payment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (request-progress (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-progress-"))
   (enabled common-lisp:nil :type
    (common-lisp:or enable-request-progress common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-progress 'make-request-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-progress))
   common-lisp:nil))
(common-lisp:deftype request-route () 'common-lisp:string)
(common-lisp:deftype request-token () 'common-lisp:string)
(common-lisp:deftype response-cache-control () 'common-lisp:string)
(common-lisp:deftype response-content-disposition () 'common-lisp:string)
(common-lisp:deftype response-content-encoding () 'common-lisp:string)
(common-lisp:deftype response-content-language () 'common-lisp:string)
(common-lisp:deftype response-content-type () 'common-lisp:string)
(common-lisp:deftype response-expires () 'common-lisp:string)
(common-lisp:deftype restore () 'common-lisp:string)
(common-lisp:deftype restore-expiry-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (restore-object-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-object-output-"))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (restore-output-path common-lisp:nil :type
    (common-lisp:or restore-output-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-object-output 'make-restore-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-output-path))
      (common-lisp:cons "x-amz-restore-output-path"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-object-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (restore-request common-lisp:nil :type
    (common-lisp:or restore-request common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-object-request 'make-restore-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-request))
      (common-lisp:list
       (common-lisp:cons "RestoreRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'restore-request)))
(common-lisp:deftype restore-output-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (restore-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-request-"))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (glacier-job-parameters common-lisp:nil :type
    (common-lisp:or glacier-job-parameters common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or restore-request-type common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (select-parameters common-lisp:nil :type
    (common-lisp:or select-parameters common-lisp:null))
   (output-location common-lisp:nil :type
    (common-lisp:or output-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'restore-request 'make-restore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glacier-job-parameters))
      (common-lisp:list
       (common-lisp:cons "GlacierJobParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-parameters))
      (common-lisp:list
       (common-lisp:cons "SelectParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-request))
   common-lisp:nil))
(common-lisp:deftype restore-request-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (restore-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-status-"))
   (is-restore-in-progress common-lisp:nil :type
    (common-lisp:or is-restore-in-progress common-lisp:null))
   (restore-expiry-date common-lisp:nil :type
    (common-lisp:or restore-expiry-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'restore-status 'make-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-restore-in-progress))
      (common-lisp:list
       (common-lisp:cons "IsRestoreInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-expiry-date))
      (common-lisp:list
       (common-lisp:cons "RestoreExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-status))
   common-lisp:nil))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (routing-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-routing-rule-"))
   (condition common-lisp:nil :type
    (common-lisp:or condition common-lisp:null))
   (redirect (common-lisp:error ":redirect is required") :type
    (common-lisp:or redirect common-lisp:null)))
 (common-lisp:export (common-lisp:list 'routing-rule 'make-routing-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect))
      (common-lisp:list
       (common-lisp:cons "Redirect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-rules ()
   '(trivial-types:proper-list routing-rule))
 (common-lisp:defun make-routing-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (expiration common-lisp:nil :type
    (common-lisp:or lifecycle-expiration common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or prefix common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or expiration-status common-lisp:null))
   (transition common-lisp:nil :type
    (common-lisp:or transition common-lisp:null))
   (noncurrent-version-transition common-lisp:nil :type
    (common-lisp:or noncurrent-version-transition common-lisp:null))
   (noncurrent-version-expiration common-lisp:nil :type
    (common-lisp:or noncurrent-version-expiration common-lisp:null))
   (abort-incomplete-multipart-upload common-lisp:nil :type
    (common-lisp:or abort-incomplete-multipart-upload common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition))
      (common-lisp:list
       (common-lisp:cons "Transition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transition))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (s3key-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3key-filter-"))
   (filter-rules common-lisp:nil :type
    (common-lisp:or filter-rule-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3key-filter 'make-s3key-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rules))
      (common-lisp:list
       (common-lisp:cons "FilterRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3location-"))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or location-prefix common-lisp:null))
   (encryption common-lisp:nil :type
    (common-lisp:or encryption common-lisp:null))
   (canned-acl common-lisp:nil :type
    (common-lisp:or object-canned-acl common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or grants common-lisp:null))
   (tagging common-lisp:nil :type (common-lisp:or tagging common-lisp:null))
   (user-metadata common-lisp:nil :type
    (common-lisp:or user-metadata common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ssekms (:copier common-lisp:nil) (:conc-name "struct-shape-ssekms-"))
   (key-id (common-lisp:error ":key-id is required") :type
    (common-lisp:or ssekmskey-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ssekms 'make-ssekms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekms))
   common-lisp:nil))
(common-lisp:deftype ssekmsencryption-context () 'common-lisp:string)
(common-lisp:deftype ssekmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sses3 (:copier common-lisp:nil) (:conc-name "struct-shape-sses3-")))
 (common-lisp:export (common-lisp:list 'sses3 'make-sses3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scan-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-scan-range-"))
   (start common-lisp:nil :type (common-lisp:or start common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or end common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scan-range 'make-scan-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (select-object-content-event-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-object-content-event-stream-"))
   (records common-lisp:nil :type
    (common-lisp:or records-event common-lisp:null))
   (stats common-lisp:nil :type (common-lisp:or stats-event common-lisp:null))
   (progress common-lisp:nil :type
    (common-lisp:or progress-event common-lisp:null))
   (cont common-lisp:nil :type
    (common-lisp:or continuation-event common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or end-event common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-object-content-event-stream
                    'make-select-object-content-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "Stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cont))
      (common-lisp:list
       (common-lisp:cons "Cont"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (select-object-content-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-object-content-output-"))
   (payload common-lisp:nil :type
    (common-lisp:or select-object-content-event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-object-content-output
                    'make-select-object-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload)))
(common-lisp:progn
 (common-lisp:defstruct
     (select-object-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-object-content-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (expression-type (common-lisp:error ":expression-type is required") :type
    (common-lisp:or expression-type common-lisp:null))
   (request-progress common-lisp:nil :type
    (common-lisp:or request-progress common-lisp:null))
   (input-serialization (common-lisp:error ":input-serialization is required")
    :type (common-lisp:or input-serialization common-lisp:null))
   (output-serialization
    (common-lisp:error ":output-serialization is required") :type
    (common-lisp:or output-serialization common-lisp:null))
   (scan-range common-lisp:nil :type
    (common-lisp:or scan-range common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-object-content-request
                    'make-select-object-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-progress))
      (common-lisp:list
       (common-lisp:cons "RequestProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-range))
      (common-lisp:list
       (common-lisp:cons "ScanRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (select-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-parameters-"))
   (input-serialization (common-lisp:error ":input-serialization is required")
    :type (common-lisp:or input-serialization common-lisp:null))
   (expression-type (common-lisp:error ":expression-type is required") :type
    (common-lisp:or expression-type common-lisp:null))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (output-serialization
    (common-lisp:error ":output-serialization is required") :type
    (common-lisp:or output-serialization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-parameters 'make-select-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-parameters))
   common-lisp:nil))
(common-lisp:deftype server-side-encryption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-by-default (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-by-default-"))
   (ssealgorithm (common-lisp:error ":ssealgorithm is required") :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (kmsmaster-key-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-by-default
                    'make-server-side-encryption-by-default))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsmaster-key-id))
      (common-lisp:list
       (common-lisp:cons "KMSMasterKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-configuration-"))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or server-side-encryption-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-side-encryption-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-side-encryption-rule-"))
   (apply-server-side-encryption-by-default common-lisp:nil :type
    (common-lisp:or server-side-encryption-by-default common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-rule
                    'make-server-side-encryption-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-server-side-encryption-by-default))
      (common-lisp:list
       (common-lisp:cons "ApplyServerSideEncryptionByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:list
       (common-lisp:cons "BucketKeyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-side-encryption-rules ()
   '(trivial-types:proper-list server-side-encryption-rule))
 (common-lisp:defun make-server-side-encryption-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-side-encryption-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-credential-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (session-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-credentials-"))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or access-key-id-value common-lisp:null))
   (secret-access-key (common-lisp:error ":secret-access-key is required")
    :type (common-lisp:or session-credential-value common-lisp:null))
   (session-token (common-lisp:error ":session-token is required") :type
    (common-lisp:or session-credential-value common-lisp:null))
   (expiration (common-lisp:error ":expiration is required") :type
    (common-lisp:or session-expiration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-credentials 'make-session-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-credentials))
   common-lisp:nil))
(common-lisp:deftype session-expiration () 'common-lisp:string)
(common-lisp:deftype session-mode () 'common-lisp:string)
(common-lisp:deftype setting () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (simple-prefix (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-prefix-")))
 (common-lisp:export (common-lisp:list 'simple-prefix 'make-simple-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-prefix))
   common-lisp:nil))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype skip-validation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (source-selection-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-selection-criteria-"))
   (sse-kms-encrypted-objects common-lisp:nil :type
    (common-lisp:or sse-kms-encrypted-objects common-lisp:null))
   (replica-modifications common-lisp:nil :type
    (common-lisp:or replica-modifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-selection-criteria
                    'make-source-selection-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sse-kms-encrypted-objects))
      (common-lisp:list
       (common-lisp:cons "SseKmsEncryptedObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-modifications))
      (common-lisp:list
       (common-lisp:cons "ReplicaModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sse-kms-encrypted-objects (:copier common-lisp:nil)
      (:conc-name "struct-shape-sse-kms-encrypted-objects-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or sse-kms-encrypted-objects-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sse-kms-encrypted-objects
                    'make-sse-kms-encrypted-objects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   common-lisp:nil))
(common-lisp:deftype sse-kms-encrypted-objects-status () 'common-lisp:string)
(common-lisp:deftype start () 'common-lisp:integer)
(common-lisp:deftype start-after () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stats (:copier common-lisp:nil) (:conc-name "struct-shape-stats-"))
   (bytes-scanned common-lisp:nil :type
    (common-lisp:or bytes-scanned common-lisp:null))
   (bytes-processed common-lisp:nil :type
    (common-lisp:or bytes-processed common-lisp:null))
   (bytes-returned common-lisp:nil :type
    (common-lisp:or bytes-returned common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stats 'make-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stats-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-stats-event-"))
   (details common-lisp:nil :type (common-lisp:or stats common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stats-event 'make-stats-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats-event))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-class-analysis (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-class-analysis-"))
   (data-export common-lisp:nil :type
    (common-lisp:or storage-class-analysis-data-export common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis 'make-storage-class-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-export))
      (common-lisp:list
       (common-lisp:cons "DataExport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-class-analysis-data-export (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-class-analysis-data-export-"))
   (output-schema-version
    (common-lisp:error ":output-schema-version is required") :type
    (common-lisp:or storage-class-analysis-schema-version common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or analytics-export-destination common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis-data-export
                    'make-storage-class-analysis-data-export))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-schema-version))
      (common-lisp:list
       (common-lisp:cons "OutputSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   common-lisp:nil))
(common-lisp:deftype storage-class-analysis-schema-version ()
  'common-lisp:string)
(common-lisp:deftype suffix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype tag-set () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tagging (:copier common-lisp:nil) (:conc-name "struct-shape-tagging-"))
   (tag-set (common-lisp:error ":tag-set is required") :type
    (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tagging 'make-tagging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagging))
   common-lisp:nil))
(common-lisp:deftype tagging-directive () 'common-lisp:string)
(common-lisp:deftype tagging-header () 'common-lisp:string)
(common-lisp:deftype target-bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-grant (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-grant-"))
   (grantee common-lisp:nil :type (common-lisp:or grantee common-lisp:null))
   (permission common-lisp:nil :type
    (common-lisp:or bucket-logs-permission common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-grant 'make-target-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-grants ()
   '(trivial-types:proper-list target-grant))
 (common-lisp:defun make-target-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-object-key-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-object-key-format-"))
   (simple-prefix common-lisp:nil :type
    (common-lisp:or simple-prefix common-lisp:null))
   (partitioned-prefix common-lisp:nil :type
    (common-lisp:or partitioned-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-object-key-format 'make-target-object-key-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-prefix))
      (common-lisp:list
       (common-lisp:cons "SimplePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitioned-prefix))
      (common-lisp:list
       (common-lisp:cons "PartitionedPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   common-lisp:nil))
(common-lisp:deftype target-prefix () 'common-lisp:string)
(common-lisp:deftype tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tiering (:copier common-lisp:nil) (:conc-name "struct-shape-tiering-"))
   (days (common-lisp:error ":days is required") :type
    (common-lisp:or intelligent-tiering-days common-lisp:null))
   (access-tier (common-lisp:error ":access-tier is required") :type
    (common-lisp:or intelligent-tiering-access-tier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tiering 'make-tiering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-tier))
      (common-lisp:list
       (common-lisp:cons "AccessTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tiering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tiering-list () '(trivial-types:proper-list tiering))
 (common-lisp:defun make-tiering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tiering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (topic-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-configuration-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (topic-arn (common-lisp:error ":topic-arn is required") :type
    (common-lisp:or topic-arn common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or event-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or notification-configuration-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-configuration 'make-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (topic-configuration-deprecated (:copier common-lisp:nil)
      (:conc-name "struct-shape-topic-configuration-deprecated-"))
   (id common-lisp:nil :type (common-lisp:or notification-id common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null))
   (event common-lisp:nil :type (common-lisp:or event common-lisp:null))
   (topic common-lisp:nil :type (common-lisp:or topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-configuration-deprecated
                    'make-topic-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "Topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-configuration-list ()
   '(trivial-types:proper-list topic-configuration))
 (common-lisp:defun make-topic-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transition (:copier common-lisp:nil)
      (:conc-name "struct-shape-transition-"))
   (date common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or days common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or transition-storage-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transition 'make-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transition-list ()
   '(trivial-types:proper-list transition))
 (common-lisp:defun make-transition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transition-storage-class () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype upload-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (upload-part-copy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-part-copy-output-"))
   (copy-source-version-id common-lisp:nil :type
    (common-lisp:or copy-source-version-id common-lisp:null))
   (copy-part-result common-lisp:nil :type
    (common-lisp:or copy-part-result common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-output 'make-upload-part-copy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-part-result))
      (common-lisp:list
       (common-lisp:cons "CopyPartResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'copy-part-result)))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-part-copy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-part-copy-request-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (copy-source (common-lisp:error ":copy-source is required") :type
    (common-lisp:or copy-source common-lisp:null))
   (copy-source-if-match common-lisp:nil :type
    (common-lisp:or copy-source-if-match common-lisp:null))
   (copy-source-if-modified-since common-lisp:nil :type
    (common-lisp:or copy-source-if-modified-since common-lisp:null))
   (copy-source-if-none-match common-lisp:nil :type
    (common-lisp:or copy-source-if-none-match common-lisp:null))
   (copy-source-if-unmodified-since common-lisp:nil :type
    (common-lisp:or copy-source-if-unmodified-since common-lisp:null))
   (copy-source-range common-lisp:nil :type
    (common-lisp:or copy-source-range common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (part-number (common-lisp:error ":part-number is required") :type
    (common-lisp:or part-number common-lisp:null))
   (upload-id (common-lisp:error ":upload-id is required") :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (copy-source-ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-algorithm common-lisp:null))
   (copy-source-ssecustomer-key common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-key common-lisp:null))
   (copy-source-ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or copy-source-ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (expected-source-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-request 'make-upload-part-copy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source-range))
      (common-lisp:cons "x-amz-copy-source-range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-part-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-part-output-"))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-part-output 'make-upload-part-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-part-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-part-request-"))
   (body common-lisp:nil :type
    (common-lisp:or body common-lisp:stream common-lisp:pathname
                    common-lisp:string common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or content-length common-lisp:null))
   (content-md5 common-lisp:nil :type
    (common-lisp:or content-md5 common-lisp:null))
   (checksum-algorithm common-lisp:nil :type
    (common-lisp:or checksum-algorithm common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or object-key common-lisp:null))
   (part-number (common-lisp:error ":part-number is required") :type
    (common-lisp:or part-number common-lisp:null))
   (upload-id (common-lisp:error ":upload-id is required") :type
    (common-lisp:or multipart-upload-id common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssecustomer-key common-lisp:nil :type
    (common-lisp:or ssecustomer-key common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (request-payer common-lisp:nil :type
    (common-lisp:or request-payer common-lisp:null))
   (expected-bucket-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-part-request 'make-upload-part-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:deftype user-metadata ()
   '(trivial-types:proper-list metadata-entry))
 (common-lisp:defun make-user-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version-count () 'common-lisp:integer)
(common-lisp:deftype version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (versioning-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-versioning-configuration-"))
   (mfadelete common-lisp:nil :type
    (common-lisp:or mfadelete common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or bucket-versioning-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (website-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-website-configuration-"))
   (error-document common-lisp:nil :type
    (common-lisp:or error-document common-lisp:null))
   (index-document common-lisp:nil :type
    (common-lisp:or index-document common-lisp:null))
   (redirect-all-requests-to common-lisp:nil :type
    (common-lisp:or redirect-all-requests-to common-lisp:null))
   (routing-rules common-lisp:nil :type
    (common-lisp:or routing-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'website-configuration 'make-website-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   common-lisp:nil))
(common-lisp:deftype website-redirect-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (write-get-object-response-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-get-object-response-request-"))
   (request-route (common-lisp:error ":request-route is required") :type
    (common-lisp:or request-route common-lisp:null))
   (request-token (common-lisp:error ":request-token is required") :type
    (common-lisp:or request-token common-lisp:null))
   (body common-lisp:nil :type
    (common-lisp:or body common-lisp:stream common-lisp:pathname
                    common-lisp:string common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or get-object-response-status-code common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (accept-ranges common-lisp:nil :type
    (common-lisp:or accept-ranges common-lisp:null))
   (cache-control common-lisp:nil :type
    (common-lisp:or cache-control common-lisp:null))
   (content-disposition common-lisp:nil :type
    (common-lisp:or content-disposition common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or content-encoding common-lisp:null))
   (content-language common-lisp:nil :type
    (common-lisp:or content-language common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or content-length common-lisp:null))
   (content-range common-lisp:nil :type
    (common-lisp:or content-range common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (checksum-crc32 common-lisp:nil :type
    (common-lisp:or checksum-crc32 common-lisp:null))
   (checksum-crc32c common-lisp:nil :type
    (common-lisp:or checksum-crc32c common-lisp:null))
   (checksum-sha1 common-lisp:nil :type
    (common-lisp:or checksum-sha1 common-lisp:null))
   (checksum-sha256 common-lisp:nil :type
    (common-lisp:or checksum-sha256 common-lisp:null))
   (delete-marker common-lisp:nil :type
    (common-lisp:or delete-marker common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or etag common-lisp:null))
   (expires common-lisp:nil :type (common-lisp:or expires common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or expiration common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (missing-meta common-lisp:nil :type
    (common-lisp:or missing-meta common-lisp:null))
   (metadata common-lisp:nil :type (common-lisp:or metadata common-lisp:null))
   (object-lock-mode common-lisp:nil :type
    (common-lisp:or object-lock-mode common-lisp:null))
   (object-lock-legal-hold-status common-lisp:nil :type
    (common-lisp:or object-lock-legal-hold-status common-lisp:null))
   (object-lock-retain-until-date common-lisp:nil :type
    (common-lisp:or object-lock-retain-until-date common-lisp:null))
   (parts-count common-lisp:nil :type
    (common-lisp:or parts-count common-lisp:null))
   (replication-status common-lisp:nil :type
    (common-lisp:or replication-status common-lisp:null))
   (request-charged common-lisp:nil :type
    (common-lisp:or request-charged common-lisp:null))
   (restore common-lisp:nil :type (common-lisp:or restore common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or server-side-encryption common-lisp:null))
   (ssecustomer-algorithm common-lisp:nil :type
    (common-lisp:or ssecustomer-algorithm common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or ssekmskey-id common-lisp:null))
   (ssecustomer-key-md5 common-lisp:nil :type
    (common-lisp:or ssecustomer-key-md5 common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or storage-class common-lisp:null))
   (tag-count common-lisp:nil :type
    (common-lisp:or tag-count common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or object-version-id common-lisp:null))
   (bucket-key-enabled common-lisp:nil :type
    (common-lisp:or bucket-key-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-get-object-response-request
                    'make-write-get-object-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-route))
      (common-lisp:cons "x-amz-request-route" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token))
      (common-lisp:cons "x-amz-request-token" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:cons "x-amz-fwd-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:cons "x-amz-fwd-error-code" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:cons "x-amz-fwd-error-message"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "x-amz-fwd-header-accept-ranges"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "x-amz-fwd-header-Cache-Control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "x-amz-fwd-header-Content-Disposition"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "x-amz-fwd-header-Content-Encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "x-amz-fwd-header-Content-Language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "x-amz-fwd-header-Content-Range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "x-amz-fwd-header-Content-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha1"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-fwd-header-x-amz-delete-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "x-amz-fwd-header-ETag"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "x-amz-fwd-header-Expires"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-fwd-header-x-amz-expiration"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "x-amz-fwd-header-Last-Modified"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-fwd-header-x-amz-missing-meta"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-mp-parts-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-fwd-header-x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-fwd-header-x-amz-restore"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-fwd-header-x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-fwd-header-x-amz-storage-class"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-tagging-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-fwd-header-x-amz-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled"
       aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:deftype years () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun abort-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key upload-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key upload-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-abort-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "AbortMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'abort-multipart-upload))
(common-lisp:progn
 (common-lisp:defun complete-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key multipart-upload upload-id
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key multipart-upload upload-id checksum-crc32
     checksum-crc32c checksum-sha1 checksum-sha256 request-payer
     expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-complete-multipart-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CompleteMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'complete-multipart-upload))
(common-lisp:progn
 (common-lisp:defun copy-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     checksum-algorithm content-disposition content-encoding
                     content-language content-type copy-source
                     copy-source-if-match copy-source-if-modified-since
                     copy-source-if-none-match copy-source-if-unmodified-since
                     expires grant-full-control grant-read grant-read-acp
                     grant-write-acp key metadata metadata-directive
                     tagging-directive server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer tagging
                     object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control checksum-algorithm
     content-disposition content-encoding content-language content-type
     copy-source copy-source-if-match copy-source-if-modified-since
     copy-source-if-none-match copy-source-if-unmodified-since expires
     grant-full-control grant-read grant-read-acp grant-write-acp key metadata
     metadata-directive tagging-directive server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled copy-source-ssecustomer-algorithm
     copy-source-ssecustomer-key copy-source-ssecustomer-key-md5 request-payer
     tagging object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CopyObject"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-object))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket create-bucket-configuration
                     grant-full-control grant-read grant-read-acp grant-write
                     grant-write-acp object-lock-enabled-for-bucket
                     object-ownership)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket create-bucket-configuration
     grant-full-control grant-read grant-read-acp grant-write grant-write-acp
     object-lock-enabled-for-bucket object-ownership))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "CreateBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     content-disposition content-encoding content-language
                     content-type expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control content-disposition
     content-encoding content-language content-type expires grant-full-control
     grant-read grant-read-acp grant-write-acp key metadata
     server-side-encryption storage-class website-redirect-location
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 ssekmskey-id
     ssekmsencryption-context bucket-key-enabled request-payer tagging
     object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CreateMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multipart-upload))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-mode bucket)
   (common-lisp:declare (common-lisp:ignorable session-mode bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "CreateSession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketAnalyticsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketCors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-cors))
(common-lisp:progn
 (common-lisp:defun delete-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketEncryption"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun delete-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketIntelligentTieringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketInventoryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun delete-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketMetricsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketOwnershipControls"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun delete-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-policy))
(common-lisp:progn
 (common-lisp:defun delete-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-replication))
(common-lisp:progn
 (common-lisp:defun delete-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun delete-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-website))
(common-lisp:progn
 (common-lisp:defun delete-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key mfa version-id request-payer
                     bypass-governance-retention expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key mfa version-id request-payer
     bypass-governance-retention expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-object))
(common-lisp:progn
 (common-lisp:defun delete-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-object-tagging))
(common-lisp:progn
 (common-lisp:defun delete-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delete mfa request-payer
                     bypass-governance-retention expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket delete mfa request-payer
     bypass-governance-retention expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteObjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-objects))
(common-lisp:progn
 (common-lisp:defun delete-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-public-access-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeletePublicAccessBlock"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-public-access-block))
(common-lisp:progn
 (common-lisp:defun get-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAccelerateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAcl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-acl))
(common-lisp:progn
 (common-lisp:defun get-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAnalyticsConfiguration"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketCors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-cors))
(common-lisp:progn
 (common-lisp:defun get-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketEncryption"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun get-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketIntelligentTieringConfiguration"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketInventoryConfiguration"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycleConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?location"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLocation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-location))
(common-lisp:progn
 (common-lisp:defun get-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLogging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-logging))
(common-lisp:progn
 (common-lisp:defun get-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketMetricsConfiguration"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotification"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-notification))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotificationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketOwnershipControls"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicy"))
      "string" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicyStatus"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-policy-status))
(common-lisp:progn
 (common-lisp:defun get-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketReplication"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-replication))
(common-lisp:progn
 (common-lisp:defun get-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketRequestPayment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun get-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun get-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketVersioning"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun get-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-website))
(common-lisp:progn
 (common-lisp:defun get-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range
                     response-cache-control response-content-disposition
                     response-content-encoding response-content-language
                     response-content-type response-expires version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range response-cache-control
     response-content-disposition response-content-encoding
     response-content-language response-content-type response-expires
     version-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     request-payer part-number expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObject")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object))
(common-lisp:progn
 (common-lisp:defun get-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAcl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-acl))
(common-lisp:progn
 (common-lisp:defun get-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id max-parts
                     part-number-marker ssecustomer-algorithm ssecustomer-key
                     ssecustomer-key-md5 request-payer expected-bucket-owner
                     object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id max-parts part-number-marker
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 request-payer
     expected-bucket-owner object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?attributes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAttributes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-attributes))
(common-lisp:progn
 (common-lisp:defun get-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectLegalHold"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun get-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetObjectLockConfiguration"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun get-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectRetention"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-retention))
(common-lisp:progn
 (common-lisp:defun get-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner
     request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-tagging))
(common-lisp:progn
 (common-lisp:defun get-object-torrent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-torrent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?torrent"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTorrent")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-torrent))
(common-lisp:progn
 (common-lisp:defun get-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetPublicAccessBlock"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-public-access-block))
(common-lisp:progn
 (common-lisp:defun head-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "HeadBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'head-bucket))
(common-lisp:progn
 (common-lisp:defun head-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range version-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer part-number
     expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "HeadObject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'head-object))
(common-lisp:progn
 (common-lisp:defun list-bucket-analytics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-analytics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketAnalyticsConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-analytics-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-intelligent-tiering-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token)
   (common-lisp:declare (common-lisp:ignorable bucket continuation-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-intelligent-tiering-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketIntelligentTieringConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-intelligent-tiering-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-inventory-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-inventory-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketInventoryConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-inventory-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-metrics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-metrics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketMetricsConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bucket-metrics-configurations))
(common-lisp:progn
 (common-lisp:defun list-buckets ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 's3-request :method "GET" :path "/" :operation
                                "ListBuckets"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'list-buckets))
(common-lisp:progn
 (common-lisp:defun list-directory-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continuation-token max-directory-buckets)
   (common-lisp:declare
    (common-lisp:ignorable continuation-token max-directory-buckets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-directory-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/"
                                                        "ListDirectoryBuckets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-directory-buckets))
(common-lisp:progn
 (common-lisp:defun list-multipart-uploads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-uploads prefix upload-id-marker expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker
     max-uploads prefix upload-id-marker expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multipart-uploads-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListMultipartUploads"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multipart-uploads))
(common-lisp:progn
 (common-lisp:defun list-object-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-keys prefix version-id-marker expected-bucket-owner
                     request-payer optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker max-keys
     prefix version-id-marker expected-bucket-owner request-payer
     optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-versions))
(common-lisp:progn
 (common-lisp:defun list-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type marker
                     max-keys prefix request-payer expected-bucket-owner
                     optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type marker max-keys
     prefix request-payer expected-bucket-owner optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjects"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-objects))
(common-lisp:progn
 (common-lisp:defun list-objects-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type max-keys
                     prefix continuation-token fetch-owner start-after
                     request-payer expected-bucket-owner
                     optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type max-keys prefix
     continuation-token fetch-owner start-after request-payer
     expected-bucket-owner optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?list-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectsV2"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-objects-v2))
(common-lisp:progn
 (common-lisp:defun list-parts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key max-parts part-number-marker
                     upload-id request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key max-parts part-number-marker upload-id
     request-payer expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "ListParts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-parts))
(common-lisp:progn
 (common-lisp:defun put-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket accelerate-configuration
                     expected-bucket-owner checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket accelerate-configuration
     expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAccelerateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAcl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-acl))
(common-lisp:progn
 (common-lisp:defun put-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id analytics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id analytics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAnalyticsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket corsconfiguration content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket corsconfiguration content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketCors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-cors))
(common-lisp:progn
 (common-lisp:defun put-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     server-side-encryption-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     server-side-encryption-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketEncryption"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun put-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id
                     intelligent-tiering-configuration)
   (common-lisp:declare
    (common-lisp:ignorable bucket id intelligent-tiering-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketIntelligentTieringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id inventory-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id inventory-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketInventoryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     lifecycle-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket checksum-algorithm lifecycle-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycleConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket bucket-logging-status content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket bucket-logging-status content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLogging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-logging))
(common-lisp:progn
 (common-lisp:defun put-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id metrics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id metrics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketMetricsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     notification-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     notification-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotification"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-notification))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket notification-configuration
                     expected-bucket-owner skip-destination-validation)
   (common-lisp:declare
    (common-lisp:ignorable bucket notification-configuration
     expected-bucket-owner skip-destination-validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotificationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 expected-bucket-owner
                     ownership-controls)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 expected-bucket-owner
     ownership-controls))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketOwnershipControls"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun put-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     confirm-remove-self-bucket-access policy
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     confirm-remove-self-bucket-access policy expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-policy))
(common-lisp:progn
 (common-lisp:defun put-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     replication-configuration token expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     replication-configuration token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketReplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-replication))
(common-lisp:progn
 (common-lisp:defun put-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     request-payment-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     request-payment-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketRequestPayment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun put-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     tagging expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm tagging
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun put-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm mfa
                     versioning-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm mfa
     versioning-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketVersioning"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun put-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     website-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     website-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bucket-website))
(common-lisp:progn
 (common-lisp:defun put-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl body bucket cache-control
                     content-disposition content-encoding content-language
                     content-length content-md5 content-type checksum-algorithm
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl body bucket cache-control content-disposition
     content-encoding content-language content-length content-md5 content-type
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 expires grant-full-control grant-read grant-read-acp
     grant-write-acp key metadata server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled request-payer tagging object-lock-mode
     object-lock-retain-until-date object-lock-legal-hold-status
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object))
(common-lisp:progn
 (common-lisp:defun put-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp key
                     request-payer version-id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp key request-payer version-id
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectAcl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-acl))
(common-lisp:progn
 (common-lisp:defun put-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key legal-hold request-payer
                     version-id content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key legal-hold request-payer version-id
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectLegalHold"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun put-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket object-lock-configuration
                     request-payer token content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket object-lock-configuration request-payer token
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutObjectLockConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun put-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key retention request-payer
                     version-id bypass-governance-retention content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key retention request-payer version-id
     bypass-governance-retention content-md5 checksum-algorithm
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectRetention"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-retention))
(common-lisp:progn
 (common-lisp:defun put-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id content-md5
                     checksum-algorithm tagging expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id content-md5 checksum-algorithm
     tagging expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-object-tagging))
(common-lisp:progn
 (common-lisp:defun put-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     public-access-block-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     public-access-block-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutPublicAccessBlock"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-public-access-block))
(common-lisp:progn
 (common-lisp:defun restore-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id restore-request
                     request-payer checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id restore-request request-payer
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?restore"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "RestoreObject"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-object))
(common-lisp:progn
 (common-lisp:defun select-object-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 expression
                     expression-type request-progress input-serialization
                     output-serialization scan-range expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 expression expression-type request-progress
     input-serialization output-serialization scan-range
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-select-object-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?select&select-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "SelectObjectContent"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'select-object-content))
(common-lisp:progn
 (common-lisp:defun upload-part
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body bucket content-length content-md5
                     checksum-algorithm checksum-crc32 checksum-crc32c
                     checksum-sha1 checksum-sha256 key part-number upload-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable body bucket content-length content-md5
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 key part-number upload-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPart"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upload-part))
(common-lisp:progn
 (common-lisp:defun upload-part-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket copy-source copy-source-if-match
                     copy-source-if-modified-since copy-source-if-none-match
                     copy-source-if-unmodified-since copy-source-range key
                     part-number upload-id ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer
                     expected-bucket-owner expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket copy-source copy-source-if-match
     copy-source-if-modified-since copy-source-if-none-match
     copy-source-if-unmodified-since copy-source-range key part-number
     upload-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     copy-source-ssecustomer-algorithm copy-source-ssecustomer-key
     copy-source-ssecustomer-key-md5 request-payer expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-copy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPartCopy"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'upload-part-copy))
(common-lisp:progn
 (common-lisp:defun write-get-object-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-route request-token body
                     status-code error-code error-message accept-ranges
                     cache-control content-disposition content-encoding
                     content-language content-length content-range content-type
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 delete-marker etag expires expiration
                     last-modified missing-meta metadata object-lock-mode
                     object-lock-legal-hold-status
                     object-lock-retain-until-date parts-count
                     replication-status request-charged restore
                     server-side-encryption ssecustomer-algorithm ssekmskey-id
                     ssecustomer-key-md5 storage-class tag-count version-id
                     bucket-key-enabled)
   (common-lisp:declare
    (common-lisp:ignorable request-route request-token body status-code
     error-code error-message accept-ranges cache-control content-disposition
     content-encoding content-language content-length content-range
     content-type checksum-crc32 checksum-crc32c checksum-sha1 checksum-sha256
     delete-marker etag expires expiration last-modified missing-meta metadata
     object-lock-mode object-lock-legal-hold-status
     object-lock-retain-until-date parts-count replication-status
     request-charged restore server-side-encryption ssecustomer-algorithm
     ssekmskey-id ssecustomer-key-md5 storage-class tag-count version-id
     bucket-key-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-write-get-object-response-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/WriteGetObjectResponse"
                                                        "WriteGetObjectResponse"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'write-get-object-response))
