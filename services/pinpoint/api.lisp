;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pinpoint/api
  (:use)
  (:nicknames #:aws/pinpoint)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pinpoint/api)
(common-lisp:progn
 (common-lisp:defclass pinpoint-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "pinpoint"))
 (common-lisp:export 'pinpoint-request))
(common-lisp:progn
 (common-lisp:define-condition pinpoint-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pinpoint-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("MethodNotAllowedException" . method-not-allowed-exception)
    ("NotFoundException" . not-found-exception)
    ("PayloadTooLargeException" . payload-too-large-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (admchannel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-admchannel-request-"))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (client-secret (common-lisp:error ":client-secret is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'admchannel-request 'make-admchannel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admchannel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admchannel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admchannel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (admchannel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-admchannel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'admchannel-response 'make-admchannel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admchannel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admchannel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admchannel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (admmessage (:copier common-lisp:nil)
      (:conc-name "struct-shape-admmessage-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (consolidation-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (expires-after common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (icon-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (md5 common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (small-image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'admmessage 'make-admmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consolidation-key))
      (common-lisp:list
       (common-lisp:cons "ConsolidationKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-after))
      (common-lisp:list
       (common-lisp:cons "ExpiresAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-reference))
      (common-lisp:list
       (common-lisp:cons "IconReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'md5))
      (common-lisp:list
       (common-lisp:cons "MD5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-image-icon-url))
      (common-lisp:list
       (common-lisp:cons "SmallImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admmessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnschannel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnschannel-request-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (token-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnschannel-request 'make-apnschannel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apnschannel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apnschannel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key))
      (common-lisp:list
       (common-lisp:cons "TokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-id))
      (common-lisp:list
       (common-lisp:cons "TokenKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apnschannel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnschannel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnschannel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-token-key common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnschannel-response 'make-apnschannel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apnschannel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apnschannel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-token-key))
      (common-lisp:list
       (common-lisp:cons "HasTokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apnschannel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnsmessage (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnsmessage-"))
   (apnspush-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (badge common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (collapse-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (media-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (preferred-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (thread-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'apnsmessage 'make-apnsmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apnsmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apnsmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apnspush-type))
      (common-lisp:list
       (common-lisp:cons "APNSPushType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'badge))
      (common-lisp:list
       (common-lisp:cons "Badge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collapse-id))
      (common-lisp:list
       (common-lisp:cons "CollapseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-url))
      (common-lisp:list
       (common-lisp:cons "MediaUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-authentication-method))
      (common-lisp:list
       (common-lisp:cons "PreferredAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-id))
      (common-lisp:list
       (common-lisp:cons "ThreadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apnsmessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnspush-notification-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnspush-notification-template-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (media-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnspush-notification-template
                    'make-apnspush-notification-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnspush-notification-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnspush-notification-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-url))
      (common-lisp:list
       (common-lisp:cons "MediaUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnspush-notification-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnssandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnssandbox-channel-request-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (token-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnssandbox-channel-request
                    'make-apnssandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key))
      (common-lisp:list
       (common-lisp:cons "TokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-id))
      (common-lisp:list
       (common-lisp:cons "TokenKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnssandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnssandbox-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-token-key common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnssandbox-channel-response
                    'make-apnssandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-token-key))
      (common-lisp:list
       (common-lisp:cons "HasTokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnssandbox-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnsvoip-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnsvoip-channel-request-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (token-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnsvoip-channel-request 'make-apnsvoip-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key))
      (common-lisp:list
       (common-lisp:cons "TokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-id))
      (common-lisp:list
       (common-lisp:cons "TokenKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnsvoip-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnsvoip-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-token-key common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnsvoip-channel-response
                    'make-apnsvoip-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-token-key))
      (common-lisp:list
       (common-lisp:cons "HasTokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnsvoip-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnsvoip-sandbox-channel-request-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (team-id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (token-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token-key-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnsvoip-sandbox-channel-request
                    'make-apnsvoip-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key))
      (common-lisp:list
       (common-lisp:cons "TokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-key-id))
      (common-lisp:list
       (common-lisp:cons "TokenKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apnsvoip-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-apnsvoip-sandbox-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (default-authentication-method common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-token-key common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apnsvoip-sandbox-channel-response
                    'make-apnsvoip-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-authentication-method))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthenticationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-token-key))
      (common-lisp:list
       (common-lisp:cons "HasTokenKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apnsvoip-sandbox-channel-response))
   common-lisp:nil))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (activities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-activities-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-activity-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activities-response 'make-activities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity (:copier common-lisp:nil) (:conc-name "struct-shape-activity-"))
   (custom common-lisp:nil :type
    (common-lisp:or custom-message-activity common-lisp:null))
   (conditional-split common-lisp:nil :type
    (common-lisp:or conditional-split-activity common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or email-message-activity common-lisp:null))
   (holdout common-lisp:nil :type
    (common-lisp:or holdout-activity common-lisp:null))
   (multi-condition common-lisp:nil :type
    (common-lisp:or multi-conditional-split-activity common-lisp:null))
   (push common-lisp:nil :type
    (common-lisp:or push-message-activity common-lisp:null))
   (random-split common-lisp:nil :type
    (common-lisp:or random-split-activity common-lisp:null))
   (sms common-lisp:nil :type
    (common-lisp:or smsmessage-activity common-lisp:null))
   (wait common-lisp:nil :type (common-lisp:or wait-activity common-lisp:null))
   (contact-center common-lisp:nil :type
    (common-lisp:or contact-center-activity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activity 'make-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "CUSTOM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditional-split))
      (common-lisp:list
       (common-lisp:cons "ConditionalSplit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "EMAIL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'holdout))
      (common-lisp:list
       (common-lisp:cons "Holdout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-condition))
      (common-lisp:list
       (common-lisp:cons "MultiCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push))
      (common-lisp:list
       (common-lisp:cons "PUSH"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'random-split))
      (common-lisp:list
       (common-lisp:cons "RandomSplit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms))
      (common-lisp:list
       (common-lisp:cons "SMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait))
      (common-lisp:list
       (common-lisp:cons "Wait"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-center))
      (common-lisp:list
       (common-lisp:cons "ContactCenter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (activity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-activity-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (result common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (scheduled-start common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (successful-endpoint-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (timezones-completed-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (timezones-total-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-endpoint-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (treatment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (execution-metrics common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activity-response 'make-activity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "CampaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-start))
      (common-lisp:list
       (common-lisp:cons "ScheduledStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-endpoint-count))
      (common-lisp:list
       (common-lisp:cons "SuccessfulEndpointCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timezones-completed-count))
      (common-lisp:list
       (common-lisp:cons "TimezonesCompletedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timezones-total-count))
      (common-lisp:list
       (common-lisp:cons "TimezonesTotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-endpoint-count))
      (common-lisp:list
       (common-lisp:cons "TotalEndpointCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-id))
      (common-lisp:list
       (common-lisp:cons "TreatmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-metrics))
      (common-lisp:list
       (common-lisp:cons "ExecutionMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (address-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-address-configuration-"))
   (body-override common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or channel-type common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (title-override common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'address-configuration 'make-address-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          address-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          address-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-override))
      (common-lisp:list
       (common-lisp:cons "BodyOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-override))
      (common-lisp:list
       (common-lisp:cons "TitleOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          address-configuration))
   common-lisp:nil))
(common-lisp:deftype alignment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (android-push-notification-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-android-push-notification-template-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (small-image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'android-push-notification-template
                    'make-android-push-notification-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          android-push-notification-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          android-push-notification-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-image-icon-url))
      (common-lisp:list
       (common-lisp:cons "SmallImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          android-push-notification-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-date-range-kpi-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (kpi-result (common-lisp:error ":kpi-result is required") :type
    (common-lisp:or base-kpi-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-date-range-kpi-response
                    'make-application-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-name))
      (common-lisp:list
       (common-lisp:cons "KpiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-result))
      (common-lisp:list
       (common-lisp:cons "KpiResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-date-range-kpi-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-response 'make-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-settings-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-settings-resource-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-hook common-lisp:nil :type
    (common-lisp:or campaign-hook common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or campaign-limits common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-settings-resource
                    'make-application-settings-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-hook))
      (common-lisp:list
       (common-lisp:cons "CampaignHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-applications-response-"))
   (item common-lisp:nil :type
    (common-lisp:or list-of-application-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'applications-response 'make-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-dimension-"))
   (attribute-type common-lisp:nil :type
    (common-lisp:or attribute-type common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or list-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-dimension 'make-attribute-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-dimension))
   common-lisp:nil))
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attributes-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-attributes-resource-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (attribute-type (common-lisp:error ":attribute-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or list-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attributes-resource 'make-attributes-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attributes-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attributes-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attributes-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bad-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (baidu-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-baidu-channel-request-"))
   (api-key (common-lisp:error ":api-key is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (secret-key (common-lisp:error ":secret-key is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'baidu-channel-request 'make-baidu-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "ApiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-key))
      (common-lisp:list
       (common-lisp:cons "SecretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (baidu-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-baidu-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (credential (common-lisp:error ":credential is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'baidu-channel-response 'make-baidu-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential))
      (common-lisp:list
       (common-lisp:cons "Credential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          baidu-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (baidu-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-baidu-message-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (icon-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (small-image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'baidu-message 'make-baidu-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baidu-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baidu-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-reference))
      (common-lisp:list
       (common-lisp:cons "IconReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-image-icon-url))
      (common-lisp:list
       (common-lisp:cons "SmallImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baidu-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (base-kpi-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-base-kpi-result-"))
   (rows (common-lisp:error ":rows is required") :type
    (common-lisp:or list-of-result-row common-lisp:null)))
 (common-lisp:export (common-lisp:list 'base-kpi-result 'make-base-kpi-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input base-kpi-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input base-kpi-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "Rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input base-kpi-result))
   common-lisp:nil))
(common-lisp:deftype button-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-custom-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-custom-message-"))
   (data common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-custom-message 'make-campaign-custom-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          campaign-custom-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          campaign-custom-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          campaign-custom-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-date-range-kpi-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (kpi-result (common-lisp:error ":kpi-result is required") :type
    (common-lisp:or base-kpi-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-date-range-kpi-response
                    'make-campaign-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          campaign-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          campaign-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "CampaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-name))
      (common-lisp:list
       (common-lisp:cons "KpiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-result))
      (common-lisp:list
       (common-lisp:cons "KpiResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          campaign-date-range-kpi-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-email-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-email-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (from-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (html-body common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-email-message 'make-campaign-email-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          campaign-email-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          campaign-email-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-address))
      (common-lisp:list
       (common-lisp:cons "FromAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-body))
      (common-lisp:list
       (common-lisp:cons "HtmlBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          campaign-email-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-event-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-event-filter-"))
   (dimensions (common-lisp:error ":dimensions is required") :type
    (common-lisp:or event-dimensions common-lisp:null))
   (filter-type (common-lisp:error ":filter-type is required") :type
    (common-lisp:or filter-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-event-filter 'make-campaign-event-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          campaign-event-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          campaign-event-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-type))
      (common-lisp:list
       (common-lisp:cons "FilterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          campaign-event-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-hook (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-hook-"))
   (lambda-function-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or mode common-lisp:null))
   (web-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'campaign-hook 'make-campaign-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-name))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-url))
      (common-lisp:list
       (common-lisp:cons "WebUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-in-app-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-in-app-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or list-of-in-app-message-content common-lisp:null))
   (custom-config common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (layout common-lisp:nil :type (common-lisp:or layout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-in-app-message 'make-campaign-in-app-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          campaign-in-app-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          campaign-in-app-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-config))
      (common-lisp:list
       (common-lisp:cons "CustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          campaign-in-app-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-limits-"))
   (daily common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (maximum-duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (messages-per-second common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (session common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'campaign-limits 'make-campaign-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily))
      (common-lisp:list
       (common-lisp:cons "Daily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-duration))
      (common-lisp:list
       (common-lisp:cons "MaximumDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages-per-second))
      (common-lisp:list
       (common-lisp:cons "MessagesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-response-"))
   (additional-treatments common-lisp:nil :type
    (common-lisp:or list-of-treatment-resource common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-delivery-configuration common-lisp:nil :type
    (common-lisp:or custom-delivery-configuration common-lisp:null))
   (default-state common-lisp:nil :type
    (common-lisp:or campaign-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (holdout-percent common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (hook common-lisp:nil :type (common-lisp:or campaign-hook common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (is-paused common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or campaign-limits common-lisp:null))
   (message-configuration common-lisp:nil :type
    (common-lisp:or message-configuration common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-version (common-lisp:error ":segment-version is required") :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or campaign-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (treatment-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-response 'make-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-treatments))
      (common-lisp:list
       (common-lisp:cons "AdditionalTreatments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-state))
      (common-lisp:list
       (common-lisp:cons "DefaultState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'holdout-percent))
      (common-lisp:list
       (common-lisp:cons "HoldoutPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook))
      (common-lisp:list
       (common-lisp:cons "Hook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-paused))
      (common-lisp:list
       (common-lisp:cons "IsPaused"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-version))
      (common-lisp:list
       (common-lisp:cons "SegmentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'treatment-description))
      (common-lisp:list
       (common-lisp:cons "TreatmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "TreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-sms-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-sms-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (origination-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaign-sms-message 'make-campaign-sms-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-sms-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-sms-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origination-number))
      (common-lisp:list
       (common-lisp:cons "OriginationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-sms-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (campaign-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaign-state-"))
   (campaign-status common-lisp:nil :type
    (common-lisp:or campaign-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'campaign-state 'make-campaign-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-status))
      (common-lisp:list
       (common-lisp:cons "CampaignStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-state))
   common-lisp:nil))
(common-lisp:deftype campaign-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (campaigns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-campaigns-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-campaign-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'campaigns-response 'make-campaigns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaigns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaigns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaigns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-response 'make-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-response))
   common-lisp:nil))
(common-lisp:deftype channel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-channels-response-"))
   (channels (common-lisp:error ":channels is required") :type
    (common-lisp:or map-of-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channels-response 'make-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-"))
   (conditions common-lisp:nil :type
    (common-lisp:or list-of-simple-condition common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (conditional-split-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-conditional-split-activity-"))
   (condition common-lisp:nil :type
    (common-lisp:or condition common-lisp:null))
   (evaluation-wait-time common-lisp:nil :type
    (common-lisp:or wait-time common-lisp:null))
   (false-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (true-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conditional-split-activity
                    'make-conditional-split-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conditional-split-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conditional-split-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-wait-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationWaitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'false-activity))
      (common-lisp:list
       (common-lisp:cons "FalseActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'true-activity))
      (common-lisp:list
       (common-lisp:cons "TrueActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conditional-split-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-center-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-center-activity-"))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-center-activity 'make-contact-center-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          contact-center-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          contact-center-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          contact-center-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-request-"))
   (create-application-request
    (common-lisp:error ":create-application-request is required") :type
    (common-lisp:or create-application-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-application-request))
      (common-lisp:list
       (common-lisp:cons "CreateApplicationRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-application-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-response-"))
   (application-response
    (common-lisp:error ":application-response is required") :type
    (common-lisp:or application-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-response 'make-create-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-response))
      (common-lisp:list
       (common-lisp:cons "ApplicationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-campaign-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-campaign-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-campaign-request
    (common-lisp:error ":write-campaign-request is required") :type
    (common-lisp:or write-campaign-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-campaign-request 'make-create-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-campaign-request))
      (common-lisp:list
       (common-lisp:cons "WriteCampaignRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-campaign-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-campaign-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-campaign-response-"))
   (campaign-response (common-lisp:error ":campaign-response is required")
    :type (common-lisp:or campaign-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-campaign-response 'make-create-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-response))
      (common-lisp:list
       (common-lisp:cons "CampaignResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaign-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-email-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-email-template-request-"))
   (email-template-request
    (common-lisp:error ":email-template-request is required") :type
    (common-lisp:or email-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-email-template-request
                    'make-create-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-template-request))
      (common-lisp:list
       (common-lisp:cons "EmailTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-email-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-email-template-response-"))
   (create-template-message-body
    (common-lisp:error ":create-template-message-body is required") :type
    (common-lisp:or create-template-message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-email-template-response
                    'make-create-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-template-message-body))
      (common-lisp:list
       (common-lisp:cons "CreateTemplateMessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-email-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-template-message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-export-job-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (export-job-request (common-lisp:error ":export-job-request is required")
    :type (common-lisp:or export-job-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-export-job-request
                    'make-create-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-job-request))
      (common-lisp:list
       (common-lisp:cons "ExportJobRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'export-job-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-export-job-response-"))
   (export-job-response (common-lisp:error ":export-job-response is required")
    :type (common-lisp:or export-job-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-export-job-response
                    'make-create-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-job-response))
      (common-lisp:list
       (common-lisp:cons "ExportJobResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-export-job-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'export-job-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-import-job-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (import-job-request (common-lisp:error ":import-job-request is required")
    :type (common-lisp:or import-job-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-import-job-request
                    'make-create-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-request))
      (common-lisp:list
       (common-lisp:cons "ImportJobRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'import-job-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-import-job-response-"))
   (import-job-response (common-lisp:error ":import-job-response is required")
    :type (common-lisp:or import-job-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-import-job-response
                    'make-create-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-response))
      (common-lisp:list
       (common-lisp:cons "ImportJobResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-import-job-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'import-job-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-in-app-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-in-app-template-request-"))
   (in-app-template-request
    (common-lisp:error ":in-app-template-request is required") :type
    (common-lisp:or in-app-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-in-app-template-request
                    'make-create-in-app-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-app-template-request))
      (common-lisp:list
       (common-lisp:cons "InAppTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'in-app-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-in-app-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-in-app-template-response-"))
   (template-create-message-body
    (common-lisp:error ":template-create-message-body is required") :type
    (common-lisp:or template-create-message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-in-app-template-response
                    'make-create-in-app-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-create-message-body))
      (common-lisp:list
       (common-lisp:cons "TemplateCreateMessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-in-app-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'template-create-message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-journey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-journey-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-journey-request
    (common-lisp:error ":write-journey-request is required") :type
    (common-lisp:or write-journey-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-journey-request 'make-create-journey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-journey-request))
      (common-lisp:list
       (common-lisp:cons "WriteJourneyRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-journey-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-journey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-journey-response-"))
   (journey-response (common-lisp:error ":journey-response is required") :type
    (common-lisp:or journey-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-journey-response 'make-create-journey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-response))
      (common-lisp:list
       (common-lisp:cons "JourneyResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-journey-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journey-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-push-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-push-template-request-"))
   (push-notification-template-request
    (common-lisp:error ":push-notification-template-request is required") :type
    (common-lisp:or push-notification-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-push-template-request
                    'make-create-push-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'push-notification-template-request))
      (common-lisp:list
       (common-lisp:cons "PushNotificationTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'push-notification-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-push-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-push-template-response-"))
   (create-template-message-body
    (common-lisp:error ":create-template-message-body is required") :type
    (common-lisp:or create-template-message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-push-template-response
                    'make-create-push-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-template-message-body))
      (common-lisp:list
       (common-lisp:cons "CreateTemplateMessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-push-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-template-message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-recommender-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-recommender-configuration-"))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-id-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-role-arn
    (common-lisp:error ":recommendation-provider-role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-uri
    (common-lisp:error ":recommendation-provider-uri is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-transformer-uri common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-display-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-per-message common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-recommender-configuration
                    'make-create-recommender-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-id-type))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-role-arn))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-transformer-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationTransformerUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-display-name))
      (common-lisp:list
       (common-lisp:cons "RecommendationsDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-per-message))
      (common-lisp:list
       (common-lisp:cons "RecommendationsPerMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-recommender-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-recommender-configuration-request-"))
   (create-recommender-configuration
    (common-lisp:error ":create-recommender-configuration is required") :type
    (common-lisp:or create-recommender-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-recommender-configuration-request
                    'make-create-recommender-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-recommender-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateRecommenderConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-recommender-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-recommender-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-recommender-configuration-response-"))
   (recommender-configuration-response
    (common-lisp:error ":recommender-configuration-response is required") :type
    (common-lisp:or recommender-configuration-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-recommender-configuration-response
                    'make-create-recommender-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommender-configuration-response))
      (common-lisp:list
       (common-lisp:cons "RecommenderConfigurationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-recommender-configuration-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'recommender-configuration-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-segment-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-segment-request
    (common-lisp:error ":write-segment-request is required") :type
    (common-lisp:or write-segment-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-segment-request 'make-create-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-segment-request))
      (common-lisp:list
       (common-lisp:cons "WriteSegmentRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-segment-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-segment-response-"))
   (segment-response (common-lisp:error ":segment-response is required") :type
    (common-lisp:or segment-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-segment-response 'make-create-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-response))
      (common-lisp:list
       (common-lisp:cons "SegmentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-segment-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segment-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sms-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sms-template-request-"))
   (smstemplate-request (common-lisp:error ":smstemplate-request is required")
    :type (common-lisp:or smstemplate-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sms-template-request
                    'make-create-sms-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smstemplate-request))
      (common-lisp:list
       (common-lisp:cons "SMSTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smstemplate-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sms-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sms-template-response-"))
   (create-template-message-body
    (common-lisp:error ":create-template-message-body is required") :type
    (common-lisp:or create-template-message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sms-template-response
                    'make-create-sms-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-template-message-body))
      (common-lisp:list
       (common-lisp:cons "CreateTemplateMessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sms-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-template-message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-message-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-message-body-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-message-body
                    'make-create-template-message-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-message-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-message-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-message-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-voice-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-voice-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (voice-template-request
    (common-lisp:error ":voice-template-request is required") :type
    (common-lisp:or voice-template-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-voice-template-request
                    'make-create-voice-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-template-request))
      (common-lisp:list
       (common-lisp:cons "VoiceTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-voice-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-voice-template-response-"))
   (create-template-message-body
    (common-lisp:error ":create-template-message-body is required") :type
    (common-lisp:or create-template-message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-voice-template-response
                    'make-create-voice-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-template-message-body))
      (common-lisp:list
       (common-lisp:cons "CreateTemplateMessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-voice-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-template-message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-delivery-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-delivery-configuration-"))
   (delivery-uri (common-lisp:error ":delivery-uri is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-types common-lisp:nil :type
    (common-lisp:or list-of-endpoint-types-element common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-delivery-configuration
                    'make-custom-delivery-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-delivery-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-delivery-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-uri))
      (common-lisp:list
       (common-lisp:cons "DeliveryUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-types))
      (common-lisp:list
       (common-lisp:cons "EndpointTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-delivery-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-message-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-message-activity-"))
   (delivery-uri common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-types common-lisp:nil :type
    (common-lisp:or list-of-endpoint-types-element common-lisp:null))
   (message-config common-lisp:nil :type
    (common-lisp:or journey-custom-message common-lisp:null))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-message-activity 'make-custom-message-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-message-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-message-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-uri))
      (common-lisp:list
       (common-lisp:cons "DeliveryUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-types))
      (common-lisp:list
       (common-lisp:cons "EndpointTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-config))
      (common-lisp:list
       (common-lisp:cons "MessageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "TemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-message-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-button-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-button-configuration-"))
   (background-color common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (border-radius common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (button-action (common-lisp:error ":button-action is required") :type
    (common-lisp:or button-action common-lisp:null))
   (link common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (text-color common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-button-configuration
                    'make-default-button-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-button-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-button-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-radius))
      (common-lisp:list
       (common-lisp:cons "BorderRadius"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'button-action))
      (common-lisp:list
       (common-lisp:cons "ButtonAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-button-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'default-message 'make-default-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-push-notification-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-push-notification-message-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-push-notification-message
                    'make-default-push-notification-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (default-push-notification-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-push-notification-template-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-push-notification-template
                    'make-default-push-notification-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-push-notification-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-adm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-adm-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-adm-channel-request
                    'make-delete-adm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-adm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-adm-channel-response-"))
   (admchannel-response (common-lisp:error ":admchannel-response is required")
    :type (common-lisp:or admchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-adm-channel-response
                    'make-delete-adm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admchannel-response))
      (common-lisp:list
       (common-lisp:cons "ADMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-adm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'admchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-channel-request
                    'make-delete-apns-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-channel-response-"))
   (apnschannel-response
    (common-lisp:error ":apnschannel-response is required") :type
    (common-lisp:or apnschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-channel-response
                    'make-delete-apns-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnschannel-response))
      (common-lisp:list
       (common-lisp:cons "APNSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-sandbox-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-sandbox-channel-request
                    'make-delete-apns-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-sandbox-channel-response-"))
   (apnssandbox-channel-response
    (common-lisp:error ":apnssandbox-channel-response is required") :type
    (common-lisp:or apnssandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-sandbox-channel-response
                    'make-delete-apns-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnssandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnssandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-voip-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-voip-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-voip-channel-request
                    'make-delete-apns-voip-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-voip-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-voip-channel-response-"))
   (apnsvoip-channel-response
    (common-lisp:error ":apnsvoip-channel-response is required") :type
    (common-lisp:or apnsvoip-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-voip-channel-response
                    'make-delete-apns-voip-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-voip-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-voip-sandbox-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-voip-sandbox-channel-request
                    'make-delete-apns-voip-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-apns-voip-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-apns-voip-sandbox-channel-response-"))
   (apnsvoip-sandbox-channel-response
    (common-lisp:error ":apnsvoip-sandbox-channel-response is required") :type
    (common-lisp:or apnsvoip-sandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-apns-voip-sandbox-channel-response
                    'make-delete-apns-voip-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-apns-voip-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-response-"))
   (application-response
    (common-lisp:error ":application-response is required") :type
    (common-lisp:or application-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-response 'make-delete-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-response))
      (common-lisp:list
       (common-lisp:cons "ApplicationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-baidu-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-baidu-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-baidu-channel-request
                    'make-delete-baidu-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-baidu-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-baidu-channel-response-"))
   (baidu-channel-response
    (common-lisp:error ":baidu-channel-response is required") :type
    (common-lisp:or baidu-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-baidu-channel-response
                    'make-delete-baidu-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baidu-channel-response))
      (common-lisp:list
       (common-lisp:cons "BaiduChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-baidu-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'baidu-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-campaign-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-campaign-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-request 'make-delete-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-campaign-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-campaign-response-"))
   (campaign-response (common-lisp:error ":campaign-response is required")
    :type (common-lisp:or campaign-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-response 'make-delete-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-response))
      (common-lisp:list
       (common-lisp:cons "CampaignResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaign-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-email-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-email-channel-request
                    'make-delete-email-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-email-channel-response-"))
   (email-channel-response
    (common-lisp:error ":email-channel-response is required") :type
    (common-lisp:or email-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-email-channel-response
                    'make-delete-email-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-channel-response))
      (common-lisp:list
       (common-lisp:cons "EmailChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-email-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-email-template-request
                    'make-delete-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-email-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-email-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-email-template-response
                    'make-delete-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-email-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-request 'make-delete-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-response-"))
   (endpoint-response (common-lisp:error ":endpoint-response is required")
    :type (common-lisp:or endpoint-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-response 'make-delete-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-response))
      (common-lisp:list
       (common-lisp:cons "EndpointResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'endpoint-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-stream-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-stream-request
                    'make-delete-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-stream-response-"))
   (event-stream (common-lisp:error ":event-stream is required") :type
    (common-lisp:or event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-stream-response
                    'make-delete-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream))
      (common-lisp:list
       (common-lisp:cons "EventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-stream-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-gcm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-gcm-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-gcm-channel-request
                    'make-delete-gcm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-gcm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-gcm-channel-response-"))
   (gcmchannel-response (common-lisp:error ":gcmchannel-response is required")
    :type (common-lisp:or gcmchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-gcm-channel-response
                    'make-delete-gcm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmchannel-response))
      (common-lisp:list
       (common-lisp:cons "GCMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gcm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'gcmchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-in-app-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-in-app-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-in-app-template-request
                    'make-delete-in-app-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-in-app-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-in-app-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-in-app-template-response
                    'make-delete-in-app-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-in-app-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-journey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-journey-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-journey-request 'make-delete-journey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-journey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-journey-response-"))
   (journey-response (common-lisp:error ":journey-response is required") :type
    (common-lisp:or journey-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-journey-response 'make-delete-journey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-response))
      (common-lisp:list
       (common-lisp:cons "JourneyResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-journey-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journey-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-push-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-push-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-push-template-request
                    'make-delete-push-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-push-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-push-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-push-template-response
                    'make-delete-push-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-push-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-recommender-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-recommender-configuration-request-"))
   (recommender-id (common-lisp:error ":recommender-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-recommender-configuration-request
                    'make-delete-recommender-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-recommender-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-recommender-configuration-response-"))
   (recommender-configuration-response
    (common-lisp:error ":recommender-configuration-response is required") :type
    (common-lisp:or recommender-configuration-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-recommender-configuration-response
                    'make-delete-recommender-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommender-configuration-response))
      (common-lisp:list
       (common-lisp:cons "RecommenderConfigurationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-recommender-configuration-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'recommender-configuration-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-segment-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-segment-request 'make-delete-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-segment-response-"))
   (segment-response (common-lisp:error ":segment-response is required") :type
    (common-lisp:or segment-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-segment-response 'make-delete-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-response))
      (common-lisp:list
       (common-lisp:cons "SegmentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-segment-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segment-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sms-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sms-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sms-channel-request
                    'make-delete-sms-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sms-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sms-channel-response-"))
   (smschannel-response (common-lisp:error ":smschannel-response is required")
    :type (common-lisp:or smschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sms-channel-response
                    'make-delete-sms-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smschannel-response))
      (common-lisp:list
       (common-lisp:cons "SMSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sms-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sms-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sms-template-request
                    'make-delete-sms-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sms-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sms-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sms-template-response
                    'make-delete-sms-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sms-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-endpoints-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-endpoints-request
                    'make-delete-user-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-endpoints-response-"))
   (endpoints-response (common-lisp:error ":endpoints-response is required")
    :type (common-lisp:or endpoints-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-endpoints-response
                    'make-delete-user-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints-response))
      (common-lisp:list
       (common-lisp:cons "EndpointsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-endpoints-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'endpoints-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-voice-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-channel-request
                    'make-delete-voice-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-voice-channel-response-"))
   (voice-channel-response
    (common-lisp:error ":voice-channel-response is required") :type
    (common-lisp:or voice-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-channel-response
                    'make-delete-voice-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-channel-response))
      (common-lisp:list
       (common-lisp:cons "VoiceChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-voice-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-template-request
                    'make-delete-voice-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-voice-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-voice-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-voice-template-response
                    'make-delete-voice-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-voice-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:deftype delivery-status () 'common-lisp:string)
(common-lisp:deftype dimension-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (direct-message-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-direct-message-configuration-"))
   (admmessage common-lisp:nil :type
    (common-lisp:or admmessage common-lisp:null))
   (apnsmessage common-lisp:nil :type
    (common-lisp:or apnsmessage common-lisp:null))
   (baidu-message common-lisp:nil :type
    (common-lisp:or baidu-message common-lisp:null))
   (default-message common-lisp:nil :type
    (common-lisp:or default-message common-lisp:null))
   (default-push-notification-message common-lisp:nil :type
    (common-lisp:or default-push-notification-message common-lisp:null))
   (email-message common-lisp:nil :type
    (common-lisp:or email-message common-lisp:null))
   (gcmmessage common-lisp:nil :type
    (common-lisp:or gcmmessage common-lisp:null))
   (smsmessage common-lisp:nil :type
    (common-lisp:or smsmessage common-lisp:null))
   (voice-message common-lisp:nil :type
    (common-lisp:or voice-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-message-configuration
                    'make-direct-message-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-message-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-message-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admmessage))
      (common-lisp:list
       (common-lisp:cons "ADMMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apnsmessage))
      (common-lisp:list
       (common-lisp:cons "APNSMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baidu-message))
      (common-lisp:list
       (common-lisp:cons "BaiduMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-message))
      (common-lisp:list
       (common-lisp:cons "DefaultMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-push-notification-message))
      (common-lisp:list
       (common-lisp:cons "DefaultPushNotificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmmessage))
      (common-lisp:list
       (common-lisp:cons "GCMMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smsmessage))
      (common-lisp:list
       (common-lisp:cons "SMSMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-message))
      (common-lisp:list
       (common-lisp:cons "VoiceMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-message-configuration))
   common-lisp:nil))
(common-lisp:deftype duration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (email-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-channel-request-"))
   (configuration-set common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (from-address (common-lisp:error ":from-address is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (identity (common-lisp:error ":identity is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'email-channel-request 'make-email-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-set))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-address))
      (common-lisp:list
       (common-lisp:cons "FromAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (configuration-set common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (from-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (identity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (messages-per-second common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'email-channel-response 'make-email-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-set))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-address))
      (common-lisp:list
       (common-lisp:cons "FromAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "Identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages-per-second))
      (common-lisp:list
       (common-lisp:cons "MessagesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (feedback-forwarding-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (from-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-email common-lisp:nil :type
    (common-lisp:or raw-email common-lisp:null))
   (reply-to-addresses common-lisp:nil :type
    (common-lisp:or list-of-string common-lisp:null))
   (simple-email common-lisp:nil :type
    (common-lisp:or simple-email common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'email-message 'make-email-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feedback-forwarding-address))
      (common-lisp:list
       (common-lisp:cons "FeedbackForwardingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-address))
      (common-lisp:list
       (common-lisp:cons "FromAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-email))
      (common-lisp:list
       (common-lisp:cons "RawEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reply-to-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplyToAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-email))
      (common-lisp:list
       (common-lisp:cons "SimpleEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email-message-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-message-activity-"))
   (message-config common-lisp:nil :type
    (common-lisp:or journey-email-message common-lisp:null))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'email-message-activity 'make-email-message-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-message-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-message-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-config))
      (common-lisp:list
       (common-lisp:cons "MessageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "TemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-message-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-template-request-"))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (html-part common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (subject common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (text-part common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'email-template-request 'make-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-part))
      (common-lisp:list
       (common-lisp:cons "HtmlPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-part))
      (common-lisp:list
       (common-lisp:cons "TextPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (email-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-email-template-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (html-part common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (subject common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (text-part common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'email-template-response 'make-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-part))
      (common-lisp:list
       (common-lisp:cons "HtmlPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-part))
      (common-lisp:list
       (common-lisp:cons "TextPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          email-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-batch-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-batch-item-"))
   (address common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or channel-type common-lisp:null))
   (demographic common-lisp:nil :type
    (common-lisp:or endpoint-demographic common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or endpoint-location common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-double common-lisp:null))
   (opt-out common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or endpoint-user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-batch-item 'make-endpoint-batch-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-batch-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-batch-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demographic))
      (common-lisp:list
       (common-lisp:cons "Demographic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "EffectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out))
      (common-lisp:list
       (common-lisp:cons "OptOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-batch-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-batch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-batch-request-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-endpoint-batch-item common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-batch-request 'make-endpoint-batch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-demographic (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-demographic-"))
   (app-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (make common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (model common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (model-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-demographic 'make-endpoint-demographic))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-demographic))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-demographic))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "AppVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "Locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'make))
      (common-lisp:list
       (common-lisp:cons "Make"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-demographic))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-item-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-item-response-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-item-response 'make-endpoint-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-location-"))
   (city common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (latitude common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (longitude common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (postal-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-location 'make-endpoint-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "Latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "Longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-message-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-message-result-"))
   (address common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (delivery-status (common-lisp:error ":delivery-status is required") :type
    (common-lisp:or delivery-status common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (status-code (common-lisp:error ":status-code is required") :type
    (common-lisp:or |__integer| common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (updated-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-message-result 'make-endpoint-message-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-status))
      (common-lisp:list
       (common-lisp:cons "DeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-token))
      (common-lisp:list
       (common-lisp:cons "UpdatedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-message-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-request-"))
   (address common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or channel-type common-lisp:null))
   (demographic common-lisp:nil :type
    (common-lisp:or endpoint-demographic common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or endpoint-location common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-double common-lisp:null))
   (opt-out common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or endpoint-user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-request 'make-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demographic))
      (common-lisp:list
       (common-lisp:cons "Demographic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "EffectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out))
      (common-lisp:list
       (common-lisp:cons "OptOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-response-"))
   (address common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or channel-type common-lisp:null))
   (cohort-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (demographic common-lisp:nil :type
    (common-lisp:or endpoint-demographic common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or endpoint-location common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-double common-lisp:null))
   (opt-out common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or endpoint-user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-response 'make-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cohort-id))
      (common-lisp:list
       (common-lisp:cons "CohortId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demographic))
      (common-lisp:list
       (common-lisp:cons "Demographic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "EffectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out))
      (common-lisp:list
       (common-lisp:cons "OptOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-send-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-send-configuration-"))
   (body-override common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (title-override common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-send-configuration
                    'make-endpoint-send-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-send-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-send-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-override))
      (common-lisp:list
       (common-lisp:cons "BodyOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title-override))
      (common-lisp:list
       (common-lisp:cons "TitleOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-send-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-user-"))
   (user-attributes common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint-user 'make-endpoint-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoints-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-endpoint-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoints-response 'make-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (app-package-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (app-title common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (app-version-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (client-sdk-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (event-type (common-lisp:error ":event-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-double common-lisp:null))
   (sdk-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (session common-lisp:nil :type (common-lisp:or session common-lisp:null))
   (timestamp (common-lisp:error ":timestamp is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-package-name))
      (common-lisp:list
       (common-lisp:cons "AppPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-title))
      (common-lisp:list
       (common-lisp:cons "AppTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version-code))
      (common-lisp:list
       (common-lisp:cons "AppVersionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-sdk-version))
      (common-lisp:list
       (common-lisp:cons "ClientSdkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sdk-name))
      (common-lisp:list
       (common-lisp:cons "SdkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-condition-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or event-dimensions common-lisp:null))
   (message-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-condition 'make-event-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-activity))
      (common-lisp:list
       (common-lisp:cons "MessageActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-dimensions (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-dimensions-"))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-attribute-dimension common-lisp:null))
   (event-type common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-metric-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-dimensions 'make-event-dimensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-dimensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-dimensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-dimensions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-filter-"))
   (dimensions (common-lisp:error ":dimensions is required") :type
    (common-lisp:or event-dimensions common-lisp:null))
   (filter-type (common-lisp:error ":filter-type is required") :type
    (common-lisp:or filter-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-filter 'make-event-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-type))
      (common-lisp:list
       (common-lisp:cons "FilterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-item-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-item-response-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (status-code common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-item-response 'make-event-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-start-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-start-condition-"))
   (event-filter common-lisp:nil :type
    (common-lisp:or event-filter common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-start-condition 'make-event-start-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-start-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-start-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-filter))
      (common-lisp:list
       (common-lisp:cons "EventFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-start-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-stream-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (destination-stream-arn
    (common-lisp:error ":destination-stream-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-stream 'make-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-stream-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-batch (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-batch-"))
   (endpoint (common-lisp:error ":endpoint is required") :type
    (common-lisp:or public-endpoint common-lisp:null))
   (events (common-lisp:error ":events is required") :type
    (common-lisp:or map-of-event common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-batch 'make-events-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-request-"))
   (batch-item (common-lisp:error ":batch-item is required") :type
    (common-lisp:or map-of-events-batch common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-request 'make-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-item))
      (common-lisp:list
       (common-lisp:cons "BatchItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-response-"))
   (results common-lisp:nil :type
    (common-lisp:or map-of-item-response common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-response 'make-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-job-request-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3url-prefix (common-lisp:error ":s3url-prefix is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-job-request 'make-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3url-prefix))
      (common-lisp:list
       (common-lisp:cons "S3UrlPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-version))
      (common-lisp:list
       (common-lisp:cons "SegmentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-job-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-job-resource-"))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3url-prefix (common-lisp:error ":s3url-prefix is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-job-resource 'make-export-job-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-job-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-job-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3url-prefix))
      (common-lisp:list
       (common-lisp:cons "S3UrlPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-version))
      (common-lisp:list
       (common-lisp:cons "SegmentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-job-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-job-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (completed-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (completion-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or export-job-resource common-lisp:null))
   (failed-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (failures common-lisp:nil :type
    (common-lisp:or list-of-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (job-status (common-lisp:error ":job-status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (total-failures common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-processed common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-job-response 'make-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-pieces))
      (common-lisp:list
       (common-lisp:cons "CompletedPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-pieces))
      (common-lisp:list
       (common-lisp:cons "FailedPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-failures))
      (common-lisp:list
       (common-lisp:cons "TotalFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-pieces))
      (common-lisp:list
       (common-lisp:cons "TotalPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-processed))
      (common-lisp:list
       (common-lisp:cons "TotalProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-jobs-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-export-job-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-jobs-response 'make-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-jobs-response))
   common-lisp:nil))
(common-lisp:deftype filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       forbidden-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message
                    'forbidden-exception-request-id)))
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:deftype frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (gcmchannel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-gcmchannel-request-"))
   (api-key (common-lisp:error ":api-key is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gcmchannel-request 'make-gcmchannel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gcmchannel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gcmchannel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "ApiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gcmchannel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gcmchannel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-gcmchannel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (credential (common-lisp:error ":credential is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gcmchannel-response 'make-gcmchannel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gcmchannel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gcmchannel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential))
      (common-lisp:list
       (common-lisp:cons "Credential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gcmchannel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gcmmessage (:copier common-lisp:nil)
      (:conc-name "struct-shape-gcmmessage-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (collapse-key common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (icon-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (restricted-package-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (small-image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sound common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gcmmessage 'make-gcmmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gcmmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gcmmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collapse-key))
      (common-lisp:list
       (common-lisp:cons "CollapseKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-reference))
      (common-lisp:list
       (common-lisp:cons "IconReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restricted-package-name))
      (common-lisp:list
       (common-lisp:cons "RestrictedPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-image-icon-url))
      (common-lisp:list
       (common-lisp:cons "SmallImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sound))
      (common-lisp:list
       (common-lisp:cons "Sound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gcmmessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gpscoordinates (:copier common-lisp:nil)
      (:conc-name "struct-shape-gpscoordinates-"))
   (latitude (common-lisp:error ":latitude is required") :type
    (common-lisp:or |__double| common-lisp:null))
   (longitude (common-lisp:error ":longitude is required") :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gpscoordinates 'make-gpscoordinates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gpscoordinates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gpscoordinates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "Latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "Longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gpscoordinates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gpspoint-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-gpspoint-dimension-"))
   (coordinates (common-lisp:error ":coordinates is required") :type
    (common-lisp:or gpscoordinates common-lisp:null))
   (range-in-kilometers common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gpspoint-dimension 'make-gpspoint-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gpspoint-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gpspoint-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coordinates))
      (common-lisp:list
       (common-lisp:cons "Coordinates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range-in-kilometers))
      (common-lisp:list
       (common-lisp:cons "RangeInKilometers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gpspoint-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-adm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-adm-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-adm-channel-request 'make-get-adm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-adm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-adm-channel-response-"))
   (admchannel-response (common-lisp:error ":admchannel-response is required")
    :type (common-lisp:or admchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-adm-channel-response 'make-get-adm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admchannel-response))
      (common-lisp:list
       (common-lisp:cons "ADMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-adm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'admchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-channel-request 'make-get-apns-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-channel-response-"))
   (apnschannel-response
    (common-lisp:error ":apnschannel-response is required") :type
    (common-lisp:or apnschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-channel-response
                    'make-get-apns-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnschannel-response))
      (common-lisp:list
       (common-lisp:cons "APNSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-sandbox-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-sandbox-channel-request
                    'make-get-apns-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-sandbox-channel-response-"))
   (apnssandbox-channel-response
    (common-lisp:error ":apnssandbox-channel-response is required") :type
    (common-lisp:or apnssandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-sandbox-channel-response
                    'make-get-apns-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnssandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnssandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-voip-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-voip-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-voip-channel-request
                    'make-get-apns-voip-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-voip-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-voip-channel-response-"))
   (apnsvoip-channel-response
    (common-lisp:error ":apnsvoip-channel-response is required") :type
    (common-lisp:or apnsvoip-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-voip-channel-response
                    'make-get-apns-voip-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-voip-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-voip-sandbox-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-voip-sandbox-channel-request
                    'make-get-apns-voip-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apns-voip-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apns-voip-sandbox-channel-response-"))
   (apnsvoip-sandbox-channel-response
    (common-lisp:error ":apnsvoip-sandbox-channel-response is required") :type
    (common-lisp:or apnsvoip-sandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apns-voip-sandbox-channel-response
                    'make-get-apns-voip-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-apns-voip-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-app-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-app-request 'make-get-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-app-response-"))
   (application-response
    (common-lisp:error ":application-response is required") :type
    (common-lisp:or application-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-app-response 'make-get-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-response))
      (common-lisp:list
       (common-lisp:cons "ApplicationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-date-range-kpi-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-date-range-kpi-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-date-range-kpi-request
                    'make-get-application-date-range-kpi-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-date-range-kpi-response-"))
   (application-date-range-kpi-response
    (common-lisp:error ":application-date-range-kpi-response is required")
    :type
    (common-lisp:or application-date-range-kpi-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-date-range-kpi-response
                    'make-get-application-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-date-range-kpi-response))
      (common-lisp:list
       (common-lisp:cons "ApplicationDateRangeKpiResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-date-range-kpi-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-date-range-kpi-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-settings-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-settings-request
                    'make-get-application-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-application-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-application-settings-response-"))
   (application-settings-resource
    (common-lisp:error ":application-settings-resource is required") :type
    (common-lisp:or application-settings-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-application-settings-response
                    'make-get-application-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-settings-resource))
      (common-lisp:list
       (common-lisp:cons "ApplicationSettingsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-application-settings-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-settings-resource)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apps-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apps-request 'make-get-apps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-apps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-apps-response-"))
   (applications-response
    (common-lisp:error ":applications-response is required") :type
    (common-lisp:or applications-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-apps-response 'make-get-apps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-apps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-apps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'applications-response))
      (common-lisp:list
       (common-lisp:cons "ApplicationsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-apps-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'applications-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-baidu-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-baidu-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-baidu-channel-request
                    'make-get-baidu-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-baidu-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-baidu-channel-response-"))
   (baidu-channel-response
    (common-lisp:error ":baidu-channel-response is required") :type
    (common-lisp:or baidu-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-baidu-channel-response
                    'make-get-baidu-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baidu-channel-response))
      (common-lisp:list
       (common-lisp:cons "BaiduChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-baidu-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'baidu-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-activities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-activities-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-activities-request
                    'make-get-campaign-activities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-activities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-activities-response-"))
   (activities-response (common-lisp:error ":activities-response is required")
    :type (common-lisp:or activities-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-activities-response
                    'make-get-campaign-activities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities-response))
      (common-lisp:list
       (common-lisp:cons "ActivitiesResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-activities-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'activities-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-date-range-kpi-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-date-range-kpi-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-date-range-kpi-request
                    'make-get-campaign-date-range-kpi-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-date-range-kpi-response-"))
   (campaign-date-range-kpi-response
    (common-lisp:error ":campaign-date-range-kpi-response is required") :type
    (common-lisp:or campaign-date-range-kpi-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-date-range-kpi-response
                    'make-get-campaign-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'campaign-date-range-kpi-response))
      (common-lisp:list
       (common-lisp:cons "CampaignDateRangeKpiResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-date-range-kpi-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'campaign-date-range-kpi-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-request 'make-get-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-response-"))
   (campaign-response (common-lisp:error ":campaign-response is required")
    :type (common-lisp:or campaign-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-response 'make-get-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-response))
      (common-lisp:list
       (common-lisp:cons "CampaignResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaign-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-version-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-version-request
                    'make-get-campaign-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-version-response-"))
   (campaign-response (common-lisp:error ":campaign-response is required")
    :type (common-lisp:or campaign-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-version-response
                    'make-get-campaign-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-response))
      (common-lisp:list
       (common-lisp:cons "CampaignResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-version-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaign-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-versions-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-versions-request
                    'make-get-campaign-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaign-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaign-versions-response-"))
   (campaigns-response (common-lisp:error ":campaigns-response is required")
    :type (common-lisp:or campaigns-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaign-versions-response
                    'make-get-campaign-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaigns-response))
      (common-lisp:list
       (common-lisp:cons "CampaignsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-versions-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaigns-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaigns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaigns-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaigns-request 'make-get-campaigns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-campaigns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-campaigns-response-"))
   (campaigns-response (common-lisp:error ":campaigns-response is required")
    :type (common-lisp:or campaigns-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-campaigns-response 'make-get-campaigns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaigns-response))
      (common-lisp:list
       (common-lisp:cons "CampaignsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaigns-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaigns-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channels-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channels-request 'make-get-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channels-response-"))
   (channels-response (common-lisp:error ":channels-response is required")
    :type (common-lisp:or channels-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channels-response 'make-get-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-response))
      (common-lisp:list
       (common-lisp:cons "ChannelsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-channels-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'channels-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-email-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-email-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-email-channel-request
                    'make-get-email-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-email-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-email-channel-response-"))
   (email-channel-response
    (common-lisp:error ":email-channel-response is required") :type
    (common-lisp:or email-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-email-channel-response
                    'make-get-email-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-channel-response))
      (common-lisp:list
       (common-lisp:cons "EmailChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-email-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-email-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-email-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-email-template-request
                    'make-get-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-email-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-email-template-response-"))
   (email-template-response
    (common-lisp:error ":email-template-response is required") :type
    (common-lisp:or email-template-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-email-template-response
                    'make-get-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-template-response))
      (common-lisp:list
       (common-lisp:cons "EmailTemplateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-email-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-template-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-endpoint-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-endpoint-request 'make-get-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-endpoint-response-"))
   (endpoint-response (common-lisp:error ":endpoint-response is required")
    :type (common-lisp:or endpoint-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-endpoint-response 'make-get-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-response))
      (common-lisp:list
       (common-lisp:cons "EndpointResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'endpoint-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-stream-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-stream-request 'make-get-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-stream-response-"))
   (event-stream (common-lisp:error ":event-stream is required") :type
    (common-lisp:or event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-stream-response
                    'make-get-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream))
      (common-lisp:list
       (common-lisp:cons "EventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-stream-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-job-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-job-request 'make-get-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-job-response-"))
   (export-job-response (common-lisp:error ":export-job-response is required")
    :type (common-lisp:or export-job-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-job-response 'make-get-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-job-response))
      (common-lisp:list
       (common-lisp:cons "ExportJobResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-job-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'export-job-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-jobs-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-jobs-request 'make-get-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-jobs-response-"))
   (export-jobs-response
    (common-lisp:error ":export-jobs-response is required") :type
    (common-lisp:or export-jobs-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-jobs-response 'make-get-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-jobs-response))
      (common-lisp:list
       (common-lisp:cons "ExportJobsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-jobs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'export-jobs-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-gcm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-gcm-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-gcm-channel-request 'make-get-gcm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-gcm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-gcm-channel-response-"))
   (gcmchannel-response (common-lisp:error ":gcmchannel-response is required")
    :type (common-lisp:or gcmchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-gcm-channel-response 'make-get-gcm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmchannel-response))
      (common-lisp:list
       (common-lisp:cons "GCMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-gcm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'gcmchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-job-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-job-request 'make-get-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-job-response-"))
   (import-job-response (common-lisp:error ":import-job-response is required")
    :type (common-lisp:or import-job-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-job-response 'make-get-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-job-response))
      (common-lisp:list
       (common-lisp:cons "ImportJobResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-job-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'import-job-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-jobs-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-jobs-request 'make-get-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-jobs-response-"))
   (import-jobs-response
    (common-lisp:error ":import-jobs-response is required") :type
    (common-lisp:or import-jobs-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-jobs-response 'make-get-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-jobs-response))
      (common-lisp:list
       (common-lisp:cons "ImportJobsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-import-jobs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'import-jobs-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-in-app-messages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-in-app-messages-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-in-app-messages-request
                    'make-get-in-app-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-in-app-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-in-app-messages-response-"))
   (in-app-messages-response
    (common-lisp:error ":in-app-messages-response is required") :type
    (common-lisp:or in-app-messages-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-in-app-messages-response
                    'make-get-in-app-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-app-messages-response))
      (common-lisp:list
       (common-lisp:cons "InAppMessagesResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-messages-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'in-app-messages-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-in-app-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-in-app-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-in-app-template-request
                    'make-get-in-app-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-in-app-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-in-app-template-response-"))
   (in-app-template-response
    (common-lisp:error ":in-app-template-response is required") :type
    (common-lisp:or in-app-template-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-in-app-template-response
                    'make-get-in-app-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-app-template-response))
      (common-lisp:list
       (common-lisp:cons "InAppTemplateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-in-app-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'in-app-template-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-date-range-kpi-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-date-range-kpi-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-date-range-kpi-request
                    'make-get-journey-date-range-kpi-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-date-range-kpi-response-"))
   (journey-date-range-kpi-response
    (common-lisp:error ":journey-date-range-kpi-response is required") :type
    (common-lisp:or journey-date-range-kpi-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-date-range-kpi-response
                    'make-get-journey-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-date-range-kpi-response))
      (common-lisp:list
       (common-lisp:cons "JourneyDateRangeKpiResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-date-range-kpi-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-date-range-kpi-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-execution-activity-metrics-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-journey-execution-activity-metrics-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-activity-id (common-lisp:error ":journey-activity-id is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-execution-activity-metrics-request
                    'make-get-journey-execution-activity-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-execution-activity-metrics-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-journey-execution-activity-metrics-response-"))
   (journey-execution-activity-metrics-response
    (common-lisp:error
     ":journey-execution-activity-metrics-response is required")
    :type
    (common-lisp:or journey-execution-activity-metrics-response
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-execution-activity-metrics-response
                    'make-get-journey-execution-activity-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-execution-activity-metrics-response))
      (common-lisp:list
       (common-lisp:cons "JourneyExecutionActivityMetricsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-activity-metrics-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-execution-activity-metrics-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-execution-metrics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-execution-metrics-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-execution-metrics-request
                    'make-get-journey-execution-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-execution-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-execution-metrics-response-"))
   (journey-execution-metrics-response
    (common-lisp:error ":journey-execution-metrics-response is required") :type
    (common-lisp:or journey-execution-metrics-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-execution-metrics-response
                    'make-get-journey-execution-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-execution-metrics-response))
      (common-lisp:list
       (common-lisp:cons "JourneyExecutionMetricsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-execution-metrics-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-execution-metrics-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-request 'make-get-journey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-journey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-response-"))
   (journey-response (common-lisp:error ":journey-response is required") :type
    (common-lisp:or journey-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-response 'make-get-journey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-journey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-journey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-response))
      (common-lisp:list
       (common-lisp:cons "JourneyResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-journey-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journey-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-run-execution-activity-metrics-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-journey-run-execution-activity-metrics-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-activity-id (common-lisp:error ":journey-activity-id is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-run-execution-activity-metrics-request
                    'make-get-journey-run-execution-activity-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-run-execution-activity-metrics-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-journey-run-execution-activity-metrics-response-"))
   (journey-run-execution-activity-metrics-response
    (common-lisp:error
     ":journey-run-execution-activity-metrics-response is required")
    :type
    (common-lisp:or journey-run-execution-activity-metrics-response
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-run-execution-activity-metrics-response
                    'make-get-journey-run-execution-activity-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-run-execution-activity-metrics-response))
      (common-lisp:list
       (common-lisp:cons "JourneyRunExecutionActivityMetricsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-activity-metrics-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-run-execution-activity-metrics-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-run-execution-metrics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-run-execution-metrics-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-run-execution-metrics-request
                    'make-get-journey-run-execution-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-run-execution-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-run-execution-metrics-response-"))
   (journey-run-execution-metrics-response
    (common-lisp:error ":journey-run-execution-metrics-response is required")
    :type
    (common-lisp:or journey-run-execution-metrics-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-run-execution-metrics-response
                    'make-get-journey-run-execution-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-run-execution-metrics-response))
      (common-lisp:list
       (common-lisp:cons "JourneyRunExecutionMetricsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-run-execution-metrics-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-run-execution-metrics-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-runs-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-runs-request 'make-get-journey-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-journey-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-journey-runs-response-"))
   (journey-runs-response
    (common-lisp:error ":journey-runs-response is required") :type
    (common-lisp:or journey-runs-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-journey-runs-response
                    'make-get-journey-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-runs-response))
      (common-lisp:list
       (common-lisp:cons "JourneyRunsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-journey-runs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-runs-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-push-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-push-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-push-template-request
                    'make-get-push-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-push-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-push-template-response-"))
   (push-notification-template-response
    (common-lisp:error ":push-notification-template-response is required")
    :type
    (common-lisp:or push-notification-template-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-push-template-response
                    'make-get-push-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'push-notification-template-response))
      (common-lisp:list
       (common-lisp:cons "PushNotificationTemplateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-push-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'push-notification-template-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommender-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommender-configuration-request-"))
   (recommender-id (common-lisp:error ":recommender-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommender-configuration-request
                    'make-get-recommender-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommender-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommender-configuration-response-"))
   (recommender-configuration-response
    (common-lisp:error ":recommender-configuration-response is required") :type
    (common-lisp:or recommender-configuration-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommender-configuration-response
                    'make-get-recommender-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommender-configuration-response))
      (common-lisp:list
       (common-lisp:cons "RecommenderConfigurationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configuration-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'recommender-configuration-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommender-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommender-configurations-request-"))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommender-configurations-request
                    'make-get-recommender-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommender-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommender-configurations-response-"))
   (list-recommender-configurations-response
    (common-lisp:error ":list-recommender-configurations-response is required")
    :type
    (common-lisp:or list-recommender-configurations-response
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommender-configurations-response
                    'make-get-recommender-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-recommender-configurations-response))
      (common-lisp:list
       (common-lisp:cons "ListRecommenderConfigurationsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommender-configurations-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'list-recommender-configurations-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-export-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-export-jobs-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-export-jobs-request
                    'make-get-segment-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-export-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-export-jobs-response-"))
   (export-jobs-response
    (common-lisp:error ":export-jobs-response is required") :type
    (common-lisp:or export-jobs-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-export-jobs-response
                    'make-get-segment-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-jobs-response))
      (common-lisp:list
       (common-lisp:cons "ExportJobsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-export-jobs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'export-jobs-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-import-jobs-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-import-jobs-request
                    'make-get-segment-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-import-jobs-response-"))
   (import-jobs-response
    (common-lisp:error ":import-jobs-response is required") :type
    (common-lisp:or import-jobs-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-import-jobs-response
                    'make-get-segment-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-jobs-response))
      (common-lisp:list
       (common-lisp:cons "ImportJobsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-import-jobs-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'import-jobs-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-request 'make-get-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-response-"))
   (segment-response (common-lisp:error ":segment-response is required") :type
    (common-lisp:or segment-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-response 'make-get-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-response))
      (common-lisp:list
       (common-lisp:cons "SegmentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-segment-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segment-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-version-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-version-request
                    'make-get-segment-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-version-response-"))
   (segment-response (common-lisp:error ":segment-response is required") :type
    (common-lisp:or segment-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-version-response
                    'make-get-segment-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-response))
      (common-lisp:list
       (common-lisp:cons "SegmentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-version-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segment-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-versions-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-versions-request
                    'make-get-segment-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segment-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segment-versions-response-"))
   (segments-response (common-lisp:error ":segments-response is required")
    :type (common-lisp:or segments-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segment-versions-response
                    'make-get-segment-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-response))
      (common-lisp:list
       (common-lisp:cons "SegmentsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segment-versions-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segments-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segments-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segments-request 'make-get-segments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-segments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-segments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-segments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-segments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-segments-response-"))
   (segments-response (common-lisp:error ":segments-response is required")
    :type (common-lisp:or segments-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-segments-response 'make-get-segments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-segments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-segments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-response))
      (common-lisp:list
       (common-lisp:cons "SegmentsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-segments-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segments-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sms-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sms-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sms-channel-request 'make-get-sms-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sms-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sms-channel-response-"))
   (smschannel-response (common-lisp:error ":smschannel-response is required")
    :type (common-lisp:or smschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sms-channel-response 'make-get-sms-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smschannel-response))
      (common-lisp:list
       (common-lisp:cons "SMSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sms-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sms-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sms-template-request 'make-get-sms-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sms-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sms-template-response-"))
   (smstemplate-response
    (common-lisp:error ":smstemplate-response is required") :type
    (common-lisp:or smstemplate-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sms-template-response
                    'make-get-sms-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smstemplate-response))
      (common-lisp:list
       (common-lisp:cons "SMSTemplateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sms-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smstemplate-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-endpoints-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-endpoints-request
                    'make-get-user-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-endpoints-response-"))
   (endpoints-response (common-lisp:error ":endpoints-response is required")
    :type (common-lisp:or endpoints-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-endpoints-response
                    'make-get-user-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints-response))
      (common-lisp:list
       (common-lisp:cons "EndpointsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-endpoints-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'endpoints-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-channel-request
                    'make-get-voice-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-channel-response-"))
   (voice-channel-response
    (common-lisp:error ":voice-channel-response is required") :type
    (common-lisp:or voice-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-channel-response
                    'make-get-voice-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-channel-response))
      (common-lisp:list
       (common-lisp:cons "VoiceChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-template-request-"))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-template-request
                    'make-get-voice-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-template-response-"))
   (voice-template-response
    (common-lisp:error ":voice-template-response is required") :type
    (common-lisp:or voice-template-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-template-response
                    'make-get-voice-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-template-response))
      (common-lisp:list
       (common-lisp:cons "VoiceTemplateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-template-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (holdout-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-holdout-activity-"))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (percentage (common-lisp:error ":percentage is required") :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'holdout-activity 'make-holdout-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input holdout-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input holdout-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input holdout-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-request-"))
   (define-segment common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or format common-lisp:null))
   (register-endpoints common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3url (common-lisp:error ":s3url is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-job-request 'make-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'define-segment))
      (common-lisp:list
       (common-lisp:cons "DefineSegment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-endpoints))
      (common-lisp:list
       (common-lisp:cons "RegisterEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3url))
      (common-lisp:list
       (common-lisp:cons "S3Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-resource-"))
   (define-segment common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or format common-lisp:null))
   (register-endpoints common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3url (common-lisp:error ":s3url is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-job-resource 'make-import-job-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'define-segment))
      (common-lisp:list
       (common-lisp:cons "DefineSegment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-endpoints))
      (common-lisp:list
       (common-lisp:cons "RegisterEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3url))
      (common-lisp:list
       (common-lisp:cons "S3Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (completed-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (completion-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or import-job-resource common-lisp:null))
   (failed-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (failures common-lisp:nil :type
    (common-lisp:or list-of-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (job-status (common-lisp:error ":job-status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (total-failures common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-pieces common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-processed common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-job-response 'make-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-pieces))
      (common-lisp:list
       (common-lisp:cons "CompletedPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-pieces))
      (common-lisp:list
       (common-lisp:cons "FailedPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-failures))
      (common-lisp:list
       (common-lisp:cons "TotalFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-pieces))
      (common-lisp:list
       (common-lisp:cons "TotalPieces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-processed))
      (common-lisp:list
       (common-lisp:cons "TotalProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-jobs-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-import-job-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-jobs-response 'make-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-campaign-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-campaign-schedule-"))
   (end-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (event-filter common-lisp:nil :type
    (common-lisp:or campaign-event-filter common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-campaign-schedule 'make-in-app-campaign-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-campaign-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-campaign-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-filter))
      (common-lisp:list
       (common-lisp:cons "EventFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-campaign-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-"))
   (content common-lisp:nil :type
    (common-lisp:or list-of-in-app-message-content common-lisp:null))
   (custom-config common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (layout common-lisp:nil :type (common-lisp:or layout common-lisp:null)))
 (common-lisp:export (common-lisp:list 'in-app-message 'make-in-app-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input in-app-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input in-app-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-config))
      (common-lisp:list
       (common-lisp:cons "CustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input in-app-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message-body-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-body-config-"))
   (alignment (common-lisp:error ":alignment is required") :type
    (common-lisp:or alignment common-lisp:null))
   (body (common-lisp:error ":body is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (text-color (common-lisp:error ":text-color is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-message-body-config
                    'make-in-app-message-body-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-body-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-body-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-body-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message-button (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-button-"))
   (android common-lisp:nil :type
    (common-lisp:or override-button-configuration common-lisp:null))
   (default-config common-lisp:nil :type
    (common-lisp:or default-button-configuration common-lisp:null))
   (ios common-lisp:nil :type
    (common-lisp:or override-button-configuration common-lisp:null))
   (web common-lisp:nil :type
    (common-lisp:or override-button-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-message-button 'make-in-app-message-button))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'android))
      (common-lisp:list
       (common-lisp:cons "Android"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-config))
      (common-lisp:list
       (common-lisp:cons "DefaultConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ios))
      (common-lisp:list
       (common-lisp:cons "IOS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web))
      (common-lisp:list
       (common-lisp:cons "Web"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-button))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message-campaign (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-campaign-"))
   (campaign-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (daily-cap common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (in-app-message common-lisp:nil :type
    (common-lisp:or in-app-message common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or in-app-campaign-schedule common-lisp:null))
   (session-cap common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (total-cap common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (treatment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-message-campaign 'make-in-app-message-campaign))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-campaign))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-campaign))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "CampaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-cap))
      (common-lisp:list
       (common-lisp:cons "DailyCap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-app-message))
      (common-lisp:list
       (common-lisp:cons "InAppMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-cap))
      (common-lisp:list
       (common-lisp:cons "SessionCap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cap))
      (common-lisp:list
       (common-lisp:cons "TotalCap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-id))
      (common-lisp:list
       (common-lisp:cons "TreatmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-campaign))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message-content (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-content-"))
   (background-color common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (body-config common-lisp:nil :type
    (common-lisp:or in-app-message-body-config common-lisp:null))
   (header-config common-lisp:nil :type
    (common-lisp:or in-app-message-header-config common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (primary-btn common-lisp:nil :type
    (common-lisp:or in-app-message-button common-lisp:null))
   (secondary-btn common-lisp:nil :type
    (common-lisp:or in-app-message-button common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-message-content 'make-in-app-message-content))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body-config))
      (common-lisp:list
       (common-lisp:cons "BodyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header-config))
      (common-lisp:list
       (common-lisp:cons "HeaderConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-btn))
      (common-lisp:list
       (common-lisp:cons "PrimaryBtn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-btn))
      (common-lisp:list
       (common-lisp:cons "SecondaryBtn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-message-header-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-message-header-config-"))
   (alignment (common-lisp:error ":alignment is required") :type
    (common-lisp:or alignment common-lisp:null))
   (header (common-lisp:error ":header is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (text-color (common-lisp:error ":text-color is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-message-header-config
                    'make-in-app-message-header-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-header-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-header-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-color))
      (common-lisp:list
       (common-lisp:cons "TextColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-message-header-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-messages-response-"))
   (in-app-message-campaigns common-lisp:nil :type
    (common-lisp:or list-of-in-app-message-campaign common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-messages-response 'make-in-app-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-app-message-campaigns))
      (common-lisp:list
       (common-lisp:cons "InAppMessageCampaigns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-template-request-"))
   (content common-lisp:nil :type
    (common-lisp:or list-of-in-app-message-content common-lisp:null))
   (custom-config common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (layout common-lisp:nil :type (common-lisp:or layout common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-template-request 'make-in-app-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-config))
      (common-lisp:list
       (common-lisp:cons "CustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (in-app-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-in-app-template-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or list-of-in-app-message-content common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (custom-config common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (layout common-lisp:nil :type (common-lisp:or layout common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'in-app-template-response 'make-in-app-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-config))
      (common-lisp:list
       (common-lisp:cons "CustomConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          in-app-template-response))
   common-lisp:nil))
(common-lisp:deftype include () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       internal-server-error-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message
                    'internal-server-error-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (item-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-item-response-"))
   (endpoint-item-response common-lisp:nil :type
    (common-lisp:or endpoint-item-response common-lisp:null))
   (events-item-response common-lisp:nil :type
    (common-lisp:or map-of-event-item-response common-lisp:null)))
 (common-lisp:export (common-lisp:list 'item-response 'make-item-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-item-response))
      (common-lisp:list
       (common-lisp:cons "EndpointItemResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-item-response))
      (common-lisp:list
       (common-lisp:cons "EventsItemResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item-response))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (journey-custom-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-custom-message-"))
   (data common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-custom-message 'make-journey-custom-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-custom-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-custom-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-custom-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-date-range-kpi-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-date-range-kpi-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (kpi-name (common-lisp:error ":kpi-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (kpi-result (common-lisp:error ":kpi-result is required") :type
    (common-lisp:or base-kpi-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or |__timestampIso8601| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-date-range-kpi-response
                    'make-journey-date-range-kpi-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-date-range-kpi-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-date-range-kpi-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-id))
      (common-lisp:list
       (common-lisp:cons "JourneyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-name))
      (common-lisp:list
       (common-lisp:cons "KpiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kpi-result))
      (common-lisp:list
       (common-lisp:cons "KpiResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-date-range-kpi-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-email-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-email-message-"))
   (from-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-email-message 'make-journey-email-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-email-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-email-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-address))
      (common-lisp:list
       (common-lisp:cons "FromAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-email-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-execution-activity-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-execution-activity-metrics-response-"))
   (activity-type (common-lisp:error ":activity-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-activity-id (common-lisp:error ":journey-activity-id is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-evaluated-time (common-lisp:error ":last-evaluated-time is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-execution-activity-metrics-response
                    'make-journey-execution-activity-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-activity-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-activity-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "ActivityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-activity-id))
      (common-lisp:list
       (common-lisp:cons "JourneyActivityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-id))
      (common-lisp:list
       (common-lisp:cons "JourneyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-activity-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-execution-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-execution-metrics-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-evaluated-time (common-lisp:error ":last-evaluated-time is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-execution-metrics-response
                    'make-journey-execution-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-id))
      (common-lisp:list
       (common-lisp:cons "JourneyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-execution-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-limits-"))
   (daily-cap common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (endpoint-reentry-cap common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (messages-per-second common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (endpoint-reentry-interval common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'journey-limits 'make-journey-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'daily-cap))
      (common-lisp:list
       (common-lisp:cons "DailyCap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-reentry-cap))
      (common-lisp:list
       (common-lisp:cons "EndpointReentryCap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages-per-second))
      (common-lisp:list
       (common-lisp:cons "MessagesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-reentry-interval))
      (common-lisp:list
       (common-lisp:cons "EndpointReentryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-push-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-push-message-"))
   (time-to-live common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-push-message 'make-journey-push-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-push-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-push-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-push-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-channel-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-channel-settings-"))
   (connect-campaign-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (connect-campaign-execution-role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-channel-settings 'make-journey-channel-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-channel-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-channel-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-campaign-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectCampaignArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-campaign-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectCampaignExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-channel-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-response-"))
   (activities common-lisp:nil :type
    (common-lisp:or map-of-activity common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or journey-limits common-lisp:null))
   (local-time common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null))
   (refresh-frequency common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or journey-schedule common-lisp:null))
   (start-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-condition common-lisp:nil :type
    (common-lisp:or start-condition common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (wait-for-quiet-time common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (refresh-on-segment-update common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (journey-channel-settings common-lisp:nil :type
    (common-lisp:or journey-channel-settings common-lisp:null))
   (sending-schedule common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (open-hours common-lisp:nil :type
    (common-lisp:or open-hours common-lisp:null))
   (closed-days common-lisp:nil :type
    (common-lisp:or closed-days common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-response 'make-journey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-time))
      (common-lisp:list
       (common-lisp:cons "LocalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-frequency))
      (common-lisp:list
       (common-lisp:cons "RefreshFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-activity))
      (common-lisp:list
       (common-lisp:cons "StartActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-condition))
      (common-lisp:list
       (common-lisp:cons "StartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-for-quiet-time))
      (common-lisp:list
       (common-lisp:cons "WaitForQuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-on-segment-update))
      (common-lisp:list
       (common-lisp:cons "RefreshOnSegmentUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-channel-settings))
      (common-lisp:list
       (common-lisp:cons "JourneyChannelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sending-schedule))
      (common-lisp:list
       (common-lisp:cons "SendingSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-hours))
      (common-lisp:list
       (common-lisp:cons "OpenHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'closed-days))
      (common-lisp:list
       (common-lisp:cons "ClosedDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-run-execution-activity-metrics-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-journey-run-execution-activity-metrics-response-"))
   (activity-type (common-lisp:error ":activity-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-activity-id (common-lisp:error ":journey-activity-id is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-evaluated-time (common-lisp:error ":last-evaluated-time is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or map-of-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-run-execution-activity-metrics-response
                    'make-journey-run-execution-activity-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-activity-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-activity-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activity-type))
      (common-lisp:list
       (common-lisp:cons "ActivityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-activity-id))
      (common-lisp:list
       (common-lisp:cons "JourneyActivityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-id))
      (common-lisp:list
       (common-lisp:cons "JourneyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-activity-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-run-execution-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-run-execution-metrics-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-evaluated-time (common-lisp:error ":last-evaluated-time is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or map-of-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-run-execution-metrics-response
                    'make-journey-run-execution-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-id))
      (common-lisp:list
       (common-lisp:cons "JourneyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-time))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-run-execution-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-run-response-"))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-update-time (common-lisp:error ":last-update-time is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or journey-run-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-run-response 'make-journey-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-runs-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-journey-run-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-runs-response 'make-journey-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-runs-response))
   common-lisp:nil))
(common-lisp:deftype journey-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (journey-smsmessage (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-smsmessage-"))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (origination-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-smsmessage 'make-journey-smsmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-smsmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-smsmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origination-number))
      (common-lisp:list
       (common-lisp:cons "OriginationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-smsmessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-schedule-"))
   (end-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or |__timestampIso8601| common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-schedule 'make-journey-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journey-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journey-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journey-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journey-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-journey-state-request-"))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journey-state-request 'make-journey-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journey-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journey-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journey-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (journeys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-journeys-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-journey-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journeys-response 'make-journeys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input journeys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input journeys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input journeys-response))
   common-lisp:nil))
(common-lisp:deftype layout () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-journeys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journeys-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journeys-request 'make-list-journeys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journeys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journeys-response-"))
   (journeys-response (common-lisp:error ":journeys-response is required")
    :type (common-lisp:or journeys-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journeys-response 'make-list-journeys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journeys-response))
      (common-lisp:list
       (common-lisp:cons "JourneysResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journeys-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journeys-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommender-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommender-configurations-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-recommender-configuration-response
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommender-configurations-response
                    'make-list-recommender-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommender-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommender-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommender-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags-model (common-lisp:error ":tags-model is required") :type
    (common-lisp:or tags-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-model))
      (common-lisp:list
       (common-lisp:cons "TagsModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tags-model)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-versions-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-request
                    'make-list-template-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-template-versions-response-"))
   (template-versions-response
    (common-lisp:error ":template-versions-response is required") :type
    (common-lisp:or template-versions-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-versions-response
                    'make-list-template-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-versions-response))
      (common-lisp:list
       (common-lisp:cons "TemplateVersionsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-versions-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'template-versions-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (template-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-response-"))
   (templates-response (common-lisp:error ":templates-response is required")
    :type (common-lisp:or templates-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates-response))
      (common-lisp:list
       (common-lisp:cons "TemplatesResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'templates-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (message (:copier common-lisp:nil) (:conc-name "struct-shape-message-"))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (image-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-small-icon-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (json-body common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (media-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (raw-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (silent-push common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (time-to-live common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-small-icon-url))
      (common-lisp:list
       (common-lisp:cons "ImageSmallIconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "ImageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-body))
      (common-lisp:list
       (common-lisp:cons "JsonBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-url))
      (common-lisp:list
       (common-lisp:cons "MediaUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-content))
      (common-lisp:list
       (common-lisp:cons "RawContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'silent-push))
      (common-lisp:list
       (common-lisp:cons "SilentPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "TimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (message-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-body-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message-body 'make-message-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (message-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-configuration-"))
   (admmessage common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (apnsmessage common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (baidu-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (custom-message common-lisp:nil :type
    (common-lisp:or campaign-custom-message common-lisp:null))
   (default-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (email-message common-lisp:nil :type
    (common-lisp:or campaign-email-message common-lisp:null))
   (gcmmessage common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (smsmessage common-lisp:nil :type
    (common-lisp:or campaign-sms-message common-lisp:null))
   (in-app-message common-lisp:nil :type
    (common-lisp:or campaign-in-app-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'message-configuration 'make-message-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admmessage))
      (common-lisp:list
       (common-lisp:cons "ADMMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apnsmessage))
      (common-lisp:list
       (common-lisp:cons "APNSMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baidu-message))
      (common-lisp:list
       (common-lisp:cons "BaiduMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-message))
      (common-lisp:list
       (common-lisp:cons "CustomMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-message))
      (common-lisp:list
       (common-lisp:cons "DefaultMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmmessage))
      (common-lisp:list
       (common-lisp:cons "GCMMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smsmessage))
      (common-lisp:list
       (common-lisp:cons "SMSMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-app-message))
      (common-lisp:list
       (common-lisp:cons "InAppMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-request-"))
   (addresses common-lisp:nil :type
    (common-lisp:or map-of-address-configuration common-lisp:null))
   (context common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or map-of-endpoint-send-configuration common-lisp:null))
   (message-configuration
    (common-lisp:error ":message-configuration is required") :type
    (common-lisp:or direct-message-configuration common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (trace-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message-request 'make-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'addresses))
      (common-lisp:list
       (common-lisp:cons "Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "TraceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-result common-lisp:nil :type
    (common-lisp:or map-of-endpoint-message-result common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or map-of-message-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'message-response 'make-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-result))
      (common-lisp:list
       (common-lisp:cons "EndpointResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (message-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-message-result-"))
   (delivery-status (common-lisp:error ":delivery-status is required") :type
    (common-lisp:or delivery-status common-lisp:null))
   (message-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (status-code (common-lisp:error ":status-code is required") :type
    (common-lisp:or |__integer| common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (updated-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message-result 'make-message-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-status))
      (common-lisp:list
       (common-lisp:cons "DeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-token))
      (common-lisp:list
       (common-lisp:cons "UpdatedToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-result))
   common-lisp:nil))
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition method-not-allowed-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       method-not-allowed-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       method-not-allowed-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'method-not-allowed-exception
                    'method-not-allowed-exception-message
                    'method-not-allowed-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-dimension-"))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-conditional-branch (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-conditional-branch-"))
   (condition common-lisp:nil :type
    (common-lisp:or simple-condition common-lisp:null))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-conditional-branch 'make-multi-conditional-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multi-conditional-split-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-conditional-split-activity-"))
   (branches common-lisp:nil :type
    (common-lisp:or list-of-multi-conditional-branch common-lisp:null))
   (default-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (evaluation-wait-time common-lisp:nil :type
    (common-lisp:or wait-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-conditional-split-activity
                    'make-multi-conditional-split-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-split-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-split-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "Branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-activity))
      (common-lisp:list
       (common-lisp:cons "DefaultActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-wait-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationWaitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-conditional-split-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message
                    'not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (number-validate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-validate-request-"))
   (iso-country-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (phone-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-validate-request 'make-number-validate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-country-code))
      (common-lisp:list
       (common-lisp:cons "IsoCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (number-validate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-validate-response-"))
   (carrier common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (city common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cleansed-phone-number-e164 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (cleansed-phone-number-national common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (country-code-iso2 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (country-code-numeric common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (county common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (original-country-code-iso2 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (original-phone-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (phone-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (phone-type-code common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (zip-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'number-validate-response 'make-number-validate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'carrier))
      (common-lisp:list
       (common-lisp:cons "Carrier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cleansed-phone-number-e164))
      (common-lisp:list
       (common-lisp:cons "CleansedPhoneNumberE164"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cleansed-phone-number-national))
      (common-lisp:list
       (common-lisp:cons "CleansedPhoneNumberNational"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code-iso2))
      (common-lisp:list
       (common-lisp:cons "CountryCodeIso2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'country-code-numeric))
      (common-lisp:list
       (common-lisp:cons "CountryCodeNumeric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'county))
      (common-lisp:list
       (common-lisp:cons "County"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-country-code-iso2))
      (common-lisp:list
       (common-lisp:cons "OriginalCountryCodeIso2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-phone-number))
      (common-lisp:list
       (common-lisp:cons "OriginalPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-type))
      (common-lisp:list
       (common-lisp:cons "PhoneType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-type-code))
      (common-lisp:list
       (common-lisp:cons "PhoneTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-code))
      (common-lisp:list
       (common-lisp:cons "ZipCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          number-validate-response))
   common-lisp:nil))
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (override-button-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-override-button-configuration-"))
   (button-action (common-lisp:error ":button-action is required") :type
    (common-lisp:or button-action common-lisp:null))
   (link common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'override-button-configuration
                    'make-override-button-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          override-button-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          override-button-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'button-action))
      (common-lisp:list
       (common-lisp:cons "ButtonAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          override-button-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition payload-too-large-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       payload-too-large-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       payload-too-large-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'payload-too-large-exception
                    'payload-too-large-exception-message
                    'payload-too-large-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-validate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-validate-request-"))
   (number-validate-request
    (common-lisp:error ":number-validate-request is required") :type
    (common-lisp:or number-validate-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-validate-request
                    'make-phone-number-validate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-validate-request))
      (common-lisp:list
       (common-lisp:cons "NumberValidateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'number-validate-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (phone-number-validate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-phone-number-validate-response-"))
   (number-validate-response
    (common-lisp:error ":number-validate-response is required") :type
    (common-lisp:or number-validate-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'phone-number-validate-response
                    'make-phone-number-validate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-validate-response))
      (common-lisp:list
       (common-lisp:cons "NumberValidateResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          phone-number-validate-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'number-validate-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (public-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or channel-type common-lisp:null))
   (demographic common-lisp:nil :type
    (common-lisp:or endpoint-demographic common-lisp:null))
   (effective-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or endpoint-location common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-double common-lisp:null))
   (opt-out common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or endpoint-user common-lisp:null)))
 (common-lisp:export (common-lisp:list 'public-endpoint 'make-public-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demographic))
      (common-lisp:list
       (common-lisp:cons "Demographic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date))
      (common-lisp:list
       (common-lisp:cons "EffectiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-out))
      (common-lisp:list
       (common-lisp:cons "OptOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (push-message-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-push-message-activity-"))
   (message-config common-lisp:nil :type
    (common-lisp:or journey-push-message common-lisp:null))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'push-message-activity 'make-push-message-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          push-message-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          push-message-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-config))
      (common-lisp:list
       (common-lisp:cons "MessageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "TemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          push-message-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (push-notification-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-push-notification-template-request-"))
   (adm common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (apns common-lisp:nil :type
    (common-lisp:or apnspush-notification-template common-lisp:null))
   (baidu common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (default common-lisp:nil :type
    (common-lisp:or default-push-notification-template common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (gcm common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'push-notification-template-request
                    'make-push-notification-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adm))
      (common-lisp:list
       (common-lisp:cons "ADM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apns))
      (common-lisp:list
       (common-lisp:cons "APNS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baidu))
      (common-lisp:list
       (common-lisp:cons "Baidu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default))
      (common-lisp:list
       (common-lisp:cons "Default"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcm))
      (common-lisp:list
       (common-lisp:cons "GCM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (push-notification-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-push-notification-template-response-"))
   (adm common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (apns common-lisp:nil :type
    (common-lisp:or apnspush-notification-template common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (baidu common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default common-lisp:nil :type
    (common-lisp:or default-push-notification-template common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (gcm common-lisp:nil :type
    (common-lisp:or android-push-notification-template common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'push-notification-template-response
                    'make-push-notification-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adm))
      (common-lisp:list
       (common-lisp:cons "ADM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apns))
      (common-lisp:list
       (common-lisp:cons "APNS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baidu))
      (common-lisp:list
       (common-lisp:cons "Baidu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default))
      (common-lisp:list
       (common-lisp:cons "Default"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcm))
      (common-lisp:list
       (common-lisp:cons "GCM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          push-notification-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-stream-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-event-stream (common-lisp:error ":write-event-stream is required")
    :type (common-lisp:or write-event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-event-stream-request 'make-put-event-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-event-stream))
      (common-lisp:list
       (common-lisp:cons "WriteEventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'write-event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-stream-response-"))
   (event-stream (common-lisp:error ":event-stream is required") :type
    (common-lisp:or event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-event-stream-response
                    'make-put-event-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stream))
      (common-lisp:list
       (common-lisp:cons "EventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-stream-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (events-request (common-lisp:error ":events-request is required") :type
    (common-lisp:or events-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-request 'make-put-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events-request))
      (common-lisp:list
       (common-lisp:cons "EventsRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'events-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (put-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-events-response-"))
   (events-response (common-lisp:error ":events-response is required") :type
    (common-lisp:or events-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-events-response 'make-put-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events-response))
      (common-lisp:list
       (common-lisp:cons "EventsResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-events-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'events-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (quiet-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-quiet-time-"))
   (end common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'quiet-time 'make-quiet-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quiet-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quiet-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quiet-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (random-split-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-random-split-activity-"))
   (branches common-lisp:nil :type
    (common-lisp:or list-of-random-split-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'random-split-activity 'make-random-split-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          random-split-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          random-split-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "Branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          random-split-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (random-split-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-random-split-entry-"))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (percentage common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'random-split-entry 'make-random-split-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input random-split-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input random-split-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input random-split-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raw-email (:copier common-lisp:nil)
      (:conc-name "struct-shape-raw-email-"))
   (data common-lisp:nil :type (common-lisp:or |__blob| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'raw-email 'make-raw-email))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-email))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-email))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-email))
   common-lisp:nil))
(common-lisp:deftype |__blob| ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (recency-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-recency-dimension-"))
   (duration (common-lisp:error ":duration is required") :type
    (common-lisp:or duration common-lisp:null))
   (recency-type (common-lisp:error ":recency-type is required") :type
    (common-lisp:or recency-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recency-dimension 'make-recency-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recency-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recency-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recency-type))
      (common-lisp:list
       (common-lisp:cons "RecencyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recency-dimension))
   common-lisp:nil))
(common-lisp:deftype recency-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommender-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommender-configuration-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-id-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-role-arn
    (common-lisp:error ":recommendation-provider-role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-uri
    (common-lisp:error ":recommendation-provider-uri is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-transformer-uri common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-display-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-per-message common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommender-configuration-response
                    'make-recommender-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommender-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommender-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-id-type))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-role-arn))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-transformer-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationTransformerUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-display-name))
      (common-lisp:list
       (common-lisp:cons "RecommendationsDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-per-message))
      (common-lisp:list
       (common-lisp:cons "RecommendationsPerMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommender-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-attributes-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (attribute-type (common-lisp:error ":attribute-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (update-attributes-request
    (common-lisp:error ":update-attributes-request is required") :type
    (common-lisp:or update-attributes-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-request
                    'make-remove-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-attributes-request))
      (common-lisp:list
       (common-lisp:cons "UpdateAttributesRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'update-attributes-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-attributes-response-"))
   (attributes-resource (common-lisp:error ":attributes-resource is required")
    :type (common-lisp:or attributes-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-response
                    'make-remove-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes-resource))
      (common-lisp:list
       (common-lisp:cons "AttributesResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'attributes-resource)))
(common-lisp:progn
 (common-lisp:defstruct
     (result-row (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-row-"))
   (grouped-bys (common-lisp:error ":grouped-bys is required") :type
    (common-lisp:or list-of-result-row-value common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or list-of-result-row-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result-row 'make-result-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grouped-bys))
      (common-lisp:list
       (common-lisp:cons "GroupedBys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (result-row-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-row-value-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'result-row-value 'make-result-row-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-row-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-row-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-row-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smschannel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-smschannel-request-"))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (short-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'smschannel-request 'make-smschannel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smschannel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smschannel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-code))
      (common-lisp:list
       (common-lisp:cons "ShortCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smschannel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smschannel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-smschannel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (promotional-messages-per-second common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (short-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transactional-messages-per-second common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'smschannel-response 'make-smschannel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smschannel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smschannel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'promotional-messages-per-second))
      (common-lisp:list
       (common-lisp:cons "PromotionalMessagesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-code))
      (common-lisp:list
       (common-lisp:cons "ShortCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transactional-messages-per-second))
      (common-lisp:list
       (common-lisp:cons "TransactionalMessagesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smschannel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smsmessage (:copier common-lisp:nil)
      (:conc-name "struct-shape-smsmessage-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (keyword common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (media-url common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (message-type common-lisp:nil :type
    (common-lisp:or message-type common-lisp:null))
   (origination-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'smsmessage 'make-smsmessage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smsmessage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smsmessage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-url))
      (common-lisp:list
       (common-lisp:cons "MediaUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origination-number))
      (common-lisp:list
       (common-lisp:cons "OriginationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-id))
      (common-lisp:list
       (common-lisp:cons "SenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smsmessage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smsmessage-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-smsmessage-activity-"))
   (message-config common-lisp:nil :type
    (common-lisp:or journey-smsmessage common-lisp:null))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'smsmessage-activity 'make-smsmessage-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smsmessage-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smsmessage-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-config))
      (common-lisp:list
       (common-lisp:cons "MessageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "TemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smsmessage-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smstemplate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-smstemplate-request-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'smstemplate-request 'make-smstemplate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smstemplate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smstemplate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smstemplate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (smstemplate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-smstemplate-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (recommender-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'smstemplate-response 'make-smstemplate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input smstemplate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input smstemplate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommender-id))
      (common-lisp:list
       (common-lisp:cons "RecommenderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input smstemplate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (end-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (event-filter common-lisp:nil :type
    (common-lisp:or campaign-event-filter common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or frequency common-lisp:null))
   (is-local-time common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-filter))
      (common-lisp:list
       (common-lisp:cons "EventFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-local-time))
      (common-lisp:list
       (common-lisp:cons "IsLocalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-behaviors (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-behaviors-"))
   (recency common-lisp:nil :type
    (common-lisp:or recency-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-behaviors 'make-segment-behaviors))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-behaviors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-behaviors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recency))
      (common-lisp:list
       (common-lisp:cons "Recency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-behaviors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-condition-"))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-condition 'make-segment-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-demographics (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-demographics-"))
   (app-version common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (channel common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (device-type common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (make common-lisp:nil :type (common-lisp:or set-dimension common-lisp:null))
   (model common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-demographics 'make-segment-demographics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-demographics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-demographics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-version))
      (common-lisp:list
       (common-lisp:cons "AppVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'make))
      (common-lisp:list
       (common-lisp:cons "Make"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-demographics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-dimensions (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-dimensions-"))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-attribute-dimension common-lisp:null))
   (behavior common-lisp:nil :type
    (common-lisp:or segment-behaviors common-lisp:null))
   (demographic common-lisp:nil :type
    (common-lisp:or segment-demographics common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or segment-location common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or map-of-metric-dimension common-lisp:null))
   (user-attributes common-lisp:nil :type
    (common-lisp:or map-of-attribute-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-dimensions 'make-segment-dimensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-dimensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-dimensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demographic))
      (common-lisp:list
       (common-lisp:cons "Demographic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "UserAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-dimensions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-group-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or list-of-segment-dimensions common-lisp:null))
   (source-segments common-lisp:nil :type
    (common-lisp:or list-of-segment-reference common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'segment-group 'make-segment-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-segments))
      (common-lisp:list
       (common-lisp:cons "SourceSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-group-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-group-list-"))
   (groups common-lisp:nil :type
    (common-lisp:or list-of-segment-group common-lisp:null))
   (include common-lisp:nil :type (common-lisp:or include common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-group-list 'make-segment-group-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-group-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-group-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include))
      (common-lisp:list
       (common-lisp:cons "Include"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-group-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-import-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-import-resource-"))
   (channel-counts common-lisp:nil :type
    (common-lisp:or map-of-integer common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or format common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (s3url (common-lisp:error ":s3url is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-import-resource 'make-segment-import-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          segment-import-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          segment-import-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-counts))
      (common-lisp:list
       (common-lisp:cons "ChannelCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3url))
      (common-lisp:list
       (common-lisp:cons "S3Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          segment-import-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-location-"))
   (country common-lisp:nil :type
    (common-lisp:or set-dimension common-lisp:null))
   (gpspoint common-lisp:nil :type
    (common-lisp:or gpspoint-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-location 'make-segment-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gpspoint))
      (common-lisp:list
       (common-lisp:cons "GPSPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-reference-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-reference 'make-segment-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-segment-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or segment-dimensions common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (import-definition common-lisp:nil :type
    (common-lisp:or segment-import-resource common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (segment-groups common-lisp:nil :type
    (common-lisp:or segment-group-list common-lisp:null))
   (segment-type (common-lisp:error ":segment-type is required") :type
    (common-lisp:or segment-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segment-response 'make-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-definition))
      (common-lisp:list
       (common-lisp:cons "ImportDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-groups))
      (common-lisp:list
       (common-lisp:cons "SegmentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-type))
      (common-lisp:list
       (common-lisp:cons "SegmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment-response))
   common-lisp:nil))
(common-lisp:deftype segment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (segments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-segments-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-segment-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'segments-response 'make-segments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-messages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-messages-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (message-request (common-lisp:error ":message-request is required") :type
    (common-lisp:or message-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-messages-request 'make-send-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-request))
      (common-lisp:list
       (common-lisp:cons "MessageRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (send-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-messages-response-"))
   (message-response (common-lisp:error ":message-response is required") :type
    (common-lisp:or message-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-messages-response 'make-send-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-response))
      (common-lisp:list
       (common-lisp:cons "MessageResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-messages-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (send-otpmessage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-otpmessage-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (send-otpmessage-request-parameters
    (common-lisp:error ":send-otpmessage-request-parameters is required") :type
    (common-lisp:or send-otpmessage-request-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-otpmessage-request 'make-send-otpmessage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'send-otpmessage-request-parameters))
      (common-lisp:list
       (common-lisp:cons "SendOTPMessageRequestParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'send-otpmessage-request-parameters)))
(common-lisp:progn
 (common-lisp:defstruct
     (send-otpmessage-request-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-otpmessage-request-parameters-"))
   (allowed-attempts common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (brand-name (common-lisp:error ":brand-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (code-length common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (destination-identity
    (common-lisp:error ":destination-identity is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (language common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (origination-identity
    (common-lisp:error ":origination-identity is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (validity-period common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-otpmessage-request-parameters
                    'make-send-otpmessage-request-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-attempts))
      (common-lisp:list
       (common-lisp:cons "AllowedAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brand-name))
      (common-lisp:list
       (common-lisp:cons "BrandName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-length))
      (common-lisp:list
       (common-lisp:cons "CodeLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-identity))
      (common-lisp:list
       (common-lisp:cons "DestinationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origination-identity))
      (common-lisp:list
       (common-lisp:cons "OriginationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "TemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-period))
      (common-lisp:list
       (common-lisp:cons "ValidityPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-otpmessage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-otpmessage-response-"))
   (message-response (common-lisp:error ":message-response is required") :type
    (common-lisp:or message-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-otpmessage-response 'make-send-otpmessage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-response))
      (common-lisp:list
       (common-lisp:cons "MessageResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-otpmessage-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (send-users-message-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-users-message-request-"))
   (context common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (message-configuration
    (common-lisp:error ":message-configuration is required") :type
    (common-lisp:or direct-message-configuration common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (trace-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (users (common-lisp:error ":users is required") :type
    (common-lisp:or map-of-endpoint-send-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-users-message-request
                    'make-send-users-message-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-id))
      (common-lisp:list
       (common-lisp:cons "TraceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-users-message-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-users-message-response-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or map-of-map-of-endpoint-message-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-users-message-response
                    'make-send-users-message-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-users-message-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-users-messages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-users-messages-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (send-users-message-request
    (common-lisp:error ":send-users-message-request is required") :type
    (common-lisp:or send-users-message-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-users-messages-request
                    'make-send-users-messages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'send-users-message-request))
      (common-lisp:list
       (common-lisp:cons "SendUsersMessageRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'send-users-message-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (send-users-messages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-users-messages-response-"))
   (send-users-message-response
    (common-lisp:error ":send-users-message-response is required") :type
    (common-lisp:or send-users-message-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-users-messages-response
                    'make-send-users-messages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'send-users-message-response))
      (common-lisp:list
       (common-lisp:cons "SendUsersMessageResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-users-messages-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'send-users-message-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (session (:copier common-lisp:nil) (:conc-name "struct-shape-session-"))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (start-timestamp (common-lisp:error ":start-timestamp is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (stop-timestamp common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timestamp))
      (common-lisp:list
       (common-lisp:cons "StopTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-dimension-"))
   (dimension-type common-lisp:nil :type
    (common-lisp:or dimension-type common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or list-of-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'set-dimension 'make-set-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-type))
      (common-lisp:list
       (common-lisp:cons "DimensionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simple-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-condition-"))
   (event-condition common-lisp:nil :type
    (common-lisp:or event-condition common-lisp:null))
   (segment-condition common-lisp:nil :type
    (common-lisp:or segment-condition common-lisp:null))
   (segment-dimensions common-lisp:nil :type
    (common-lisp:or segment-dimensions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simple-condition 'make-simple-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-condition))
      (common-lisp:list
       (common-lisp:cons "EventCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-condition))
      (common-lisp:list
       (common-lisp:cons "SegmentCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-dimensions))
      (common-lisp:list
       (common-lisp:cons "SegmentDimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simple-email (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-email-"))
   (html-part common-lisp:nil :type
    (common-lisp:or simple-email-part common-lisp:null))
   (subject common-lisp:nil :type
    (common-lisp:or simple-email-part common-lisp:null))
   (text-part common-lisp:nil :type
    (common-lisp:or simple-email-part common-lisp:null)))
 (common-lisp:export (common-lisp:list 'simple-email 'make-simple-email))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-email))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-email))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'html-part))
      (common-lisp:list
       (common-lisp:cons "HtmlPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-part))
      (common-lisp:list
       (common-lisp:cons "TextPart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-email))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simple-email-part (:copier common-lisp:nil)
      (:conc-name "struct-shape-simple-email-part-"))
   (charset common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simple-email-part 'make-simple-email-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-email-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-email-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'charset))
      (common-lisp:list
       (common-lisp:cons "Charset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-email-part))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-condition-"))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (event-start-condition common-lisp:nil :type
    (common-lisp:or event-start-condition common-lisp:null))
   (segment-start-condition common-lisp:nil :type
    (common-lisp:or segment-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'start-condition 'make-start-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-start-condition))
      (common-lisp:list
       (common-lisp:cons "EventStartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-start-condition))
      (common-lisp:list
       (common-lisp:cons "SegmentStartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-condition))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags-model (common-lisp:error ":tags-model is required") :type
    (common-lisp:or tags-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-model))
      (common-lisp:list
       (common-lisp:cons "TagsModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tags-model)))
(common-lisp:progn
 (common-lisp:defstruct
     (tags-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-tags-model-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tags-model 'make-tags-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template (:copier common-lisp:nil) (:conc-name "struct-shape-template-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-active-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-active-version-request-"))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-active-version-request
                    'make-template-active-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-active-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-active-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-active-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-configuration-"))
   (email-template common-lisp:nil :type
    (common-lisp:or template common-lisp:null))
   (push-template common-lisp:nil :type
    (common-lisp:or template common-lisp:null))
   (smstemplate common-lisp:nil :type
    (common-lisp:or template common-lisp:null))
   (voice-template common-lisp:nil :type
    (common-lisp:or template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-configuration 'make-template-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-template))
      (common-lisp:list
       (common-lisp:cons "EmailTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-template))
      (common-lisp:list
       (common-lisp:cons "PushTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smstemplate))
      (common-lisp:list
       (common-lisp:cons "SMSTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-template))
      (common-lisp:list
       (common-lisp:cons "VoiceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-create-message-body (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-create-message-body-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-create-message-body
                    'make-template-create-message-body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-create-message-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-create-message-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-create-message-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-response 'make-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-response))
   common-lisp:nil))
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-version-response-"))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-version-response
                    'make-template-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-versions-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-template-version-response common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-versions-response
                    'make-template-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-templates-response-"))
   (item (common-lisp:error ":item is required") :type
    (common-lisp:or list-of-template-response common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'templates-response 'make-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item))
      (common-lisp:list
       (common-lisp:cons "Item"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (pinpoint-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       too-many-requests-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message
                    'too-many-requests-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (treatment-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-treatment-resource-"))
   (custom-delivery-configuration common-lisp:nil :type
    (common-lisp:or custom-delivery-configuration common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (message-configuration common-lisp:nil :type
    (common-lisp:or message-configuration common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (size-percent (common-lisp:error ":size-percent is required") :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or campaign-state common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (treatment-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'treatment-resource 'make-treatment-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input treatment-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input treatment-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-percent))
      (common-lisp:list
       (common-lisp:cons "SizePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'treatment-description))
      (common-lisp:list
       (common-lisp:cons "TreatmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "TreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input treatment-resource))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or list-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-adm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-adm-channel-request-"))
   (admchannel-request (common-lisp:error ":admchannel-request is required")
    :type (common-lisp:or admchannel-request common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-adm-channel-request
                    'make-update-adm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admchannel-request))
      (common-lisp:list
       (common-lisp:cons "ADMChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'admchannel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-adm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-adm-channel-response-"))
   (admchannel-response (common-lisp:error ":admchannel-response is required")
    :type (common-lisp:or admchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-adm-channel-response
                    'make-update-adm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admchannel-response))
      (common-lisp:list
       (common-lisp:cons "ADMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-adm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'admchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-channel-request-"))
   (apnschannel-request (common-lisp:error ":apnschannel-request is required")
    :type (common-lisp:or apnschannel-request common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-channel-request
                    'make-update-apns-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apnschannel-request))
      (common-lisp:list
       (common-lisp:cons "APNSChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnschannel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-channel-response-"))
   (apnschannel-response
    (common-lisp:error ":apnschannel-response is required") :type
    (common-lisp:or apnschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-channel-response
                    'make-update-apns-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnschannel-response))
      (common-lisp:list
       (common-lisp:cons "APNSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-sandbox-channel-request-"))
   (apnssandbox-channel-request
    (common-lisp:error ":apnssandbox-channel-request is required") :type
    (common-lisp:or apnssandbox-channel-request common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-sandbox-channel-request
                    'make-update-apns-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnssandbox-channel-request))
      (common-lisp:list
       (common-lisp:cons "APNSSandboxChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnssandbox-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-sandbox-channel-response-"))
   (apnssandbox-channel-response
    (common-lisp:error ":apnssandbox-channel-response is required") :type
    (common-lisp:or apnssandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-sandbox-channel-response
                    'make-update-apns-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnssandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnssandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-voip-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-voip-channel-request-"))
   (apnsvoip-channel-request
    (common-lisp:error ":apnsvoip-channel-request is required") :type
    (common-lisp:or apnsvoip-channel-request common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-voip-channel-request
                    'make-update-apns-voip-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-channel-request))
      (common-lisp:list
       (common-lisp:cons "APNSVoipChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-voip-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-voip-channel-response-"))
   (apnsvoip-channel-response
    (common-lisp:error ":apnsvoip-channel-response is required") :type
    (common-lisp:or apnsvoip-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-voip-channel-response
                    'make-update-apns-voip-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-voip-sandbox-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-voip-sandbox-channel-request-"))
   (apnsvoip-sandbox-channel-request
    (common-lisp:error ":apnsvoip-sandbox-channel-request is required") :type
    (common-lisp:or apnsvoip-sandbox-channel-request common-lisp:null))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-voip-sandbox-channel-request
                    'make-update-apns-voip-sandbox-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-request))
      (common-lisp:list
       (common-lisp:cons "APNSVoipSandboxChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-apns-voip-sandbox-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-apns-voip-sandbox-channel-response-"))
   (apnsvoip-sandbox-channel-response
    (common-lisp:error ":apnsvoip-sandbox-channel-response is required") :type
    (common-lisp:or apnsvoip-sandbox-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-apns-voip-sandbox-channel-response
                    'make-update-apns-voip-sandbox-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response))
      (common-lisp:list
       (common-lisp:cons "APNSVoipSandboxChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-apns-voip-sandbox-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'apnsvoip-sandbox-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-settings-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-application-settings-request
    (common-lisp:error ":write-application-settings-request is required") :type
    (common-lisp:or write-application-settings-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-settings-request
                    'make-update-application-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-application-settings-request))
      (common-lisp:list
       (common-lisp:cons "WriteApplicationSettingsRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-application-settings-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-settings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-settings-response-"))
   (application-settings-resource
    (common-lisp:error ":application-settings-resource is required") :type
    (common-lisp:or application-settings-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-settings-response
                    'make-update-application-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-settings-resource))
      (common-lisp:list
       (common-lisp:cons "ApplicationSettingsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-settings-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'application-settings-resource)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-attributes-request-"))
   (blacklist common-lisp:nil :type
    (common-lisp:or list-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-attributes-request
                    'make-update-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blacklist))
      (common-lisp:list
       (common-lisp:cons "Blacklist"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-baidu-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-baidu-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (baidu-channel-request
    (common-lisp:error ":baidu-channel-request is required") :type
    (common-lisp:or baidu-channel-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-baidu-channel-request
                    'make-update-baidu-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baidu-channel-request))
      (common-lisp:list
       (common-lisp:cons "BaiduChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'baidu-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-baidu-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-baidu-channel-response-"))
   (baidu-channel-response
    (common-lisp:error ":baidu-channel-response is required") :type
    (common-lisp:or baidu-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-baidu-channel-response
                    'make-update-baidu-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baidu-channel-response))
      (common-lisp:list
       (common-lisp:cons "BaiduChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-baidu-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'baidu-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-campaign-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-campaign-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (campaign-id (common-lisp:error ":campaign-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-campaign-request
    (common-lisp:error ":write-campaign-request is required") :type
    (common-lisp:or write-campaign-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-campaign-request 'make-update-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-campaign-request))
      (common-lisp:list
       (common-lisp:cons "WriteCampaignRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-campaign-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-campaign-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-campaign-response-"))
   (campaign-response (common-lisp:error ":campaign-response is required")
    :type (common-lisp:or campaign-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-campaign-response 'make-update-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-response))
      (common-lisp:list
       (common-lisp:cons "CampaignResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'campaign-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-email-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-email-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (email-channel-request
    (common-lisp:error ":email-channel-request is required") :type
    (common-lisp:or email-channel-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-email-channel-request
                    'make-update-email-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-channel-request))
      (common-lisp:list
       (common-lisp:cons "EmailChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-email-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-email-channel-response-"))
   (email-channel-response
    (common-lisp:error ":email-channel-response is required") :type
    (common-lisp:or email-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-email-channel-response
                    'make-update-email-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-channel-response))
      (common-lisp:list
       (common-lisp:cons "EmailChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-email-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-email-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-email-template-request-"))
   (create-new-version common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (email-template-request
    (common-lisp:error ":email-template-request is required") :type
    (common-lisp:or email-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-email-template-request
                    'make-update-email-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'email-template-request))
      (common-lisp:list
       (common-lisp:cons "EmailTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'email-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-email-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-email-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-email-template-response
                    'make-update-email-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-email-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-id (common-lisp:error ":endpoint-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-request (common-lisp:error ":endpoint-request is required") :type
    (common-lisp:or endpoint-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-request 'make-update-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-request))
      (common-lisp:list
       (common-lisp:cons "EndpointRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'endpoint-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-response 'make-update-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoints-batch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoints-batch-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (endpoint-batch-request
    (common-lisp:error ":endpoint-batch-request is required") :type
    (common-lisp:or endpoint-batch-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoints-batch-request
                    'make-update-endpoints-batch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-batch-request))
      (common-lisp:list
       (common-lisp:cons "EndpointBatchRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'endpoint-batch-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoints-batch-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoints-batch-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoints-batch-response
                    'make-update-endpoints-batch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoints-batch-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gcm-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-gcm-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (gcmchannel-request (common-lisp:error ":gcmchannel-request is required")
    :type (common-lisp:or gcmchannel-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gcm-channel-request
                    'make-update-gcm-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmchannel-request))
      (common-lisp:list
       (common-lisp:cons "GCMChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gcmchannel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gcm-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-gcm-channel-response-"))
   (gcmchannel-response (common-lisp:error ":gcmchannel-response is required")
    :type (common-lisp:or gcmchannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gcm-channel-response
                    'make-update-gcm-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcmchannel-response))
      (common-lisp:list
       (common-lisp:cons "GCMChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gcm-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'gcmchannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-in-app-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-in-app-template-request-"))
   (create-new-version common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (in-app-template-request
    (common-lisp:error ":in-app-template-request is required") :type
    (common-lisp:or in-app-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-in-app-template-request
                    'make-update-in-app-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-app-template-request))
      (common-lisp:list
       (common-lisp:cons "InAppTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'in-app-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-in-app-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-in-app-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-in-app-template-response
                    'make-update-in-app-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-in-app-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-journey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-journey-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-journey-request
    (common-lisp:error ":write-journey-request is required") :type
    (common-lisp:or write-journey-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-journey-request 'make-update-journey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-journey-request))
      (common-lisp:list
       (common-lisp:cons "WriteJourneyRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-journey-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-journey-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-journey-response-"))
   (journey-response (common-lisp:error ":journey-response is required") :type
    (common-lisp:or journey-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-journey-response 'make-update-journey-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-response))
      (common-lisp:list
       (common-lisp:cons "JourneyResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journey-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-journey-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-journey-state-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-id (common-lisp:error ":journey-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (journey-state-request
    (common-lisp:error ":journey-state-request is required") :type
    (common-lisp:or journey-state-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-journey-state-request
                    'make-update-journey-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-state-request))
      (common-lisp:list
       (common-lisp:cons "JourneyStateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'journey-state-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-journey-state-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-journey-state-response-"))
   (journey-response (common-lisp:error ":journey-response is required") :type
    (common-lisp:or journey-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-journey-state-response
                    'make-update-journey-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journey-response))
      (common-lisp:list
       (common-lisp:cons "JourneyResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-journey-state-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'journey-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-push-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-push-template-request-"))
   (create-new-version common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (push-notification-template-request
    (common-lisp:error ":push-notification-template-request is required") :type
    (common-lisp:or push-notification-template-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-push-template-request
                    'make-update-push-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'push-notification-template-request))
      (common-lisp:list
       (common-lisp:cons "PushNotificationTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'push-notification-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-push-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-push-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-push-template-response
                    'make-update-push-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-push-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-recommender-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-recommender-configuration-"))
   (attributes common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-id-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-role-arn
    (common-lisp:error ":recommendation-provider-role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-provider-uri
    (common-lisp:error ":recommendation-provider-uri is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendation-transformer-uri common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-display-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (recommendations-per-message common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-recommender-configuration
                    'make-update-recommender-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-id-type))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-role-arn))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-provider-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationProviderUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-transformer-uri))
      (common-lisp:list
       (common-lisp:cons "RecommendationTransformerUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-display-name))
      (common-lisp:list
       (common-lisp:cons "RecommendationsDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendations-per-message))
      (common-lisp:list
       (common-lisp:cons "RecommendationsPerMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-recommender-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-recommender-configuration-request-"))
   (recommender-id (common-lisp:error ":recommender-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (update-recommender-configuration
    (common-lisp:error ":update-recommender-configuration is required") :type
    (common-lisp:or update-recommender-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-recommender-configuration-request
                    'make-update-recommender-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-recommender-configuration))
      (common-lisp:list
       (common-lisp:cons "UpdateRecommenderConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'update-recommender-configuration)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-recommender-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-recommender-configuration-response-"))
   (recommender-configuration-response
    (common-lisp:error ":recommender-configuration-response is required") :type
    (common-lisp:or recommender-configuration-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-recommender-configuration-response
                    'make-update-recommender-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommender-configuration-response))
      (common-lisp:list
       (common-lisp:cons "RecommenderConfigurationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-recommender-configuration-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'recommender-configuration-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-segment-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-id (common-lisp:error ":segment-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (write-segment-request
    (common-lisp:error ":write-segment-request is required") :type
    (common-lisp:or write-segment-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-segment-request 'make-update-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-segment-request))
      (common-lisp:list
       (common-lisp:cons "WriteSegmentRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'write-segment-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-segment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-segment-response-"))
   (segment-response (common-lisp:error ":segment-response is required") :type
    (common-lisp:or segment-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-segment-response 'make-update-segment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-response))
      (common-lisp:list
       (common-lisp:cons "SegmentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-segment-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'segment-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sms-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sms-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (smschannel-request (common-lisp:error ":smschannel-request is required")
    :type (common-lisp:or smschannel-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sms-channel-request
                    'make-update-sms-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smschannel-request))
      (common-lisp:list
       (common-lisp:cons "SMSChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'smschannel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sms-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sms-channel-response-"))
   (smschannel-response (common-lisp:error ":smschannel-response is required")
    :type (common-lisp:or smschannel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sms-channel-response
                    'make-update-sms-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smschannel-response))
      (common-lisp:list
       (common-lisp:cons "SMSChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smschannel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sms-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sms-template-request-"))
   (create-new-version common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (smstemplate-request (common-lisp:error ":smstemplate-request is required")
    :type (common-lisp:or smstemplate-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sms-template-request
                    'make-update-sms-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smstemplate-request))
      (common-lisp:list
       (common-lisp:cons "SMSTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'smstemplate-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sms-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sms-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sms-template-response
                    'make-update-sms-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sms-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-active-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-active-version-request-"))
   (template-active-version-request
    (common-lisp:error ":template-active-version-request is required") :type
    (common-lisp:or template-active-version-request common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-active-version-request
                    'make-update-template-active-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-active-version-request))
      (common-lisp:list
       (common-lisp:cons "TemplateActiveVersionRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'template-active-version-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-active-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-active-version-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-active-version-response
                    'make-update-template-active-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-active-version-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-voice-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-voice-channel-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (voice-channel-request
    (common-lisp:error ":voice-channel-request is required") :type
    (common-lisp:or voice-channel-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-voice-channel-request
                    'make-update-voice-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-channel-request))
      (common-lisp:list
       (common-lisp:cons "VoiceChannelRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-channel-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-voice-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-voice-channel-response-"))
   (voice-channel-response
    (common-lisp:error ":voice-channel-response is required") :type
    (common-lisp:or voice-channel-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-voice-channel-response
                    'make-update-voice-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-channel-response))
      (common-lisp:list
       (common-lisp:cons "VoiceChannelResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-channel-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-channel-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-voice-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-voice-template-request-"))
   (create-new-version common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (voice-template-request
    (common-lisp:error ":voice-template-request is required") :type
    (common-lisp:or voice-template-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-voice-template-request
                    'make-update-voice-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-template-request))
      (common-lisp:list
       (common-lisp:cons "VoiceTemplateRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'voice-template-request)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-voice-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-voice-template-response-"))
   (message-body (common-lisp:error ":message-body is required") :type
    (common-lisp:or message-body common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-voice-template-response
                    'make-update-voice-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-body))
      (common-lisp:list
       (common-lisp:cons "MessageBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-voice-template-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'message-body)))
(common-lisp:progn
 (common-lisp:defstruct
     (verification-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-verification-response-"))
   (valid common-lisp:nil :type (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verification-response 'make-verification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verification-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "Valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-otpmessage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-otpmessage-request-"))
   (application-id (common-lisp:error ":application-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (verify-otpmessage-request-parameters
    (common-lisp:error ":verify-otpmessage-request-parameters is required")
    :type
    (common-lisp:or verify-otpmessage-request-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-otpmessage-request
                    'make-verify-otpmessage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verify-otpmessage-request-parameters))
      (common-lisp:list
       (common-lisp:cons "VerifyOTPMessageRequestParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'verify-otpmessage-request-parameters)))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-otpmessage-request-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-otpmessage-request-parameters-"))
   (destination-identity
    (common-lisp:error ":destination-identity is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (otp (common-lisp:error ":otp is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (reference-id (common-lisp:error ":reference-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-otpmessage-request-parameters
                    'make-verify-otpmessage-request-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-identity))
      (common-lisp:list
       (common-lisp:cons "DestinationIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'otp))
      (common-lisp:list
       (common-lisp:cons "Otp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-id))
      (common-lisp:list
       (common-lisp:cons "ReferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-request-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-otpmessage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-otpmessage-response-"))
   (verification-response
    (common-lisp:error ":verification-response is required") :type
    (common-lisp:or verification-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-otpmessage-response
                    'make-verify-otpmessage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-response))
      (common-lisp:list
       (common-lisp:cons "VerificationResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-otpmessage-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'verification-response)))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-channel-request-"))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-channel-request 'make-voice-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-channel-response-"))
   (application-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (has-credential common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (is-archived common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-channel-response 'make-voice-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-credential))
      (common-lisp:list
       (common-lisp:cons "HasCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "IsArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-message-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (origination-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (substitutions common-lisp:nil :type
    (common-lisp:or map-of-list-of-string common-lisp:null))
   (voice-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'voice-message 'make-voice-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input voice-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input voice-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origination-number))
      (common-lisp:list
       (common-lisp:cons "OriginationNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substitutions))
      (common-lisp:list
       (common-lisp:cons "Substitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input voice-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-template-request-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (voice-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-template-request 'make-voice-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-template-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (creation-date (common-lisp:error ":creation-date is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (default-substitutions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date (common-lisp:error ":last-modified-date is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (template-name (common-lisp:error ":template-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (template-type (common-lisp:error ":template-type is required") :type
    (common-lisp:or template-type common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (voice-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-template-response 'make-voice-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-substitutions))
      (common-lisp:list
       (common-lisp:cons "DefaultSubstitutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "TemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "TemplateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "VoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (wait-activity (:copier common-lisp:nil)
      (:conc-name "struct-shape-wait-activity-"))
   (next-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (wait-time common-lisp:nil :type
    (common-lisp:or wait-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'wait-activity 'make-wait-activity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wait-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wait-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-activity))
      (common-lisp:list
       (common-lisp:cons "NextActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-time))
      (common-lisp:list
       (common-lisp:cons "WaitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wait-activity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (wait-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-wait-time-"))
   (wait-for common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (wait-until common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'wait-time 'make-wait-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wait-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wait-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-for))
      (common-lisp:list
       (common-lisp:cons "WaitFor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-until))
      (common-lisp:list
       (common-lisp:cons "WaitUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wait-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-application-settings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-application-settings-request-"))
   (campaign-hook common-lisp:nil :type
    (common-lisp:or campaign-hook common-lisp:null))
   (cloud-watch-metrics-enabled common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or campaign-limits common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-application-settings-request
                    'make-write-application-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-application-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-application-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-hook))
      (common-lisp:list
       (common-lisp:cons "CampaignHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-application-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-campaign-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-campaign-request-"))
   (additional-treatments common-lisp:nil :type
    (common-lisp:or list-of-write-treatment-resource common-lisp:null))
   (custom-delivery-configuration common-lisp:nil :type
    (common-lisp:or custom-delivery-configuration common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (holdout-percent common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (hook common-lisp:nil :type (common-lisp:or campaign-hook common-lisp:null))
   (is-paused common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or campaign-limits common-lisp:null))
   (message-configuration common-lisp:nil :type
    (common-lisp:or message-configuration common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (segment-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segment-version common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or map-of-string common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (treatment-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-campaign-request 'make-write-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-treatments))
      (common-lisp:list
       (common-lisp:cons "AdditionalTreatments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'holdout-percent))
      (common-lisp:list
       (common-lisp:cons "HoldoutPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook))
      (common-lisp:list
       (common-lisp:cons "Hook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-paused))
      (common-lisp:list
       (common-lisp:cons "IsPaused"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-id))
      (common-lisp:list
       (common-lisp:cons "SegmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-version))
      (common-lisp:list
       (common-lisp:cons "SegmentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'treatment-description))
      (common-lisp:list
       (common-lisp:cons "TreatmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "TreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-event-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-event-stream-"))
   (destination-stream-arn
    (common-lisp:error ":destination-stream-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-event-stream 'make-write-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input write-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input write-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-stream-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input write-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-journey-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-journey-request-"))
   (activities common-lisp:nil :type
    (common-lisp:or map-of-activity common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (limits common-lisp:nil :type
    (common-lisp:or journey-limits common-lisp:null))
   (local-time common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (quiet-time common-lisp:nil :type
    (common-lisp:or quiet-time common-lisp:null))
   (refresh-frequency common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or journey-schedule common-lisp:null))
   (start-activity common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start-condition common-lisp:nil :type
    (common-lisp:or start-condition common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (wait-for-quiet-time common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (refresh-on-segment-update common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (journey-channel-settings common-lisp:nil :type
    (common-lisp:or journey-channel-settings common-lisp:null))
   (sending-schedule common-lisp:nil :type
    (common-lisp:or |__boolean| common-lisp:null))
   (open-hours common-lisp:nil :type
    (common-lisp:or open-hours common-lisp:null))
   (closed-days common-lisp:nil :type
    (common-lisp:or closed-days common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-journey-request 'make-write-journey-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-journey-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-journey-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activities))
      (common-lisp:list
       (common-lisp:cons "Activities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits))
      (common-lisp:list
       (common-lisp:cons "Limits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-time))
      (common-lisp:list
       (common-lisp:cons "LocalTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet-time))
      (common-lisp:list
       (common-lisp:cons "QuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-frequency))
      (common-lisp:list
       (common-lisp:cons "RefreshFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-activity))
      (common-lisp:list
       (common-lisp:cons "StartActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-condition))
      (common-lisp:list
       (common-lisp:cons "StartCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-for-quiet-time))
      (common-lisp:list
       (common-lisp:cons "WaitForQuietTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-on-segment-update))
      (common-lisp:list
       (common-lisp:cons "RefreshOnSegmentUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'journey-channel-settings))
      (common-lisp:list
       (common-lisp:cons "JourneyChannelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sending-schedule))
      (common-lisp:list
       (common-lisp:cons "SendingSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-hours))
      (common-lisp:list
       (common-lisp:cons "OpenHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'closed-days))
      (common-lisp:list
       (common-lisp:cons "ClosedDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-journey-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-segment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-segment-request-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or segment-dimensions common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (segment-groups common-lisp:nil :type
    (common-lisp:or segment-group-list common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or map-of-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-segment-request 'make-write-segment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-segment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-segment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-groups))
      (common-lisp:list
       (common-lisp:cons "SegmentGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-segment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (write-treatment-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-write-treatment-resource-"))
   (custom-delivery-configuration common-lisp:nil :type
    (common-lisp:or custom-delivery-configuration common-lisp:null))
   (message-configuration common-lisp:nil :type
    (common-lisp:or message-configuration common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (size-percent (common-lisp:error ":size-percent is required") :type
    (common-lisp:or |__integer| common-lisp:null))
   (template-configuration common-lisp:nil :type
    (common-lisp:or template-configuration common-lisp:null))
   (treatment-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (treatment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'write-treatment-resource 'make-write-treatment-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-treatment-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-treatment-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-delivery-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomDeliveryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-configuration))
      (common-lisp:list
       (common-lisp:cons "MessageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-percent))
      (common-lisp:list
       (common-lisp:cons "SizePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-configuration))
      (common-lisp:list
       (common-lisp:cons "TemplateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'treatment-description))
      (common-lisp:list
       (common-lisp:cons "TreatmentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treatment-name))
      (common-lisp:list
       (common-lisp:cons "TreatmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-treatment-resource))
   common-lisp:nil))
(common-lisp:deftype |__EndpointTypesElement| () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype list-of-activity-response ()
   '(trivial-types:proper-list activity-response))
 (common-lisp:defun |make-list-of-activity-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activity-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-application-response ()
   '(trivial-types:proper-list application-response))
 (common-lisp:defun |make-list-of-application-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-campaign-response ()
   '(trivial-types:proper-list campaign-response))
 (common-lisp:defun |make-list-of-campaign-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list campaign-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-endpoint-batch-item ()
   '(trivial-types:proper-list endpoint-batch-item))
 (common-lisp:defun |make-list-of-endpoint-batch-item|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-batch-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-endpoint-response ()
   '(trivial-types:proper-list endpoint-response))
 (common-lisp:defun |make-list-of-endpoint-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-export-job-response ()
   '(trivial-types:proper-list export-job-response))
 (common-lisp:defun |make-list-of-export-job-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-job-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-import-job-response ()
   '(trivial-types:proper-list import-job-response))
 (common-lisp:defun |make-list-of-import-job-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-job-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-in-app-message-campaign ()
   '(trivial-types:proper-list in-app-message-campaign))
 (common-lisp:defun |make-list-of-in-app-message-campaign|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list in-app-message-campaign))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-in-app-message-content ()
   '(trivial-types:proper-list in-app-message-content))
 (common-lisp:defun |make-list-of-in-app-message-content|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list in-app-message-content))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-journey-response ()
   '(trivial-types:proper-list journey-response))
 (common-lisp:defun |make-list-of-journey-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list journey-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-journey-run-response ()
   '(trivial-types:proper-list journey-run-response))
 (common-lisp:defun |make-list-of-journey-run-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list journey-run-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-multi-conditional-branch ()
   '(trivial-types:proper-list multi-conditional-branch))
 (common-lisp:defun |make-list-of-multi-conditional-branch|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multi-conditional-branch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-random-split-entry ()
   '(trivial-types:proper-list random-split-entry))
 (common-lisp:defun |make-list-of-random-split-entry|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list random-split-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-recommender-configuration-response ()
   '(trivial-types:proper-list recommender-configuration-response))
 (common-lisp:defun |make-list-of-recommender-configuration-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommender-configuration-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-result-row ()
   '(trivial-types:proper-list result-row))
 (common-lisp:defun |make-list-of-result-row|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-result-row-value ()
   '(trivial-types:proper-list result-row-value))
 (common-lisp:defun |make-list-of-result-row-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-row-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-segment-dimensions ()
   '(trivial-types:proper-list segment-dimensions))
 (common-lisp:defun |make-list-of-segment-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-dimensions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-segment-group ()
   '(trivial-types:proper-list segment-group))
 (common-lisp:defun |make-list-of-segment-group|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-segment-reference ()
   '(trivial-types:proper-list segment-reference))
 (common-lisp:defun |make-list-of-segment-reference|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-segment-response ()
   '(trivial-types:proper-list segment-response))
 (common-lisp:defun |make-list-of-segment-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list segment-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-simple-condition ()
   '(trivial-types:proper-list simple-condition))
 (common-lisp:defun |make-list-of-simple-condition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simple-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-template-response ()
   '(trivial-types:proper-list template-response))
 (common-lisp:defun |make-list-of-template-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-template-version-response ()
   '(trivial-types:proper-list template-version-response))
 (common-lisp:defun |make-list-of-template-version-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            template-version-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-treatment-resource ()
   '(trivial-types:proper-list treatment-resource))
 (common-lisp:defun |make-list-of-treatment-resource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list treatment-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-write-treatment-resource ()
   '(trivial-types:proper-list write-treatment-resource))
 (common-lisp:defun |make-list-of-write-treatment-resource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            write-treatment-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-endpoint-types-element ()
   '(trivial-types:proper-list |__EndpointTypesElement|))
 (common-lisp:defun |make-list-of-endpoint-types-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__EndpointTypesElement|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-list-of-string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype map-of-activity () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-activity|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-address-configuration () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-address-configuration|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-attribute-dimension () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-attribute-dimension|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-channel-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-channel-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-endpoint-message-result ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-endpoint-message-result|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-endpoint-send-configuration ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-endpoint-send-configuration|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-event () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-event| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-event-item-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-event-item-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-events-batch () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-events-batch|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-item-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-item-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-message-result () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-message-result|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-metric-dimension () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-metric-dimension|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-double () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-double| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-integer () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-integer| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-list-of-string () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-list-of-string|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-map-of-endpoint-message-result ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-map-of-endpoint-message-result|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype map-of-string () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-string| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:deftype day-of-week () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-of-open-hours-rules ()
   '(trivial-types:proper-list open-hours-rule))
 (common-lisp:defun |make-list-of-open-hours-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list open-hours-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (open-hours-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-hours-rule-"))
   (start-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'open-hours-rule 'make-open-hours-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-hours-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-hours-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-hours-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype map-of-list-of-open-hours-rules ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-map-of-list-of-open-hours-rules|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (open-hours (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-hours-"))
   (email common-lisp:nil :type
    (common-lisp:or map-of-list-of-open-hours-rules common-lisp:null))
   (sms common-lisp:nil :type
    (common-lisp:or map-of-list-of-open-hours-rules common-lisp:null))
   (push common-lisp:nil :type
    (common-lisp:or map-of-list-of-open-hours-rules common-lisp:null))
   (voice common-lisp:nil :type
    (common-lisp:or map-of-list-of-open-hours-rules common-lisp:null))
   (custom common-lisp:nil :type
    (common-lisp:or map-of-list-of-open-hours-rules common-lisp:null)))
 (common-lisp:export (common-lisp:list 'open-hours 'make-open-hours))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input open-hours))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input open-hours))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "EMAIL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms))
      (common-lisp:list
       (common-lisp:cons "SMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push))
      (common-lisp:list
       (common-lisp:cons "PUSH"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice))
      (common-lisp:list
       (common-lisp:cons "VOICE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "CUSTOM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input open-hours))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (closed-days-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-closed-days-rule-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (start-date-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (end-date-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'closed-days-rule 'make-closed-days-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input closed-days-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input closed-days-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "StartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "EndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input closed-days-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-closed-days-rules ()
   '(trivial-types:proper-list closed-days-rule))
 (common-lisp:defun |make-list-of-closed-days-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list closed-days-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (closed-days (:copier common-lisp:nil)
      (:conc-name "struct-shape-closed-days-"))
   (email common-lisp:nil :type
    (common-lisp:or list-of-closed-days-rules common-lisp:null))
   (sms common-lisp:nil :type
    (common-lisp:or list-of-closed-days-rules common-lisp:null))
   (push common-lisp:nil :type
    (common-lisp:or list-of-closed-days-rules common-lisp:null))
   (voice common-lisp:nil :type
    (common-lisp:or list-of-closed-days-rules common-lisp:null))
   (custom common-lisp:nil :type
    (common-lisp:or list-of-closed-days-rules common-lisp:null)))
 (common-lisp:export (common-lisp:list 'closed-days 'make-closed-days))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input closed-days))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input closed-days))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "EMAIL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms))
      (common-lisp:list
       (common-lisp:cons "SMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push))
      (common-lisp:list
       (common-lisp:cons "PUSH"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice))
      (common-lisp:list
       (common-lisp:cons "VOICE"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "CUSTOM"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input closed-days))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-application-request)
   (common-lisp:declare (common-lisp:ignorable create-application-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/apps"
                                                        "CreateApp"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id write-campaign-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id write-campaign-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateCampaign"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-campaign))
(common-lisp:progn
 (common-lisp:defun create-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-template-request template-name)
   (common-lisp:declare
    (common-lisp:ignorable email-template-request template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-email-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateEmailTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-email-template))
(common-lisp:progn
 (common-lisp:defun create-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id export-job-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id export-job-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/export"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateExportJob"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-export-job))
(common-lisp:progn
 (common-lisp:defun create-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id import-job-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id import-job-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateImportJob"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-import-job))
(common-lisp:progn
 (common-lisp:defun create-in-app-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key in-app-template-request template-name)
   (common-lisp:declare
    (common-lisp:ignorable in-app-template-request template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-in-app-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/inapp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateInAppTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-in-app-template))
(common-lisp:progn
 (common-lisp:defun create-journey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id write-journey-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id write-journey-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-journey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateJourney"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-journey))
(common-lisp:progn
 (common-lisp:defun create-push-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key push-notification-template-request
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable push-notification-template-request template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-push-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/push"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreatePushTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-push-template))
(common-lisp:progn
 (common-lisp:defun create-recommender-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-recommender-configuration)
   (common-lisp:declare
    (common-lisp:ignorable create-recommender-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-recommender-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/recommenders"
                                                        "CreateRecommenderConfiguration"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-recommender-configuration))
(common-lisp:progn
 (common-lisp:defun create-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id write-segment-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id write-segment-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "CreateSegment"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-segment))
(common-lisp:progn
 (common-lisp:defun create-sms-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key smstemplate-request template-name)
   (common-lisp:declare
    (common-lisp:ignorable smstemplate-request template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sms-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateSmsTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sms-template))
(common-lisp:progn
 (common-lisp:defun create-voice-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name voice-template-request)
   (common-lisp:declare
    (common-lisp:ignorable template-name voice-template-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-voice-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "CreateVoiceTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-voice-template))
(common-lisp:progn
 (common-lisp:defun delete-adm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-adm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/adm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteAdmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-adm-channel))
(common-lisp:progn
 (common-lisp:defun delete-apns-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-apns-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApnsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apns-channel))
(common-lisp:progn
 (common-lisp:defun delete-apns-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-apns-sandbox-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApnsSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apns-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun delete-apns-voip-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-apns-voip-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApnsVoipChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apns-voip-channel))
(common-lisp:progn
 (common-lisp:defun delete-apns-voip-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-apns-voip-sandbox-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApnsVoipSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-apns-voip-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteApp"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-baidu-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-baidu-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/baidu"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteBaiduChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-baidu-channel))
(common-lisp:progn
 (common-lisp:defun delete-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id)
   (common-lisp:declare (common-lisp:ignorable application-id campaign-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))))
                                                        "DeleteCampaign"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-campaign))
(common-lisp:progn
 (common-lisp:defun delete-email-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-email-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteEmailChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-email-channel))
(common-lisp:progn
 (common-lisp:defun delete-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-email-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteEmailTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-email-template))
(common-lisp:progn
 (common-lisp:defun delete-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id endpoint-id)
   (common-lisp:declare (common-lisp:ignorable application-id endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/endpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'endpoint-id))))
                                                        "DeleteEndpoint"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/eventstream"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteEventStream"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-stream))
(common-lisp:progn
 (common-lisp:defun delete-gcm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gcm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/gcm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteGcmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-gcm-channel))
(common-lisp:progn
 (common-lisp:defun delete-in-app-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-in-app-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/inapp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteInAppTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-in-app-template))
(common-lisp:progn
 (common-lisp:defun delete-journey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id)
   (common-lisp:declare (common-lisp:ignorable application-id journey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-journey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "DeleteJourney"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-journey))
(common-lisp:progn
 (common-lisp:defun delete-push-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-push-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/push"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeletePushTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-push-template))
(common-lisp:progn
 (common-lisp:defun delete-recommender-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommender-id)
   (common-lisp:declare (common-lisp:ignorable recommender-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-recommender-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/recommenders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recommender-id))))
                                                        "DeleteRecommenderConfiguration"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-recommender-configuration))
(common-lisp:progn
 (common-lisp:defun delete-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id segment-id)
   (common-lisp:declare (common-lisp:ignorable application-id segment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "DeleteSegment"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-segment))
(common-lisp:progn
 (common-lisp:defun delete-sms-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sms-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteSmsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sms-channel))
(common-lisp:progn
 (common-lisp:defun delete-sms-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sms-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteSmsTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sms-template))
(common-lisp:progn
 (common-lisp:defun delete-user-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUserEndpoints"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-endpoints))
(common-lisp:progn
 (common-lisp:defun delete-voice-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-voice-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "DeleteVoiceChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-voice-channel))
(common-lisp:progn
 (common-lisp:defun delete-voice-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-voice-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "DeleteVoiceTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-voice-template))
(common-lisp:progn
 (common-lisp:defun get-adm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-adm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/adm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetAdmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-adm-channel))
(common-lisp:progn
 (common-lisp:defun get-apns-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apns-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApnsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apns-channel))
(common-lisp:progn
 (common-lisp:defun get-apns-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apns-sandbox-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApnsSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apns-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun get-apns-voip-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apns-voip-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApnsVoipChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apns-voip-channel))
(common-lisp:progn
 (common-lisp:defun get-apns-voip-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-apns-voip-sandbox-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApnsVoipSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apns-voip-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun get-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApp" "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app))
(common-lisp:progn
 (common-lisp:defun get-application-date-range-kpi
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id end-time kpi-name
                     next-token page-size start-time)
   (common-lisp:declare
    (common-lisp:ignorable application-id end-time kpi-name next-token
     page-size start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-application-date-range-kpi-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/kpis/daterange/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'kpi-name))))
                                                        "GetApplicationDateRangeKpi"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-date-range-kpi))
(common-lisp:progn
 (common-lisp:defun get-application-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-application-settings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetApplicationSettings"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-application-settings))
(common-lisp:progn
 (common-lisp:defun get-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size token)
   (common-lisp:declare (common-lisp:ignorable page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/apps"
                                                        "GetApps"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-apps))
(common-lisp:progn
 (common-lisp:defun get-baidu-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-baidu-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/baidu"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetBaiduChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-baidu-channel))
(common-lisp:progn
 (common-lisp:defun get-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id)
   (common-lisp:declare (common-lisp:ignorable application-id campaign-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))))
                                                        "GetCampaign"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign))
(common-lisp:progn
 (common-lisp:defun get-campaign-activities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id page-size
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id campaign-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-activities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A/activities"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))))
                                                        "GetCampaignActivities"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign-activities))
(common-lisp:progn
 (common-lisp:defun get-campaign-date-range-kpi
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id end-time
                     kpi-name next-token page-size start-time)
   (common-lisp:declare
    (common-lisp:ignorable application-id campaign-id end-time kpi-name
     next-token page-size start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-campaign-date-range-kpi-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A/kpis/daterange/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'kpi-name))))
                                                        "GetCampaignDateRangeKpi"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign-date-range-kpi))
(common-lisp:progn
 (common-lisp:defun get-campaign-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id version)
   (common-lisp:declare
    (common-lisp:ignorable application-id campaign-id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "GetCampaignVersion"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign-version))
(common-lisp:progn
 (common-lisp:defun get-campaign-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id page-size
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id campaign-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))))
                                                        "GetCampaignVersions"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaign-versions))
(common-lisp:progn
 (common-lisp:defun get-campaigns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size token)
   (common-lisp:declare (common-lisp:ignorable application-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaigns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetCampaigns"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-campaigns))
(common-lisp:progn
 (common-lisp:defun get-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetChannels"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-channels))
(common-lisp:progn
 (common-lisp:defun get-email-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-email-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetEmailChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-email-channel))
(common-lisp:progn
 (common-lisp:defun get-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-email-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "GetEmailTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-email-template))
(common-lisp:progn
 (common-lisp:defun get-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id endpoint-id)
   (common-lisp:declare (common-lisp:ignorable application-id endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/endpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'endpoint-id))))
                                                        "GetEndpoint"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-endpoint))
(common-lisp:progn
 (common-lisp:defun get-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/eventstream"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetEventStream"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-stream))
(common-lisp:progn
 (common-lisp:defun get-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-export-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/export/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetExportJob"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-export-job))
(common-lisp:progn
 (common-lisp:defun get-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size token)
   (common-lisp:declare (common-lisp:ignorable application-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-export-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/export"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetExportJobs"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-export-jobs))
(common-lisp:progn
 (common-lisp:defun get-gcm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-gcm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/gcm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetGcmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-gcm-channel))
(common-lisp:progn
 (common-lisp:defun get-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id job-id)
   (common-lisp:declare (common-lisp:ignorable application-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/import/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetImportJob"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import-job))
(common-lisp:progn
 (common-lisp:defun get-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size token)
   (common-lisp:declare (common-lisp:ignorable application-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/jobs/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetImportJobs"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import-jobs))
(common-lisp:progn
 (common-lisp:defun get-in-app-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id endpoint-id)
   (common-lisp:declare (common-lisp:ignorable application-id endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-in-app-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/endpoints/~A/inappmessages"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'endpoint-id))))
                                                        "GetInAppMessages"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-in-app-messages))
(common-lisp:progn
 (common-lisp:defun get-in-app-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-in-app-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/inapp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "GetInAppTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-in-app-template))
(common-lisp:progn
 (common-lisp:defun get-journey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id)
   (common-lisp:declare (common-lisp:ignorable application-id journey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-journey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "GetJourney"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey))
(common-lisp:progn
 (common-lisp:defun get-journey-date-range-kpi
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id end-time journey-id
                     kpi-name next-token page-size start-time)
   (common-lisp:declare
    (common-lisp:ignorable application-id end-time journey-id kpi-name
     next-token page-size start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-journey-date-range-kpi-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/kpis/daterange/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'kpi-name))))
                                                        "GetJourneyDateRangeKpi"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-date-range-kpi))
(common-lisp:progn
 (common-lisp:defun get-journey-execution-activity-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-activity-id
                     journey-id next-token page-size)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-activity-id journey-id
     next-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-journey-execution-activity-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/activities/~A/execution-metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-activity-id))))
                                                        "GetJourneyExecutionActivityMetrics"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-execution-activity-metrics))
(common-lisp:progn
 (common-lisp:defun get-journey-execution-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id next-token
                     page-size)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-id next-token page-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-journey-execution-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/execution-metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "GetJourneyExecutionMetrics"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-execution-metrics))
(common-lisp:progn
 (common-lisp:defun get-journey-run-execution-activity-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-activity-id
                     journey-id next-token page-size run-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-activity-id journey-id
     next-token page-size run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-journey-run-execution-activity-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/runs/~A/activities/~A/execution-metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'run-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-activity-id))))
                                                        "GetJourneyRunExecutionActivityMetrics"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-run-execution-activity-metrics))
(common-lisp:progn
 (common-lisp:defun get-journey-run-execution-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id next-token
                     page-size run-id)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-id next-token page-size
     run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-journey-run-execution-metrics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/runs/~A/execution-metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'run-id))))
                                                        "GetJourneyRunExecutionMetrics"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-run-execution-metrics))
(common-lisp:progn
 (common-lisp:defun get-journey-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id page-size
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-journey-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/runs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "GetJourneyRuns"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-journey-runs))
(common-lisp:progn
 (common-lisp:defun get-push-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-push-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/push"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "GetPushTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-push-template))
(common-lisp:progn
 (common-lisp:defun get-recommender-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommender-id)
   (common-lisp:declare (common-lisp:ignorable recommender-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-recommender-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/recommenders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recommender-id))))
                                                        "GetRecommenderConfiguration"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommender-configuration))
(common-lisp:progn
 (common-lisp:defun get-recommender-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size token)
   (common-lisp:declare (common-lisp:ignorable page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-recommender-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/recommenders"
                                                        "GetRecommenderConfigurations"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommender-configurations))
(common-lisp:progn
 (common-lisp:defun get-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id segment-id)
   (common-lisp:declare (common-lisp:ignorable application-id segment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "GetSegment"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment))
(common-lisp:progn
 (common-lisp:defun get-segment-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size segment-id
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id page-size segment-id token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-export-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A/jobs/export"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "GetSegmentExportJobs"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment-export-jobs))
(common-lisp:progn
 (common-lisp:defun get-segment-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size segment-id
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id page-size segment-id token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A/jobs/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "GetSegmentImportJobs"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment-import-jobs))
(common-lisp:progn
 (common-lisp:defun get-segment-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id segment-id version)
   (common-lisp:declare
    (common-lisp:ignorable application-id segment-id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "GetSegmentVersion"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment-version))
(common-lisp:progn
 (common-lisp:defun get-segment-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size segment-id
                     token)
   (common-lisp:declare
    (common-lisp:ignorable application-id page-size segment-id token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segment-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "GetSegmentVersions"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segment-versions))
(common-lisp:progn
 (common-lisp:defun get-segments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size token)
   (common-lisp:declare (common-lisp:ignorable application-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-segments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetSegments"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-segments))
(common-lisp:progn
 (common-lisp:defun get-sms-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sms-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetSmsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sms-channel))
(common-lisp:progn
 (common-lisp:defun get-sms-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sms-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "GetSmsTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sms-template))
(common-lisp:progn
 (common-lisp:defun get-user-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id user-id)
   (common-lisp:declare (common-lisp:ignorable application-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetUserEndpoints"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-endpoints))
(common-lisp:progn
 (common-lisp:defun get-voice-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id)
   (common-lisp:declare (common-lisp:ignorable application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-voice-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "GetVoiceChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-voice-channel))
(common-lisp:progn
 (common-lisp:defun get-voice-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name version)
   (common-lisp:declare (common-lisp:ignorable template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-voice-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "GetVoiceTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-voice-template))
(common-lisp:progn
 (common-lisp:defun list-journeys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id page-size token)
   (common-lisp:declare (common-lisp:ignorable application-id page-size token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-journeys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "ListJourneys"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-journeys))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token page-size template-name
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token page-size template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-type))))
                                                        "ListTemplateVersions"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-versions))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token page-size prefix
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token page-size prefix template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/templates"
                                                        "ListTemplates"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun phone-number-validate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-validate-request)
   (common-lisp:declare (common-lisp:ignorable number-validate-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-phone-number-validate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/phone/number/validate"
                                                        "PhoneNumberValidate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'phone-number-validate))
(common-lisp:progn
 (common-lisp:defun put-event-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id write-event-stream)
   (common-lisp:declare
    (common-lisp:ignorable application-id write-event-stream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-event-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/eventstream"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "PutEventStream"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'put-event-stream))
(common-lisp:progn
 (common-lisp:defun put-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id events-request)
   (common-lisp:declare (common-lisp:ignorable application-id events-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/events"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "PutEvents"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'put-events))
(common-lisp:progn
 (common-lisp:defun remove-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id attribute-type
                     update-attributes-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id attribute-type
     update-attributes-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/attributes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attribute-type))))
                                                        "RemoveAttributes"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-attributes))
(common-lisp:progn
 (common-lisp:defun send-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id message-request)
   (common-lisp:declare (common-lisp:ignorable application-id message-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/messages"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "SendMessages"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'send-messages))
(common-lisp:progn
 (common-lisp:defun send-otpmessage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     send-otpmessage-request-parameters)
   (common-lisp:declare
    (common-lisp:ignorable application-id send-otpmessage-request-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-otpmessage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/otp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "SendOTPMessage"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'send-otpmessage))
(common-lisp:progn
 (common-lisp:defun send-users-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     send-users-message-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id send-users-message-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-users-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/users-messages"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "SendUsersMessages"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'send-users-messages))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-model)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags-model))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-adm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admchannel-request application-id)
   (common-lisp:declare
    (common-lisp:ignorable admchannel-request application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-adm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/adm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateAdmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-adm-channel))
(common-lisp:progn
 (common-lisp:defun update-apns-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apnschannel-request application-id)
   (common-lisp:declare
    (common-lisp:ignorable apnschannel-request application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-apns-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApnsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-apns-channel))
(common-lisp:progn
 (common-lisp:defun update-apns-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apnssandbox-channel-request
                     application-id)
   (common-lisp:declare
    (common-lisp:ignorable apnssandbox-channel-request application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-apns-sandbox-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApnsSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-apns-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun update-apns-voip-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apnsvoip-channel-request application-id)
   (common-lisp:declare
    (common-lisp:ignorable apnsvoip-channel-request application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-apns-voip-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApnsVoipChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-apns-voip-channel))
(common-lisp:progn
 (common-lisp:defun update-apns-voip-sandbox-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key apnsvoip-sandbox-channel-request
                     application-id)
   (common-lisp:declare
    (common-lisp:ignorable apnsvoip-sandbox-channel-request application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-apns-voip-sandbox-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/apns_voip_sandbox"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApnsVoipSandboxChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-apns-voip-sandbox-channel))
(common-lisp:progn
 (common-lisp:defun update-application-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     write-application-settings-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id write-application-settings-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-application-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/settings"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateApplicationSettings"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application-settings))
(common-lisp:progn
 (common-lisp:defun update-baidu-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id baidu-channel-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id baidu-channel-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-baidu-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/baidu"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateBaiduChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-baidu-channel))
(common-lisp:progn
 (common-lisp:defun update-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id campaign-id
                     write-campaign-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id campaign-id write-campaign-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/campaigns/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'campaign-id))))
                                                        "UpdateCampaign"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-campaign))
(common-lisp:progn
 (common-lisp:defun update-email-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id email-channel-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id email-channel-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-email-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateEmailChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-email-channel))
(common-lisp:progn
 (common-lisp:defun update-email-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-new-version email-template-request
                     template-name version)
   (common-lisp:declare
    (common-lisp:ignorable create-new-version email-template-request
     template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-email-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/email"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateEmailTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-email-template))
(common-lisp:progn
 (common-lisp:defun update-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id endpoint-id
                     endpoint-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id endpoint-id endpoint-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/endpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'endpoint-id))))
                                                        "UpdateEndpoint"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint))
(common-lisp:progn
 (common-lisp:defun update-endpoints-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id endpoint-batch-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id endpoint-batch-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoints-batch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/endpoints"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateEndpointsBatch"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoints-batch))
(common-lisp:progn
 (common-lisp:defun update-gcm-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id gcmchannel-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id gcmchannel-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gcm-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/gcm"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateGcmChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gcm-channel))
(common-lisp:progn
 (common-lisp:defun update-in-app-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-new-version
                     in-app-template-request template-name version)
   (common-lisp:declare
    (common-lisp:ignorable create-new-version in-app-template-request
     template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-in-app-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/inapp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateInAppTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-in-app-template))
(common-lisp:progn
 (common-lisp:defun update-journey
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id
                     write-journey-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-id write-journey-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-journey-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "UpdateJourney"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-journey))
(common-lisp:progn
 (common-lisp:defun update-journey-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id journey-id
                     journey-state-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id journey-id journey-state-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-journey-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/journeys/~A/state"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'journey-id))))
                                                        "UpdateJourneyState"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-journey-state))
(common-lisp:progn
 (common-lisp:defun update-push-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-new-version
                     push-notification-template-request template-name version)
   (common-lisp:declare
    (common-lisp:ignorable create-new-version
     push-notification-template-request template-name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-push-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/push"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdatePushTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-push-template))
(common-lisp:progn
 (common-lisp:defun update-recommender-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommender-id
                     update-recommender-configuration)
   (common-lisp:declare
    (common-lisp:ignorable recommender-id update-recommender-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-recommender-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/recommenders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'recommender-id))))
                                                        "UpdateRecommenderConfiguration"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-recommender-configuration))
(common-lisp:progn
 (common-lisp:defun update-segment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id segment-id
                     write-segment-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id segment-id write-segment-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-segment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/segments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'segment-id))))
                                                        "UpdateSegment"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-segment))
(common-lisp:progn
 (common-lisp:defun update-sms-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id smschannel-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id smschannel-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sms-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateSmsChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sms-channel))
(common-lisp:progn
 (common-lisp:defun update-sms-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-new-version smstemplate-request
                     template-name version)
   (common-lisp:declare
    (common-lisp:ignorable create-new-version smstemplate-request template-name
     version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sms-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/sms"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateSmsTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sms-template))
(common-lisp:progn
 (common-lisp:defun update-template-active-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-active-version-request
                     template-name template-type)
   (common-lisp:declare
    (common-lisp:ignorable template-active-version-request template-name
     template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-active-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/~A/active-version"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-type))))
                                                        "UpdateTemplateActiveVersion"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-active-version))
(common-lisp:progn
 (common-lisp:defun update-voice-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id voice-channel-request)
   (common-lisp:declare
    (common-lisp:ignorable application-id voice-channel-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-voice-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/channels/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "UpdateVoiceChannel"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-voice-channel))
(common-lisp:progn
 (common-lisp:defun update-voice-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key create-new-version template-name version
                     voice-template-request)
   (common-lisp:declare
    (common-lisp:ignorable create-new-version template-name version
     voice-template-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-voice-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/templates/~A/voice"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'template-name))))
                                                        "UpdateVoiceTemplate"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-voice-template))
(common-lisp:progn
 (common-lisp:defun verify-otpmessage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-id
                     verify-otpmessage-request-parameters)
   (common-lisp:declare
    (common-lisp:ignorable application-id
     verify-otpmessage-request-parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-otpmessage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'pinpoint-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/apps/~A/verify-otp"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'application-id))))
                                                        "VerifyOTPMessage"
                                                        "2016-12-01"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-otpmessage))
