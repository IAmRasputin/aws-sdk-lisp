;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/medical-imaging/api
  (:use)
  (:nicknames #:aws/medical-imaging)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/medical-imaging/api)
(common-lisp:progn
 (common-lisp:define-condition medical-imaging-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'medical-imaging-error))
(common-lisp:progn
 (common-lisp:defclass medical-imaging-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "medical-imaging"
                        :api-version "2023-07-19" :host-prefix
                        "medical-imaging" :signing-name "medical-imaging"
                        :global-host common-lisp:nil))
 (common-lisp:export 'medical-imaging-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-destination-image-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-destination-image-set-"))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-destination-image-set
                    'make-copy-destination-image-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-destination-image-set-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-destination-image-set-properties-"))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (image-set-state common-lisp:nil :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status common-lisp:nil :type
    (common-lisp:or image-set-workflow-status common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (image-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-destination-image-set-properties
                    'make-copy-destination-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-destination-image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-image-set-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-image-set-information-"))
   (source-image-set (common-lisp:error ":sourceimageset is required") :type
    (common-lisp:or copy-source-image-set-information common-lisp:null))
   (destination-image-set common-lisp:nil :type
    (common-lisp:or copy-destination-image-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-information
                    'make-copy-image-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-set))
      (common-lisp:list
       (common-lisp:cons "sourceImageSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-set))
      (common-lisp:list
       (common-lisp:cons "destinationImageSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-image-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-image-set-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (source-image-set-id (common-lisp:error ":sourceimagesetid is required")
    :type (common-lisp:or image-set-id common-lisp:null))
   (copy-image-set-information
    (common-lisp:error ":copyimagesetinformation is required") :type
    (common-lisp:or copy-image-set-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-request 'make-copy-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-image-set-information))
      (common-lisp:list
       (common-lisp:cons "copyImageSetInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'copy-image-set-information)))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-image-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-image-set-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (source-image-set-properties
    (common-lisp:error ":sourceimagesetproperties is required") :type
    (common-lisp:or copy-source-image-set-properties common-lisp:null))
   (destination-image-set-properties
    (common-lisp:error ":destinationimagesetproperties is required") :type
    (common-lisp:or copy-destination-image-set-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-image-set-response 'make-copy-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-image-set-properties))
      (common-lisp:list
       (common-lisp:cons "sourceImageSetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-set-properties))
      (common-lisp:list
       (common-lisp:cons "destinationImageSetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-image-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-source-image-set-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-source-image-set-information-"))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-source-image-set-information
                    'make-copy-source-image-set-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-source-image-set-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-source-image-set-properties-"))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (image-set-state common-lisp:nil :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status common-lisp:nil :type
    (common-lisp:or image-set-workflow-status common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (image-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-source-image-set-properties
                    'make-copy-source-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-source-image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datastore-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datastore-request-"))
   (datastore-name common-lisp:nil :type
    (common-lisp:or datastore-name common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datastore-request 'make-create-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-datastore-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-datastore-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (datastore-status (common-lisp:error ":datastorestatus is required") :type
    (common-lisp:or datastore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-datastore-response
                    'make-create-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-datastore-response))
   common-lisp:nil))
(common-lisp:deftype dicomaccession-number () 'common-lisp:string)
(common-lisp:deftype dicomattribute ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (dicomimport-job-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-dicomimport-job-properties-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or job-name common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (data-access-role-arn (common-lisp:error ":dataaccessrolearn is required")
    :type (common-lisp:or role-arn common-lisp:null))
   (ended-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (submitted-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (input-s3uri (common-lisp:error ":inputs3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (output-s3uri (common-lisp:error ":outputs3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dicomimport-job-properties
                    'make-dicomimport-job-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3uri))
      (common-lisp:list
       (common-lisp:cons "inputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "outputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dicomimport-job-summaries ()
   '(trivial-types:proper-list dicomimport-job-summary))
 (common-lisp:defun make-dicomimport-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dicomimport-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dicomimport-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dicomimport-job-summary-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or job-name common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (data-access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (ended-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (submitted-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dicomimport-job-summary 'make-dicomimport-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomimport-job-summary))
   common-lisp:nil))
(common-lisp:deftype dicomnumber-of-study-related-instances ()
  'common-lisp:integer)
(common-lisp:deftype dicomnumber-of-study-related-series ()
  'common-lisp:integer)
(common-lisp:deftype dicompatient-birth-date () 'common-lisp:string)
(common-lisp:deftype dicompatient-id () 'common-lisp:string)
(common-lisp:deftype dicompatient-name () 'common-lisp:string)
(common-lisp:deftype dicompatient-sex () 'common-lisp:string)
(common-lisp:deftype dicomstudy-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dicomstudy-date-and-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-dicomstudy-date-and-time-"))
   (dicomstudy-date (common-lisp:error ":dicomstudy-date is required") :type
    (common-lisp:or dicomstudy-date common-lisp:null))
   (dicomstudy-time common-lisp:nil :type
    (common-lisp:or dicomstudy-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dicomstudy-date-and-time 'make-dicomstudy-date-and-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-date))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dicomstudy-date-and-time))
   common-lisp:nil))
(common-lisp:deftype dicomstudy-description () 'common-lisp:string)
(common-lisp:deftype dicomstudy-id () 'common-lisp:string)
(common-lisp:deftype dicomstudy-instance-uid () 'common-lisp:string)
(common-lisp:deftype dicomstudy-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dicomtags (:copier common-lisp:nil)
      (:conc-name "struct-shape-dicomtags-"))
   (dicompatient-id common-lisp:nil :type
    (common-lisp:or dicompatient-id common-lisp:null))
   (dicompatient-name common-lisp:nil :type
    (common-lisp:or dicompatient-name common-lisp:null))
   (dicompatient-birth-date common-lisp:nil :type
    (common-lisp:or dicompatient-birth-date common-lisp:null))
   (dicompatient-sex common-lisp:nil :type
    (common-lisp:or dicompatient-sex common-lisp:null))
   (dicomstudy-instance-uid common-lisp:nil :type
    (common-lisp:or dicomstudy-instance-uid common-lisp:null))
   (dicomstudy-id common-lisp:nil :type
    (common-lisp:or dicomstudy-id common-lisp:null))
   (dicomstudy-description common-lisp:nil :type
    (common-lisp:or dicomstudy-description common-lisp:null))
   (dicomnumber-of-study-related-series common-lisp:nil :type
    (common-lisp:or dicomnumber-of-study-related-series common-lisp:null))
   (dicomnumber-of-study-related-instances common-lisp:nil :type
    (common-lisp:or dicomnumber-of-study-related-instances common-lisp:null))
   (dicomaccession-number common-lisp:nil :type
    (common-lisp:or dicomaccession-number common-lisp:null))
   (dicomstudy-date common-lisp:nil :type
    (common-lisp:or dicomstudy-date common-lisp:null))
   (dicomstudy-time common-lisp:nil :type
    (common-lisp:or dicomstudy-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dicomtags 'make-dicomtags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dicomtags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dicomtags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-id))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-name))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicompatient-birth-date))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientBirthDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-sex))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientSex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-instance-uid))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyInstanceUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-id))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-description))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomnumber-of-study-related-series))
      (common-lisp:list
       (common-lisp:cons "DICOMNumberOfStudyRelatedSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomnumber-of-study-related-instances))
      (common-lisp:list
       (common-lisp:cons "DICOMNumberOfStudyRelatedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomaccession-number))
      (common-lisp:list
       (common-lisp:cons "DICOMAccessionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-date))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dicomtags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dicomupdates (:copier common-lisp:nil)
      (:conc-name "struct-shape-dicomupdates-"))
   (removable-attributes common-lisp:nil :type
    (common-lisp:or dicomattribute common-lisp:null))
   (updatable-attributes common-lisp:nil :type
    (common-lisp:or dicomattribute common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dicomupdates 'make-dicomupdates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dicomupdates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dicomupdates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'removable-attributes))
      (common-lisp:list
       (common-lisp:cons "removableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updatable-attributes))
      (common-lisp:list
       (common-lisp:cons "updatableAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dicomupdates))
   common-lisp:nil))
(common-lisp:deftype datastore-id () 'common-lisp:string)
(common-lisp:deftype datastore-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (datastore-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-datastore-properties-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (datastore-name (common-lisp:error ":datastorename is required") :type
    (common-lisp:or datastore-name common-lisp:null))
   (datastore-status (common-lisp:error ":datastorestatus is required") :type
    (common-lisp:or datastore-status common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (datastore-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'datastore-properties 'make-datastore-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "datastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-properties))
   common-lisp:nil))
(common-lisp:deftype datastore-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype datastore-summaries ()
   '(trivial-types:proper-list datastore-summary))
 (common-lisp:defun make-datastore-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datastore-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (datastore-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-datastore-summary-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (datastore-name (common-lisp:error ":datastorename is required") :type
    (common-lisp:or datastore-name common-lisp:null))
   (datastore-status (common-lisp:error ":datastorestatus is required") :type
    (common-lisp:or datastore-status common-lisp:null))
   (datastore-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'datastore-summary 'make-datastore-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datastore-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-name))
      (common-lisp:list
       (common-lisp:cons "datastoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-arn))
      (common-lisp:list
       (common-lisp:cons "datastoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datastore-summary))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datastore-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datastore-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-datastore-request 'make-delete-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-datastore-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-datastore-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (datastore-status (common-lisp:error ":datastorestatus is required") :type
    (common-lisp:or datastore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-datastore-response
                    'make-delete-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-status))
      (common-lisp:list
       (common-lisp:cons "datastoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-set-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-set-request 'make-delete-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-set-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (image-set-state (common-lisp:error ":imagesetstate is required") :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status
    (common-lisp:error ":imagesetworkflowstatus is required") :type
    (common-lisp:or image-set-workflow-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-set-response
                    'make-delete-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dicomimport-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dicomimport-job-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dicomimport-job-request
                    'make-get-dicomimport-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dicomimport-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dicomimport-job-response-"))
   (job-properties (common-lisp:error ":jobproperties is required") :type
    (common-lisp:or dicomimport-job-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dicomimport-job-response
                    'make-get-dicomimport-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-properties))
      (common-lisp:list
       (common-lisp:cons "jobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dicomimport-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datastore-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datastore-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datastore-request 'make-get-datastore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-datastore-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-datastore-response-"))
   (datastore-properties (common-lisp:error ":datastoreproperties is required")
    :type (common-lisp:or datastore-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-datastore-response 'make-get-datastore-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datastore-properties))
      (common-lisp:list
       (common-lisp:cons "datastoreProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-datastore-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-frame-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-frame-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (image-frame-information
    (common-lisp:error ":imageframeinformation is required") :type
    (common-lisp:or image-frame-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-frame-request 'make-get-image-frame-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-frame-information))
      (common-lisp:list
       (common-lisp:cons "imageFrameInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'image-frame-information)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-frame-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-frame-response-"))
   (image-frame-blob (common-lisp:error ":imageframeblob is required") :type
    (common-lisp:or payload-blob common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-frame-response 'make-get-image-frame-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-frame-blob))
      (common-lisp:list
       (common-lisp:cons "imageFrameBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-frame-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'image-frame-blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-set-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-set-metadata-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or image-set-external-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-set-metadata-request
                    'make-get-image-set-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-set-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-set-metadata-response-"))
   (image-set-metadata-blob
    (common-lisp:error ":imagesetmetadatablob is required") :type
    (common-lisp:or image-set-metadata-blob common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (content-encoding common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-set-metadata-response
                    'make-get-image-set-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-metadata-blob))
      (common-lisp:list
       (common-lisp:cons "imageSetMetadataBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-metadata-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'image-set-metadata-blob)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-set-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or image-set-external-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-set-request 'make-get-image-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-image-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-image-set-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (version-id (common-lisp:error ":versionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (image-set-state (common-lisp:error ":imagesetstate is required") :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status common-lisp:nil :type
    (common-lisp:or image-set-workflow-status common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (deleted-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (image-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-image-set-response 'make-get-image-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "deletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-arn))
      (common-lisp:list
       (common-lisp:cons "imageSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-image-set-response))
   common-lisp:nil))
(common-lisp:deftype image-frame-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-frame-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-frame-information-"))
   (image-frame-id (common-lisp:error ":imageframeid is required") :type
    (common-lisp:or image-frame-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-frame-information 'make-image-frame-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-frame-id))
      (common-lisp:list
       (common-lisp:cons "imageFrameId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-frame-information))
   common-lisp:nil))
(common-lisp:deftype image-set-external-version-id () 'common-lisp:string)
(common-lisp:deftype image-set-id () 'common-lisp:string)
(common-lisp:deftype image-set-metadata-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (image-set-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-set-properties-"))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (version-id (common-lisp:error ":versionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (image-set-state (common-lisp:error ":imagesetstate is required") :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status common-lisp:nil :type
    (common-lisp:or image-set-workflow-status common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (deleted-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-set-properties 'make-image-set-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-set-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-set-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "ImageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "deletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-set-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-set-properties-list ()
   '(trivial-types:proper-list image-set-properties))
 (common-lisp:defun make-image-set-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-set-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-set-state () 'common-lisp:string)
(common-lisp:deftype image-set-workflow-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-sets-metadata-summaries ()
   '(trivial-types:proper-list image-sets-metadata-summary))
 (common-lisp:defun make-image-sets-metadata-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            image-sets-metadata-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (image-sets-metadata-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-sets-metadata-summary-"))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (dicomtags common-lisp:nil :type
    (common-lisp:or dicomtags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-sets-metadata-summary
                    'make-image-sets-metadata-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomtags))
      (common-lisp:list
       (common-lisp:cons "DICOMTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-sets-metadata-summary))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-dicomimport-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dicomimport-jobs-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (job-status common-lisp:nil :type
    (common-lisp:or job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-dicomimport-jobs-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dicomimport-jobs-request
                    'make-list-dicomimport-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-request))
   common-lisp:nil))
(common-lisp:deftype list-dicomimport-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-dicomimport-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dicomimport-jobs-response-"))
   (job-summaries (common-lisp:error ":jobsummaries is required") :type
    (common-lisp:or dicomimport-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dicomimport-jobs-response
                    'make-list-dicomimport-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "jobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dicomimport-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datastores-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datastores-request-"))
   (datastore-status common-lisp:nil :type
    (common-lisp:or datastore-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-datastores-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datastores-request 'make-list-datastores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-request))
   common-lisp:nil))
(common-lisp:deftype list-datastores-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-datastores-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datastores-response-"))
   (datastore-summaries common-lisp:nil :type
    (common-lisp:or datastore-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datastores-response 'make-list-datastores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-summaries))
      (common-lisp:list
       (common-lisp:cons "datastoreSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datastores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-set-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-set-versions-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-image-set-versions-request-max-results-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-set-versions-request
                    'make-list-image-set-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-request))
   common-lisp:nil))
(common-lisp:deftype list-image-set-versions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-set-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-set-versions-response-"))
   (image-set-properties-list
    (common-lisp:error ":imagesetpropertieslist is required") :type
    (common-lisp:or image-set-properties-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-set-versions-response
                    'make-list-image-set-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-properties-list))
      (common-lisp:list
       (common-lisp:cons "imageSetPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-set-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-updates (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-updates-"))
   (dicomupdates common-lisp:nil :type
    (common-lisp:or dicomupdates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metadata-updates 'make-metadata-updates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-updates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-updates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomupdates))
      (common-lisp:list
       (common-lisp:cons "DICOMUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-updates))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype payload-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-by-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-by-attribute-value-"))
   (dicompatient-id common-lisp:nil :type
    (common-lisp:or dicompatient-id common-lisp:null))
   (dicomaccession-number common-lisp:nil :type
    (common-lisp:or dicomaccession-number common-lisp:null))
   (dicomstudy-id common-lisp:nil :type
    (common-lisp:or dicomstudy-id common-lisp:null))
   (dicomstudy-instance-uid common-lisp:nil :type
    (common-lisp:or dicomstudy-instance-uid common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (dicomstudy-date-and-time common-lisp:nil :type
    (common-lisp:or dicomstudy-date-and-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-by-attribute-value
                    'make-search-by-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicompatient-id))
      (common-lisp:list
       (common-lisp:cons "DICOMPatientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomaccession-number))
      (common-lisp:list
       (common-lisp:cons "DICOMAccessionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dicomstudy-id))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-instance-uid))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyInstanceUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dicomstudy-date-and-time))
      (common-lisp:list
       (common-lisp:cons "DICOMStudyDateAndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-by-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-criteria-"))
   (filters common-lisp:nil :type
    (common-lisp:or search-criteria-filters-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-criteria 'make-search-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-criteria-filters-list ()
   '(trivial-types:proper-list search-filter))
 (common-lisp:defun make-search-criteria-filters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-filter-"))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or search-filter-values-list common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-filter 'make-search-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-filter-values-list ()
   '(trivial-types:proper-list search-by-attribute-value))
 (common-lisp:defun make-search-filter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-by-attribute-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-image-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-image-sets-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (search-criteria common-lisp:nil :type
    (common-lisp:or search-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-image-sets-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-image-sets-request
                    'make-search-image-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-criteria))
      (common-lisp:list
       (common-lisp:cons "searchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'search-criteria)))
(common-lisp:deftype search-image-sets-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-image-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-image-sets-response-"))
   (image-sets-metadata-summaries
    (common-lisp:error ":imagesetsmetadatasummaries is required") :type
    (common-lisp:or image-sets-metadata-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-image-sets-response
                    'make-search-image-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-sets-metadata-summaries))
      (common-lisp:list
       (common-lisp:cons "imageSetsMetadataSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-image-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dicomimport-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dicomimport-job-request-"))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (data-access-role-arn (common-lisp:error ":dataaccessrolearn is required")
    :type (common-lisp:or role-arn common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or client-token common-lisp:null))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (input-s3uri (common-lisp:error ":inputs3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (output-s3uri (common-lisp:error ":outputs3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dicomimport-job-request
                    'make-start-dicomimport-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3uri))
      (common-lisp:list
       (common-lisp:cons "inputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "outputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dicomimport-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dicomimport-job-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null))
   (submitted-at (common-lisp:error ":submittedat is required") :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dicomimport-job-response
                    'make-start-dicomimport-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-at))
      (common-lisp:list
       (common-lisp:cons "submittedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dicomimport-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-set-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-set-metadata-request-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (update-image-set-metadata-updates
    (common-lisp:error ":updateimagesetmetadataupdates is required") :type
    (common-lisp:or metadata-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-set-metadata-request
                    'make-update-image-set-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-image-set-metadata-updates))
      (common-lisp:list
       (common-lisp:cons "updateImageSetMetadataUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'update-image-set-metadata-updates)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-set-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-set-metadata-response-"))
   (datastore-id (common-lisp:error ":datastoreid is required") :type
    (common-lisp:or datastore-id common-lisp:null))
   (image-set-id (common-lisp:error ":imagesetid is required") :type
    (common-lisp:or image-set-id common-lisp:null))
   (latest-version-id (common-lisp:error ":latestversionid is required") :type
    (common-lisp:or image-set-external-version-id common-lisp:null))
   (image-set-state (common-lisp:error ":imagesetstate is required") :type
    (common-lisp:or image-set-state common-lisp:null))
   (image-set-workflow-status common-lisp:nil :type
    (common-lisp:or image-set-workflow-status common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (updated-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-set-metadata-response
                    'make-update-image-set-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datastore-id))
      (common-lisp:list
       (common-lisp:cons "datastoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-id))
      (common-lisp:list
       (common-lisp:cons "imageSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "latestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-set-state))
      (common-lisp:list
       (common-lisp:cons "imageSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-set-workflow-status))
      (common-lisp:list
       (common-lisp:cons "imageSetWorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-set-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (medical-imaging-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun copy-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id source-image-set-id
                     copy-image-set-information)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id source-image-set-id
     copy-image-set-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/copyImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'source-image-set-id))))
        "CopyImageSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-image-set))
(common-lisp:progn
 (common-lisp:defun create-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-name client-token tags
                     kms-key-arn)
   (common-lisp:declare
    (common-lisp:ignorable datastore-name client-token tags kms-key-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        "/datastore" "CreateDatastore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-datastore))
(common-lisp:progn
 (common-lisp:defun delete-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "DeleteDatastore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-datastore))
(common-lisp:progn
 (common-lisp:defun delete-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id image-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/deleteImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "DeleteImageSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-set))
(common-lisp:progn
 (common-lisp:defun get-dicomimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dicomimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/getDICOMImportJob/datastore/~A/job/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetDICOMImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dicomimport-job))
(common-lisp:progn
 (common-lisp:defun get-datastore
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id)
   (common-lisp:declare (common-lisp:ignorable datastore-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-datastore-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "GetDatastore"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-datastore))
(common-lisp:progn
 (common-lisp:defun get-image-frame
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id
                     image-frame-information)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id image-frame-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-frame-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageFrame"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageFrame")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-frame))
(common-lisp:progn
 (common-lisp:defun get-image-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageSet"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-set))
(common-lisp:progn
 (common-lisp:defun get-image-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-image-set-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/getImageSetMetadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "GetImageSetMetadata")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-image-set-metadata))
(common-lisp:progn
 (common-lisp:defun list-dicomimport-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id job-status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id job-status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dicomimport-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/listDICOMImportJobs/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "ListDICOMImportJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dicomimport-jobs))
(common-lisp:progn
 (common-lisp:defun list-datastores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-status next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-status next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datastores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        "/datastore" "ListDatastores"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datastores))
(common-lisp:progn
 (common-lisp:defun list-image-set-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-set-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/listImageSetVersions"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "ListImageSetVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-set-versions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-image-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id search-criteria max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id search-criteria max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-image-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/datastore/~A/searchImageSets"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "SearchImageSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-image-sets))
(common-lisp:progn
 (common-lisp:defun start-dicomimport-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name data-access-role-arn
                     client-token datastore-id input-s3uri output-s3uri)
   (common-lisp:declare
    (common-lisp:ignorable job-name data-access-role-arn client-token
     datastore-id input-s3uri output-s3uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dicomimport-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/startDICOMImportJob/datastore/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))))
        "StartDICOMImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-dicomimport-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-image-set-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key datastore-id image-set-id
                     latest-version-id update-image-set-metadata-updates)
   (common-lisp:declare
    (common-lisp:ignorable datastore-id image-set-id latest-version-id
     update-image-set-metadata-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-image-set-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'medical-imaging-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/datastore/~A/imageSet/~A/updateImageSetMetadata"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'datastore-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'image-set-id))))
        "UpdateImageSetMetadata"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image-set-metadata))
