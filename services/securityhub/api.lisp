;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/securityhub/api
  (:use)
  (:nicknames #:aws/securityhub)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/securityhub/api)
(common-lisp:progn
 (common-lisp:defclass securityhub-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "securityhub" :protocol
                        :rest-json))
 (common-lisp:export 'securityhub-request))
(common-lisp:progn
 (common-lisp:define-condition securityhub-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'securityhub-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalException" . internal-exception)
    ("InvalidAccessException" . invalid-access-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-administrator-invitation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-administrator-invitation-request-"))
   (administrator-id (common-lisp:error ":administrator-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (invitation-id (common-lisp:error ":invitation-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-request
                    'make-accept-administrator-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-administrator-invitation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-administrator-invitation-response-")))
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-response
                    'make-accept-administrator-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-invitation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-invitation-request-"))
   (master-id (common-lisp:error ":master-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (invitation-id (common-lisp:error ":invitation-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-invitation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-invitation-response-")))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-response
                    'make-accept-invitation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-details-"))
   (account-id (common-lisp:error ":account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-details 'make-account-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-details-list ()
   '(trivial-types:proper-list account-details))
 (common-lisp:defun |make-account-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (action-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-connection-action common-lisp:nil :type
    (common-lisp:or network-connection-action common-lisp:null))
   (aws-api-call-action common-lisp:nil :type
    (common-lisp:or aws-api-call-action common-lisp:null))
   (dns-request-action common-lisp:nil :type
    (common-lisp:or dns-request-action common-lisp:null))
   (port-probe-action common-lisp:nil :type
    (common-lisp:or port-probe-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-connection-action))
      (common-lisp:list
       (common-lisp:cons "NetworkConnectionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-api-call-action))
      (common-lisp:list
       (common-lisp:cons "AwsApiCallAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-request-action))
      (common-lisp:list
       (common-lisp:cons "DnsRequestAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-action))
      (common-lisp:list
       (common-lisp:cons "PortProbeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-local-ip-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-local-ip-details-"))
   (ip-address-v4 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-local-ip-details 'make-action-local-ip-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-local-port-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-local-port-details-"))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (port-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-local-port-details
                    'make-action-local-port-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-remote-ip-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-remote-ip-details-"))
   (ip-address-v4 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (organization common-lisp:nil :type
    (common-lisp:or ip-organization-details common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or country common-lisp:null))
   (city common-lisp:nil :type (common-lisp:or city common-lisp:null))
   (geo-location common-lisp:nil :type
    (common-lisp:or geo-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-remote-ip-details 'make-action-remote-ip-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-location))
      (common-lisp:list
       (common-lisp:cons "GeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-remote-port-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-remote-port-details-"))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (port-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-remote-port-details
                    'make-action-remote-port-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (action-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-target-"))
   (action-target-arn (common-lisp:error ":action-target-arn is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-target-list ()
   '(trivial-types:proper-list action-target))
 (common-lisp:defun |make-action-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (adjustment (:copier common-lisp:nil)
      (:conc-name "struct-shape-adjustment-"))
   (metric common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'adjustment 'make-adjustment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype adjustment-list ()
   '(trivial-types:proper-list adjustment))
 (common-lisp:defun |make-adjustment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (admin-account (:copier common-lisp:nil)
      (:conc-name "struct-shape-admin-account-"))
   (account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or admin-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'admin-account 'make-admin-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype admin-accounts ()
   '(trivial-types:proper-list admin-account))
 (common-lisp:defun |make-admin-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype admin-status () 'common-lisp:string)
(common-lisp:deftype admins-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associated-standard (:copier common-lisp:nil)
      (:conc-name "struct-shape-associated-standard-"))
   (standards-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associated-standard 'make-associated-standard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input associated-standard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input associated-standard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-id))
      (common-lisp:list
       (common-lisp:cons "StandardsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input associated-standard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-standards-list ()
   '(trivial-types:proper-list associated-standard))
 (common-lisp:defun |make-associated-standards-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-standard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (association-set-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-association-set-details-"))
   (association-state common-lisp:nil :type
    (common-lisp:or association-state-details common-lisp:null))
   (gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (main common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (route-table-association-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'association-set-details 'make-association-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-state))
      (common-lisp:list
       (common-lisp:cons "AssociationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main))
      (common-lisp:list
       (common-lisp:cons "Main"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-table-association-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-set-list ()
   '(trivial-types:proper-list association-set-details))
 (common-lisp:defun |make-association-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (association-state-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-association-state-details-"))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'association-state-details
                    'make-association-state-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   common-lisp:nil))
(common-lisp:deftype association-status () 'common-lisp:string)
(common-lisp:deftype auto-enable-standards () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (zone-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "ZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-call-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-call-action-"))
   (api common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (caller-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remote-ip-details common-lisp:nil :type
    (common-lisp:or action-remote-ip-details common-lisp:null))
   (domain-details common-lisp:nil :type
    (common-lisp:or aws-api-call-action-domain-details common-lisp:null))
   (affected-resources common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (first-seen common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-seen common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-call-action 'make-aws-api-call-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api))
      (common-lisp:list
       (common-lisp:cons "Api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-type))
      (common-lisp:list
       (common-lisp:cons "CallerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-details))
      (common-lisp:list
       (common-lisp:cons "DomainDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-resources))
      (common-lisp:list
       (common-lisp:cons "AffectedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "FirstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "LastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-call-action-domain-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-call-action-domain-details-"))
   (domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-call-action-domain-details
                    'make-aws-api-call-action-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-access-log-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-access-log-settings-"))
   (format common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-access-log-settings
                    'make-aws-api-gateway-access-log-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-canary-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-canary-settings-"))
   (percent-traffic common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (deployment-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stage-variable-overrides common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (use-stage-cache common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-canary-settings
                    'make-aws-api-gateway-canary-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-traffic))
      (common-lisp:list
       (common-lisp:cons "PercentTraffic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stage-variable-overrides))
      (common-lisp:list
       (common-lisp:cons "StageVariableOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-stage-cache))
      (common-lisp:list
       (common-lisp:cons "UseStageCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-endpoint-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-endpoint-configuration-"))
   (types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-endpoint-configuration
                    'make-aws-api-gateway-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-method-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-method-settings-"))
   (metrics-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (logging-level common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (data-trace-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (throttling-burst-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (throttling-rate-limit common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (caching-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cache-ttl-in-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (cache-data-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-authorization-for-cache-control common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (unauthorized-cache-control-header-strategy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-method common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-method-settings
                    'make-aws-api-gateway-method-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "MetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-level))
      (common-lisp:list
       (common-lisp:cons "LoggingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-trace-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTraceEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-burst-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingBurstLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-rate-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingRateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-enabled))
      (common-lisp:list
       (common-lisp:cons "CachingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-ttl-in-seconds))
      (common-lisp:list
       (common-lisp:cons "CacheTtlInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-data-encrypted))
      (common-lisp:list
       (common-lisp:cons "CacheDataEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-authorization-for-cache-control))
      (common-lisp:list
       (common-lisp:cons "RequireAuthorizationForCacheControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthorized-cache-control-header-strategy))
      (common-lisp:list
       (common-lisp:cons "UnauthorizedCacheControlHeaderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-path))
      (common-lisp:list
       (common-lisp:cons "ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-api-gateway-method-settings-list ()
   '(trivial-types:proper-list aws-api-gateway-method-settings))
 (common-lisp:defun |make-aws-api-gateway-method-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-api-gateway-method-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-rest-api-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-rest-api-details-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (binary-media-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (minimum-compression-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (api-key-source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoint-configuration common-lisp:nil :type
    (common-lisp:or aws-api-gateway-endpoint-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-rest-api-details
                    'make-aws-api-gateway-rest-api-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binary-media-types))
      (common-lisp:list
       (common-lisp:cons "BinaryMediaTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-compression-size))
      (common-lisp:list
       (common-lisp:cons "MinimumCompressionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-source))
      (common-lisp:list
       (common-lisp:cons "ApiKeySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configuration))
      (common-lisp:list
       (common-lisp:cons "EndpointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-stage-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-stage-details-"))
   (deployment-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-certificate-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stage-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cache-cluster-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cache-cluster-size common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cache-cluster-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (method-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-method-settings-list common-lisp:null))
   (variables common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (documentation-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (access-log-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-access-log-settings common-lisp:null))
   (canary-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-canary-settings common-lisp:null))
   (tracing-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (web-acl-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-stage-details
                    'make-aws-api-gateway-stage-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "CacheClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-size))
      (common-lisp:list
       (common-lisp:cons "CacheClusterSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-status))
      (common-lisp:list
       (common-lisp:cons "CacheClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method-settings))
      (common-lisp:list
       (common-lisp:cons "MethodSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'documentation-version))
      (common-lisp:list
       (common-lisp:cons "DocumentationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-settings))
      (common-lisp:list
       (common-lisp:cons "AccessLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-settings))
      (common-lisp:list
       (common-lisp:cons "CanarySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-enabled))
      (common-lisp:list
       (common-lisp:cons "TracingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-arn))
      (common-lisp:list
       (common-lisp:cons "WebAclArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-v2api-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-v2api-details-"))
   (api-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (api-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (api-key-selection-expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (route-selection-expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cors-configuration common-lisp:nil :type
    (common-lisp:or aws-cors-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2api-details
                    'make-aws-api-gateway-v2api-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-endpoint))
      (common-lisp:list
       (common-lisp:cons "ApiEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "ApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-key-selection-expression))
      (common-lisp:list
       (common-lisp:cons "ApiKeySelectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-type))
      (common-lisp:list
       (common-lisp:cons "ProtocolType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-selection-expression))
      (common-lisp:list
       (common-lisp:cons "RouteSelectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors-configuration))
      (common-lisp:list
       (common-lisp:cons "CorsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-v2route-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-v2route-settings-"))
   (detailed-metrics-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (logging-level common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (data-trace-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (throttling-burst-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (throttling-rate-limit common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2route-settings
                    'make-aws-api-gateway-v2route-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "DetailedMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-level))
      (common-lisp:list
       (common-lisp:cons "LoggingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-trace-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTraceEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-burst-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingBurstLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-rate-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingRateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-api-gateway-v2stage-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-api-gateway-v2stage-details-"))
   (client-certificate-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-route-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-v2route-settings common-lisp:null))
   (deployment-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (route-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-v2route-settings common-lisp:null))
   (stage-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stage-variables common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (access-log-settings common-lisp:nil :type
    (common-lisp:or aws-api-gateway-access-log-settings common-lisp:null))
   (auto-deploy common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (last-deployment-status-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (api-gateway-managed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2stage-details
                    'make-aws-api-gateway-v2stage-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-settings))
      (common-lisp:list
       (common-lisp:cons "RouteSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-variables))
      (common-lisp:list
       (common-lisp:cons "StageVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-settings))
      (common-lisp:list
       (common-lisp:cons "AccessLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deploy))
      (common-lisp:list
       (common-lisp:cons "AutoDeploy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "LastDeploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-gateway-managed))
      (common-lisp:list
       (common-lisp:cons "ApiGatewayManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-auto-scaling-group-availability-zones-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
 (common-lisp:defun |make-aws-auto-scaling-auto-scaling-group-availability-zones-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-availability-zones-list-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-availability-zones-list-details-"))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-availability-zones-list-details
   'make-aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-auto-scaling-auto-scaling-group-details-"))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (load-balancer-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (health-check-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (health-check-grace-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (mixed-instances-policy common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
     common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or aws-auto-scaling-auto-scaling-group-availability-zones-list
                    common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
     common-lisp:null))
   (capacity-rebalance common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-auto-scaling-group-details
                    'make-aws-auto-scaling-auto-scaling-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification-"))
   (launch-template-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-template-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
   'make-aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details-"))
   (instances-distribution common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
     common-lisp:null))
   (launch-template common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-distribution))
      (common-lisp:list
       (common-lisp:cons "InstancesDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-"))
   (on-demand-allocation-strategy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (on-demand-base-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (on-demand-percentage-above-base-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (spot-allocation-strategy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (spot-instance-pools common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (spot-max-price common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "OnDemandAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-percentage-above-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandPercentageAboveBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "SpotAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-pools))
      (common-lisp:list
       (common-lisp:cons "SpotInstancePools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-max-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details-"))
   (launch-template-specification common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
     common-lisp:null))
   (overrides common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification-"))
   (launch-template-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-template-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
 (common-lisp:defun |make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details-"))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (weighted-capacity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-launch-configuration-block-device-mappings-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-launch-configuration-block-device-mappings-details-"))
   (device-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
     common-lisp:null))
   (no-device common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-block-device-mappings-details
   'make-aws-auto-scaling-launch-configuration-block-device-mappings-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-"))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
   'make-aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-launch-configuration-block-device-mappings-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-launch-configuration-block-device-mappings-details))
 (common-lisp:defun |make-aws-auto-scaling-launch-configuration-block-device-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-launch-configuration-block-device-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-launch-configuration-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-launch-configuration-details-"))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (block-device-mappings common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-launch-configuration-block-device-mappings-list
     common-lisp:null))
   (classic-link-vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (classic-link-vpc-security-groups common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-monitoring common-lisp:nil :type
    (common-lisp:or
     aws-auto-scaling-launch-configuration-instance-monitoring-details
     common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-configuration-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (placement-tenancy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ramdisk-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (spot-price common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or aws-auto-scaling-launch-configuration-metadata-options
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-launch-configuration-details
                    'make-aws-auto-scaling-launch-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-launch-configuration-instance-monitoring-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-launch-configuration-instance-monitoring-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-instance-monitoring-details
   'make-aws-auto-scaling-launch-configuration-instance-monitoring-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-auto-scaling-launch-configuration-metadata-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-auto-scaling-launch-configuration-metadata-options-"))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (http-tokens common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-launch-configuration-metadata-options
                    'make-aws-auto-scaling-launch-configuration-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-advanced-backup-settings-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-backup-backup-plan-advanced-backup-settings-details-"))
   (backup-options common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-advanced-backup-settings-details
                    'make-aws-backup-backup-plan-advanced-backup-settings-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-advanced-backup-settings-list ()
   '(trivial-types:proper-list
     aws-backup-backup-plan-advanced-backup-settings-details))
 (common-lisp:defun |make-aws-backup-backup-plan-advanced-backup-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-advanced-backup-settings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-backup-plan-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-backup-plan-backup-plan-details-"))
   (backup-plan-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (advanced-backup-settings common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-advanced-backup-settings-list
                    common-lisp:null))
   (backup-plan-rule common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-backup-plan-details
                    'make-aws-backup-backup-plan-backup-plan-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-rule))
      (common-lisp:list
       (common-lisp:cons "BackupPlanRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-backup-plan-details-"))
   (backup-plan common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-backup-plan-details
                    common-lisp:null))
   (backup-plan-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-plan-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-details
                    'make-aws-backup-backup-plan-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-lifecycle-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-backup-plan-lifecycle-details-"))
   (delete-after-days common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (move-to-cold-storage-after-days common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-lifecycle-details
                    'make-aws-backup-backup-plan-lifecycle-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-after-days))
      (common-lisp:list
       (common-lisp:cons "DeleteAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-after-days))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-rule-copy-actions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-backup-backup-plan-rule-copy-actions-details-"))
   (destination-backup-vault-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (lifecycle common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-lifecycle-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-rule-copy-actions-details
                    'make-aws-backup-backup-plan-rule-copy-actions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-rule-copy-actions-list ()
   '(trivial-types:proper-list
     aws-backup-backup-plan-rule-copy-actions-details))
 (common-lisp:defun |make-aws-backup-backup-plan-rule-copy-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-rule-copy-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-plan-rule-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-backup-plan-rule-details-"))
   (target-backup-vault common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (start-window-minutes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enable-continuous-backup common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (completion-window-minutes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (copy-actions common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-rule-copy-actions-list
                    common-lisp:null))
   (lifecycle common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-lifecycle-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-rule-details
                    'make-aws-backup-backup-plan-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-backup-vault))
      (common-lisp:list
       (common-lisp:cons "TargetBackupVault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-window-minutes))
      (common-lisp:list
       (common-lisp:cons "StartWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-continuous-backup))
      (common-lisp:list
       (common-lisp:cons "EnableContinuousBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-window-minutes))
      (common-lisp:list
       (common-lisp:cons "CompletionWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-actions))
      (common-lisp:list
       (common-lisp:cons "CopyActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-rule-list ()
   '(trivial-types:proper-list aws-backup-backup-plan-rule-details))
 (common-lisp:defun |make-aws-backup-backup-plan-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-rule-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-vault-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-backup-vault-details-"))
   (backup-vault-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-vault-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encryption-key-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notifications common-lisp:nil :type
    (common-lisp:or aws-backup-backup-vault-notifications-details
                    common-lisp:null))
   (access-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-vault-details
                    'make-aws-backup-backup-vault-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "AccessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-backup-vault-notifications-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-backup-backup-vault-notifications-details-"))
   (backup-vault-events common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-vault-notifications-details
                    'make-aws-backup-backup-vault-notifications-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-events))
      (common-lisp:list
       (common-lisp:cons "BackupVaultEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-recovery-point-calculated-lifecycle-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-backup-recovery-point-calculated-lifecycle-details-"))
   (delete-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (move-to-cold-storage-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-calculated-lifecycle-details
                    'make-aws-backup-recovery-point-calculated-lifecycle-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-at))
      (common-lisp:list
       (common-lisp:cons "DeleteAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-at))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-recovery-point-created-by-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-backup-recovery-point-created-by-details-"))
   (backup-plan-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-plan-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-plan-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-created-by-details
                    'make-aws-backup-recovery-point-created-by-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-version))
      (common-lisp:list
       (common-lisp:cons "BackupPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-rule-id))
      (common-lisp:list
       (common-lisp:cons "BackupRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-recovery-point-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-recovery-point-details-"))
   (backup-size-in-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (backup-vault-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-vault-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (calculated-lifecycle common-lisp:nil :type
    (common-lisp:or aws-backup-recovery-point-calculated-lifecycle-details
                    common-lisp:null))
   (completion-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or aws-backup-recovery-point-created-by-details
                    common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encryption-key-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (is-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (last-restore-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (lifecycle common-lisp:nil :type
    (common-lisp:or aws-backup-recovery-point-lifecycle-details
                    common-lisp:null))
   (recovery-point-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-backup-vault-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-details
                    'make-aws-backup-recovery-point-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-lifecycle))
      (common-lisp:list
       (common-lisp:cons "CalculatedLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "IsEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-restore-time))
      (common-lisp:list
       (common-lisp:cons "LastRestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-backup-recovery-point-lifecycle-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-backup-recovery-point-lifecycle-details-"))
   (delete-after-days common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (move-to-cold-storage-after-days common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-lifecycle-details
                    'make-aws-backup-recovery-point-lifecycle-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-after-days))
      (common-lisp:list
       (common-lisp:cons "DeleteAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-after-days))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-certificate-manager-certificate-details-"))
   (certificate-authority-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-validation-options common-lisp:nil :type
    (common-lisp:or
     aws-certificate-manager-certificate-domain-validation-options
     common-lisp:null))
   (extended-key-usages common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-extended-key-usages
                    common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (imported-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (in-use-by common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (issued-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (issuer common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-usages common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-key-usages
                    common-lisp:null))
   (not-after common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-options
                    common-lisp:null))
   (renewal-eligibility common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (renewal-summary common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-renewal-summary
                    common-lisp:null))
   (serial common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (signature-algorithm common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subject common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-details
                    'make-aws-certificate-manager-certificate-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usages))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-at))
      (common-lisp:list
       (common-lisp:cons "ImportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-use-by))
      (common-lisp:list
       (common-lisp:cons "InUseBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usages))
      (common-lisp:list
       (common-lisp:cons "KeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-eligibility))
      (common-lisp:list
       (common-lisp:cons "RenewalEligibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "RenewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "SignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-domain-validation-option
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-certificate-manager-certificate-domain-validation-option-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-record common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-resource-record
                    common-lisp:null))
   (validation-domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (validation-emails common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (validation-method common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-certificate-manager-certificate-domain-validation-option
   'make-aws-certificate-manager-certificate-domain-validation-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record))
      (common-lisp:list
       (common-lisp:cons "ResourceRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-domain))
      (common-lisp:list
       (common-lisp:cons "ValidationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-emails))
      (common-lisp:list
       (common-lisp:cons "ValidationEmails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-method))
      (common-lisp:list
       (common-lisp:cons "ValidationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "ValidationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-domain-validation-options
                      ()
   '(trivial-types:proper-list
     aws-certificate-manager-certificate-domain-validation-option))
 (common-lisp:defun |make-aws-certificate-manager-certificate-domain-validation-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-domain-validation-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-extended-key-usage
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-certificate-manager-certificate-extended-key-usage-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (oid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-extended-key-usage
                    'make-aws-certificate-manager-certificate-extended-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oid))
      (common-lisp:list
       (common-lisp:cons "OId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-extended-key-usages
                      ()
   '(trivial-types:proper-list
     aws-certificate-manager-certificate-extended-key-usage))
 (common-lisp:defun |make-aws-certificate-manager-certificate-extended-key-usages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-extended-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-key-usage (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-certificate-manager-certificate-key-usage-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-key-usage
                    'make-aws-certificate-manager-certificate-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-key-usages ()
   '(trivial-types:proper-list aws-certificate-manager-certificate-key-usage))
 (common-lisp:defun |make-aws-certificate-manager-certificate-key-usages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-certificate-manager-certificate-options-"))
   (certificate-transparency-logging-preference common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-options
                    'make-aws-certificate-manager-certificate-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-transparency-logging-preference))
      (common-lisp:list
       (common-lisp:cons "CertificateTransparencyLoggingPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-renewal-summary
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-certificate-manager-certificate-renewal-summary-"))
   (domain-validation-options common-lisp:nil :type
    (common-lisp:or
     aws-certificate-manager-certificate-domain-validation-options
     common-lisp:null))
   (renewal-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (renewal-status-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-renewal-summary
                    'make-aws-certificate-manager-certificate-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "RenewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'renewal-status-reason))
      (common-lisp:list
       (common-lisp:cons "RenewalStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-certificate-manager-certificate-resource-record
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-certificate-manager-certificate-resource-record-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-resource-record
                    'make-aws-certificate-manager-certificate-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-formation-stack-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-formation-stack-details-"))
   (capabilities common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (disable-rollback common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (drift-information common-lisp:nil :type
    (common-lisp:or aws-cloud-formation-stack-drift-information-details
                    common-lisp:null))
   (enable-termination-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notification-arns common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or aws-cloud-formation-stack-outputs-list common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stack-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stack-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stack-status-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timeout-in-minutes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-details
                    'make-aws-cloud-formation-stack-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-termination-protection))
      (common-lisp:list
       (common-lisp:cons "EnableTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-formation-stack-drift-information-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-formation-stack-drift-information-details-"))
   (stack-drift-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-drift-information-details
                    'make-aws-cloud-formation-stack-drift-information-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-formation-stack-outputs-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-formation-stack-outputs-details-"))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (output-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (output-value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-outputs-details
                    'make-aws-cloud-formation-stack-outputs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-value))
      (common-lisp:list
       (common-lisp:cons "OutputValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-formation-stack-outputs-list ()
   '(trivial-types:proper-list aws-cloud-formation-stack-outputs-details))
 (common-lisp:defun |make-aws-cloud-formation-stack-outputs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-formation-stack-outputs-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-cache-behavior (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-cache-behavior-"))
   (viewer-protocol-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-cache-behavior
                    'make-aws-cloud-front-distribution-cache-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-cache-behaviors (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-cache-behaviors-"))
   (items common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-cache-behaviors-item-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-cache-behaviors
                    'make-aws-cloud-front-distribution-cache-behaviors))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-cache-behaviors-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-cache-behavior))
 (common-lisp:defun |make-aws-cloud-front-distribution-cache-behaviors-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-cache-behavior))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-default-cache-behavior
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-default-cache-behavior-"))
   (viewer-protocol-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-default-cache-behavior
                    'make-aws-cloud-front-distribution-default-cache-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-details-"))
   (cache-behaviors common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-cache-behaviors
                    common-lisp:null))
   (default-cache-behavior common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-default-cache-behavior
                    common-lisp:null))
   (default-root-object common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (etag common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-logging common-lisp:null))
   (origins common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origins common-lisp:null))
   (origin-groups common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-groups
                    common-lisp:null))
   (viewer-certificate common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-viewer-certificate
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (web-acl-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-details
                    'make-aws-cloud-front-distribution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "CacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "DefaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-root-object))
      (common-lisp:list
       (common-lisp:cons "DefaultRootObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origins))
      (common-lisp:list
       (common-lisp:cons "Origins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-groups))
      (common-lisp:list
       (common-lisp:cons "OriginGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'viewer-certificate))
      (common-lisp:list
       (common-lisp:cons "ViewerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-logging (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-logging-"))
   (bucket common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (include-cookies common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-logging
                    'make-aws-cloud-front-distribution-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-cookies))
      (common-lisp:list
       (common-lisp:cons "IncludeCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-custom-origin-config
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-origin-custom-origin-config-"))
   (http-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (https-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (origin-keepalive-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (origin-protocol-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (origin-read-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (origin-ssl-protocols common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-ssl-protocols
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-custom-origin-config
                    'make-aws-cloud-front-distribution-origin-custom-origin-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-port))
      (common-lisp:list
       (common-lisp:cons "HttpPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-port))
      (common-lisp:list
       (common-lisp:cons "HttpsPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-keepalive-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginKeepaliveTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "OriginProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-read-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginReadTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-ssl-protocols))
      (common-lisp:list
       (common-lisp:cons "OriginSslProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-origin-group-"))
   (failover-criteria common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-group-failover
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-group
                    'make-aws-cloud-front-distribution-origin-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-criteria))
      (common-lisp:list
       (common-lisp:cons "FailoverCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-group-failover
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-origin-group-failover-"))
   (status-codes common-lisp:nil :type
    (common-lisp:or
     aws-cloud-front-distribution-origin-group-failover-status-codes
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-group-failover
                    'make-aws-cloud-front-distribution-origin-group-failover))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-codes))
      (common-lisp:list
       (common-lisp:cons "StatusCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-group-failover-status-codes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-origin-group-failover-status-codes-"))
   (items common-lisp:nil :type
    (common-lisp:or
     aws-cloud-front-distribution-origin-group-failover-status-codes-item-list
     common-lisp:null))
   (quantity common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-cloud-front-distribution-origin-group-failover-status-codes
   'make-aws-cloud-front-distribution-origin-group-failover-status-codes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-group-failover-status-codes-item-list
                      ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-group-failover-status-codes-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-groups (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-origin-groups-"))
   (items common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-groups-item-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-groups
                    'make-aws-cloud-front-distribution-origin-groups))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-groups-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-origin-group))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-groups-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-origin-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-origin-item-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (origin-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3origin-config common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-s3origin-config
                    common-lisp:null))
   (custom-origin-config common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-custom-origin-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-item
                    'make-aws-cloud-front-distribution-origin-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-path))
      (common-lisp:list
       (common-lisp:cons "OriginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3origin-config))
      (common-lisp:list
       (common-lisp:cons "S3OriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-origin-config))
      (common-lisp:list
       (common-lisp:cons "CustomOriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-origin-item))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-origin-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-s3origin-config
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-origin-s3origin-config-"))
   (origin-access-identity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-s3origin-config
                    'make-aws-cloud-front-distribution-origin-s3origin-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "OriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origin-ssl-protocols
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-origin-ssl-protocols-"))
   (items common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (quantity common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-ssl-protocols
                    'make-aws-cloud-front-distribution-origin-ssl-protocols))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-origins (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-front-distribution-origins-"))
   (items common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-origin-item-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origins
                    'make-aws-cloud-front-distribution-origins))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-front-distribution-viewer-certificate (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-cloud-front-distribution-viewer-certificate-"))
   (acm-certificate-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (certificate-source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cloud-front-default-certificate common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (iam-certificate-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (minimum-protocol-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ssl-support-method common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-viewer-certificate
                    'make-aws-cloud-front-distribution-viewer-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "AcmCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-source))
      (common-lisp:list
       (common-lisp:cons "CertificateSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-default-certificate))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDefaultCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-certificate-id))
      (common-lisp:list
       (common-lisp:cons "IamCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-protocol-version))
      (common-lisp:list
       (common-lisp:cons "MinimumProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-support-method))
      (common-lisp:list
       (common-lisp:cons "SslSupportMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-trail-trail-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-trail-trail-details-"))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (has-custom-event-selectors common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (home-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (log-file-validation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (trail-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-trail-trail-details
                    'make-aws-cloud-trail-trail-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-custom-event-selectors))
      (common-lisp:list
       (common-lisp:cons "HasCustomEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-file-validation-enabled))
      (common-lisp:list
       (common-lisp:cons "LogFileValidationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-watch-alarm-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-watch-alarm-details-"))
   (actions-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (alarm-actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (alarm-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (alarm-configuration-updated-timestamp common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (alarm-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (alarm-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (datapoints-to-alarm common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or aws-cloud-watch-alarm-dimensions-list common-lisp:null))
   (evaluate-low-sample-count-percentile common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (evaluation-periods common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (extended-statistic common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (insufficient-data-actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ok-actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (period common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (statistic common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (threshold common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (threshold-metric-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (treat-missing-data common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-watch-alarm-details
                    'make-aws-cloud-watch-alarm-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-enabled))
      (common-lisp:list
       (common-lisp:cons "ActionsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-actions))
      (common-lisp:list
       (common-lisp:cons "AlarmActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alarm-configuration-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "AlarmConfigurationUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-description))
      (common-lisp:list
       (common-lisp:cons "AlarmDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "DatapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-low-sample-count-percentile))
      (common-lisp:list
       (common-lisp:cons "EvaluateLowSampleCountPercentile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-statistic))
      (common-lisp:list
       (common-lisp:cons "ExtendedStatistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insufficient-data-actions))
      (common-lisp:list
       (common-lisp:cons "InsufficientDataActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok-actions))
      (common-lisp:list
       (common-lisp:cons "OkActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-metric-id))
      (common-lisp:list
       (common-lisp:cons "ThresholdMetricId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "TreatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-watch-alarm-dimensions-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-watch-alarm-dimensions-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-watch-alarm-dimensions-details
                    'make-aws-cloud-watch-alarm-dimensions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-watch-alarm-dimensions-list ()
   '(trivial-types:proper-list aws-cloud-watch-alarm-dimensions-details))
 (common-lisp:defun |make-aws-cloud-watch-alarm-dimensions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-watch-alarm-dimensions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-artifacts-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-artifacts-details-"))
   (artifact-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encryption-disabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (namespace-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (override-artifact-name common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (packaging common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-artifacts-details
                    'make-aws-code-build-project-artifacts-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-identifier))
      (common-lisp:list
       (common-lisp:cons "ArtifactIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-disabled))
      (common-lisp:list
       (common-lisp:cons "EncryptionDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-type))
      (common-lisp:list
       (common-lisp:cons "NamespaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-artifact-name))
      (common-lisp:list
       (common-lisp:cons "OverrideArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packaging))
      (common-lisp:list
       (common-lisp:cons "Packaging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-code-build-project-artifacts-list ()
   '(trivial-types:proper-list aws-code-build-project-artifacts-details))
 (common-lisp:defun |make-aws-code-build-project-artifacts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-code-build-project-artifacts-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-details-"))
   (encryption-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (artifacts common-lisp:nil :type
    (common-lisp:or aws-code-build-project-artifacts-list common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or aws-code-build-project-environment common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or aws-code-build-project-source common-lisp:null))
   (service-role common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logs-config common-lisp:nil :type
    (common-lisp:or aws-code-build-project-logs-config-details
                    common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or aws-code-build-project-vpc-config common-lisp:null))
   (secondary-artifacts common-lisp:nil :type
    (common-lisp:or aws-code-build-project-artifacts-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-details
                    'make-aws-code-build-project-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "Artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs-config))
      (common-lisp:list
       (common-lisp:cons "LogsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-artifacts))
      (common-lisp:list
       (common-lisp:cons "SecondaryArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-environment (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-environment-"))
   (certificate common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or
     aws-code-build-project-environment-environment-variables-list
     common-lisp:null))
   (privileged-mode common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (image-pull-credentials-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (registry-credential common-lisp:nil :type
    (common-lisp:or aws-code-build-project-environment-registry-credential
                    common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-environment
                    'make-aws-code-build-project-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "EnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged-mode))
      (common-lisp:list
       (common-lisp:cons "PrivilegedMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-pull-credentials-type))
      (common-lisp:list
       (common-lisp:cons "ImagePullCredentialsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-credential))
      (common-lisp:list
       (common-lisp:cons "RegistryCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-environment-environment-variables-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-code-build-project-environment-environment-variables-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-code-build-project-environment-environment-variables-details
   'make-aws-code-build-project-environment-environment-variables-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-code-build-project-environment-environment-variables-list
                      ()
   '(trivial-types:proper-list
     aws-code-build-project-environment-environment-variables-details))
 (common-lisp:defun |make-aws-code-build-project-environment-environment-variables-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-code-build-project-environment-environment-variables-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-environment-registry-credential
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-code-build-project-environment-registry-credential-"))
   (credential common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (credential-provider common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-environment-registry-credential
                    'make-aws-code-build-project-environment-registry-credential))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential))
      (common-lisp:list
       (common-lisp:cons "Credential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-provider))
      (common-lisp:list
       (common-lisp:cons "CredentialProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-logs-config-cloud-watch-logs-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-code-build-project-logs-config-cloud-watch-logs-details-"))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stream-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-code-build-project-logs-config-cloud-watch-logs-details
   'make-aws-code-build-project-logs-config-cloud-watch-logs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-logs-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-logs-config-details-"))
   (cloud-watch-logs common-lisp:nil :type
    (common-lisp:or aws-code-build-project-logs-config-cloud-watch-logs-details
                    common-lisp:null))
   (s3logs common-lisp:nil :type
    (common-lisp:or aws-code-build-project-logs-config-s3logs-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-logs-config-details
                    'make-aws-code-build-project-logs-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-logs-config-s3logs-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-code-build-project-logs-config-s3logs-details-"))
   (encryption-disabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-logs-config-s3logs-details
                    'make-aws-code-build-project-logs-config-s3logs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-disabled))
      (common-lisp:list
       (common-lisp:cons "EncryptionDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-source-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (git-clone-depth common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (insecure-ssl common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-source
                    'make-aws-code-build-project-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-clone-depth))
      (common-lisp:list
       (common-lisp:cons "GitCloneDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insecure-ssl))
      (common-lisp:list
       (common-lisp:cons "InsecureSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-code-build-project-vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-code-build-project-vpc-config-"))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-vpc-config
                    'make-aws-code-build-project-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cors-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cors-configuration-"))
   (allow-origins common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (allow-credentials common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (expose-headers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (max-age common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (allow-methods common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (allow-headers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cors-configuration 'make-aws-cors-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-origins))
      (common-lisp:list
       (common-lisp:cons "AllowOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-credentials))
      (common-lisp:list
       (common-lisp:cons "AllowCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age))
      (common-lisp:list
       (common-lisp:cons "MaxAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-methods))
      (common-lisp:list
       (common-lisp:cons "AllowMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-headers))
      (common-lisp:list
       (common-lisp:cons "AllowHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-attribute-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-attribute-definition-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (attribute-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-attribute-definition
                    'make-aws-dynamo-db-table-attribute-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-attribute-definition-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-attribute-definition))
 (common-lisp:defun |make-aws-dynamo-db-table-attribute-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-attribute-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-billing-mode-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-billing-mode-summary-"))
   (billing-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-update-to-pay-per-request-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-billing-mode-summary
                    'make-aws-dynamo-db-table-billing-mode-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-mode))
      (common-lisp:list
       (common-lisp:cons "BillingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-to-pay-per-request-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateToPayPerRequestDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-details-"))
   (attribute-definitions common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-attribute-definition-list
                    common-lisp:null))
   (billing-mode-summary common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-billing-mode-summary common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (global-secondary-indexes common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-global-secondary-index-list
                    common-lisp:null))
   (global-table-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-key-schema-list common-lisp:null))
   (latest-stream-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (latest-stream-label common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (local-secondary-indexes common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-local-secondary-index-list
                    common-lisp:null))
   (provisioned-throughput common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-provisioned-throughput
                    common-lisp:null))
   (replicas common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-replica-list common-lisp:null))
   (restore-summary common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-restore-summary common-lisp:null))
   (sse-description common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-sse-description common-lisp:null))
   (stream-specification common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-stream-specification common-lisp:null))
   (table-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (table-size-bytes common-lisp:nil :type
    (common-lisp:or size-bytes common-lisp:null))
   (table-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-details
                    'make-aws-dynamo-db-table-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definitions))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-mode-summary))
      (common-lisp:list
       (common-lisp:cons "BillingModeSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-table-version))
      (common-lisp:list
       (common-lisp:cons "GlobalTableVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LatestStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-label))
      (common-lisp:list
       (common-lisp:cons "LatestStreamLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "LocalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicas))
      (common-lisp:list
       (common-lisp:cons "Replicas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-summary))
      (common-lisp:list
       (common-lisp:cons "RestoreSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-description))
      (common-lisp:list
       (common-lisp:cons "SseDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-specification))
      (common-lisp:list
       (common-lisp:cons "StreamSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-id))
      (common-lisp:list
       (common-lisp:cons "TableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-size-bytes))
      (common-lisp:list
       (common-lisp:cons "TableSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-status))
      (common-lisp:list
       (common-lisp:cons "TableStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-global-secondary-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-global-secondary-index-"))
   (backfilling common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (index-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (index-size-bytes common-lisp:nil :type
    (common-lisp:or size-bytes common-lisp:null))
   (index-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-key-schema-list common-lisp:null))
   (projection common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-projection common-lisp:null))
   (provisioned-throughput common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-provisioned-throughput
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-global-secondary-index
                    'make-aws-dynamo-db-table-global-secondary-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfilling))
      (common-lisp:list
       (common-lisp:cons "Backfilling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-size-bytes))
      (common-lisp:list
       (common-lisp:cons "IndexSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "IndexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-global-secondary-index-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-global-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-global-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-global-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-key-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-key-schema-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-key-schema
                    'make-aws-dynamo-db-table-key-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-key-schema-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-key-schema))
 (common-lisp:defun |make-aws-dynamo-db-table-key-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-key-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-local-secondary-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-local-secondary-index-"))
   (index-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (index-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-schema common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-key-schema-list common-lisp:null))
   (projection common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-projection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-local-secondary-index
                    'make-aws-dynamo-db-table-local-secondary-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-local-secondary-index-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-local-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-local-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-local-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-projection (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-projection-"))
   (non-key-attributes common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (projection-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-projection
                    'make-aws-dynamo-db-table-projection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-key-attributes))
      (common-lisp:list
       (common-lisp:cons "NonKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection-type))
      (common-lisp:list
       (common-lisp:cons "ProjectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-provisioned-throughput (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-provisioned-throughput-"))
   (last-decrease-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-increase-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (number-of-decreases-today common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (read-capacity-units common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (write-capacity-units common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-provisioned-throughput
                    'make-aws-dynamo-db-table-provisioned-throughput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-decrease-date-time))
      (common-lisp:list
       (common-lisp:cons "LastDecreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-increase-date-time))
      (common-lisp:list
       (common-lisp:cons "LastIncreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-decreases-today))
      (common-lisp:list
       (common-lisp:cons "NumberOfDecreasesToday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "WriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-provisioned-throughput-override
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-dynamo-db-table-provisioned-throughput-override-"))
   (read-capacity-units common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-provisioned-throughput-override
                    'make-aws-dynamo-db-table-provisioned-throughput-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-replica (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-replica-"))
   (global-secondary-indexes common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-replica-global-secondary-index-list
                    common-lisp:null))
   (kms-master-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (provisioned-throughput-override common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-provisioned-throughput-override
                    common-lisp:null))
   (region-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (replica-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (replica-status-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-replica
                    'make-aws-dynamo-db-table-replica))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-override))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-status))
      (common-lisp:list
       (common-lisp:cons "ReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-status-description))
      (common-lisp:list
       (common-lisp:cons "ReplicaStatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-replica-global-secondary-index
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-dynamo-db-table-replica-global-secondary-index-"))
   (index-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (provisioned-throughput-override common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-provisioned-throughput-override
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-replica-global-secondary-index
                    'make-aws-dynamo-db-table-replica-global-secondary-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-override))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-replica-global-secondary-index-list
                      ()
   '(trivial-types:proper-list
     aws-dynamo-db-table-replica-global-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-replica-global-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-replica-global-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-replica-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-replica))
 (common-lisp:defun |make-aws-dynamo-db-table-replica-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-replica))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-restore-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-restore-summary-"))
   (source-backup-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-table-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (restore-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (restore-in-progress common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-restore-summary
                    'make-aws-dynamo-db-table-restore-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-arn))
      (common-lisp:list
       (common-lisp:cons "SourceTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date-time))
      (common-lisp:list
       (common-lisp:cons "RestoreDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-in-progress))
      (common-lisp:list
       (common-lisp:cons "RestoreInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-sse-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-sse-description-"))
   (inaccessible-encryption-date-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sse-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kms-master-key-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-sse-description
                    'make-aws-dynamo-db-table-sse-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inaccessible-encryption-date-time))
      (common-lisp:list
       (common-lisp:cons "InaccessibleEncryptionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-type))
      (common-lisp:list
       (common-lisp:cons "SseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-dynamo-db-table-stream-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-dynamo-db-table-stream-specification-"))
   (stream-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (stream-view-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-stream-specification
                    'make-aws-dynamo-db-table-stream-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-enabled))
      (common-lisp:list
       (common-lisp:cons "StreamEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view-type))
      (common-lisp:list
       (common-lisp:cons "StreamViewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2eip-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2eip-details-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (public-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (allocation-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (public-ipv4pool common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-border-group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-interface-owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2eip-details 'make-aws-ec2eip-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "PublicIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-border-group))
      (common-lisp:list
       (common-lisp:cons "NetworkBorderGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-owner-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ip-v4addresses common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (ip-v6addresses common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-instance-profile-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launched-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or aws-ec2instance-network-interfaces-list common-lisp:null))
   (virtualization-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or aws-ec2instance-metadata-options common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or aws-ec2instance-monitoring-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-details 'make-aws-ec2instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4addresses))
      (common-lisp:list
       (common-lisp:cons "IpV4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "IpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-metadata-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-metadata-options-"))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-protocol-ipv6 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (http-tokens common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-metadata-tags common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-metadata-options
                    'make-aws-ec2instance-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "HttpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-tags))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-monitoring-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-monitoring-details-"))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-monitoring-details
                    'make-aws-ec2instance-monitoring-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2instance-network-interfaces-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2instance-network-interfaces-details-"))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-network-interfaces-details
                    'make-aws-ec2instance-network-interfaces-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2instance-network-interfaces-list ()
   '(trivial-types:proper-list aws-ec2instance-network-interfaces-details))
 (common-lisp:defun |make-aws-ec2instance-network-interfaces-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2instance-network-interfaces-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-block-device-mapping-set-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-block-device-mapping-set-details-"))
   (device-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ebs common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-block-device-mapping-set-ebs-details
     common-lisp:null))
   (no-device common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (virtual-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-block-device-mapping-set-details
   'make-aws-ec2launch-template-data-block-device-mapping-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-block-device-mapping-set-ebs-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-block-device-mapping-set-ebs-details-"))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (throughput common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (volume-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-block-device-mapping-set-ebs-details
   'make-aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-block-device-mapping-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-block-device-mapping-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-block-device-mapping-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-block-device-mapping-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details-"))
   (capacity-reservation-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (capacity-reservation-resource-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
   'make-aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-id))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationResourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-capacity-reservation-specification-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-capacity-reservation-specification-details-"))
   (capacity-reservation-preference common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (capacity-reservation-target common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-capacity-reservation-specification-details
   'make-aws-ec2launch-template-data-capacity-reservation-specification-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-preference))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-target))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-cpu-options-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-cpu-options-details-"))
   (core-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (threads-per-core common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-cpu-options-details
                    'make-aws-ec2launch-template-data-cpu-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-count))
      (common-lisp:list
       (common-lisp:cons "CoreCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threads-per-core))
      (common-lisp:list
       (common-lisp:cons "ThreadsPerCore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-credit-specification-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-credit-specification-details-"))
   (cpu-credits common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-credit-specification-details
                    'make-aws-ec2launch-template-data-credit-specification-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-credits))
      (common-lisp:list
       (common-lisp:cons "CpuCredits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2launch-template-data-details-"))
   (block-device-mapping-set common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-block-device-mapping-set-list
                    common-lisp:null))
   (capacity-reservation-specification common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-capacity-reservation-specification-details
     common-lisp:null))
   (cpu-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-cpu-options-details
                    common-lisp:null))
   (credit-specification common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-credit-specification-details
                    common-lisp:null))
   (disable-api-stop common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (disable-api-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ebs-optimized common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (elastic-gpu-specification-set common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-elastic-gpu-specification-set-list
     common-lisp:null))
   (elastic-inference-accelerator-set common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-elastic-inference-accelerator-set-list
     common-lisp:null))
   (enclave-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-enclave-options-details
                    common-lisp:null))
   (hibernation-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-hibernation-options-details
                    common-lisp:null))
   (iam-instance-profile common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-iam-instance-profile-details
                    common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-initiated-shutdown-behavior common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-market-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-instance-market-options-details
                    common-lisp:null))
   (instance-requirements common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-instance-requirements-details
                    common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kernel-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (license-set common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-license-set-list
                    common-lisp:null))
   (maintenance-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-maintenance-options-details
                    common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-metadata-options-details
                    common-lisp:null))
   (monitoring common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-monitoring-details
                    common-lisp:null))
   (network-interface-set common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-network-interface-set-list
                    common-lisp:null))
   (placement common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-placement-details
                    common-lisp:null))
   (private-dns-name-options common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-private-dns-name-options-details
     common-lisp:null))
   (ram-disk-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-group-id-set common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (security-group-set common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-details
                    'make-aws-ec2launch-template-data-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mapping-set))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappingSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-specification))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-options))
      (common-lisp:list
       (common-lisp:cons "CpuOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credit-specification))
      (common-lisp:list
       (common-lisp:cons "CreditSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-api-stop))
      (common-lisp:list
       (common-lisp:cons "DisableApiStop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-api-termination))
      (common-lisp:list
       (common-lisp:cons "DisableApiTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-specification-set))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuSpecificationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-inference-accelerator-set))
      (common-lisp:list
       (common-lisp:cons "ElasticInferenceAcceleratorSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enclave-options))
      (common-lisp:list
       (common-lisp:cons "EnclaveOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hibernation-options))
      (common-lisp:list
       (common-lisp:cons "HibernationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-market-options))
      (common-lisp:list
       (common-lisp:cons "InstanceMarketOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-requirements))
      (common-lisp:list
       (common-lisp:cons "InstanceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-set))
      (common-lisp:list
       (common-lisp:cons "LicenseSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-options))
      (common-lisp:list
       (common-lisp:cons "MaintenanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-set))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-dns-name-options))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsNameOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-disk-id))
      (common-lisp:list
       (common-lisp:cons "RamDiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-set))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-set))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-elastic-gpu-specification-set-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-elastic-gpu-specification-set-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-elastic-gpu-specification-set-details
   'make-aws-ec2launch-template-data-elastic-gpu-specification-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-elastic-gpu-specification-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-elastic-gpu-specification-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-elastic-gpu-specification-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-elastic-inference-accelerator-set-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-elastic-inference-accelerator-set-details-"))
   (count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-elastic-inference-accelerator-set-details
   'make-aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-elastic-inference-accelerator-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-elastic-inference-accelerator-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-enclave-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-enclave-options-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-enclave-options-details
                    'make-aws-ec2launch-template-data-enclave-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-hibernation-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-hibernation-options-details-"))
   (configured common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-hibernation-options-details
                    'make-aws-ec2launch-template-data-hibernation-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured))
      (common-lisp:list
       (common-lisp:cons "Configured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-iam-instance-profile-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-iam-instance-profile-details-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-iam-instance-profile-details
                    'make-aws-ec2launch-template-data-iam-instance-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-market-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-market-options-details-"))
   (market-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (spot-options common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-market-options-spot-options-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-market-options-details
   'make-aws-ec2launch-template-data-instance-market-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market-type))
      (common-lisp:list
       (common-lisp:cons "MarketType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-options))
      (common-lisp:list
       (common-lisp:cons "SpotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-market-options-spot-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-market-options-spot-options-details-"))
   (block-duration-minutes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-interruption-behavior common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (max-price common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (spot-instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-market-options-spot-options-details
   'make-aws-ec2launch-template-data-instance-market-options-spot-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "BlockDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-interruption-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInterruptionBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-price))
      (common-lisp:list
       (common-lisp:cons "MaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-type))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-accelerator-count-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-accelerator-count-details-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-accelerator-count-details
   'make-aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
   'make-aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
   'make-aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-details-"))
   (accelerator-count common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-accelerator-count-details
     common-lisp:null))
   (accelerator-manufacturers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (accelerator-names common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (accelerator-total-memory-mi-b common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
     common-lisp:null))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (bare-metal common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (baseline-ebs-bandwidth-mbps common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
     common-lisp:null))
   (burstable-performance common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cpu-manufacturers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (excluded-instance-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (instance-generations common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (local-storage common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (local-storage-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (memory-gi-bper-vcpu common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
     common-lisp:null))
   (memory-mi-b common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
     common-lisp:null))
   (network-interface-count common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-network-interface-count-details
     common-lisp:null))
   (on-demand-max-price-percentage-over-lowest-price common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (require-hibernate-support common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (spot-max-price-percentage-over-lowest-price common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-local-storage-gb common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
     common-lisp:null))
   (vcpu-count common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-vcpu-count-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-instance-requirements-details
                    'make-aws-ec2launch-template-data-instance-requirements-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-count))
      (common-lisp:list
       (common-lisp:cons "AcceleratorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-manufacturers))
      (common-lisp:list
       (common-lisp:cons "AcceleratorManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-names))
      (common-lisp:list
       (common-lisp:cons "AcceleratorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-total-memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTotalMemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bare-metal))
      (common-lisp:list
       (common-lisp:cons "BareMetal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-ebs-bandwidth-mbps))
      (common-lisp:list
       (common-lisp:cons "BaselineEbsBandwidthMbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burstable-performance))
      (common-lisp:list
       (common-lisp:cons "BurstablePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-manufacturers))
      (common-lisp:list
       (common-lisp:cons "CpuManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-instance-types))
      (common-lisp:list
       (common-lisp:cons "ExcludedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-generations))
      (common-lisp:list
       (common-lisp:cons "InstanceGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage))
      (common-lisp:list
       (common-lisp:cons "LocalStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage-types))
      (common-lisp:list
       (common-lisp:cons "LocalStorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gi-bper-vcpu))
      (common-lisp:list
       (common-lisp:cons "MemoryGiBPerVCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "MemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-count))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "OnDemandMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-hibernate-support))
      (common-lisp:list
       (common-lisp:cons "RequireHibernateSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-local-storage-gb))
      (common-lisp:list
       (common-lisp:cons "TotalLocalStorageGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu-count))
      (common-lisp:list
       (common-lisp:cons "VCpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details-"))
   (max common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
   'make-aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
   'make-aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-network-interface-count-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-network-interface-count-details-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-network-interface-count-details
   'make-aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails-"))
   (max common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
   'make-aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-instance-requirements-vcpu-count-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-instance-requirements-vcpu-count-details-"))
   (max common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (min common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-vcpu-count-details
   'make-aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-license-set-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-license-set-details-"))
   (license-configuration-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-license-set-details
                    'make-aws-ec2launch-template-data-license-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-license-set-list ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-license-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-license-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-license-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-maintenance-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-maintenance-options-details-"))
   (auto-recovery common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-maintenance-options-details
                    'make-aws-ec2launch-template-data-maintenance-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-recovery))
      (common-lisp:list
       (common-lisp:cons "AutoRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-metadata-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-metadata-options-details-"))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-protocol-ipv6 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-tokens common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-metadata-tags common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-metadata-options-details
                    'make-aws-ec2launch-template-data-metadata-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "HttpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-tags))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-monitoring-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-monitoring-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-monitoring-details
                    'make-aws-ec2launch-template-data-monitoring-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-network-interface-set-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-network-interface-set-details-"))
   (associate-carrier-ip-address common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (associate-public-ip-address common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (interface-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ipv4prefix-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv4prefixes common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list
     common-lisp:null))
   (ipv6address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv6addresses-list
     common-lisp:null))
   (ipv6prefix-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ipv6prefixes common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list
     common-lisp:null))
   (network-card-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list
     common-lisp:null))
   (secondary-private-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-network-interface-set-details
                    'make-aws-ec2launch-template-data-network-interface-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-carrier-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociateCarrierIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-type))
      (common-lisp:list
       (common-lisp:cons "InterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefix-count))
      (common-lisp:list
       (common-lisp:cons "Ipv4PrefixCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefixes))
      (common-lisp:list
       (common-lisp:cons "Ipv4Prefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefix-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6PrefixCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefixes))
      (common-lisp:list
       (common-lisp:cons "Ipv6Prefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-card-index))
      (common-lisp:list
       (common-lisp:cons "NetworkCardIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details-"))
   (ipv4prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefix))
      (common-lisp:list
       (common-lisp:cons "Ipv4Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-network-interface-set-ipv6addresses-details-"))
   (ipv6address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv6addresses-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv6addresses-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details-"))
   (ipv6prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefix))
      (common-lisp:list
       (common-lisp:cons "Ipv6Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-list ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details-"))
   (primary common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
   'make-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-placement-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-placement-details-"))
   (affinity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (host-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (host-resource-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (partition-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (spread-domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tenancy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-placement-details
                    'make-aws-ec2launch-template-data-placement-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affinity))
      (common-lisp:list
       (common-lisp:cons "Affinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "HostResourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-number))
      (common-lisp:list
       (common-lisp:cons "PartitionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spread-domain))
      (common-lisp:list
       (common-lisp:cons "SpreadDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-data-private-dns-name-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2launch-template-data-private-dns-name-options-details-"))
   (enable-resource-name-dns-aaaarecord common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-resource-name-dns-arecord common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (hostname-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-private-dns-name-options-details
   'make-aws-ec2launch-template-data-private-dns-name-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-resource-name-dns-aaaarecord))
      (common-lisp:list
       (common-lisp:cons "EnableResourceNameDnsAAAARecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-resource-name-dns-arecord))
      (common-lisp:list
       (common-lisp:cons "EnableResourceNameDnsARecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-type))
      (common-lisp:list
       (common-lisp:cons "HostnameType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2launch-template-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2launch-template-details-"))
   (launch-template-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launch-template-data common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-data-details common-lisp:null))
   (default-version-number common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (latest-version-number common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-details
                    'make-aws-ec2launch-template-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-data))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-number))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-acl-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-acl-association-"))
   (network-acl-association-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-acl-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-association
                    'make-aws-ec2network-acl-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-acl-association-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-acl-association-list ()
   '(trivial-types:proper-list aws-ec2network-acl-association))
 (common-lisp:defun |make-aws-ec2network-acl-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-acl-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-acl-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-acl-details-"))
   (is-default common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (network-acl-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (associations common-lisp:nil :type
    (common-lisp:or aws-ec2network-acl-association-list common-lisp:null))
   (entries common-lisp:nil :type
    (common-lisp:or aws-ec2network-acl-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-details
                    'make-aws-ec2network-acl-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-acl-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-acl-entry-"))
   (cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (egress common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (icmp-type-code common-lisp:nil :type
    (common-lisp:or icmp-type-code common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port-range common-lisp:nil :type
    (common-lisp:or port-range-from-to common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-entry 'make-aws-ec2network-acl-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "IcmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "PortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "RuleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-acl-entry-list ()
   '(trivial-types:proper-list aws-ec2network-acl-entry))
 (common-lisp:defun |make-aws-ec2network-acl-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-acl-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-interface-attachment-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (attachment-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (device-index common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-attachment
                    'make-aws-ec2network-interface-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-interface-details-"))
   (attachment common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-attachment common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-security-group-list
                    common-lisp:null))
   (source-dest-check common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ip-v6addresses common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-ip-v6address-list
                    common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-private-ip-address-list
                    common-lisp:null))
   (public-dns-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (public-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-details
                    'make-aws-ec2network-interface-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "IpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-ip-v6address-detail (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2network-interface-ip-v6address-detail-"))
   (ip-v6address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-ip-v6address-detail
                    'make-aws-ec2network-interface-ip-v6address-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6address))
      (common-lisp:list
       (common-lisp:cons "IpV6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-ip-v6address-list ()
   '(trivial-types:proper-list aws-ec2network-interface-ip-v6address-detail))
 (common-lisp:defun |make-aws-ec2network-interface-ip-v6address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-ip-v6address-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-private-ip-address-detail
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2network-interface-private-ip-address-detail-"))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-private-ip-address-detail
                    'make-aws-ec2network-interface-private-ip-address-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-private-ip-address-list ()
   '(trivial-types:proper-list
     aws-ec2network-interface-private-ip-address-detail))
 (common-lisp:defun |make-aws-ec2network-interface-private-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-private-ip-address-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2network-interface-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2network-interface-security-group-"))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-security-group
                    'make-aws-ec2network-interface-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-security-group-list ()
   '(trivial-types:proper-list aws-ec2network-interface-security-group))
 (common-lisp:defun |make-aws-ec2network-interface-security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2route-table-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2route-table-details-"))
   (association-set common-lisp:nil :type
    (common-lisp:or association-set-list common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (propagating-vgw-set common-lisp:nil :type
    (common-lisp:or propagating-vgw-set-list common-lisp:null))
   (route-table-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (route-set common-lisp:nil :type
    (common-lisp:or route-set-list common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2route-table-details
                    'make-aws-ec2route-table-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-set))
      (common-lisp:list
       (common-lisp:cons "AssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagating-vgw-set))
      (common-lisp:list
       (common-lisp:cons "PropagatingVgwSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-set))
      (common-lisp:list
       (common-lisp:cons "RouteSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-details-"))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ip-permissions common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-ip-permission-list common-lisp:null))
   (ip-permissions-egress common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-ip-permission-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-details
                    'make-aws-ec2security-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-permissions-egress))
      (common-lisp:list
       (common-lisp:cons "IpPermissionsEgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-ip-permission (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-ip-permission-"))
   (ip-protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (user-id-group-pairs common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-user-id-group-pair-list
                    common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-ip-range-list common-lisp:null))
   (ipv6ranges common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-ipv6range-list common-lisp:null))
   (prefix-list-ids common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-prefix-list-id-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ip-permission
                    'make-aws-ec2security-group-ip-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-group-pairs))
      (common-lisp:list
       (common-lisp:cons "UserIdGroupPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6ranges))
      (common-lisp:list
       (common-lisp:cons "Ipv6Ranges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ip-permission-list ()
   '(trivial-types:proper-list aws-ec2security-group-ip-permission))
 (common-lisp:defun |make-aws-ec2security-group-ip-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ip-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-ip-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-ip-range-"))
   (cidr-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ip-range
                    'make-aws-ec2security-group-ip-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ip-range-list ()
   '(trivial-types:proper-list aws-ec2security-group-ip-range))
 (common-lisp:defun |make-aws-ec2security-group-ip-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-ipv6range (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-ipv6range-"))
   (cidr-ipv6 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ipv6range
                    'make-aws-ec2security-group-ipv6range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ipv6))
      (common-lisp:list
       (common-lisp:cons "CidrIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ipv6range-list ()
   '(trivial-types:proper-list aws-ec2security-group-ipv6range))
 (common-lisp:defun |make-aws-ec2security-group-ipv6range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ipv6range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-prefix-list-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-prefix-list-id-"))
   (prefix-list-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-prefix-list-id
                    'make-aws-ec2security-group-prefix-list-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-prefix-list-id-list ()
   '(trivial-types:proper-list aws-ec2security-group-prefix-list-id))
 (common-lisp:defun |make-aws-ec2security-group-prefix-list-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-prefix-list-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2security-group-user-id-group-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2security-group-user-id-group-pair-"))
   (group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (peering-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-user-id-group-pair
                    'make-aws-ec2security-group-user-id-group-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-status))
      (common-lisp:list
       (common-lisp:cons "PeeringStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-user-id-group-pair-list ()
   '(trivial-types:proper-list aws-ec2security-group-user-id-group-pair))
 (common-lisp:defun |make-aws-ec2security-group-user-id-group-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-user-id-group-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2subnet-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2subnet-details-"))
   (assign-ipv6address-on-creation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (availability-zone-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (available-ip-address-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-for-az common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (map-public-ip-on-launch common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ipv6cidr-block-association-set common-lisp:nil :type
    (common-lisp:or ipv6cidr-block-association-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2subnet-details 'make-aws-ec2subnet-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assign-ipv6address-on-creation))
      (common-lisp:list
       (common-lisp:cons "AssignIpv6AddressOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "AvailableIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-for-az))
      (common-lisp:list
       (common-lisp:cons "DefaultForAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-public-ip-on-launch))
      (common-lisp:list
       (common-lisp:cons "MapPublicIpOnLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2transit-gateway-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2transit-gateway-details-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-route-table-propagation common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (auto-accept-shared-attachments common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-route-table-association common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (transit-gateway-cidr-blocks common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (association-default-route-table-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (propagation-default-route-table-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpn-ecmp-support common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dns-support common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (multicast-support common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (amazon-side-asn common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2transit-gateway-details
                    'make-aws-ec2transit-gateway-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-table-propagation))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteTablePropagation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-accept-shared-attachments))
      (common-lisp:list
       (common-lisp:cons "AutoAcceptSharedAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-table-association))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-default-route-table-id))
      (common-lisp:list
       (common-lisp:cons "AssociationDefaultRouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'propagation-default-route-table-id))
      (common-lisp:list
       (common-lisp:cons "PropagationDefaultRouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-ecmp-support))
      (common-lisp:list
       (common-lisp:cons "VpnEcmpSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-support))
      (common-lisp:list
       (common-lisp:cons "DnsSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-support))
      (common-lisp:list
       (common-lisp:cons "MulticastSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-side-asn))
      (common-lisp:list
       (common-lisp:cons "AmazonSideAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2volume-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2volume-attachment-"))
   (attach-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (delete-on-termination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2volume-attachment 'make-aws-ec2volume-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2volume-attachment-list ()
   '(trivial-types:proper-list aws-ec2volume-attachment))
 (common-lisp:defun |make-aws-ec2volume-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2volume-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2volume-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2volume-details-"))
   (create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (device-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (snapshot-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (attachments common-lisp:nil :type
    (common-lisp:or aws-ec2volume-attachment-list common-lisp:null))
   (volume-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-scan-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2volume-details 'make-aws-ec2volume-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-scan-status))
      (common-lisp:list
       (common-lisp:cons "VolumeScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpc-details-"))
   (cidr-block-association-set common-lisp:nil :type
    (common-lisp:or cidr-block-association-list common-lisp:null))
   (ipv6cidr-block-association-set common-lisp:nil :type
    (common-lisp:or ipv6cidr-block-association-list common-lisp:null))
   (dhcp-options-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-details 'make-aws-ec2vpc-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-endpoint-service-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpc-endpoint-service-details-"))
   (acceptance-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (base-endpoint-dns-names common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (manages-vpc-endpoints common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (gateway-load-balancer-arns common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (network-load-balancer-arns common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-type common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-endpoint-service-service-type-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-endpoint-service-details
                    'make-aws-ec2vpc-endpoint-service-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-required))
      (common-lisp:list
       (common-lisp:cons "AcceptanceRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-endpoint-dns-names))
      (common-lisp:list
       (common-lisp:cons "BaseEndpointDnsNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manages-vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "ManagesVpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "GatewayLoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "NetworkLoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-state))
      (common-lisp:list
       (common-lisp:cons "ServiceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-endpoint-service-service-type-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2vpc-endpoint-service-service-type-details-"))
   (service-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-endpoint-service-service-type-details
                    'make-aws-ec2vpc-endpoint-service-service-type-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpc-endpoint-service-service-type-list ()
   '(trivial-types:proper-list
     aws-ec2vpc-endpoint-service-service-type-details))
 (common-lisp:defun |make-aws-ec2vpc-endpoint-service-service-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpc-endpoint-service-service-type-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-peering-connection-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpc-peering-connection-details-"))
   (accepter-vpc-info common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-peering-connection-vpc-info-details
                    common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (requester-vpc-info common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-peering-connection-vpc-info-details
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-peering-connection-status-details
                    common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-details
                    'make-aws-ec2vpc-peering-connection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepter-vpc-info))
      (common-lisp:list
       (common-lisp:cons "AccepterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-vpc-info))
      (common-lisp:list
       (common-lisp:cons "RequesterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-peering-connection-status-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2vpc-peering-connection-status-details-"))
   (code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-status-details
                    'make-aws-ec2vpc-peering-connection-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpc-peering-connection-vpc-info-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2vpc-peering-connection-vpc-info-details-"))
   (cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cidr-block-set common-lisp:nil :type
    (common-lisp:or vpc-info-cidr-block-set-list common-lisp:null))
   (ipv6cidr-block-set common-lisp:nil :type
    (common-lisp:or vpc-info-ipv6cidr-block-set-list common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (peering-options common-lisp:nil :type
    (common-lisp:or vpc-info-peering-options-details common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-vpc-info-details
                    'make-aws-ec2vpc-peering-connection-vpc-info-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-set))
      (common-lisp:list
       (common-lisp:cons "CidrBlockSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-options))
      (common-lisp:list
       (common-lisp:cons "PeeringOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpn-connection-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpn-connection-details-"))
   (vpn-connection-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (customer-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (customer-gateway-configuration common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpn-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vgw-telemetry common-lisp:nil :type
    (common-lisp:or aws-ec2vpn-connection-vgw-telemetry-list common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or aws-ec2vpn-connection-options-details common-lisp:null))
   (routes common-lisp:nil :type
    (common-lisp:or aws-ec2vpn-connection-routes-list common-lisp:null))
   (transit-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-details
                    'make-aws-ec2vpn-connection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vgw-telemetry))
      (common-lisp:list
       (common-lisp:cons "VgwTelemetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpn-connection-options-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpn-connection-options-details-"))
   (static-routes-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tunnel-options common-lisp:nil :type
    (common-lisp:or aws-ec2vpn-connection-options-tunnel-options-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-options-details
                    'make-aws-ec2vpn-connection-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-routes-only))
      (common-lisp:list
       (common-lisp:cons "StaticRoutesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tunnel-options))
      (common-lisp:list
       (common-lisp:cons "TunnelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpn-connection-options-tunnel-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ec2vpn-connection-options-tunnel-options-details-"))
   (dpd-timeout-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (ike-versions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (outside-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (phase1dh-group-numbers common-lisp:nil :type
    (common-lisp:or integer-list common-lisp:null))
   (phase1encryption-algorithms common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (phase1integrity-algorithms common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (phase1lifetime-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (phase2dh-group-numbers common-lisp:nil :type
    (common-lisp:or integer-list common-lisp:null))
   (phase2encryption-algorithms common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (phase2integrity-algorithms common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (phase2lifetime-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (pre-shared-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rekey-fuzz-percentage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (rekey-margin-time-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (replay-window-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (tunnel-inside-cidr common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-options-tunnel-options-details
                    'make-aws-ec2vpn-connection-options-tunnel-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpd-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "DpdTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ike-versions))
      (common-lisp:list
       (common-lisp:cons "IkeVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outside-ip-address))
      (common-lisp:list
       (common-lisp:cons "OutsideIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1dh-group-numbers))
      (common-lisp:list
       (common-lisp:cons "Phase1DhGroupNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase1EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1integrity-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase1IntegrityAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1lifetime-seconds))
      (common-lisp:list
       (common-lisp:cons "Phase1LifetimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2dh-group-numbers))
      (common-lisp:list
       (common-lisp:cons "Phase2DhGroupNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase2EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2integrity-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase2IntegrityAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2lifetime-seconds))
      (common-lisp:list
       (common-lisp:cons "Phase2LifetimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-shared-key))
      (common-lisp:list
       (common-lisp:cons "PreSharedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rekey-fuzz-percentage))
      (common-lisp:list
       (common-lisp:cons "RekeyFuzzPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rekey-margin-time-seconds))
      (common-lisp:list
       (common-lisp:cons "RekeyMarginTimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-window-size))
      (common-lisp:list
       (common-lisp:cons "ReplayWindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tunnel-inside-cidr))
      (common-lisp:list
       (common-lisp:cons "TunnelInsideCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-options-tunnel-options-list ()
   '(trivial-types:proper-list
     aws-ec2vpn-connection-options-tunnel-options-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-options-tunnel-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-options-tunnel-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpn-connection-routes-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpn-connection-routes-details-"))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-routes-details
                    'make-aws-ec2vpn-connection-routes-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-routes-list ()
   '(trivial-types:proper-list aws-ec2vpn-connection-routes-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-routes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-routes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ec2vpn-connection-vgw-telemetry-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ec2vpn-connection-vgw-telemetry-details-"))
   (accepted-route-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-status-change common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (outside-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-vgw-telemetry-details
                    'make-aws-ec2vpn-connection-vgw-telemetry-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-route-count))
      (common-lisp:list
       (common-lisp:cons "AcceptedRouteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "LastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outside-ip-address))
      (common-lisp:list
       (common-lisp:cons "OutsideIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-vgw-telemetry-list ()
   '(trivial-types:proper-list aws-ec2vpn-connection-vgw-telemetry-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-vgw-telemetry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-vgw-telemetry-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-container-image-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-container-image-details-"))
   (registry-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-digest common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-tags common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (image-published-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-image-details
                    'make-aws-ecr-container-image-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "ImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "ImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-published-at))
      (common-lisp:list
       (common-lisp:cons "ImagePublishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-repository-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-repository-details-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-scanning-configuration common-lisp:nil :type
    (common-lisp:or aws-ecr-repository-image-scanning-configuration-details
                    common-lisp:null))
   (image-tag-mutability common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (lifecycle-policy common-lisp:nil :type
    (common-lisp:or aws-ecr-repository-lifecycle-policy-details
                    common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (repository-policy-text common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-details
                    'make-aws-ecr-repository-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "ImageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-policy))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-policy-text))
      (common-lisp:list
       (common-lisp:cons "RepositoryPolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-repository-image-scanning-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecr-repository-image-scanning-configuration-details-"))
   (scan-on-push common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-image-scanning-configuration-details
                    'make-aws-ecr-repository-image-scanning-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-on-push))
      (common-lisp:list
       (common-lisp:cons "ScanOnPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecr-repository-lifecycle-policy-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecr-repository-lifecycle-policy-details-"))
   (lifecycle-policy-text common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (registry-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-lifecycle-policy-details
                    'make-aws-ecr-repository-lifecycle-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-cluster-settings-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-cluster-cluster-settings-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-cluster-settings-details
                    'make-aws-ecs-cluster-cluster-settings-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-cluster-cluster-settings-list ()
   '(trivial-types:proper-list aws-ecs-cluster-cluster-settings-details))
 (common-lisp:defun |make-aws-ecs-cluster-cluster-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-cluster-cluster-settings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-configuration-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-cluster-configuration-details-"))
   (execute-command-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-cluster-configuration-execute-command-configuration-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-configuration-details
                    'make-aws-ecs-cluster-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-configuration))
      (common-lisp:list
       (common-lisp:cons "ExecuteCommandConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-configuration-execute-command-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-cluster-configuration-execute-command-configuration-details-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
     common-lisp:null))
   (logging common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-cluster-configuration-execute-command-configuration-details
   'make-aws-ecs-cluster-configuration-execute-command-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-"))
   (cloud-watch-encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-log-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3encryption-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
   'make-aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "S3EncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-default-capacity-provider-strategy-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-cluster-default-capacity-provider-strategy-details-"))
   (base common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (capacity-provider common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (weight common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-default-capacity-provider-strategy-details
                    'make-aws-ecs-cluster-default-capacity-provider-strategy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "CapacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-cluster-default-capacity-provider-strategy-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-cluster-default-capacity-provider-strategy-details))
 (common-lisp:defun |make-aws-ecs-cluster-default-capacity-provider-strategy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-cluster-default-capacity-provider-strategy-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-cluster-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-cluster-details-"))
   (cluster-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (active-services-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (capacity-providers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (cluster-settings common-lisp:nil :type
    (common-lisp:or aws-ecs-cluster-cluster-settings-list common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or aws-ecs-cluster-configuration-details common-lisp:null))
   (default-capacity-provider-strategy common-lisp:nil :type
    (common-lisp:or aws-ecs-cluster-default-capacity-provider-strategy-list
                    common-lisp:null))
   (cluster-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (registered-container-instances-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (running-tasks-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-details 'make-aws-ecs-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-services-count))
      (common-lisp:list
       (common-lisp:cons "ActiveServicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "CapacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-settings))
      (common-lisp:list
       (common-lisp:cons "ClusterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "DefaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-container-instances-count))
      (common-lisp:list
       (common-lisp:cons "RegisteredContainerInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "RunningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-container-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-container-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (mount-points common-lisp:nil :type
    (common-lisp:or aws-mount-point-list common-lisp:null))
   (privileged common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-container-details
                    'make-aws-ecs-container-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "MountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-container-details-list ()
   '(trivial-types:proper-list aws-ecs-container-details))
 (common-lisp:defun |make-aws-ecs-container-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-container-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-capacity-provider-strategy-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-capacity-provider-strategy-details-"))
   (base common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (capacity-provider common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (weight common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-capacity-provider-strategy-details
                    'make-aws-ecs-service-capacity-provider-strategy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "CapacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-capacity-provider-strategy-list ()
   '(trivial-types:proper-list
     aws-ecs-service-capacity-provider-strategy-details))
 (common-lisp:defun |make-aws-ecs-service-capacity-provider-strategy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-capacity-provider-strategy-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details-"))
   (enable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (rollback common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
   'make-aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "Rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-deployment-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-deployment-configuration-details-"))
   (deployment-circuit-breaker common-lisp:nil :type
    (common-lisp:or
     aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
     common-lisp:null))
   (maximum-percent common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (minimum-healthy-percent common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-deployment-configuration-details
                    'make-aws-ecs-service-deployment-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-circuit-breaker))
      (common-lisp:list
       (common-lisp:cons "DeploymentCircuitBreaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-percent))
      (common-lisp:list
       (common-lisp:cons "MaximumPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-percent))
      (common-lisp:list
       (common-lisp:cons "MinimumHealthyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-deployment-controller-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-deployment-controller-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-deployment-controller-details
                    'make-aws-ecs-service-deployment-controller-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-service-details-"))
   (capacity-provider-strategy common-lisp:nil :type
    (common-lisp:or aws-ecs-service-capacity-provider-strategy-list
                    common-lisp:null))
   (cluster common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (deployment-configuration common-lisp:nil :type
    (common-lisp:or aws-ecs-service-deployment-configuration-details
                    common-lisp:null))
   (deployment-controller common-lisp:nil :type
    (common-lisp:or aws-ecs-service-deployment-controller-details
                    common-lisp:null))
   (desired-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (enable-ecs-managed-tags common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-execute-command common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (health-check-grace-period-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (launch-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (load-balancers common-lisp:nil :type
    (common-lisp:or aws-ecs-service-load-balancers-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or aws-ecs-service-network-configuration-details
                    common-lisp:null))
   (placement-constraints common-lisp:nil :type
    (common-lisp:or aws-ecs-service-placement-constraints-list
                    common-lisp:null))
   (placement-strategies common-lisp:nil :type
    (common-lisp:or aws-ecs-service-placement-strategies-list
                    common-lisp:null))
   (platform-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (propagate-tags common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (scheduling-strategy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service-registries common-lisp:nil :type
    (common-lisp:or aws-ecs-service-service-registries-list common-lisp:null))
   (task-definition common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-details 'make-aws-ecs-service-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "CapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "DeploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "DesiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecs-managed-tags))
      (common-lisp:list
       (common-lisp:cons "EnableEcsManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "EnableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "LaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-strategies))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "PropagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "SchedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "ServiceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "TaskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-load-balancers-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-service-load-balancers-details-"))
   (container-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (target-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-load-balancers-details
                    'make-aws-ecs-service-load-balancers-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-load-balancers-list ()
   '(trivial-types:proper-list aws-ecs-service-load-balancers-details))
 (common-lisp:defun |make-aws-ecs-service-load-balancers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-load-balancers-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-network-configuration-aws-vpc-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-network-configuration-aws-vpc-configuration-details-"))
   (assign-public-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-service-network-configuration-aws-vpc-configuration-details
   'make-aws-ecs-service-network-configuration-aws-vpc-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "AssignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-network-configuration-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-network-configuration-details-"))
   (aws-vpc-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-service-network-configuration-aws-vpc-configuration-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-network-configuration-details
                    'make-aws-ecs-service-network-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "AwsVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-placement-constraints-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-placement-constraints-details-"))
   (expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-placement-constraints-details
                    'make-aws-ecs-service-placement-constraints-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-placement-constraints-list ()
   '(trivial-types:proper-list aws-ecs-service-placement-constraints-details))
 (common-lisp:defun |make-aws-ecs-service-placement-constraints-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-placement-constraints-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-placement-strategies-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-service-placement-strategies-details-"))
   (field common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-placement-strategies-details
                    'make-aws-ecs-service-placement-strategies-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-placement-strategies-list ()
   '(trivial-types:proper-list aws-ecs-service-placement-strategies-details))
 (common-lisp:defun |make-aws-ecs-service-placement-strategies-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-placement-strategies-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-service-service-registries-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-service-service-registries-details-"))
   (container-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-service-registries-details
                    'make-aws-ecs-service-service-registries-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-service-registries-list ()
   '(trivial-types:proper-list aws-ecs-service-service-registries-details))
 (common-lisp:defun |make-aws-ecs-service-service-registries-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-service-registries-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-depends-on-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-depends-on-details-"))
   (condition common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-depends-on-details
   'make-aws-ecs-task-definition-container-definitions-depends-on-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-depends-on-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-depends-on-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-depends-on-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-depends-on-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-details-"))
   (command common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (cpu common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (depends-on common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-depends-on-list
     common-lisp:null))
   (disable-networking common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dns-search-domains common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (dns-servers common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (docker-labels common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (docker-security-options common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (entry-point common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-environment-list
     common-lisp:null))
   (environment-files common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-environment-files-list
     common-lisp:null))
   (essential common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (extra-hosts common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-extra-hosts-list
     common-lisp:null))
   (firelens-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-firelens-configuration-details
     common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-health-check-details
     common-lisp:null))
   (hostname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (interactive common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (links common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (linux-parameters common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-details
     common-lisp:null))
   (log-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-log-configuration-details
     common-lisp:null))
   (memory common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (memory-reservation common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (mount-points common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-mount-points-list
     common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port-mappings common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-port-mappings-list
     common-lisp:null))
   (privileged common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (pseudo-terminal common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (readonly-root-filesystem common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (repository-credentials common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-repository-credentials-details
     common-lisp:null))
   (resource-requirements common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-resource-requirements-list
     common-lisp:null))
   (secrets common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-container-definitions-secrets-list
                    common-lisp:null))
   (start-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (stop-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (system-controls common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-system-controls-list
     common-lisp:null))
   (ulimits common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-container-definitions-ulimits-list
                    common-lisp:null))
   (user common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volumes-from common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-volumes-from-list
     common-lisp:null))
   (working-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-container-definitions-details
                    'make-aws-ecs-task-definition-container-definitions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on))
      (common-lisp:list
       (common-lisp:cons "DependsOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-networking))
      (common-lisp:list
       (common-lisp:cons "DisableNetworking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-search-domains))
      (common-lisp:list
       (common-lisp:cons "DnsSearchDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-servers))
      (common-lisp:list
       (common-lisp:cons "DnsServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-labels))
      (common-lisp:list
       (common-lisp:cons "DockerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-security-options))
      (common-lisp:list
       (common-lisp:cons "DockerSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "EntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "EnvironmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'essential))
      (common-lisp:list
       (common-lisp:cons "Essential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-hosts))
      (common-lisp:list
       (common-lisp:cons "ExtraHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firelens-configuration))
      (common-lisp:list
       (common-lisp:cons "FirelensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "Interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "Links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-parameters))
      (common-lisp:list
       (common-lisp:cons "LinuxParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "MemoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "MountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "PortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pseudo-terminal))
      (common-lisp:list
       (common-lisp:cons "PseudoTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-root-filesystem))
      (common-lisp:list
       (common-lisp:cons "ReadonlyRootFilesystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-credentials))
      (common-lisp:list
       (common-lisp:cons "RepositoryCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "ResourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets))
      (common-lisp:list
       (common-lisp:cons "Secrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout))
      (common-lisp:list
       (common-lisp:cons "StartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timeout))
      (common-lisp:list
       (common-lisp:cons "StopTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-controls))
      (common-lisp:list
       (common-lisp:cons "SystemControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ulimits))
      (common-lisp:list
       (common-lisp:cons "Ulimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes-from))
      (common-lisp:list
       (common-lisp:cons "VolumesFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-environment-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-environment-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-environment-details
   'make-aws-ecs-task-definition-container-definitions-environment-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-environment-files-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-environment-files-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-environment-files-details
   'make-aws-ecs-task-definition-container-definitions-environment-files-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-environment-files-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-environment-files-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-environment-files-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-environment-files-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-environment-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-environment-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-environment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-environment-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-extra-hosts-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-extra-hosts-details-"))
   (hostname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-extra-hosts-details
   'make-aws-ecs-task-definition-container-definitions-extra-hosts-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-extra-hosts-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-extra-hosts-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-extra-hosts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-extra-hosts-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-firelens-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-firelens-configuration-details-"))
   (options common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-firelens-configuration-details
   'make-aws-ecs-task-definition-container-definitions-firelens-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-health-check-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-health-check-details-"))
   (command common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (retries common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (start-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-health-check-details
   'make-aws-ecs-task-definition-container-definitions-health-check-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "Retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-period))
      (common-lisp:list
       (common-lisp:cons "StartPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details-"))
   (add common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (drop common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "Add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop))
      (common-lisp:list
       (common-lisp:cons "Drop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-linux-parameters-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-linux-parameters-details-"))
   (capabilities common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
     common-lisp:null))
   (devices common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-devices-list
     common-lisp:null))
   (init-process-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-swap common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (shared-memory-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (swappiness common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (tmpfs common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'init-process-enabled))
      (common-lisp:list
       (common-lisp:cons "InitProcessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-swap))
      (common-lisp:list
       (common-lisp:cons "MaxSwap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-memory-size))
      (common-lisp:list
       (common-lisp:cons "SharedMemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'swappiness))
      (common-lisp:list
       (common-lisp:cons "Swappiness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmpfs))
      (common-lisp:list
       (common-lisp:cons "Tmpfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-linux-parameters-devices-details-"))
   (container-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (host-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-path))
      (common-lisp:list
       (common-lisp:cons "HostPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-linux-parameters-devices-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-linux-parameters-devices-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details-"))
   (container-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (mount-options common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-options))
      (common-lisp:list
       (common-lisp:cons "MountOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-log-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-log-configuration-details-"))
   (log-driver common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (options common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (secret-options common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-log-configuration-details
   'make-aws-ecs-task-definition-container-definitions-log-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-driver))
      (common-lisp:list
       (common-lisp:cons "LogDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-options))
      (common-lisp:list
       (common-lisp:cons "SecretOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value-from common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
   'make-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "ValueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-mount-points-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-mount-points-details-"))
   (container-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (read-only common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (source-volume common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-mount-points-details
   'make-aws-ecs-task-definition-container-definitions-mount-points-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "SourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-mount-points-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-mount-points-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-mount-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-mount-points-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-port-mappings-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-port-mappings-details-"))
   (container-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (host-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-port-mappings-details
   'make-aws-ecs-task-definition-container-definitions-port-mappings-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "HostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-port-mappings-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-port-mappings-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-port-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-port-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-repository-credentials-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-repository-credentials-details-"))
   (credentials-parameter common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-repository-credentials-details
   'make-aws-ecs-task-definition-container-definitions-repository-credentials-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "CredentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-resource-requirements-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-resource-requirements-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-resource-requirements-details
   'make-aws-ecs-task-definition-container-definitions-resource-requirements-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-resource-requirements-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-resource-requirements-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-resource-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-resource-requirements-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-secrets-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-secrets-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value-from common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-secrets-details
   'make-aws-ecs-task-definition-container-definitions-secrets-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "ValueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-secrets-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-secrets-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-secrets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-secrets-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-system-controls-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-system-controls-details-"))
   (namespace common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-system-controls-details
   'make-aws-ecs-task-definition-container-definitions-system-controls-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-system-controls-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-system-controls-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-system-controls-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-system-controls-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-ulimits-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-ulimits-details-"))
   (hard-limit common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (soft-limit common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-ulimits-details
   'make-aws-ecs-task-definition-container-definitions-ulimits-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-limit))
      (common-lisp:list
       (common-lisp:cons "HardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-limit))
      (common-lisp:list
       (common-lisp:cons "SoftLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-ulimits-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-ulimits-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-ulimits-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-ulimits-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-container-definitions-volumes-from-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-container-definitions-volumes-from-details-"))
   (read-only common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (source-container common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-volumes-from-details
   'make-aws-ecs-task-definition-container-definitions-volumes-from-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-container))
      (common-lisp:list
       (common-lisp:cons "SourceContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-volumes-from-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-volumes-from-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-volumes-from-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-volumes-from-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-task-definition-details-"))
   (container-definitions common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-container-definitions-list
                    common-lisp:null))
   (cpu common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (family common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (inference-accelerators common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-inference-accelerators-list
                    common-lisp:null))
   (ipc-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (memory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (pid-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (placement-constraints common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-placement-constraints-list
                    common-lisp:null))
   (proxy-configuration common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-proxy-configuration-details
                    common-lisp:null))
   (requires-compatibilities common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (task-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volumes common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-volumes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-details
                    'make-aws-ecs-task-definition-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "ContainerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "InferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "IpcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "NetworkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "PidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "ProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "RequiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "TaskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-inference-accelerators-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-inference-accelerators-details-"))
   (device-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (device-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-inference-accelerators-details
                    'make-aws-ecs-task-definition-inference-accelerators-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-inference-accelerators-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-inference-accelerators-details))
 (common-lisp:defun |make-aws-ecs-task-definition-inference-accelerators-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-inference-accelerators-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-placement-constraints-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-placement-constraints-details-"))
   (expression common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-placement-constraints-details
                    'make-aws-ecs-task-definition-placement-constraints-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-placement-constraints-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-placement-constraints-details))
 (common-lisp:defun |make-aws-ecs-task-definition-placement-constraints-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-placement-constraints-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-proxy-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-proxy-configuration-details-"))
   (container-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (proxy-configuration-properties common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list
     common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-proxy-configuration-details
                    'make-aws-ecs-task-definition-proxy-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proxy-configuration-properties))
      (common-lisp:list
       (common-lisp:cons "ProxyConfigurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
   'make-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
 (common-lisp:defun |make-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-volumes-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-task-definition-volumes-details-"))
   (docker-volume-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-volumes-docker-volume-configuration-details
     common-lisp:null))
   (efs-volume-configuration common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-volumes-efs-volume-configuration-details
     common-lisp:null))
   (host common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-volumes-host-details
                    common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-volumes-details
                    'make-aws-ecs-task-definition-volumes-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "DockerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'efs-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "EfsVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-volumes-docker-volume-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-volumes-docker-volume-configuration-details-"))
   (autoprovision common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (driver common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (driver-opts common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (labels common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (scope common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-docker-volume-configuration-details
   'make-aws-ecs-task-definition-volumes-docker-volume-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autoprovision))
      (common-lisp:list
       (common-lisp:cons "Autoprovision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver))
      (common-lisp:list
       (common-lisp:cons "Driver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver-opts))
      (common-lisp:list
       (common-lisp:cons "DriverOpts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details-"))
   (access-point-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
   'make-aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "AccessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-volumes-efs-volume-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-volumes-efs-volume-configuration-details-"))
   (authorization-config common-lisp:nil :type
    (common-lisp:or
     aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
     common-lisp:null))
   (filesystem-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (root-directory common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (transit-encryption common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (transit-encryption-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-efs-volume-configuration-details
   'make-aws-ecs-task-definition-volumes-efs-volume-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "AuthorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filesystem-id))
      (common-lisp:list
       (common-lisp:cons "FilesystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-encryption))
      (common-lisp:list
       (common-lisp:cons "TransitEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-port))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-definition-volumes-host-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-ecs-task-definition-volumes-host-details-"))
   (source-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-volumes-host-details
                    'make-aws-ecs-task-definition-volumes-host-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-volumes-list ()
   '(trivial-types:proper-list aws-ecs-task-definition-volumes-details))
 (common-lisp:defun |make-aws-ecs-task-definition-volumes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-volumes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-task-details-"))
   (cluster-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (task-definition-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (started-by common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volumes common-lisp:nil :type
    (common-lisp:or aws-ecs-task-volume-details-list common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or aws-ecs-container-details-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-details 'make-aws-ecs-task-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "StartedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-volume-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-task-volume-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (host common-lisp:nil :type
    (common-lisp:or aws-ecs-task-volume-host-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-volume-details
                    'make-aws-ecs-task-volume-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-volume-details-list ()
   '(trivial-types:proper-list aws-ecs-task-volume-details))
 (common-lisp:defun |make-aws-ecs-task-volume-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-volume-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ecs-task-volume-host-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ecs-task-volume-host-details-"))
   (source-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-volume-host-details
                    'make-aws-ecs-task-volume-host-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-efs-access-point-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-efs-access-point-details-"))
   (access-point-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (file-system-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (posix-user common-lisp:nil :type
    (common-lisp:or aws-efs-access-point-posix-user-details common-lisp:null))
   (root-directory common-lisp:nil :type
    (common-lisp:or aws-efs-access-point-root-directory-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-details
                    'make-aws-efs-access-point-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "AccessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-user))
      (common-lisp:list
       (common-lisp:cons "PosixUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-efs-access-point-posix-user-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-efs-access-point-posix-user-details-"))
   (gid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (secondary-gids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (uid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-posix-user-details
                    'make-aws-efs-access-point-posix-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gid))
      (common-lisp:list
       (common-lisp:cons "Gid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-gids))
      (common-lisp:list
       (common-lisp:cons "SecondaryGids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-efs-access-point-root-directory-creation-info-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-efs-access-point-root-directory-creation-info-details-"))
   (owner-gid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-uid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-root-directory-creation-info-details
                    'make-aws-efs-access-point-root-directory-creation-info-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-gid))
      (common-lisp:list
       (common-lisp:cons "OwnerGid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-uid))
      (common-lisp:list
       (common-lisp:cons "OwnerUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-efs-access-point-root-directory-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-efs-access-point-root-directory-details-"))
   (creation-info common-lisp:nil :type
    (common-lisp:or aws-efs-access-point-root-directory-creation-info-details
                    common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-root-directory-details
                    'make-aws-efs-access-point-root-directory-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-info))
      (common-lisp:list
       (common-lisp:cons "CreationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-eks-cluster-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-eks-cluster-details-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (certificate-authority-data common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resources-vpc-config common-lisp:nil :type
    (common-lisp:or aws-eks-cluster-resources-vpc-config-details
                    common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging common-lisp:nil :type
    (common-lisp:or aws-eks-cluster-logging-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-details 'make-aws-eks-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-data))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "ResourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-eks-cluster-logging-cluster-logging-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-eks-cluster-logging-cluster-logging-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-logging-cluster-logging-details
                    'make-aws-eks-cluster-logging-cluster-logging-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-eks-cluster-logging-cluster-logging-list ()
   '(trivial-types:proper-list
     aws-eks-cluster-logging-cluster-logging-details))
 (common-lisp:defun |make-aws-eks-cluster-logging-cluster-logging-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-eks-cluster-logging-cluster-logging-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-eks-cluster-logging-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-eks-cluster-logging-details-"))
   (cluster-logging common-lisp:nil :type
    (common-lisp:or aws-eks-cluster-logging-cluster-logging-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-logging-details
                    'make-aws-eks-cluster-logging-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-logging))
      (common-lisp:list
       (common-lisp:cons "ClusterLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-eks-cluster-resources-vpc-config-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-eks-cluster-resources-vpc-config-details-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (endpoint-public-access common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-resources-vpc-config-details
                    'make-aws-eks-cluster-resources-vpc-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "EndpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elastic-beanstalk-environment-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elastic-beanstalk-environment-details-"))
   (application-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-updated common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoint-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (environment-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (environment-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (environment-links common-lisp:nil :type
    (common-lisp:or aws-elastic-beanstalk-environment-environment-links
                    common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or aws-elastic-beanstalk-environment-option-settings
                    common-lisp:null))
   (platform-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (solution-stack-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tier common-lisp:nil :type
    (common-lisp:or aws-elastic-beanstalk-environment-tier common-lisp:null))
   (version-label common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-details
                    'make-aws-elastic-beanstalk-environment-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cname))
      (common-lisp:list
       (common-lisp:cons "Cname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "EnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-links))
      (common-lisp:list
       (common-lisp:cons "EnvironmentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elastic-beanstalk-environment-environment-link
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elastic-beanstalk-environment-environment-link-"))
   (environment-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-environment-link
                    'make-aws-elastic-beanstalk-environment-environment-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elastic-beanstalk-environment-environment-links ()
   '(trivial-types:proper-list
     aws-elastic-beanstalk-environment-environment-link))
 (common-lisp:defun |make-aws-elastic-beanstalk-environment-environment-links|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elastic-beanstalk-environment-environment-link))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elastic-beanstalk-environment-option-setting
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elastic-beanstalk-environment-option-setting-"))
   (namespace common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (option-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-option-setting
                    'make-aws-elastic-beanstalk-environment-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elastic-beanstalk-environment-option-settings ()
   '(trivial-types:proper-list
     aws-elastic-beanstalk-environment-option-setting))
 (common-lisp:defun |make-aws-elastic-beanstalk-environment-option-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elastic-beanstalk-environment-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elastic-beanstalk-environment-tier (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elastic-beanstalk-environment-tier-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-tier
                    'make-aws-elastic-beanstalk-environment-tier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elasticsearch-domain-details-"))
   (access-policies common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-endpoint-options common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-domain-endpoint-options
                    common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (elasticsearch-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (elasticsearch-cluster-config common-lisp:nil :type
    (common-lisp:or
     aws-elasticsearch-domain-elasticsearch-cluster-config-details
     common-lisp:null))
   (encryption-at-rest-options common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-encryption-at-rest-options
                    common-lisp:null))
   (log-publishing-options common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-log-publishing-options
                    common-lisp:null))
   (node-to-node-encryption-options common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-node-to-node-encryption-options
                    common-lisp:null))
   (service-software-options common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-service-software-options
                    common-lisp:null))
   (vpcoptions common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-vpcoptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-details
                    'make-aws-elasticsearch-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-domain-endpoint-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-domain-endpoint-options-"))
   (enforce-https common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tlssecurity-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-domain-endpoint-options
                    'make-aws-elasticsearch-domain-domain-endpoint-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-elasticsearch-cluster-config-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-elasticsearch-cluster-config-details-"))
   (dedicated-master-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dedicated-master-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dedicated-master-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (zone-awareness-config common-lisp:nil :type
    (common-lisp:or
     aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
     common-lisp:null))
   (zone-awareness-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-elasticsearch-domain-elasticsearch-cluster-config-details
   'make-aws-elasticsearch-domain-elasticsearch-cluster-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details-"))
   (availability-zone-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
   'make-aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-encryption-at-rest-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-encryption-at-rest-options-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-encryption-at-rest-options
                    'make-aws-elasticsearch-domain-encryption-at-rest-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-log-publishing-options (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-log-publishing-options-"))
   (index-slow-logs common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-log-publishing-options-log-config
                    common-lisp:null))
   (search-slow-logs common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-log-publishing-options-log-config
                    common-lisp:null))
   (audit-logs common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-log-publishing-options-log-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-log-publishing-options
                    'make-aws-elasticsearch-domain-log-publishing-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-slow-logs))
      (common-lisp:list
       (common-lisp:cons "IndexSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-slow-logs))
      (common-lisp:list
       (common-lisp:cons "SearchSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-log-publishing-options-log-config
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-log-publishing-options-log-config-"))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-log-publishing-options-log-config
                    'make-aws-elasticsearch-domain-log-publishing-options-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-node-to-node-encryption-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-node-to-node-encryption-options-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-node-to-node-encryption-options
                    'make-aws-elasticsearch-domain-node-to-node-encryption-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-service-software-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elasticsearch-domain-service-software-options-"))
   (automated-update-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cancellable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (new-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (update-available common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-service-software-options
                    'make-aws-elasticsearch-domain-service-software-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elasticsearch-domain-vpcoptions (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elasticsearch-domain-vpcoptions-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (vpcid common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-vpcoptions
                    'make-aws-elasticsearch-domain-vpcoptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-app-cookie-stickiness-policies ()
   '(trivial-types:proper-list aws-elb-app-cookie-stickiness-policy))
 (common-lisp:defun |make-aws-elb-app-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-app-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-app-cookie-stickiness-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-app-cookie-stickiness-policy-"))
   (cookie-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-app-cookie-stickiness-policy
                    'make-aws-elb-app-cookie-stickiness-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-lb-cookie-stickiness-policies ()
   '(trivial-types:proper-list aws-elb-lb-cookie-stickiness-policy))
 (common-lisp:defun |make-aws-elb-lb-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-lb-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-lb-cookie-stickiness-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-lb-cookie-stickiness-policy-"))
   (cookie-expiration-period common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-lb-cookie-stickiness-policy
                    'make-aws-elb-lb-cookie-stickiness-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-access-log-"))
   (emit-interval common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3bucket-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-access-log
                    'make-aws-elb-load-balancer-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emit-interval))
      (common-lisp:list
       (common-lisp:cons "EmitInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "S3BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-additional-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-additional-attribute-"))
   (key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-additional-attribute
                    'make-aws-elb-load-balancer-additional-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-additional-attribute-list ()
   '(trivial-types:proper-list aws-elb-load-balancer-additional-attribute))
 (common-lisp:defun |make-aws-elb-load-balancer-additional-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-attributes-"))
   (access-log common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-access-log common-lisp:null))
   (connection-draining common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-connection-draining
                    common-lisp:null))
   (connection-settings common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-connection-settings
                    common-lisp:null))
   (cross-zone-load-balancing common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-cross-zone-load-balancing
                    common-lisp:null))
   (additional-attributes common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-additional-attribute-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-attributes
                    'make-aws-elb-load-balancer-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "AccessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-draining))
      (common-lisp:list
       (common-lisp:cons "ConnectionDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-zone-load-balancing))
      (common-lisp:list
       (common-lisp:cons "CrossZoneLoadBalancing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-backend-server-description
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elb-load-balancer-backend-server-description-"))
   (instance-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-backend-server-description
                    'make-aws-elb-load-balancer-backend-server-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-backend-server-descriptions ()
   '(trivial-types:proper-list
     aws-elb-load-balancer-backend-server-description))
 (common-lisp:defun |make-aws-elb-load-balancer-backend-server-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-backend-server-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-connection-draining (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-connection-draining-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-connection-draining
                    'make-aws-elb-load-balancer-connection-draining))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-connection-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-connection-settings-"))
   (idle-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-connection-settings
                    'make-aws-elb-load-balancer-connection-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-cross-zone-load-balancing (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-elb-load-balancer-cross-zone-load-balancing-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-cross-zone-load-balancing
                    'make-aws-elb-load-balancer-cross-zone-load-balancing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-details-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (backend-server-descriptions common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-backend-server-descriptions
                    common-lisp:null))
   (canonical-hosted-zone-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (canonical-hosted-zone-name-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dns-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-health-check common-lisp:null))
   (instances common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-instances common-lisp:null))
   (listener-descriptions common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-listener-descriptions
                    common-lisp:null))
   (load-balancer-attributes common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-attributes common-lisp:null))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policies common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-policies common-lisp:null))
   (scheme common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (source-security-group common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-source-security-group
                    common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-details
                    'make-aws-elb-load-balancer-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-server-descriptions))
      (common-lisp:list
       (common-lisp:cons "BackendServerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneNameID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'listener-descriptions))
      (common-lisp:list
       (common-lisp:cons "ListenerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-health-check (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-health-check-"))
   (healthy-threshold common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (unhealthy-threshold common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-health-check
                    'make-aws-elb-load-balancer-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-instance-"))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-instance
                    'make-aws-elb-load-balancer-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-instances ()
   '(trivial-types:proper-list aws-elb-load-balancer-instance))
 (common-lisp:defun |make-aws-elb-load-balancer-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-listener (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-listener-"))
   (instance-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (load-balancer-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ssl-certificate-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-listener
                    'make-aws-elb-load-balancer-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-protocol))
      (common-lisp:list
       (common-lisp:cons "InstanceProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-certificate-id))
      (common-lisp:list
       (common-lisp:cons "SslCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-listener-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-listener-description-"))
   (listener common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-listener common-lisp:null))
   (policy-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-listener-description
                    'make-aws-elb-load-balancer-listener-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-listener-descriptions ()
   '(trivial-types:proper-list aws-elb-load-balancer-listener-description))
 (common-lisp:defun |make-aws-elb-load-balancer-listener-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-listener-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-policies (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-policies-"))
   (app-cookie-stickiness-policies common-lisp:nil :type
    (common-lisp:or aws-elb-app-cookie-stickiness-policies common-lisp:null))
   (lb-cookie-stickiness-policies common-lisp:nil :type
    (common-lisp:or aws-elb-lb-cookie-stickiness-policies common-lisp:null))
   (other-policies common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-policies
                    'make-aws-elb-load-balancer-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "AppCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lb-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "LbCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-policies))
      (common-lisp:list
       (common-lisp:cons "OtherPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elb-load-balancer-source-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elb-load-balancer-source-security-group-"))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-alias common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-source-security-group
                    'make-aws-elb-load-balancer-source-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elbv2load-balancer-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elbv2load-balancer-attribute-"))
   (key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elbv2load-balancer-attribute
                    'make-aws-elbv2load-balancer-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elbv2load-balancer-attributes ()
   '(trivial-types:proper-list aws-elbv2load-balancer-attribute))
 (common-lisp:defun |make-aws-elbv2load-balancer-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elbv2load-balancer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-elbv2load-balancer-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-elbv2load-balancer-details-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (canonical-hosted-zone-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dnsname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (scheme common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or load-balancer-state common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (load-balancer-attributes common-lisp:nil :type
    (common-lisp:or aws-elbv2load-balancer-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-elbv2load-balancer-details
                    'make-aws-elbv2load-balancer-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-access-key-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-access-key-details-"))
   (user-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or aws-iam-access-key-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (principal-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (principal-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (access-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-context common-lisp:nil :type
    (common-lisp:or aws-iam-access-key-session-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-details
                    'make-aws-iam-access-key-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-name))
      (common-lisp:list
       (common-lisp:cons "PrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "SessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-access-key-session-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-access-key-session-context-"))
   (attributes common-lisp:nil :type
    (common-lisp:or aws-iam-access-key-session-context-attributes
                    common-lisp:null))
   (session-issuer common-lisp:nil :type
    (common-lisp:or aws-iam-access-key-session-context-session-issuer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context
                    'make-aws-iam-access-key-session-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-issuer))
      (common-lisp:list
       (common-lisp:cons "SessionIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-access-key-session-context-attributes (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-iam-access-key-session-context-attributes-"))
   (mfa-authenticated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context-attributes
                    'make-aws-iam-access-key-session-context-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-authenticated))
      (common-lisp:list
       (common-lisp:cons "MfaAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-access-key-session-context-session-issuer
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-iam-access-key-session-context-session-issuer-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context-session-issuer
                    'make-aws-iam-access-key-session-context-session-issuer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   common-lisp:nil))
(common-lisp:deftype aws-iam-access-key-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-attached-managed-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-attached-managed-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-attached-managed-policy
                    'make-aws-iam-attached-managed-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-attached-managed-policy-list ()
   '(trivial-types:proper-list aws-iam-attached-managed-policy))
 (common-lisp:defun |make-aws-iam-attached-managed-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-attached-managed-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-group-details-"))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or aws-iam-attached-managed-policy-list common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-policy-list common-lisp:nil :type
    (common-lisp:or aws-iam-group-policy-list common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-group-details 'make-aws-iam-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-policy-list))
      (common-lisp:list
       (common-lisp:cons "GroupPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-group-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-group-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-group-policy 'make-aws-iam-group-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-group-policy-list ()
   '(trivial-types:proper-list aws-iam-group-policy))
 (common-lisp:defun |make-aws-iam-group-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-group-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-instance-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-instance-profile-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-profile-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-profile-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (roles common-lisp:nil :type
    (common-lisp:or aws-iam-instance-profile-roles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-instance-profile 'make-aws-iam-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile-id))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-instance-profile-list ()
   '(trivial-types:proper-list aws-iam-instance-profile))
 (common-lisp:defun |make-aws-iam-instance-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-instance-profile-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-instance-profile-role-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or aws-iam-role-assume-role-policy-document common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-instance-profile-role
                    'make-aws-iam-instance-profile-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-instance-profile-roles ()
   '(trivial-types:proper-list aws-iam-instance-profile-role))
 (common-lisp:defun |make-aws-iam-instance-profile-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-instance-profile-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-permissions-boundary (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-permissions-boundary-"))
   (permissions-boundary-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (permissions-boundary-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-permissions-boundary
                    'make-aws-iam-permissions-boundary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-arn))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-type))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-policy-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-policy-details-"))
   (attachment-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (is-attachable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (permissions-boundary-usage-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (policy-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (policy-version-list common-lisp:nil :type
    (common-lisp:or aws-iam-policy-version-list common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-policy-details 'make-aws-iam-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-list))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-policy-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-policy-version-"))
   (version-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-policy-version 'make-aws-iam-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-policy-version-list ()
   '(trivial-types:proper-list aws-iam-policy-version))
 (common-lisp:defun |make-aws-iam-policy-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-iam-role-assume-role-policy-document ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-role-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-role-details-"))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or aws-iam-role-assume-role-policy-document common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or aws-iam-attached-managed-policy-list common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-profile-list common-lisp:nil :type
    (common-lisp:or aws-iam-instance-profile-list common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or aws-iam-permissions-boundary common-lisp:null))
   (role-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role-policy-list common-lisp:nil :type
    (common-lisp:or aws-iam-role-policy-list common-lisp:null))
   (max-session-duration common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-role-details 'make-aws-iam-role-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-list))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-policy-list))
      (common-lisp:list
       (common-lisp:cons "RolePolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-role-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-role-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-role-policy 'make-aws-iam-role-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-role-policy-list ()
   '(trivial-types:proper-list aws-iam-role-policy))
 (common-lisp:defun |make-aws-iam-role-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-role-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-user-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-user-details-"))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or aws-iam-attached-managed-policy-list common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-list common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or aws-iam-permissions-boundary common-lisp:null))
   (user-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-policy-list common-lisp:nil :type
    (common-lisp:or aws-iam-user-policy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-user-details 'make-aws-iam-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-policy-list))
      (common-lisp:list
       (common-lisp:cons "UserPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-iam-user-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-iam-user-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-user-policy 'make-aws-iam-user-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-user-policy-list ()
   '(trivial-types:proper-list aws-iam-user-policy))
 (common-lisp:defun |make-aws-iam-user-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-user-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-kinesis-stream-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-kinesis-stream-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stream-encryption common-lisp:nil :type
    (common-lisp:or aws-kinesis-stream-stream-encryption-details
                    common-lisp:null))
   (shard-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (retention-period-hours common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-kinesis-stream-details
                    'make-aws-kinesis-stream-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-encryption))
      (common-lisp:list
       (common-lisp:cons "StreamEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "ShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-kinesis-stream-stream-encryption-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-kinesis-stream-stream-encryption-details-"))
   (encryption-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-kinesis-stream-stream-encryption-details
                    'make-aws-kinesis-stream-stream-encryption-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-kms-key-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-kms-key-details-"))
   (awsaccount-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-manager common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-rotation-status common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-kms-key-details 'make-aws-kms-key-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-manager))
      (common-lisp:list
       (common-lisp:cons "KeyManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-state))
      (common-lisp:list
       (common-lisp:cons "KeyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-rotation-status))
      (common-lisp:list
       (common-lisp:cons "KeyRotationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-code-"))
   (s3bucket common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (s3object-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (zip-file common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-code 'make-aws-lambda-function-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-dead-letter-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-dead-letter-config-"))
   (target-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-dead-letter-config
                    'make-aws-lambda-function-dead-letter-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-details-"))
   (code common-lisp:nil :type
    (common-lisp:or aws-lambda-function-code common-lisp:null))
   (code-sha256 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dead-letter-config common-lisp:nil :type
    (common-lisp:or aws-lambda-function-dead-letter-config common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or aws-lambda-function-environment common-lisp:null))
   (function-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (handler common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (layers common-lisp:nil :type
    (common-lisp:or aws-lambda-function-layer-list common-lisp:null))
   (master-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (memory-size common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (revision-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (runtime common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (tracing-config common-lisp:nil :type
    (common-lisp:or aws-lambda-function-tracing-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or aws-lambda-function-vpc-config common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (architectures common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (package-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-details
                    'make-aws-lambda-function-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-arn))
      (common-lisp:list
       (common-lisp:cons "MasterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "Architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-environment (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-environment-"))
   (variables common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or aws-lambda-function-environment-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-environment
                    'make-aws-lambda-function-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-environment-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-environment-error-"))
   (error-code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-environment-error
                    'make-aws-lambda-function-environment-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-layer (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-layer-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (code-size common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-layer
                    'make-aws-lambda-function-layer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-lambda-function-layer-list ()
   '(trivial-types:proper-list aws-lambda-function-layer))
 (common-lisp:defun |make-aws-lambda-function-layer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-lambda-function-layer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-tracing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-tracing-config-"))
   (mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-tracing-config
                    'make-aws-lambda-function-tracing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-function-vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-function-vpc-config-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-vpc-config
                    'make-aws-lambda-function-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-lambda-layer-version-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-lambda-layer-version-details-"))
   (version common-lisp:nil :type
    (common-lisp:or aws-lambda-layer-version-number common-lisp:null))
   (compatible-runtimes common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-layer-version-details
                    'make-aws-lambda-layer-version-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   common-lisp:nil))
(common-lisp:deftype aws-lambda-layer-version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-mount-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-mount-point-"))
   (source-volume common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (container-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aws-mount-point 'make-aws-mount-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-mount-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-mount-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "SourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-mount-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-mount-point-list ()
   '(trivial-types:proper-list aws-mount-point))
 (common-lisp:defun |make-aws-mount-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-mount-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-network-firewall-firewall-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-network-firewall-firewall-details-"))
   (delete-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-policy-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-policy-change-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (subnet-change-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (subnet-mappings common-lisp:nil :type
    (common-lisp:or aws-network-firewall-firewall-subnet-mappings-list
                    common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-details
                    'make-aws-network-firewall-firewall-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-protection))
      (common-lisp:list
       (common-lisp:cons "DeleteProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-id))
      (common-lisp:list
       (common-lisp:cons "FirewallId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-name))
      (common-lisp:list
       (common-lisp:cons "FirewallName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-change-protection))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyChangeProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-change-protection))
      (common-lisp:list
       (common-lisp:cons "SubnetChangeProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-network-firewall-firewall-policy-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-network-firewall-firewall-policy-details-"))
   (firewall-policy common-lisp:nil :type
    (common-lisp:or firewall-policy-details common-lisp:null))
   (firewall-policy-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-policy-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firewall-policy-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-policy-details
                    'make-aws-network-firewall-firewall-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-id))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-name))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-network-firewall-firewall-subnet-mappings-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-network-firewall-firewall-subnet-mappings-details-"))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-subnet-mappings-details
                    'make-aws-network-firewall-firewall-subnet-mappings-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-network-firewall-firewall-subnet-mappings-list ()
   '(trivial-types:proper-list
     aws-network-firewall-firewall-subnet-mappings-details))
 (common-lisp:defun |make-aws-network-firewall-firewall-subnet-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-network-firewall-firewall-subnet-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-network-firewall-rule-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-network-firewall-rule-group-details-"))
   (capacity common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-group common-lisp:nil :type
    (common-lisp:or rule-group-details common-lisp:null))
   (rule-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-rule-group-details
                    'make-aws-network-firewall-rule-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-arn))
      (common-lisp:list
       (common-lisp:cons "RuleGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-advanced-security-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-advanced-security-options-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (internal-user-database-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (master-user-options common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-master-user-options-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-advanced-security-options-details
   'make-aws-open-search-service-domain-advanced-security-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-options))
      (common-lisp:list
       (common-lisp:cons "MasterUserOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-cluster-config-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-cluster-config-details-"))
   (instance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (warm-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (warm-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (dedicated-master-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (zone-awareness-config common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-cluster-config-zone-awareness-config-details
     common-lisp:null))
   (dedicated-master-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (warm-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (zone-awareness-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dedicated-master-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-cluster-config-details
                    'make-aws-open-search-service-domain-cluster-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-enabled))
      (common-lisp:list
       (common-lisp:cons "WarmEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-count))
      (common-lisp:list
       (common-lisp:cons "WarmCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-type))
      (common-lisp:list
       (common-lisp:cons "WarmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-cluster-config-zone-awareness-config-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-cluster-config-zone-awareness-config-details-"))
   (availability-zone-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-cluster-config-zone-awareness-config-details
   'make-aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-open-search-service-domain-details-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (access-policies common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encryption-at-rest-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-encryption-at-rest-options-details
     common-lisp:null))
   (node-to-node-encryption-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-node-to-node-encryption-options-details
     common-lisp:null))
   (service-software-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-service-software-options-details
     common-lisp:null))
   (cluster-config common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-cluster-config-details
                    common-lisp:null))
   (domain-endpoint-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-domain-endpoint-options-details
     common-lisp:null))
   (vpc-options common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-vpc-options-details
                    common-lisp:null))
   (log-publishing-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-log-publishing-options-details
     common-lisp:null))
   (domain-endpoints common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (advanced-security-options common-lisp:nil :type
    (common-lisp:or
     aws-open-search-service-domain-advanced-security-options-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-details
                    'make-aws-open-search-service-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-endpoint))
      (common-lisp:list
       (common-lisp:cons "DomainEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-endpoints))
      (common-lisp:list
       (common-lisp:cons "DomainEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-domain-endpoint-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-domain-endpoint-options-details-"))
   (custom-endpoint-certificate-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (custom-endpoint-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enforce-https common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (custom-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tlssecurity-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-domain-endpoint-options-details
   'make-aws-open-search-service-domain-domain-endpoint-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoint))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-encryption-at-rest-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-encryption-at-rest-options-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-encryption-at-rest-options-details
   'make-aws-open-search-service-domain-encryption-at-rest-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-log-publishing-option
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-log-publishing-option-"))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-log-publishing-option
                    'make-aws-open-search-service-domain-log-publishing-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-log-publishing-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-log-publishing-options-details-"))
   (index-slow-logs common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null))
   (search-slow-logs common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null))
   (audit-logs common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-log-publishing-options-details
   'make-aws-open-search-service-domain-log-publishing-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-slow-logs))
      (common-lisp:list
       (common-lisp:cons "IndexSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-slow-logs))
      (common-lisp:list
       (common-lisp:cons "SearchSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-master-user-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-master-user-options-details-"))
   (master-user-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-user-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-master-user-options-details
                    'make-aws-open-search-service-domain-master-user-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-arn))
      (common-lisp:list
       (common-lisp:cons "MasterUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-node-to-node-encryption-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-node-to-node-encryption-options-details-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-node-to-node-encryption-options-details
   'make-aws-open-search-service-domain-node-to-node-encryption-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-service-software-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-service-software-options-details-"))
   (automated-update-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cancellable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (current-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (new-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (update-available common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (optional-deployment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-service-software-options-details
   'make-aws-open-search-service-domain-service-software-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-deployment))
      (common-lisp:list
       (common-lisp:cons "OptionalDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-open-search-service-domain-vpc-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-open-search-service-domain-vpc-options-details-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-vpc-options-details
                    'make-aws-open-search-service-domain-vpc-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-cluster-associated-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-cluster-associated-role-"))
   (role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-associated-role
                    'make-aws-rds-db-cluster-associated-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-associated-roles ()
   '(trivial-types:proper-list aws-rds-db-cluster-associated-role))
 (common-lisp:defun |make-aws-rds-db-cluster-associated-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-associated-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-cluster-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-cluster-details-"))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reader-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (custom-endpoints common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (read-replica-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-vpc-security-groups common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-resource-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (associated-roles common-lisp:nil :type
    (common-lisp:or aws-rds-db-cluster-associated-roles common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled-cloud-watch-logs-exports common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (engine-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (http-endpoint-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (activity-stream-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cross-account-clone common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (domain-memberships common-lisp:nil :type
    (common-lisp:or aws-rds-db-domain-memberships common-lisp:null))
   (db-cluster-parameter-group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-subnet-group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-option-group-memberships common-lisp:nil :type
    (common-lisp:or aws-rds-db-cluster-option-group-memberships
                    common-lisp:null))
   (db-cluster-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-members common-lisp:nil :type
    (common-lisp:or aws-rds-db-cluster-members common-lisp:null))
   (iam-database-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-details
                    'make-aws-rds-db-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoints))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-clone))
      (common-lisp:list
       (common-lisp:cons "CrossAccountClone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DbClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DbClusterOptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-cluster-members))
      (common-lisp:list
       (common-lisp:cons "DbClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-cluster-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-cluster-member-"))
   (is-cluster-writer common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (db-instance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-parameter-group-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-member
                    'make-aws-rds-db-cluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DbClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-members ()
   '(trivial-types:proper-list aws-rds-db-cluster-member))
 (common-lisp:defun |make-aws-rds-db-cluster-members|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-cluster-option-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-cluster-option-group-membership-"))
   (db-cluster-option-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-option-group-membership
                    'make-aws-rds-db-cluster-option-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-option-group-name))
      (common-lisp:list
       (common-lisp:cons "DbClusterOptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-option-group-memberships ()
   '(trivial-types:proper-list aws-rds-db-cluster-option-group-membership))
 (common-lisp:defun |make-aws-rds-db-cluster-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-cluster-snapshot-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-cluster-snapshot-details-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-cluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-database-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-snapshot-details
                    'make-aws-rds-db-cluster-snapshot-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-domain-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-domain-membership-"))
   (domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (fqdn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-role-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-domain-membership
                    'make-aws-rds-db-domain-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "Fqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-name))
      (common-lisp:list
       (common-lisp:cons "IamRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-domain-memberships ()
   '(trivial-types:proper-list aws-rds-db-domain-membership))
 (common-lisp:defun |make-aws-rds-db-domain-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-domain-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-instance-associated-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-instance-associated-role-"))
   (role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-associated-role
                    'make-aws-rds-db-instance-associated-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-instance-associated-roles ()
   '(trivial-types:proper-list aws-rds-db-instance-associated-role))
 (common-lisp:defun |make-aws-rds-db-instance-associated-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-instance-associated-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-instance-details-"))
   (associated-roles common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-associated-roles common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-instance-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dbname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-endpoint common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-vpc-security-groups common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (enhanced-monitoring-resource-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-instance-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (db-security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (db-parameter-groups common-lisp:nil :type
    (common-lisp:or aws-rds-db-parameter-groups common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-subnet-group common-lisp:nil :type
    (common-lisp:or aws-rds-db-subnet-group common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or aws-rds-db-pending-modified-values common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (read-replica-source-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (read-replica-dbinstance-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (read-replica-dbcluster-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (option-group-memberships common-lisp:nil :type
    (common-lisp:or aws-rds-db-option-group-memberships common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (secondary-availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status-infos common-lisp:nil :type
    (common-lisp:or aws-rds-db-status-infos common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (domain-memberships common-lisp:nil :type
    (common-lisp:or aws-rds-db-domain-memberships common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (performance-insights-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (performance-insights-kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (enabled-cloud-watch-logs-exports common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or aws-rds-db-processor-features common-lisp:null))
   (listener-endpoint common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-endpoint common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-details
                    'make-aws-rds-db-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-port))
      (common-lisp:list
       (common-lisp:cons "DbInstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-monitoring-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoringResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-status))
      (common-lisp:list
       (common-lisp:cons "DbInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-security-groups))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DbParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "OptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-endpoint))
      (common-lisp:list
       (common-lisp:cons "ListenerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-instance-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-instance-endpoint-"))
   (address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-endpoint
                    'make-aws-rds-db-instance-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-instance-vpc-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-instance-vpc-security-group-"))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-vpc-security-group
                    'make-aws-rds-db-instance-vpc-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-instance-vpc-security-groups ()
   '(trivial-types:proper-list aws-rds-db-instance-vpc-security-group))
 (common-lisp:defun |make-aws-rds-db-instance-vpc-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-instance-vpc-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-option-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-option-group-membership-"))
   (option-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-option-group-membership
                    'make-aws-rds-db-option-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-option-group-memberships ()
   '(trivial-types:proper-list aws-rds-db-option-group-membership))
 (common-lisp:defun |make-aws-rds-db-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-parameter-group-"))
   (db-parameter-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-parameter-group
                    'make-aws-rds-db-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DbParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-parameter-groups ()
   '(trivial-types:proper-list aws-rds-db-parameter-group))
 (common-lisp:defun |make-aws-rds-db-parameter-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-pending-modified-values-"))
   (db-instance-class common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (db-instance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ca-certificate-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-subnet-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (pending-cloud-watch-logs-exports common-lisp:nil :type
    (common-lisp:or aws-rds-pending-cloud-watch-logs-exports common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or aws-rds-db-processor-features common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-pending-modified-values
                    'make-aws-rds-db-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-class))
      (common-lisp:list
       (common-lisp:cons "DbInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CaCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-processor-feature (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-processor-feature-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-processor-feature
                    'make-aws-rds-db-processor-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-processor-features ()
   '(trivial-types:proper-list aws-rds-db-processor-feature))
 (common-lisp:defun |make-aws-rds-db-processor-features|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-security-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-security-group-details-"))
   (db-security-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-security-group-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-security-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ec2security-groups common-lisp:nil :type
    (common-lisp:or aws-rds-db-security-group-ec2security-groups
                    common-lisp:null))
   (ip-ranges common-lisp:nil :type
    (common-lisp:or aws-rds-db-security-group-ip-ranges common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-details
                    'make-aws-rds-db-security-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-arn))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-description))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-security-group-ec2security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-security-group-ec2security-group-"))
   (ec2security-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-ec2security-group
                    'make-aws-rds-db-security-group-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-security-group-ec2security-groups ()
   '(trivial-types:proper-list aws-rds-db-security-group-ec2security-group))
 (common-lisp:defun |make-aws-rds-db-security-group-ec2security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-security-group-ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-security-group-ip-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-security-group-ip-range-"))
   (cidr-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-ip-range
                    'make-aws-rds-db-security-group-ip-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-security-group-ip-ranges ()
   '(trivial-types:proper-list aws-rds-db-security-group-ip-range))
 (common-lisp:defun |make-aws-rds-db-security-group-ip-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-security-group-ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-snapshot-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-snapshot-details-"))
   (db-snapshot-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-instance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iops common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (source-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-db-snapshot-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (timezone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-database-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or aws-rds-db-processor-features common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-snapshot-details
                    'make-aws-rds-db-snapshot-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DbSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-db-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDbSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-status-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-status-info-"))
   (status-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (normal common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-status-info 'make-aws-rds-db-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-status-infos ()
   '(trivial-types:proper-list aws-rds-db-status-info))
 (common-lisp:defun |make-aws-rds-db-status-infos|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-rds-db-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-subnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-subnet-group-"))
   (db-subnet-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (db-subnet-group-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-group-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or aws-rds-db-subnet-group-subnets common-lisp:null))
   (db-subnet-group-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group 'make-aws-rds-db-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-subnet-group-subnet (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-db-subnet-group-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or aws-rds-db-subnet-group-subnet-availability-zone
                    common-lisp:null))
   (subnet-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group-subnet
                    'make-aws-rds-db-subnet-group-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-db-subnet-group-subnet-availability-zone
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-rds-db-subnet-group-subnet-availability-zone-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group-subnet-availability-zone
                    'make-aws-rds-db-subnet-group-subnet-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-subnet-group-subnets ()
   '(trivial-types:proper-list aws-rds-db-subnet-group-subnet))
 (common-lisp:defun |make-aws-rds-db-subnet-group-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-subnet-group-subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-event-subscription-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-event-subscription-details-"))
   (cust-subscription-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (customer-aws-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (event-categories-list common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (event-subscription-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-ids-list common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subscription-creation-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-event-subscription-details
                    'make-aws-rds-event-subscription-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-rds-pending-cloud-watch-logs-exports (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-rds-pending-cloud-watch-logs-exports-"))
   (log-types-to-enable common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (log-types-to-disable common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-pending-cloud-watch-logs-exports
                    'make-aws-rds-pending-cloud-watch-logs-exports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-cluster-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-cluster-node-"))
   (node-role common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (public-ip-address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-node
                    'make-aws-redshift-cluster-cluster-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "NodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "PublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-nodes ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-node))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-cluster-parameter-group (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-redshift-cluster-cluster-parameter-group-"))
   (cluster-parameter-status-list common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-cluster-parameter-status-list
                    common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parameter-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-parameter-group
                    'make-aws-redshift-cluster-cluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-status-list))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-parameter-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-parameter-group))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-parameter-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-cluster-parameter-status (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-redshift-cluster-cluster-parameter-status-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parameter-apply-error-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-parameter-status
                    'make-aws-redshift-cluster-cluster-parameter-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-error-description))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-parameter-status-list ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-parameter-status))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-parameter-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-parameter-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-cluster-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-cluster-security-group-"))
   (cluster-security-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-security-group
                    'make-aws-redshift-cluster-cluster-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-security-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-security-group))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-cluster-snapshot-copy-status
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-redshift-cluster-cluster-snapshot-copy-status-"))
   (destination-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (manual-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-copy-grant-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-snapshot-copy-status
                    'make-aws-redshift-cluster-cluster-snapshot-copy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-deferred-maintenance-window
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-redshift-cluster-deferred-maintenance-window-"))
   (defer-maintenance-end-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (defer-maintenance-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (defer-maintenance-start-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-deferred-maintenance-window
                    'make-aws-redshift-cluster-deferred-maintenance-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-end-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-identifier))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-deferred-maintenance-windows ()
   '(trivial-types:proper-list
     aws-redshift-cluster-deferred-maintenance-window))
 (common-lisp:defun |make-aws-redshift-cluster-deferred-maintenance-windows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-deferred-maintenance-window))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-details-"))
   (allow-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-availability-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-nodes common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-cluster-nodes common-lisp:null))
   (cluster-parameter-groups common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-cluster-parameter-groups
                    common-lisp:null))
   (cluster-public-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-revision-number common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-security-groups common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-cluster-security-groups
                    common-lisp:null))
   (cluster-snapshot-copy-status common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-cluster-snapshot-copy-status
                    common-lisp:null))
   (cluster-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-subnet-group-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dbname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (deferred-maintenance-windows common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-deferred-maintenance-windows
                    common-lisp:null))
   (elastic-ip-status common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-elastic-ip-status common-lisp:null))
   (elastic-resize-number-of-node-options common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-endpoint common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (expected-next-snapshot-schedule-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (expected-next-snapshot-schedule-time-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (hsm-status common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-hsm-status common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-iam-roles common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (maintenance-track-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (manual-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (next-maintenance-window-start-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (node-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (pending-actions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-pending-modified-values
                    common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (resize-info common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-resize-info common-lisp:null))
   (restore-status common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-restore-status common-lisp:null))
   (snapshot-schedule-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (snapshot-schedule-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-vpc-security-groups common-lisp:null))
   (logging-status common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-logging-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-details
                    'make-aws-redshift-cluster-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-availability-status))
      (common-lisp:list
       (common-lisp:cons "ClusterAvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-nodes))
      (common-lisp:list
       (common-lisp:cons "ClusterNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-public-key))
      (common-lisp:list
       (common-lisp:cons "ClusterPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-revision-number))
      (common-lisp:list
       (common-lisp:cons "ClusterRevisionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-snapshot-copy-status))
      (common-lisp:list
       (common-lisp:cons "ClusterSnapshotCopyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deferred-maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "DeferredMaintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip-status))
      (common-lisp:list
       (common-lisp:cons "ElasticIpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-resize-number-of-node-options))
      (common-lisp:list
       (common-lisp:cons "ElasticResizeNumberOfNodeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time-status))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTimeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-status))
      (common-lisp:list
       (common-lisp:cons "HsmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-maintenance-window-start-time))
      (common-lisp:list
       (common-lisp:cons "NextMaintenanceWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-actions))
      (common-lisp:list
       (common-lisp:cons "PendingActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-info))
      (common-lisp:list
       (common-lisp:cons "ResizeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-state))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-status))
      (common-lisp:list
       (common-lisp:cons "LoggingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-elastic-ip-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-elastic-ip-status-"))
   (elastic-ip common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-elastic-ip-status
                    'make-aws-redshift-cluster-elastic-ip-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-endpoint-"))
   (address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-endpoint
                    'make-aws-redshift-cluster-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-hsm-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-hsm-status-"))
   (hsm-client-certificate-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (hsm-configuration-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-hsm-status
                    'make-aws-redshift-cluster-hsm-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-iam-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-iam-role-"))
   (apply-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-iam-role
                    'make-aws-redshift-cluster-iam-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-status))
      (common-lisp:list
       (common-lisp:cons "ApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-iam-roles ()
   '(trivial-types:proper-list aws-redshift-cluster-iam-role))
 (common-lisp:defun |make-aws-redshift-cluster-iam-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-iam-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-logging-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-logging-status-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-failure-message common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-failure-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-successful-delivery-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (logging-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-logging-status
                    'make-aws-redshift-cluster-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-failure-time))
      (common-lisp:list
       (common-lisp:cons "LastFailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-pending-modified-values (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-redshift-cluster-pending-modified-values-"))
   (automated-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cluster-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (maintenance-track-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (node-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-pending-modified-values
                    'make-aws-redshift-cluster-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-resize-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-resize-info-"))
   (allow-cancel-resize common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (resize-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-resize-info
                    'make-aws-redshift-cluster-resize-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cancel-resize))
      (common-lisp:list
       (common-lisp:cons "AllowCancelResize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-type))
      (common-lisp:list
       (common-lisp:cons "ResizeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-restore-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-restore-status-"))
   (current-restore-rate-in-mega-bytes-per-second common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (elapsed-time-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (estimated-time-to-completion-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (snapshot-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-restore-status
                    'make-aws-redshift-cluster-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-restore-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentRestoreRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "SnapshotSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-redshift-cluster-vpc-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-redshift-cluster-vpc-security-group-"))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-vpc-security-group
                    'make-aws-redshift-cluster-vpc-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-vpc-security-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-vpc-security-group))
 (common-lisp:defun |make-aws-redshift-cluster-vpc-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-vpc-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3account-public-access-block-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3account-public-access-block-details-"))
   (block-public-acls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (block-public-policy common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (ignore-public-acls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (restrict-public-buckets common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3account-public-access-block-details
                    'make-aws-s3account-public-access-block-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-details-"))
   (rules common-lisp:nil :type
    (common-lisp:or aws-s3bucket-bucket-lifecycle-configuration-rules-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-lifecycle-configuration-details
                    'make-aws-s3bucket-bucket-lifecycle-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details-"))
   (days-after-initiation common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-details-"))
   (abort-incomplete-multipart-upload common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
     common-lisp:null))
   (expiration-date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (expiration-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (expired-object-delete-marker common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
     common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (noncurrent-version-expiration-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (noncurrent-version-transitions common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list
     common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (transitions common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-lifecycle-configuration-rules-details
                    'make-aws-s3bucket-bucket-lifecycle-configuration-rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details-"))
   (predicate common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details-"))
   (operands common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list
     common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tag common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
     common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operands))
      (common-lisp:list
       (common-lisp:cons "Operands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details-"))
   (prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tag common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
     common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details-"))
   (key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details-"))
   (key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-list ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details-"))
   (days common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details-"))
   (date common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (days common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (storage-class common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-bucket-versioning-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-bucket-versioning-configuration-"))
   (is-mfa-delete-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-versioning-configuration
                    'make-aws-s3bucket-bucket-versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-mfa-delete-enabled))
      (common-lisp:list
       (common-lisp:cons "IsMfaDeleteEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-details-"))
   (owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner-account-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (server-side-encryption-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-server-side-encryption-configuration
                    common-lisp:null))
   (bucket-lifecycle-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-bucket-lifecycle-configuration-details
                    common-lisp:null))
   (public-access-block-configuration common-lisp:nil :type
    (common-lisp:or aws-s3account-public-access-block-details
                    common-lisp:null))
   (access-control-list common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (bucket-logging-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-logging-configuration common-lisp:null))
   (bucket-website-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-website-configuration common-lisp:null))
   (bucket-notification-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration common-lisp:null))
   (bucket-versioning-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-bucket-versioning-configuration
                    common-lisp:null))
   (object-lock-configuration common-lisp:nil :type
    (common-lisp:or aws-s3bucket-object-lock-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-details 'make-aws-s3bucket-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketLifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-logging-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketLoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-website-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketWebsiteConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-notification-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketNotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketVersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-logging-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-logging-configuration-"))
   (destination-bucket-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (log-file-prefix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-logging-configuration
                    'make-aws-s3bucket-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-bucket-name))
      (common-lisp:list
       (common-lisp:cons "DestinationBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-prefix))
      (common-lisp:list
       (common-lisp:cons "LogFilePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-notification-configuration-"))
   (configurations common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration
                    'make-aws-s3bucket-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-notification-configuration-detail (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-notification-configuration-detail-"))
   (events common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration-events
                    common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration-filter
                    common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-detail
                    'make-aws-s3bucket-notification-configuration-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-details ()
   '(trivial-types:proper-list aws-s3bucket-notification-configuration-detail))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-notification-configuration-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-events ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-notification-configuration-filter (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-notification-configuration-filter-"))
   (s3key-filter common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration-s3key-filter
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-filter
                    'make-aws-s3bucket-notification-configuration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-filter))
      (common-lisp:list
       (common-lisp:cons "S3KeyFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-notification-configuration-s3key-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-notification-configuration-s3key-filter-"))
   (filter-rules common-lisp:nil :type
    (common-lisp:or aws-s3bucket-notification-configuration-s3key-filter-rules
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-s3key-filter
                    'make-aws-s3bucket-notification-configuration-s3key-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rules))
      (common-lisp:list
       (common-lisp:cons "FilterRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-notification-configuration-s3key-filter-rule
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-notification-configuration-s3key-filter-rule-"))
   (name common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-notification-configuration-s3key-filter-rule-name
     common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-s3key-filter-rule
                    'make-aws-s3bucket-notification-configuration-s3key-filter-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   common-lisp:nil))
(common-lisp:deftype aws-s3bucket-notification-configuration-s3key-filter-rule-name
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-s3key-filter-rules
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-notification-configuration-s3key-filter-rule))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-s3key-filter-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-notification-configuration-s3key-filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-object-lock-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-object-lock-configuration-"))
   (object-lock-enabled common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule common-lisp:nil :type
    (common-lisp:or aws-s3bucket-object-lock-configuration-rule-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-object-lock-configuration
                    'make-aws-s3bucket-object-lock-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-enabled))
      (common-lisp:list
       (common-lisp:cons "ObjectLockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-object-lock-configuration-rule-default-retention-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-object-lock-configuration-rule-default-retention-details-"))
   (days common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (years common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-object-lock-configuration-rule-default-retention-details
   'make-aws-s3bucket-object-lock-configuration-rule-default-retention-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'years))
      (common-lisp:list
       (common-lisp:cons "Years"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-object-lock-configuration-rule-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-object-lock-configuration-rule-details-"))
   (default-retention common-lisp:nil :type
    (common-lisp:or
     aws-s3bucket-object-lock-configuration-rule-default-retention-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-object-lock-configuration-rule-details
                    'make-aws-s3bucket-object-lock-configuration-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-retention))
      (common-lisp:list
       (common-lisp:cons "DefaultRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-server-side-encryption-by-default (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-server-side-encryption-by-default-"))
   (ssealgorithm common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kmsmaster-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-by-default
                    'make-aws-s3bucket-server-side-encryption-by-default))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsmaster-key-id))
      (common-lisp:list
       (common-lisp:cons "KMSMasterKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-server-side-encryption-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-server-side-encryption-configuration-"))
   (rules common-lisp:nil :type
    (common-lisp:or aws-s3bucket-server-side-encryption-rules
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-configuration
                    'make-aws-s3bucket-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-server-side-encryption-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-server-side-encryption-rule-"))
   (apply-server-side-encryption-by-default common-lisp:nil :type
    (common-lisp:or aws-s3bucket-server-side-encryption-by-default
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-rule
                    'make-aws-s3bucket-server-side-encryption-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-server-side-encryption-by-default))
      (common-lisp:list
       (common-lisp:cons "ApplyServerSideEncryptionByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-server-side-encryption-rules ()
   '(trivial-types:proper-list aws-s3bucket-server-side-encryption-rule))
 (common-lisp:defun |make-aws-s3bucket-server-side-encryption-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-server-side-encryption-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-website-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3bucket-website-configuration-"))
   (error-document common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (index-document-suffix common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (redirect-all-requests-to common-lisp:nil :type
    (common-lisp:or aws-s3bucket-website-configuration-redirect-to
                    common-lisp:null))
   (routing-rules common-lisp:nil :type
    (common-lisp:or aws-s3bucket-website-configuration-routing-rules
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration
                    'make-aws-s3bucket-website-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'index-document-suffix))
      (common-lisp:list
       (common-lisp:cons "IndexDocumentSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-website-configuration-redirect-to (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-website-configuration-redirect-to-"))
   (hostname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-redirect-to
                    'make-aws-s3bucket-website-configuration-redirect-to))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-website-configuration-routing-rule (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-website-configuration-routing-rule-"))
   (condition common-lisp:nil :type
    (common-lisp:or aws-s3bucket-website-configuration-routing-rule-condition
                    common-lisp:null))
   (redirect common-lisp:nil :type
    (common-lisp:or aws-s3bucket-website-configuration-routing-rule-redirect
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule
                    'make-aws-s3bucket-website-configuration-routing-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect))
      (common-lisp:list
       (common-lisp:cons "Redirect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-website-configuration-routing-rule-condition
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-website-configuration-routing-rule-condition-"))
   (http-error-code-returned-equals common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-prefix-equals common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule-condition
                    'make-aws-s3bucket-website-configuration-routing-rule-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-error-code-returned-equals))
      (common-lisp:list
       (common-lisp:cons "HttpErrorCodeReturnedEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix-equals))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3bucket-website-configuration-routing-rule-redirect
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-s3bucket-website-configuration-routing-rule-redirect-"))
   (hostname common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-redirect-code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (replace-key-prefix-with common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (replace-key-with common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule-redirect
                    'make-aws-s3bucket-website-configuration-routing-rule-redirect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-redirect-code))
      (common-lisp:list
       (common-lisp:cons "HttpRedirectCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-key-prefix-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyPrefixWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-key-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-website-configuration-routing-rules ()
   '(trivial-types:proper-list
     aws-s3bucket-website-configuration-routing-rule))
 (common-lisp:defun |make-aws-s3bucket-website-configuration-routing-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-website-configuration-routing-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-s3object-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-s3object-details-"))
   (last-modified common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (etag common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (server-side-encryption common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ssekmskey-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-s3object-details 'make-aws-s3object-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:list
       (common-lisp:cons "SSEKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-sage-maker-notebook-instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-sage-maker-notebook-instance-details-"))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (additional-code-repositories common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (default-code-repository common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (direct-internet-access common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-metadata-service-configuration common-lisp:nil :type
    (common-lisp:or
     aws-sage-maker-notebook-instance-metadata-service-configuration-details
     common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notebook-instance-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notebook-instance-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notebook-instance-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (notebook-instance-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (platform-identifier common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (root-access common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-sage-maker-notebook-instance-details
                    'make-aws-sage-maker-notebook-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-internet-access))
      (common-lisp:list
       (common-lisp:cons "DirectInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-service-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-status))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-identifier))
      (common-lisp:list
       (common-lisp:cons "PlatformIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-access))
      (common-lisp:list
       (common-lisp:cons "RootAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-sage-maker-notebook-instance-metadata-service-configuration-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-sage-maker-notebook-instance-metadata-service-configuration-details-"))
   (minimum-instance-metadata-service-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-sage-maker-notebook-instance-metadata-service-configuration-details
   'make-aws-sage-maker-notebook-instance-metadata-service-configuration-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-metadata-service-version))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceMetadataServiceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-secrets-manager-secret-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-secrets-manager-secret-details-"))
   (rotation-rules common-lisp:nil :type
    (common-lisp:or aws-secrets-manager-secret-rotation-rules
                    common-lisp:null))
   (rotation-occurred-within-frequency common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rotation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (rotation-lambda-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (deleted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-secrets-manager-secret-details
                    'make-aws-secrets-manager-secret-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-rules))
      (common-lisp:list
       (common-lisp:cons "RotationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-occurred-within-frequency))
      (common-lisp:list
       (common-lisp:cons "RotationOccurredWithinFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "RotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "RotationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-secrets-manager-secret-rotation-rules (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-secrets-manager-secret-rotation-rules-"))
   (automatically-after-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-secrets-manager-secret-rotation-rules
                    'make-aws-secrets-manager-secret-rotation-rules))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatically-after-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticallyAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-security-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-security-finding-"))
   (schema-version (common-lisp:error ":schema-version is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-arn (common-lisp:error ":product-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (company-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (generator-id (common-lisp:error ":generator-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (aws-account-id (common-lisp:error ":aws-account-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (types common-lisp:nil :type (common-lisp:or type-list common-lisp:null))
   (first-observed-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (last-observed-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (updated-at (common-lisp:error ":updated-at is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or severity common-lisp:null))
   (confidence common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (criticality common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation common-lisp:nil :type
    (common-lisp:or remediation common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-fields common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (user-defined-fields common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (malware common-lisp:nil :type
    (common-lisp:or malware-list common-lisp:null))
   (network common-lisp:nil :type (common-lisp:or network common-lisp:null))
   (network-path common-lisp:nil :type
    (common-lisp:or network-path-list common-lisp:null))
   (process common-lisp:nil :type
    (common-lisp:or process-details common-lisp:null))
   (threats common-lisp:nil :type
    (common-lisp:or threat-list common-lisp:null))
   (threat-intel-indicators common-lisp:nil :type
    (common-lisp:or threat-intel-indicator-list common-lisp:null))
   (resources (common-lisp:error ":resources is required") :type
    (common-lisp:or resource-list common-lisp:null))
   (compliance common-lisp:nil :type
    (common-lisp:or compliance common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (workflow-state common-lisp:nil :type
    (common-lisp:or workflow-state common-lisp:null))
   (workflow common-lisp:nil :type (common-lisp:or workflow common-lisp:null))
   (record-state common-lisp:nil :type
    (common-lisp:or record-state common-lisp:null))
   (related-findings common-lisp:nil :type
    (common-lisp:or related-finding-list common-lisp:null))
   (note common-lisp:nil :type (common-lisp:or note common-lisp:null))
   (vulnerabilities common-lisp:nil :type
    (common-lisp:or vulnerability-list common-lisp:null))
   (patch-summary common-lisp:nil :type
    (common-lisp:or patch-summary common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (finding-provider-fields common-lisp:nil :type
    (common-lisp:or finding-provider-fields common-lisp:null))
   (sample common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding 'make-aws-security-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-security-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-security-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generator-id))
      (common-lisp:list
       (common-lisp:cons "GeneratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "FirstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "Remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-fields))
      (common-lisp:list
       (common-lisp:cons "ProductFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware))
      (common-lisp:list
       (common-lisp:cons "Malware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "Network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-path))
      (common-lisp:list
       (common-lisp:cons "NetworkPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process))
      (common-lisp:list
       (common-lisp:cons "Process"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threats))
      (common-lisp:list
       (common-lisp:cons "Threats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicators))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-state))
      (common-lisp:list
       (common-lisp:cons "WorkflowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "Vulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-summary))
      (common-lisp:list
       (common-lisp:cons "PatchSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "Sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-security-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-security-finding-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-security-finding-filters-"))
   (product-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (aws-account-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (generator-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (first-observed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (last-observed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (severity-product common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (severity-normalized common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (severity-label common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (criticality common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (recommendation-text common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (product-fields common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (company-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (user-defined-fields common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (malware-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (malware-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (malware-path common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (malware-state common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (network-direction common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (network-protocol common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (network-source-ip-v4 common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (network-source-ip-v6 common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (network-source-port common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (network-source-domain common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (network-source-mac common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (network-destination-ip-v4 common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (network-destination-ip-v6 common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (network-destination-port common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (network-destination-domain common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (process-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (process-path common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (process-pid common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (process-parent-pid common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (process-launched-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (process-terminated-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (threat-intel-indicator-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (threat-intel-indicator-value common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (threat-intel-indicator-category common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (threat-intel-indicator-last-observed-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (threat-intel-indicator-source common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (threat-intel-indicator-source-url common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-partition common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-region common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (resource-aws-ec2instance-type common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-image-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-ip-v4addresses common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (resource-aws-ec2instance-ip-v6addresses common-lisp:nil :type
    (common-lisp:or ip-filter-list common-lisp:null))
   (resource-aws-ec2instance-key-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-iam-instance-profile-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-vpc-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-subnet-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-ec2instance-launched-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (resource-aws-s3bucket-owner-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-s3bucket-owner-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-iam-access-key-user-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-iam-access-key-principal-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-iam-access-key-status common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-aws-iam-access-key-created-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (resource-aws-iam-user-user-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-container-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-container-image-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-container-image-name common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (resource-container-launched-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (resource-details-other common-lisp:nil :type
    (common-lisp:or map-filter-list common-lisp:null))
   (compliance-status common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (workflow-state common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (workflow-status common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (record-state common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (related-findings-product-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (related-findings-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (note-text common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (note-updated-at common-lisp:nil :type
    (common-lisp:or date-filter-list common-lisp:null))
   (note-updated-by common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (keyword common-lisp:nil :type
    (common-lisp:or keyword-filter-list common-lisp:null))
   (finding-provider-fields-confidence common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (finding-provider-fields-criticality common-lisp:nil :type
    (common-lisp:or number-filter-list common-lisp:null))
   (finding-provider-fields-related-findings-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-provider-fields-related-findings-product-arn common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-provider-fields-severity-label common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-provider-fields-severity-original common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (finding-provider-fields-types common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (sample common-lisp:nil :type
    (common-lisp:or boolean-filter-list common-lisp:null))
   (compliance-security-control-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null))
   (compliance-associated-standards-id common-lisp:nil :type
    (common-lisp:or string-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding-filters
                    'make-aws-security-finding-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generator-id))
      (common-lisp:list
       (common-lisp:cons "GeneratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "FirstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-product))
      (common-lisp:list
       (common-lisp:cons "SeverityProduct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-normalized))
      (common-lisp:list
       (common-lisp:cons "SeverityNormalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-label))
      (common-lisp:list
       (common-lisp:cons "SeverityLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-text))
      (common-lisp:list
       (common-lisp:cons "RecommendationText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-fields))
      (common-lisp:list
       (common-lisp:cons "ProductFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-name))
      (common-lisp:list
       (common-lisp:cons "MalwareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-type))
      (common-lisp:list
       (common-lisp:cons "MalwareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-path))
      (common-lisp:list
       (common-lisp:cons "MalwarePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-state))
      (common-lisp:list
       (common-lisp:cons "MalwareState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-direction))
      (common-lisp:list
       (common-lisp:cons "NetworkDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-protocol))
      (common-lisp:list
       (common-lisp:cons "NetworkProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-ip-v4))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-ip-v6))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source-port))
      (common-lisp:list
       (common-lisp:cons "NetworkSourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-domain))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source-mac))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceMac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-ip-v4))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-ip-v6))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-port))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-domain))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-path))
      (common-lisp:list
       (common-lisp:cons "ProcessPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-pid))
      (common-lisp:list
       (common-lisp:cons "ProcessPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-parent-pid))
      (common-lisp:list
       (common-lisp:cons "ProcessParentPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-launched-at))
      (common-lisp:list
       (common-lisp:cons "ProcessLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'process-terminated-at))
      (common-lisp:list
       (common-lisp:cons "ProcessTerminatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-type))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-value))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-category))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-last-observed-at))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorLastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-source))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-source-url))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorSourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-partition))
      (common-lisp:list
       (common-lisp:cons "ResourcePartition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-region))
      (common-lisp:list
       (common-lisp:cons "ResourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-image-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-ip-v4addresses))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIpV4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-key-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-iam-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIamInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-launched-at))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-s3bucket-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsS3BucketOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-s3bucket-owner-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsS3BucketOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-user-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-principal-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyPrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-status))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-created-at))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-user-user-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamUserUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-name))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-image-id))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-image-name))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-launched-at))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-details-other))
      (common-lisp:list
       (common-lisp:cons "ResourceDetailsOther"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "ComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-state))
      (common-lisp:list
       (common-lisp:cons "WorkflowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-status))
      (common-lisp:list
       (common-lisp:cons "WorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-findings-product-arn))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingsProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings-id))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-text))
      (common-lisp:list
       (common-lisp:cons "NoteText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-updated-at))
      (common-lisp:list
       (common-lisp:cons "NoteUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-updated-by))
      (common-lisp:list
       (common-lisp:cons "NoteUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-confidence))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-criticality))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsCriticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-related-findings-id))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsRelatedFindingsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-related-findings-product-arn))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsRelatedFindingsProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-severity-label))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsSeverityLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-severity-original))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsSeverityOriginal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-types))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "Sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-security-control-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceSecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-associated-standards-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceAssociatedStandardsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-security-finding-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-security-finding-identifier-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-arn (common-lisp:error ":product-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding-identifier
                    'make-aws-security-finding-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-security-finding-identifier-list ()
   '(trivial-types:proper-list aws-security-finding-identifier))
 (common-lisp:defun |make-aws-security-finding-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-security-finding-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-security-finding-list ()
   '(trivial-types:proper-list aws-security-finding))
 (common-lisp:defun |make-aws-security-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-security-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-sns-topic-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-sns-topic-details-"))
   (kms-master-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subscription common-lisp:nil :type
    (common-lisp:or aws-sns-topic-subscription-list common-lisp:null))
   (topic-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sqs-success-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sqs-failure-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (application-success-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firehose-success-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (firehose-failure-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-success-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (http-failure-feedback-role-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-sns-topic-details 'make-aws-sns-topic-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "Subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "SqsSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "SqsFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firehose-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "FirehoseSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firehose-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "FirehoseFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "HttpSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "HttpFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-sns-topic-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-sns-topic-subscription-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-sns-topic-subscription
                    'make-aws-sns-topic-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-sns-topic-subscription-list ()
   '(trivial-types:proper-list aws-sns-topic-subscription))
 (common-lisp:defun |make-aws-sns-topic-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-sns-topic-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-sqs-queue-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-sqs-queue-details-"))
   (kms-data-key-reuse-period-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (kms-master-key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (queue-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (dead-letter-target-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-sqs-queue-details 'make-aws-sqs-queue-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-data-key-reuse-period-seconds))
      (common-lisp:list
       (common-lisp:cons "KmsDataKeyReusePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-name))
      (common-lisp:list
       (common-lisp:cons "QueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-target-arn))
      (common-lisp:list
       (common-lisp:cons "DeadLetterTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ssm-compliance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ssm-compliance-summary-"))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (compliant-critical-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliant-high-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliant-medium-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (execution-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (non-compliant-critical-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliant-informational-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (non-compliant-informational-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliant-unspecified-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (non-compliant-low-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (non-compliant-high-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliant-low-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (compliance-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (patch-baseline-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (overall-severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (non-compliant-medium-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (non-compliant-unspecified-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (patch-group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ssm-compliance-summary
                    'make-aws-ssm-compliance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-critical-count))
      (common-lisp:list
       (common-lisp:cons "CompliantCriticalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-high-count))
      (common-lisp:list
       (common-lisp:cons "CompliantHighCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-medium-count))
      (common-lisp:list
       (common-lisp:cons "CompliantMediumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-type))
      (common-lisp:list
       (common-lisp:cons "ExecutionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-critical-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantCriticalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-informational-count))
      (common-lisp:list
       (common-lisp:cons "CompliantInformationalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-informational-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantInformationalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-unspecified-count))
      (common-lisp:list
       (common-lisp:cons "CompliantUnspecifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-low-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantLowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-high-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantHighCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-low-count))
      (common-lisp:list
       (common-lisp:cons "CompliantLowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-baseline-id))
      (common-lisp:list
       (common-lisp:cons "PatchBaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overall-severity))
      (common-lisp:list
       (common-lisp:cons "OverallSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-medium-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantMediumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-unspecified-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantUnspecifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ssm-patch (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ssm-patch-"))
   (compliance-summary common-lisp:nil :type
    (common-lisp:or aws-ssm-compliance-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aws-ssm-patch 'make-aws-ssm-patch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ssm-patch-compliance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ssm-patch-compliance-details-"))
   (patch common-lisp:nil :type
    (common-lisp:or aws-ssm-patch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ssm-patch-compliance-details
                    'make-aws-ssm-patch-compliance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch))
      (common-lisp:list
       (common-lisp:cons "Patch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rate-based-rule-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rate-based-rule-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rate-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rate-limit common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (match-predicates common-lisp:nil :type
    (common-lisp:or aws-waf-rate-based-rule-match-predicate-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rate-based-rule-details
                    'make-aws-waf-rate-based-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-predicates))
      (common-lisp:list
       (common-lisp:cons "MatchPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rate-based-rule-match-predicate (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rate-based-rule-match-predicate-"))
   (data-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (negated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rate-based-rule-match-predicate
                    'make-aws-waf-rate-based-rule-match-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rate-based-rule-match-predicate-list ()
   '(trivial-types:proper-list aws-waf-rate-based-rule-match-predicate))
 (common-lisp:defun |make-aws-waf-rate-based-rule-match-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rate-based-rule-match-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rate-based-rule-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-rate-based-rule-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rate-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rate-limit common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (match-predicates common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rate-based-rule-match-predicate-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rate-based-rule-details
                    'make-aws-waf-regional-rate-based-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-predicates))
      (common-lisp:list
       (common-lisp:cons "MatchPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rate-based-rule-match-predicate
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-waf-regional-rate-based-rule-match-predicate-"))
   (data-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (negated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rate-based-rule-match-predicate
                    'make-aws-waf-regional-rate-based-rule-match-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rate-based-rule-match-predicate-list ()
   '(trivial-types:proper-list
     aws-waf-regional-rate-based-rule-match-predicate))
 (common-lisp:defun |make-aws-waf-regional-rate-based-rule-match-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rate-based-rule-match-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rule-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-rule-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (predicate-list common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rule-predicate-list common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-details
                    'make-aws-waf-regional-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate-list))
      (common-lisp:list
       (common-lisp:cons "PredicateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rule-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-rule-group-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rule-group-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-details
                    'make-aws-waf-regional-rule-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rule-group-rules-action-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-waf-regional-rule-group-rules-action-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-rules-action-details
                    'make-aws-waf-regional-rule-group-rules-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rule-group-rules-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-rule-group-rules-details-"))
   (action common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rule-group-rules-action-details
                    common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-rules-details
                    'make-aws-waf-regional-rule-group-rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rule-group-rules-list ()
   '(trivial-types:proper-list aws-waf-regional-rule-group-rules-details))
 (common-lisp:defun |make-aws-waf-regional-rule-group-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rule-group-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rule-predicate-list ()
   '(trivial-types:proper-list aws-waf-regional-rule-predicate-list-details))
 (common-lisp:defun |make-aws-waf-regional-rule-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rule-predicate-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-rule-predicate-list-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-waf-regional-rule-predicate-list-details-"))
   (data-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (negated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-predicate-list-details
                    'make-aws-waf-regional-rule-predicate-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-web-acl-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-web-acl-details-"))
   (default-action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules-list common-lisp:nil :type
    (common-lisp:or aws-waf-regional-web-acl-rules-list common-lisp:null))
   (web-acl-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-details
                    'make-aws-waf-regional-web-acl-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-list))
      (common-lisp:list
       (common-lisp:cons "RulesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-web-acl-rules-list ()
   '(trivial-types:proper-list aws-waf-regional-web-acl-rules-list-details))
 (common-lisp:defun |make-aws-waf-regional-web-acl-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-web-acl-rules-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-web-acl-rules-list-action-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-waf-regional-web-acl-rules-list-action-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-rules-list-action-details
                    'make-aws-waf-regional-web-acl-rules-list-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-web-acl-rules-list-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-regional-web-acl-rules-list-details-"))
   (action common-lisp:nil :type
    (common-lisp:or aws-waf-regional-web-acl-rules-list-action-details
                    common-lisp:null))
   (override-action common-lisp:nil :type
    (common-lisp:or aws-waf-regional-web-acl-rules-list-override-action-details
                    common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-rules-list-details
                    'make-aws-waf-regional-web-acl-rules-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-regional-web-acl-rules-list-override-action-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-waf-regional-web-acl-rules-list-override-action-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-waf-regional-web-acl-rules-list-override-action-details
   'make-aws-waf-regional-web-acl-rules-list-override-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rule-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rule-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (predicate-list common-lisp:nil :type
    (common-lisp:or aws-waf-rule-predicate-list common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-details 'make-aws-waf-rule-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate-list))
      (common-lisp:list
       (common-lisp:cons "PredicateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rule-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rule-group-details-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rule-group-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or aws-waf-rule-group-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-details
                    'make-aws-waf-rule-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rule-group-rules-action-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rule-group-rules-action-details-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-rules-action-details
                    'make-aws-waf-rule-group-rules-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rule-group-rules-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rule-group-rules-details-"))
   (action common-lisp:nil :type
    (common-lisp:or aws-waf-rule-group-rules-action-details common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-rules-details
                    'make-aws-waf-rule-group-rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rule-group-rules-list ()
   '(trivial-types:proper-list aws-waf-rule-group-rules-details))
 (common-lisp:defun |make-aws-waf-rule-group-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rule-group-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rule-predicate-list ()
   '(trivial-types:proper-list aws-waf-rule-predicate-list-details))
 (common-lisp:defun |make-aws-waf-rule-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rule-predicate-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-rule-predicate-list-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-rule-predicate-list-details-"))
   (data-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (negated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-predicate-list-details
                    'make-aws-waf-rule-predicate-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-web-acl-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-web-acl-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (default-action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or aws-waf-web-acl-rule-list common-lisp:null))
   (web-acl-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-web-acl-details 'make-aws-waf-web-acl-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-waf-web-acl-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-waf-web-acl-rule-"))
   (action common-lisp:nil :type (common-lisp:or waf-action common-lisp:null))
   (excluded-rules common-lisp:nil :type
    (common-lisp:or waf-excluded-rule-list common-lisp:null))
   (override-action common-lisp:nil :type
    (common-lisp:or waf-override-action common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-web-acl-rule 'make-aws-waf-web-acl-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-rules))
      (common-lisp:list
       (common-lisp:cons "ExcludedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-web-acl-rule-list ()
   '(trivial-types:proper-list aws-waf-web-acl-rule))
 (common-lisp:defun |make-aws-waf-web-acl-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-waf-web-acl-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2action-allow-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2action-allow-details-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or aws-wafv2custom-request-handling-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2action-allow-details
                    'make-aws-wafv2action-allow-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2action-block-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2action-block-details-"))
   (custom-response common-lisp:nil :type
    (common-lisp:or aws-wafv2custom-response-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2action-block-details
                    'make-aws-wafv2action-block-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-response))
      (common-lisp:list
       (common-lisp:cons "CustomResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2custom-http-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2custom-http-header-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-http-header
                    'make-aws-wafv2custom-http-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2custom-request-handling-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2custom-request-handling-details-"))
   (insert-headers common-lisp:nil :type
    (common-lisp:or aws-wafv2insert-headers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-request-handling-details
                    'make-aws-wafv2custom-request-handling-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insert-headers))
      (common-lisp:list
       (common-lisp:cons "InsertHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2custom-response-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2custom-response-details-"))
   (custom-response-body-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (response-code common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (response-headers common-lisp:nil :type
    (common-lisp:or aws-wafv2insert-headers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-response-details
                    'make-aws-wafv2custom-response-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-body-key))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodyKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-headers))
      (common-lisp:list
       (common-lisp:cons "ResponseHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-wafv2insert-headers-list ()
   '(trivial-types:proper-list aws-wafv2custom-http-header))
 (common-lisp:defun |make-aws-wafv2insert-headers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-wafv2custom-http-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2rule-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2rule-group-details-"))
   (capacity common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or aws-wafv2rules-list common-lisp:null))
   (scope common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (visibility-config common-lisp:nil :type
    (common-lisp:or aws-wafv2visibility-config-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rule-group-details
                    'make-aws-wafv2rule-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2rules-action-captcha-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2rules-action-captcha-details-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or aws-wafv2custom-request-handling-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-captcha-details
                    'make-aws-wafv2rules-action-captcha-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2rules-action-count-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2rules-action-count-details-"))
   (custom-request-handling common-lisp:nil :type
    (common-lisp:or aws-wafv2custom-request-handling-details
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-count-details
                    'make-aws-wafv2rules-action-count-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2rules-action-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2rules-action-details-"))
   (allow common-lisp:nil :type
    (common-lisp:or aws-wafv2action-allow-details common-lisp:null))
   (block common-lisp:nil :type
    (common-lisp:or aws-wafv2action-block-details common-lisp:null))
   (captcha common-lisp:nil :type
    (common-lisp:or aws-wafv2rules-action-captcha-details common-lisp:null))
   (count common-lisp:nil :type
    (common-lisp:or aws-wafv2rules-action-count-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-details
                    'make-aws-wafv2rules-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha))
      (common-lisp:list
       (common-lisp:cons "Captcha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2rules-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2rules-details-"))
   (action common-lisp:nil :type
    (common-lisp:or aws-wafv2rules-action-details common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (override-action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (visibility-config common-lisp:nil :type
    (common-lisp:or aws-wafv2visibility-config-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-details 'make-aws-wafv2rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-wafv2rules-list ()
   '(trivial-types:proper-list aws-wafv2rules-details))
 (common-lisp:defun |make-aws-wafv2rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-wafv2rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2visibility-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2visibility-config-details-"))
   (cloud-watch-metrics-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sampled-requests-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2visibility-config-details
                    'make-aws-wafv2visibility-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampled-requests-enabled))
      (common-lisp:list
       (common-lisp:cons "SampledRequestsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2web-acl-action-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2web-acl-action-details-"))
   (allow common-lisp:nil :type
    (common-lisp:or aws-wafv2action-allow-details common-lisp:null))
   (block common-lisp:nil :type
    (common-lisp:or aws-wafv2action-block-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-action-details
                    'make-aws-wafv2web-acl-action-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2web-acl-captcha-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2web-acl-captcha-config-details-"))
   (immunity-time-property common-lisp:nil :type
    (common-lisp:or
     aws-wafv2web-acl-captcha-config-immunity-time-property-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-captcha-config-details
                    'make-aws-wafv2web-acl-captcha-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immunity-time-property))
      (common-lisp:list
       (common-lisp:cons "ImmunityTimeProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2web-acl-captcha-config-immunity-time-property-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-aws-wafv2web-acl-captcha-config-immunity-time-property-details-"))
   (immunity-time common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'aws-wafv2web-acl-captcha-config-immunity-time-property-details
   'make-aws-wafv2web-acl-captcha-config-immunity-time-property-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'immunity-time))
      (common-lisp:list
       (common-lisp:cons "ImmunityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-wafv2web-acl-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-wafv2web-acl-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (managedby-firewall-manager common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (capacity common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (captcha-config common-lisp:nil :type
    (common-lisp:or aws-wafv2web-acl-captcha-config-details common-lisp:null))
   (default-action common-lisp:nil :type
    (common-lisp:or aws-wafv2web-acl-action-details common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or aws-wafv2rules-list common-lisp:null))
   (visibility-config common-lisp:nil :type
    (common-lisp:or aws-wafv2visibility-config-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-details 'make-aws-wafv2web-acl-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managedby-firewall-manager))
      (common-lisp:list
       (common-lisp:cons "ManagedbyFirewallManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aws-xray-encryption-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-xray-encryption-config-details-"))
   (key-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-xray-encryption-config-details
                    'make-aws-xray-encryption-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disable-standards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disable-standards-request-"))
   (standards-subscription-arns
    (common-lisp:error ":standards-subscription-arns is required") :type
    (common-lisp:or standards-subscription-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disable-standards-request
                    'make-batch-disable-standards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disable-standards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disable-standards-response-"))
   (standards-subscriptions common-lisp:nil :type
    (common-lisp:or standards-subscriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disable-standards-response
                    'make-batch-disable-standards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-enable-standards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-enable-standards-request-"))
   (standards-subscription-requests
    (common-lisp:error ":standards-subscription-requests is required") :type
    (common-lisp:or standards-subscription-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-enable-standards-request
                    'make-batch-enable-standards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-requests))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-enable-standards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-enable-standards-response-"))
   (standards-subscriptions common-lisp:nil :type
    (common-lisp:or standards-subscriptions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-enable-standards-response
                    'make-batch-enable-standards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-security-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-security-controls-request-"))
   (security-control-ids
    (common-lisp:error ":security-control-ids is required") :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-security-controls-request
                    'make-batch-get-security-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityControlIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-security-controls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-security-controls-response-"))
   (security-controls (common-lisp:error ":security-controls is required")
    :type (common-lisp:or security-controls common-lisp:null))
   (unprocessed-ids common-lisp:nil :type
    (common-lisp:or unprocessed-security-controls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-security-controls-response
                    'make-batch-get-security-controls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-controls))
      (common-lisp:list
       (common-lisp:cons "SecurityControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-standards-control-associations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-standards-control-associations-request-"))
   (standards-control-association-ids
    (common-lisp:error ":standards-control-association-ids is required") :type
    (common-lisp:or standards-control-association-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-standards-control-associations-request
                    'make-batch-get-standards-control-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-ids))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-standards-control-associations-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-standards-control-associations-response-"))
   (standards-control-association-details
    (common-lisp:error ":standards-control-association-details is required")
    :type
    (common-lisp:or standards-control-association-details common-lisp:null))
   (unprocessed-associations common-lisp:nil :type
    (common-lisp:or unprocessed-standards-control-associations
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-standards-control-associations-response
                    'make-batch-get-standards-control-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-details))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-associations))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-import-findings-request-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or batch-import-findings-request-finding-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-import-findings-request
                    'make-batch-import-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "Findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-findings-request-finding-list ()
   '(trivial-types:proper-list aws-security-finding))
 (common-lisp:defun |make-batch-import-findings-request-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-security-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-import-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-import-findings-response-"))
   (failed-count (common-lisp:error ":failed-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (success-count (common-lisp:error ":success-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (failed-findings common-lisp:nil :type
    (common-lisp:or import-findings-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-import-findings-response
                    'make-batch-import-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-count))
      (common-lisp:list
       (common-lisp:cons "SuccessCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-findings))
      (common-lisp:list
       (common-lisp:cons "FailedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-findings-request-"))
   (finding-identifiers (common-lisp:error ":finding-identifiers is required")
    :type
    (common-lisp:or aws-security-finding-identifier-list common-lisp:null))
   (note common-lisp:nil :type (common-lisp:or note-update common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or severity-update common-lisp:null))
   (verification-state common-lisp:nil :type
    (common-lisp:or verification-state common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or ratio-scale common-lisp:null))
   (criticality common-lisp:nil :type
    (common-lisp:or ratio-scale common-lisp:null))
   (types common-lisp:nil :type (common-lisp:or type-list common-lisp:null))
   (user-defined-fields common-lisp:nil :type
    (common-lisp:or field-map common-lisp:null))
   (workflow common-lisp:nil :type
    (common-lisp:or workflow-update common-lisp:null))
   (related-findings common-lisp:nil :type
    (common-lisp:or related-finding-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-request
                    'make-batch-update-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-identifiers))
      (common-lisp:list
       (common-lisp:cons "FindingIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-findings-response-"))
   (processed-findings (common-lisp:error ":processed-findings is required")
    :type
    (common-lisp:or aws-security-finding-identifier-list common-lisp:null))
   (unprocessed-findings
    (common-lisp:error ":unprocessed-findings is required") :type
    (common-lisp:or batch-update-findings-unprocessed-findings-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-response
                    'make-batch-update-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processed-findings))
      (common-lisp:list
       (common-lisp:cons "ProcessedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-findings))
      (common-lisp:list
       (common-lisp:cons "UnprocessedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-findings-unprocessed-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-findings-unprocessed-finding-"))
   (finding-identifier (common-lisp:error ":finding-identifier is required")
    :type (common-lisp:or aws-security-finding-identifier common-lisp:null))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (error-message (common-lisp:error ":error-message is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-unprocessed-finding
                    'make-batch-update-findings-unprocessed-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-identifier))
      (common-lisp:list
       (common-lisp:cons "FindingIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-findings-unprocessed-findings-list ()
   '(trivial-types:proper-list batch-update-findings-unprocessed-finding))
 (common-lisp:defun |make-batch-update-findings-unprocessed-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-findings-unprocessed-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-standards-control-associations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-update-standards-control-associations-request-"))
   (standards-control-association-updates
    (common-lisp:error ":standards-control-association-updates is required")
    :type
    (common-lisp:or standards-control-association-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-standards-control-associations-request
                    'make-batch-update-standards-control-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-updates))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-standards-control-associations-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-update-standards-control-associations-response-"))
   (unprocessed-association-updates common-lisp:nil :type
    (common-lisp:or unprocessed-standards-control-association-updates
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-standards-control-associations-response
                    'make-batch-update-standards-control-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-association-updates))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAssociationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (boolean-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-boolean-filter-"))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'boolean-filter 'make-boolean-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input boolean-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input boolean-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input boolean-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype boolean-filter-list ()
   '(trivial-types:proper-list boolean-filter))
 (common-lisp:defun |make-boolean-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boolean-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype category-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-category-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cell (:copier common-lisp:nil) (:conc-name "struct-shape-cell-"))
   (column common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (row common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (column-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cell-reference common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cell 'make-cell))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "Row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-reference))
      (common-lisp:list
       (common-lisp:cons "CellReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cells () '(trivial-types:proper-list cell))
 (common-lisp:defun |make-cells|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cell))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cidr-block-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-cidr-block-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cidr-block-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cidr-block-association 'make-cidr-block-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cidr-block-association-list ()
   '(trivial-types:proper-list cidr-block-association))
 (common-lisp:defun |make-cidr-block-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (city (:copier common-lisp:nil) (:conc-name "struct-shape-city-"))
   (city-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'city 'make-city))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city-name))
      (common-lisp:list
       (common-lisp:cons "CityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input city))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-result-"))
   (mime-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (size-classified common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (additional-occurrences common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or classification-status common-lisp:null))
   (sensitive-data common-lisp:nil :type
    (common-lisp:or sensitive-data-result-list common-lisp:null))
   (custom-data-identifiers common-lisp:nil :type
    (common-lisp:or custom-data-identifiers-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-result 'make-classification-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mime-type))
      (common-lisp:list
       (common-lisp:cons "MimeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-classified))
      (common-lisp:list
       (common-lisp:cons "SizeClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-occurrences))
      (common-lisp:list
       (common-lisp:cons "AdditionalOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive-data))
      (common-lisp:list
       (common-lisp:cons "SensitiveData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "CustomDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (classification-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-classification-status-"))
   (code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'classification-status 'make-classification-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (compliance (:copier common-lisp:nil)
      (:conc-name "struct-shape-compliance-"))
   (status common-lisp:nil :type
    (common-lisp:or compliance-status common-lisp:null))
   (related-requirements common-lisp:nil :type
    (common-lisp:or related-requirements-list common-lisp:null))
   (status-reasons common-lisp:nil :type
    (common-lisp:or status-reasons-list common-lisp:null))
   (security-control-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (associated-standards common-lisp:nil :type
    (common-lisp:or associated-standards-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'compliance 'make-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reasons))
      (common-lisp:list
       (common-lisp:cons "StatusReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-standards))
      (common-lisp:list
       (common-lisp:cons "AssociatedStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance))
   common-lisp:nil))
(common-lisp:deftype compliance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-details-"))
   (container-runtime common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (image-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (launched-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (volume-mounts common-lisp:nil :type
    (common-lisp:or volume-mount-list common-lisp:null))
   (privileged common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-details 'make-container-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-runtime))
      (common-lisp:list
       (common-lisp:cons "ContainerRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-mounts))
      (common-lisp:list
       (common-lisp:cons "VolumeMounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-details))
   common-lisp:nil))
(common-lisp:deftype control-finding-generator () 'common-lisp:string)
(common-lisp:deftype control-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (country (:copier common-lisp:nil) (:conc-name "struct-shape-country-"))
   (country-code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (country-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'country 'make-country))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-name))
      (common-lisp:list
       (common-lisp:cons "CountryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-action-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-action-target-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-action-target-request
                    'make-create-action-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-action-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-action-target-response-"))
   (action-target-arn (common-lisp:error ":action-target-arn is required")
    :type (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-action-target-response
                    'make-create-action-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-finding-aggregator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-finding-aggregator-request-"))
   (region-linking-mode (common-lisp:error ":region-linking-mode is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-finding-aggregator-request
                    'make-create-finding-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-finding-aggregator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-finding-aggregator-response-"))
   (finding-aggregator-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (finding-aggregation-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region-linking-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-finding-aggregator-response
                    'make-create-finding-aggregator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-insight-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or aws-security-finding-filters common-lisp:null))
   (group-by-attribute (common-lisp:error ":group-by-attribute is required")
    :type (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-insight-request 'make-create-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-insight-response-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-insight-response 'make-create-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-members-request-"))
   (account-details (common-lisp:error ":account-details is required") :type
    (common-lisp:or account-details-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-members-request 'make-create-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-details))
      (common-lisp:list
       (common-lisp:cons "AccountDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-members-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-members-response 'make-create-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   common-lisp:nil))
(common-lisp:deftype cross-account-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-data-identifiers-detections (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-data-identifiers-detections-"))
   (count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (occurrences common-lisp:nil :type
    (common-lisp:or occurrences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers-detections
                    'make-custom-data-identifiers-detections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "Occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-data-identifiers-detections-list ()
   '(trivial-types:proper-list custom-data-identifiers-detections))
 (common-lisp:defun |make-custom-data-identifiers-detections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-data-identifiers-detections))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-data-identifiers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-data-identifiers-result-"))
   (detections common-lisp:nil :type
    (common-lisp:or custom-data-identifiers-detections-list common-lisp:null))
   (total-count common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers-result
                    'make-custom-data-identifiers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "Detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cvss (:copier common-lisp:nil) (:conc-name "struct-shape-cvss-"))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (base-score common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (base-vector common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (adjustments common-lisp:nil :type
    (common-lisp:or adjustment-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cvss 'make-cvss))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "BaseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-vector))
      (common-lisp:list
       (common-lisp:cons "BaseVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "Adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-list () '(trivial-types:proper-list cvss))
 (common-lisp:defun |make-cvss-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-classification-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-classification-details-"))
   (detailed-results-location common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or classification-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-classification-details
                    'make-data-classification-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-results-location))
      (common-lisp:list
       (common-lisp:cons "DetailedResultsLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-filter-"))
   (start common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (end common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (date-range common-lisp:nil :type
    (common-lisp:or date-range common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-filter 'make-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-filter-list ()
   '(trivial-types:proper-list date-filter))
 (common-lisp:defun |make-date-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (date-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-range-"))
   (value common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or date-range-unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-range 'make-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range))
   common-lisp:nil))
(common-lisp:deftype date-range-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decline-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-decline-invitations-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-request
                    'make-decline-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decline-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-decline-invitations-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-response
                    'make-decline-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-action-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-action-target-request-"))
   (action-target-arn (common-lisp:error ":action-target-arn is required")
    :type (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-action-target-request
                    'make-delete-action-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-action-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-action-target-response-"))
   (action-target-arn (common-lisp:error ":action-target-arn is required")
    :type (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-action-target-response
                    'make-delete-action-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-finding-aggregator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-finding-aggregator-request-"))
   (finding-aggregator-arn
    (common-lisp:error ":finding-aggregator-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-finding-aggregator-request
                    'make-delete-finding-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-finding-aggregator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-finding-aggregator-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-finding-aggregator-response
                    'make-delete-finding-aggregator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-insight-request-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-insight-request 'make-delete-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-insight-response-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-insight-response 'make-delete-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-invitations-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-request
                    'make-delete-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-invitations-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-response
                    'make-delete-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-members-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-members-request 'make-delete-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-members-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-members-response 'make-delete-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-action-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-action-targets-request-"))
   (action-target-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-action-targets-request
                    'make-describe-action-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arns))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-action-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-action-targets-response-"))
   (action-targets (common-lisp:error ":action-targets is required") :type
    (common-lisp:or action-target-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-action-targets-response
                    'make-describe-action-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-targets))
      (common-lisp:list
       (common-lisp:cons "ActionTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-request-"))
   (hub-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-request 'make-describe-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-response-"))
   (hub-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subscribed-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (auto-enable-controls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (control-finding-generator common-lisp:nil :type
    (common-lisp:or control-finding-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-response 'make-describe-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-at))
      (common-lisp:list
       (common-lisp:cons "SubscribedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-controls))
      (common-lisp:list
       (common-lisp:cons "AutoEnableControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-organization-configuration-response-"))
   (auto-enable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (member-account-limit-reached common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-enable-standards common-lisp:nil :type
    (common-lisp:or auto-enable-standards common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "MemberAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-standards))
      (common-lisp:list
       (common-lisp:cons "AutoEnableStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-products-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-products-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (product-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-products-request
                    'make-describe-products-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-products-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-products-response-"))
   (products (common-lisp:error ":products is required") :type
    (common-lisp:or products-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-products-response
                    'make-describe-products-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'products))
      (common-lisp:list
       (common-lisp:cons "Products"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-standards-controls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-standards-controls-request-"))
   (standards-subscription-arn
    (common-lisp:error ":standards-subscription-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-controls-request
                    'make-describe-standards-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-standards-controls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-standards-controls-response-"))
   (controls common-lisp:nil :type
    (common-lisp:or standards-controls common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-controls-response
                    'make-describe-standards-controls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "Controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-standards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-standards-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-request
                    'make-describe-standards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-standards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-standards-response-"))
   (standards common-lisp:nil :type
    (common-lisp:or standards common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-response
                    'make-describe-standards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards))
      (common-lisp:list
       (common-lisp:cons "Standards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-import-findings-for-product-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-import-findings-for-product-request-"))
   (product-subscription-arn
    (common-lisp:error ":product-subscription-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-import-findings-for-product-request
                    'make-disable-import-findings-for-product-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-import-findings-for-product-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-import-findings-for-product-response-")))
 (common-lisp:export
  (common-lisp:list 'disable-import-findings-for-product-response
                    'make-disable-import-findings-for-product-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-organization-admin-account-request-"))
   (admin-account-id (common-lisp:error ":admin-account-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-request
                    'make-disable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-organization-admin-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-response
                    'make-disable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-security-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-security-hub-request-")))
 (common-lisp:export
  (common-lisp:list 'disable-security-hub-request
                    'make-disable-security-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-security-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-security-hub-response-")))
 (common-lisp:export
  (common-lisp:list 'disable-security-hub-response
                    'make-disable-security-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-administrator-account-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-from-administrator-account-request-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-request
                    'make-disassociate-from-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-administrator-account-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-from-administrator-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-response
                    'make-disassociate-from-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-master-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-from-master-account-request-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-request
                    'make-disassociate-from-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-from-master-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-from-master-account-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-response
                    'make-disassociate-from-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-members-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-members-request
                    'make-disassociate-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-members-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-members-response
                    'make-disassociate-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dns-request-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-request-action-"))
   (domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (blocked common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-request-action 'make-dns-request-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-request-action))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-import-findings-for-product-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-import-findings-for-product-request-"))
   (product-arn (common-lisp:error ":product-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-import-findings-for-product-request
                    'make-enable-import-findings-for-product-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-import-findings-for-product-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-import-findings-for-product-response-"))
   (product-subscription-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-import-findings-for-product-response
                    'make-enable-import-findings-for-product-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-organization-admin-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-organization-admin-account-request-"))
   (admin-account-id (common-lisp:error ":admin-account-id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-organization-admin-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-organization-admin-account-response-")))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-response
                    'make-enable-organization-admin-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-security-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-security-hub-request-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (enable-default-standards common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (control-finding-generator common-lisp:nil :type
    (common-lisp:or control-finding-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-security-hub-request
                    'make-enable-security-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-standards))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-security-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-security-hub-response-")))
 (common-lisp:export
  (common-lisp:list 'enable-security-hub-response
                    'make-enable-security-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-field-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype file-path-list ()
   '(trivial-types:proper-list file-paths))
 (common-lisp:defun |make-file-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-paths))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (file-paths (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-paths-"))
   (file-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (file-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (hash common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-paths 'make-file-paths))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-paths))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-paths))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "FileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash))
      (common-lisp:list
       (common-lisp:cons "Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-paths))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-aggregator (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-aggregator-"))
   (finding-aggregator-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-aggregator 'make-finding-aggregator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-aggregator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-aggregator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-aggregator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-aggregator-list ()
   '(trivial-types:proper-list finding-aggregator))
 (common-lisp:defun |make-finding-aggregator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-aggregator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-provider-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-provider-fields-"))
   (confidence common-lisp:nil :type
    (common-lisp:or ratio-scale common-lisp:null))
   (criticality common-lisp:nil :type
    (common-lisp:or ratio-scale common-lisp:null))
   (related-findings common-lisp:nil :type
    (common-lisp:or related-finding-list common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or finding-provider-severity common-lisp:null))
   (types common-lisp:nil :type (common-lisp:or type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-provider-fields 'make-finding-provider-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-provider-severity (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-provider-severity-"))
   (label common-lisp:nil :type
    (common-lisp:or severity-label common-lisp:null))
   (original common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-provider-severity
                    'make-finding-provider-severity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original))
      (common-lisp:list
       (common-lisp:cons "Original"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-policy-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-policy-details-"))
   (stateful-rule-group-references common-lisp:nil :type
    (common-lisp:or firewall-policy-stateful-rule-group-references-list
                    common-lisp:null))
   (stateless-custom-actions common-lisp:nil :type
    (common-lisp:or firewall-policy-stateless-custom-actions-list
                    common-lisp:null))
   (stateless-default-actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (stateless-fragment-default-actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (stateless-rule-group-references common-lisp:nil :type
    (common-lisp:or firewall-policy-stateless-rule-group-references-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-details 'make-firewall-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-rule-group-references))
      (common-lisp:list
       (common-lisp:cons "StatefulRuleGroupReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-fragment-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessFragmentDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rule-group-references))
      (common-lisp:list
       (common-lisp:cons "StatelessRuleGroupReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-policy-stateful-rule-group-references-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-firewall-policy-stateful-rule-group-references-details-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateful-rule-group-references-details
                    'make-firewall-policy-stateful-rule-group-references-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateful-rule-group-references-list ()
   '(trivial-types:proper-list
     firewall-policy-stateful-rule-group-references-details))
 (common-lisp:defun |make-firewall-policy-stateful-rule-group-references-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateful-rule-group-references-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-policy-stateless-custom-actions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-firewall-policy-stateless-custom-actions-details-"))
   (action-definition common-lisp:nil :type
    (common-lisp:or stateless-custom-action-definition common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateless-custom-actions-details
                    'make-firewall-policy-stateless-custom-actions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definition))
      (common-lisp:list
       (common-lisp:cons "ActionDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateless-custom-actions-list ()
   '(trivial-types:proper-list
     firewall-policy-stateless-custom-actions-details))
 (common-lisp:defun |make-firewall-policy-stateless-custom-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateless-custom-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-policy-stateless-rule-group-references-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-firewall-policy-stateless-rule-group-references-details-"))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateless-rule-group-references-details
                    'make-firewall-policy-stateless-rule-group-references-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateless-rule-group-references-list ()
   '(trivial-types:proper-list
     firewall-policy-stateless-rule-group-references-details))
 (common-lisp:defun |make-firewall-policy-stateless-rule-group-references-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateless-rule-group-references-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-location-"))
   (lon common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (lat common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geo-location 'make-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lon))
      (common-lisp:list
       (common-lisp:cons "Lon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat))
      (common-lisp:list
       (common-lisp:cons "Lat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-administrator-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-administrator-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-request
                    'make-get-administrator-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-administrator-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-administrator-account-response-"))
   (administrator common-lisp:nil :type
    (common-lisp:or invitation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-response
                    'make-get-administrator-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator))
      (common-lisp:list
       (common-lisp:cons "Administrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-enabled-standards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-enabled-standards-request-"))
   (standards-subscription-arns common-lisp:nil :type
    (common-lisp:or standards-subscription-arns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-enabled-standards-request
                    'make-get-enabled-standards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-enabled-standards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-enabled-standards-response-"))
   (standards-subscriptions common-lisp:nil :type
    (common-lisp:or standards-subscriptions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-enabled-standards-response
                    'make-get-enabled-standards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-aggregator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-aggregator-request-"))
   (finding-aggregator-arn
    (common-lisp:error ":finding-aggregator-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-aggregator-request
                    'make-get-finding-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-aggregator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-aggregator-response-"))
   (finding-aggregator-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (finding-aggregation-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region-linking-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-aggregator-response
                    'make-get-finding-aggregator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or aws-security-finding-filters common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or sort-criteria common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-request 'make-get-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-findings-response-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or aws-security-finding-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-findings-response 'make-get-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "Findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insight-results-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insight-results-request-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insight-results-request
                    'make-get-insight-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insight-results-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insight-results-response-"))
   (insight-results (common-lisp:error ":insight-results is required") :type
    (common-lisp:or insight-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insight-results-response
                    'make-get-insight-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-results))
      (common-lisp:list
       (common-lisp:cons "InsightResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-request-"))
   (insight-arns common-lisp:nil :type
    (common-lisp:or arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insights-request 'make-get-insights-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arns))
      (common-lisp:list
       (common-lisp:cons "InsightArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insights-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insights-response-"))
   (insights (common-lisp:error ":insights is required") :type
    (common-lisp:or insight-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insights-response 'make-get-insights-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "Insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-invitations-count-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-invitations-count-request-")))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-request
                    'make-get-invitations-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-invitations-count-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-invitations-count-response-"))
   (invitations-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-response
                    'make-get-invitations-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations-count))
      (common-lisp:list
       (common-lisp:cons "InvitationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-master-account-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-master-account-request-")))
 (common-lisp:export
  (common-lisp:list 'get-master-account-request
                    'make-get-master-account-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-master-account-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-master-account-response-"))
   (master common-lisp:nil :type (common-lisp:or invitation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-master-account-response
                    'make-get-master-account-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master))
      (common-lisp:list
       (common-lisp:cons "Master"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-members-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-members-request 'make-get-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or member-list common-lisp:null))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-members-response 'make-get-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (icmp-type-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-icmp-type-code-"))
   (code common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'icmp-type-code 'make-icmp-type-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icmp-type-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-findings-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-findings-error-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (error-message (common-lisp:error ":error-message is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-findings-error 'make-import-findings-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-findings-error-list ()
   '(trivial-types:proper-list import-findings-error))
 (common-lisp:defun |make-import-findings-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-findings-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight (:copier common-lisp:nil) (:conc-name "struct-shape-insight-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or aws-security-finding-filters common-lisp:null))
   (group-by-attribute (common-lisp:error ":group-by-attribute is required")
    :type (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight 'make-insight))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-list () '(trivial-types:proper-list insight))
 (common-lisp:defun |make-insight-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-result-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-result-value-"))
   (group-by-attribute-value
    (common-lisp:error ":group-by-attribute-value is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-result-value 'make-insight-result-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-result-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-result-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-by-attribute-value))
      (common-lisp:list
       (common-lisp:cons "GroupByAttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-result-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-result-value-list ()
   '(trivial-types:proper-list insight-result-value))
 (common-lisp:defun |make-insight-result-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-result-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-results (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-results-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (group-by-attribute (common-lisp:error ":group-by-attribute is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (result-values (common-lisp:error ":result-values is required") :type
    (common-lisp:or insight-result-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'insight-results 'make-insight-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-values))
      (common-lisp:list
       (common-lisp:cons "ResultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-results))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-list () '(trivial-types:proper-list integer))
 (common-lisp:defun |make-integer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype integration-type-list ()
   '(trivial-types:proper-list integration-type))
 (common-lisp:defun |make-integration-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message
                    'internal-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-access-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-access-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-access-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-access-exception 'invalid-access-exception-message
                    'invalid-access-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-input-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (invitation (:copier common-lisp:nil)
      (:conc-name "struct-shape-invitation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (invitation-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (invited-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (member-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "MemberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invitation-list ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun |make-invitation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (invite-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-invite-members-request-"))
   (account-ids (common-lisp:error ":account-ids is required") :type
    (common-lisp:or account-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invite-members-request 'make-invite-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invite-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-invite-members-response-"))
   (unprocessed-accounts common-lisp:nil :type
    (common-lisp:or result-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invite-members-response 'make-invite-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-filter-"))
   (cidr common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ip-filter 'make-ip-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-filter-list () '(trivial-types:proper-list ip-filter))
 (common-lisp:defun |make-ip-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-organization-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-organization-details-"))
   (asn common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (asn-org common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (isp common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (org common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-organization-details 'make-ip-organization-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "Asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn-org))
      (common-lisp:list
       (common-lisp:cons "AsnOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'isp))
      (common-lisp:list
       (common-lisp:cons "Isp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "Org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ipv6cidr-block-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipv6cidr-block-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cidr-block-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ipv6cidr-block-association
                    'make-ipv6cidr-block-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipv6cidr-block-association-list ()
   '(trivial-types:proper-list ipv6cidr-block-association))
 (common-lisp:defun |make-ipv6cidr-block-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ipv6cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (keyword-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-keyword-filter-"))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'keyword-filter 'make-keyword-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-filter-list ()
   '(trivial-types:proper-list keyword-filter))
 (common-lisp:defun |make-keyword-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-enabled-products-for-import-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-enabled-products-for-import-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-enabled-products-for-import-request
                    'make-list-enabled-products-for-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-enabled-products-for-import-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-enabled-products-for-import-response-"))
   (product-subscriptions common-lisp:nil :type
    (common-lisp:or product-subscription-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-enabled-products-for-import-response
                    'make-list-enabled-products-for-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscriptions))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-finding-aggregators-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-finding-aggregators-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregators-request
                    'make-list-finding-aggregators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-finding-aggregators-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-finding-aggregators-response-"))
   (finding-aggregators common-lisp:nil :type
    (common-lisp:or finding-aggregator-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregators-response
                    'make-list-finding-aggregators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-aggregators))
      (common-lisp:list
       (common-lisp:cons "FindingAggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or cross-account-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-invitations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-invitations-response-"))
   (invitations common-lisp:nil :type
    (common-lisp:or invitation-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-request-"))
   (only-associated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or cross-account-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-response-"))
   (members common-lisp:nil :type
    (common-lisp:or member-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-admin-accounts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-admin-accounts-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or admins-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-organization-admin-accounts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-organization-admin-accounts-response-"))
   (admin-accounts common-lisp:nil :type
    (common-lisp:or admin-accounts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-control-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-control-definitions-request-"))
   (standards-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-control-definitions-request
                    'make-list-security-control-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-control-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-control-definitions-response-"))
   (security-control-definitions
    (common-lisp:error ":security-control-definitions is required") :type
    (common-lisp:or security-control-definitions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-control-definitions-response
                    'make-list-security-control-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-definitions))
      (common-lisp:list
       (common-lisp:cons "SecurityControlDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-standards-control-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-standards-control-associations-request-"))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-standards-control-associations-request
                    'make-list-standards-control-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-standards-control-associations-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-standards-control-associations-response-"))
   (standards-control-association-summaries
    (common-lisp:error ":standards-control-association-summaries is required")
    :type
    (common-lisp:or standards-control-association-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-standards-control-associations-response
                    'make-list-standards-control-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-summaries))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-state-"))
   (code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (malware (:copier common-lisp:nil) (:conc-name "struct-shape-malware-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or malware-type common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or malware-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'malware 'make-malware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input malware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input malware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input malware))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype malware-list () '(trivial-types:proper-list malware))
 (common-lisp:defun |make-malware-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list malware))
   aws-sdk/generator/shape::members))
(common-lisp:deftype malware-state () 'common-lisp:string)
(common-lisp:deftype malware-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (map-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-map-filter-"))
   (key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (comparison common-lisp:nil :type
    (common-lisp:or map-filter-comparison common-lisp:null)))
 (common-lisp:export (common-lisp:list 'map-filter 'make-map-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-filter))
   common-lisp:nil))
(common-lisp:deftype map-filter-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype map-filter-list ()
   '(trivial-types:proper-list map-filter))
 (common-lisp:defun |make-map-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list map-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (member (:copier common-lisp:nil) (:conc-name "struct-shape-member-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (email common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (administrator-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (member-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (invited-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "MemberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-list () '(trivial-types:proper-list member))
 (common-lisp:defun |make-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network (:copier common-lisp:nil) (:conc-name "struct-shape-network-"))
   (direction common-lisp:nil :type
    (common-lisp:or network-direction common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (open-port-range common-lisp:nil :type
    (common-lisp:or port-range common-lisp:null))
   (source-ip-v4 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-ip-v6 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (source-domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-mac common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-ip-v4 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-ip-v6 common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (destination-domain common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-port-range))
      (common-lisp:list
       (common-lisp:cons "OpenPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-v4))
      (common-lisp:list
       (common-lisp:cons "SourceIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-v6))
      (common-lisp:list
       (common-lisp:cons "SourceIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-port))
      (common-lisp:list
       (common-lisp:cons "SourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain))
      (common-lisp:list
       (common-lisp:cons "SourceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-mac))
      (common-lisp:list
       (common-lisp:cons "SourceMac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip-v4))
      (common-lisp:list
       (common-lisp:cons "DestinationIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip-v6))
      (common-lisp:list
       (common-lisp:cons "DestinationIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-domain))
      (common-lisp:list
       (common-lisp:cons "DestinationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-connection-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-connection-action-"))
   (connection-direction common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remote-ip-details common-lisp:nil :type
    (common-lisp:or action-remote-ip-details common-lisp:null))
   (remote-port-details common-lisp:nil :type
    (common-lisp:or action-remote-port-details common-lisp:null))
   (local-port-details common-lisp:nil :type
    (common-lisp:or action-local-port-details common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (blocked common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-connection-action
                    'make-network-connection-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-direction))
      (common-lisp:list
       (common-lisp:cons "ConnectionDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-port-details))
      (common-lisp:list
       (common-lisp:cons "RemotePortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   common-lisp:nil))
(common-lisp:deftype network-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-header-"))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or network-path-component-details common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or network-path-component-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-header 'make-network-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-path-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-path-component-"))
   (component-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (component-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (egress common-lisp:nil :type
    (common-lisp:or network-header common-lisp:null))
   (ingress common-lisp:nil :type
    (common-lisp:or network-header common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-path-component 'make-network-path-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-id))
      (common-lisp:list
       (common-lisp:cons "ComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "ComponentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingress))
      (common-lisp:list
       (common-lisp:cons "Ingress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (network-path-component-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-path-component-details-"))
   (address common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (port-ranges common-lisp:nil :type
    (common-lisp:or port-range-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-path-component-details
                    'make-network-path-component-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-path-list ()
   '(trivial-types:proper-list network-path-component))
 (common-lisp:defun |make-network-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-path-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-non-empty-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (note (:copier common-lisp:nil) (:conc-name "struct-shape-note-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (updated-by (common-lisp:error ":updated-by is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (updated-at (common-lisp:error ":updated-at is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'note 'make-note))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input note))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input note))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "UpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input note))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (note-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-note-update-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (updated-by (common-lisp:error ":updated-by is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'note-update 'make-note-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input note-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input note-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "UpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input note-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (number-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-number-filter-"))
   (gte common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (lte common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (eq common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'number-filter 'make-number-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "Gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "Lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "Eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype number-filter-list ()
   '(trivial-types:proper-list number-filter))
 (common-lisp:defun |make-number-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (occurrences (:copier common-lisp:nil)
      (:conc-name "struct-shape-occurrences-"))
   (line-ranges common-lisp:nil :type (common-lisp:or ranges common-lisp:null))
   (offset-ranges common-lisp:nil :type
    (common-lisp:or ranges common-lisp:null))
   (pages common-lisp:nil :type (common-lisp:or pages common-lisp:null))
   (records common-lisp:nil :type (common-lisp:or records common-lisp:null))
   (cells common-lisp:nil :type (common-lisp:or cells common-lisp:null)))
 (common-lisp:export (common-lisp:list 'occurrences 'make-occurrences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-ranges))
      (common-lisp:list
       (common-lisp:cons "LineRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-ranges))
      (common-lisp:list
       (common-lisp:cons "OffsetRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "Cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input occurrences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (page (:copier common-lisp:nil) (:conc-name "struct-shape-page-"))
   (page-number common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (line-range common-lisp:nil :type (common-lisp:or range common-lisp:null))
   (offset-range common-lisp:nil :type
    (common-lisp:or range common-lisp:null)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-range))
      (common-lisp:list
       (common-lisp:cons "LineRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-range))
      (common-lisp:list
       (common-lisp:cons "OffsetRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (patch-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-patch-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (installed-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (missing-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failed-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (installed-other-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (installed-rejected-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (installed-pending-reboot common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (operation-start-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (operation-end-time common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (reboot-option common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'patch-summary 'make-patch-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installed-count))
      (common-lisp:list
       (common-lisp:cons "InstalledCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-count))
      (common-lisp:list
       (common-lisp:cons "MissingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-other-count))
      (common-lisp:list
       (common-lisp:cons "InstalledOtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-rejected-count))
      (common-lisp:list
       (common-lisp:cons "InstalledRejectedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-pending-reboot))
      (common-lisp:list
       (common-lisp:cons "InstalledPendingReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-start-time))
      (common-lisp:list
       (common-lisp:cons "OperationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-end-time))
      (common-lisp:list
       (common-lisp:cons "OperationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-option))
      (common-lisp:list
       (common-lisp:cons "RebootOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (port-probe-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-probe-action-"))
   (port-probe-details common-lisp:nil :type
    (common-lisp:or port-probe-detail-list common-lisp:null))
   (blocked common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'port-probe-action 'make-port-probe-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-details))
      (common-lisp:list
       (common-lisp:cons "PortProbeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (port-probe-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-probe-detail-"))
   (local-port-details common-lisp:nil :type
    (common-lisp:or action-local-port-details common-lisp:null))
   (local-ip-details common-lisp:nil :type
    (common-lisp:or action-local-ip-details common-lisp:null))
   (remote-ip-details common-lisp:nil :type
    (common-lisp:or action-remote-ip-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'port-probe-detail 'make-port-probe-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-ip-details))
      (common-lisp:list
       (common-lisp:cons "LocalIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-probe-detail-list ()
   '(trivial-types:proper-list port-probe-detail))
 (common-lisp:defun |make-port-probe-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-probe-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (port-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-"))
   (begin common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (port-range-from-to (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-range-from-to-"))
   (from common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'port-range-from-to 'make-port-range-from-to))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range-from-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range-from-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range-from-to))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-range-list ()
   '(trivial-types:proper-list port-range))
 (common-lisp:defun |make-port-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (process-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-process-details-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (pid common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (parent-pid common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (launched-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (terminated-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'process-details 'make-process-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-pid))
      (common-lisp:list
       (common-lisp:cons "ParentPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminated-at))
      (common-lisp:list
       (common-lisp:cons "TerminatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input process-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (product (:copier common-lisp:nil) (:conc-name "struct-shape-product-"))
   (product-arn (common-lisp:error ":product-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (company-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (categories common-lisp:nil :type
    (common-lisp:or category-list common-lisp:null))
   (integration-types common-lisp:nil :type
    (common-lisp:or integration-type-list common-lisp:null))
   (marketplace-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (activation-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product-subscription-resource-policy common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'product 'make-product))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-types))
      (common-lisp:list
       (common-lisp:cons "IntegrationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketplace-url))
      (common-lisp:list
       (common-lisp:cons "MarketplaceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-url))
      (common-lisp:list
       (common-lisp:cons "ActivationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscription-resource-policy))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptionResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-subscription-arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-product-subscription-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype products-list () '(trivial-types:proper-list product))
 (common-lisp:defun |make-products-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (propagating-vgw-set-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-propagating-vgw-set-details-"))
   (gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'propagating-vgw-set-details
                    'make-propagating-vgw-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype propagating-vgw-set-list ()
   '(trivial-types:proper-list propagating-vgw-set-details))
 (common-lisp:defun |make-propagating-vgw-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            propagating-vgw-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (range (:copier common-lisp:nil) (:conc-name "struct-shape-range-"))
   (start common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (start-column common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-column))
      (common-lisp:list
       (common-lisp:cons "StartColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ranges () '(trivial-types:proper-list range))
 (common-lisp:defun |make-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ratio-scale () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-"))
   (text common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (record (:copier common-lisp:nil) (:conc-name "struct-shape-record-"))
   (json-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (record-index common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-index))
      (common-lisp:list
       (common-lisp:cons "RecordIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:deftype record-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun |make-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-availability-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (related-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-related-finding-"))
   (product-arn (common-lisp:error ":product-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'related-finding 'make-related-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-finding-list ()
   '(trivial-types:proper-list related-finding))
 (common-lisp:defun |make-related-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype related-requirements-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-related-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remediation (:copier common-lisp:nil)
      (:conc-name "struct-shape-remediation-"))
   (recommendation common-lisp:nil :type
    (common-lisp:or recommendation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "Recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (partition common-lisp:nil :type
    (common-lisp:or partition common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-role common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (data-classification common-lisp:nil :type
    (common-lisp:or data-classification-details common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-classification))
      (common-lisp:list
       (common-lisp:cons "DataClassification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-conflict-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message
                    'resource-conflict-exception-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-details-"))
   (aws-auto-scaling-auto-scaling-group common-lisp:nil :type
    (common-lisp:or aws-auto-scaling-auto-scaling-group-details
                    common-lisp:null))
   (aws-code-build-project common-lisp:nil :type
    (common-lisp:or aws-code-build-project-details common-lisp:null))
   (aws-cloud-front-distribution common-lisp:nil :type
    (common-lisp:or aws-cloud-front-distribution-details common-lisp:null))
   (aws-ec2instance common-lisp:nil :type
    (common-lisp:or aws-ec2instance-details common-lisp:null))
   (aws-ec2network-interface common-lisp:nil :type
    (common-lisp:or aws-ec2network-interface-details common-lisp:null))
   (aws-ec2security-group common-lisp:nil :type
    (common-lisp:or aws-ec2security-group-details common-lisp:null))
   (aws-ec2volume common-lisp:nil :type
    (common-lisp:or aws-ec2volume-details common-lisp:null))
   (aws-ec2vpc common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-details common-lisp:null))
   (aws-ec2eip common-lisp:nil :type
    (common-lisp:or aws-ec2eip-details common-lisp:null))
   (aws-ec2subnet common-lisp:nil :type
    (common-lisp:or aws-ec2subnet-details common-lisp:null))
   (aws-ec2network-acl common-lisp:nil :type
    (common-lisp:or aws-ec2network-acl-details common-lisp:null))
   (aws-elbv2load-balancer common-lisp:nil :type
    (common-lisp:or aws-elbv2load-balancer-details common-lisp:null))
   (aws-elastic-beanstalk-environment common-lisp:nil :type
    (common-lisp:or aws-elastic-beanstalk-environment-details
                    common-lisp:null))
   (aws-elasticsearch-domain common-lisp:nil :type
    (common-lisp:or aws-elasticsearch-domain-details common-lisp:null))
   (aws-s3bucket common-lisp:nil :type
    (common-lisp:or aws-s3bucket-details common-lisp:null))
   (aws-s3account-public-access-block common-lisp:nil :type
    (common-lisp:or aws-s3account-public-access-block-details
                    common-lisp:null))
   (aws-s3object common-lisp:nil :type
    (common-lisp:or aws-s3object-details common-lisp:null))
   (aws-secrets-manager-secret common-lisp:nil :type
    (common-lisp:or aws-secrets-manager-secret-details common-lisp:null))
   (aws-iam-access-key common-lisp:nil :type
    (common-lisp:or aws-iam-access-key-details common-lisp:null))
   (aws-iam-user common-lisp:nil :type
    (common-lisp:or aws-iam-user-details common-lisp:null))
   (aws-iam-policy common-lisp:nil :type
    (common-lisp:or aws-iam-policy-details common-lisp:null))
   (aws-api-gateway-v2stage common-lisp:nil :type
    (common-lisp:or aws-api-gateway-v2stage-details common-lisp:null))
   (aws-api-gateway-v2api common-lisp:nil :type
    (common-lisp:or aws-api-gateway-v2api-details common-lisp:null))
   (aws-dynamo-db-table common-lisp:nil :type
    (common-lisp:or aws-dynamo-db-table-details common-lisp:null))
   (aws-api-gateway-stage common-lisp:nil :type
    (common-lisp:or aws-api-gateway-stage-details common-lisp:null))
   (aws-api-gateway-rest-api common-lisp:nil :type
    (common-lisp:or aws-api-gateway-rest-api-details common-lisp:null))
   (aws-cloud-trail-trail common-lisp:nil :type
    (common-lisp:or aws-cloud-trail-trail-details common-lisp:null))
   (aws-ssm-patch-compliance common-lisp:nil :type
    (common-lisp:or aws-ssm-patch-compliance-details common-lisp:null))
   (aws-certificate-manager-certificate common-lisp:nil :type
    (common-lisp:or aws-certificate-manager-certificate-details
                    common-lisp:null))
   (aws-redshift-cluster common-lisp:nil :type
    (common-lisp:or aws-redshift-cluster-details common-lisp:null))
   (aws-elb-load-balancer common-lisp:nil :type
    (common-lisp:or aws-elb-load-balancer-details common-lisp:null))
   (aws-iam-group common-lisp:nil :type
    (common-lisp:or aws-iam-group-details common-lisp:null))
   (aws-iam-role common-lisp:nil :type
    (common-lisp:or aws-iam-role-details common-lisp:null))
   (aws-kms-key common-lisp:nil :type
    (common-lisp:or aws-kms-key-details common-lisp:null))
   (aws-lambda-function common-lisp:nil :type
    (common-lisp:or aws-lambda-function-details common-lisp:null))
   (aws-lambda-layer-version common-lisp:nil :type
    (common-lisp:or aws-lambda-layer-version-details common-lisp:null))
   (aws-rds-db-instance common-lisp:nil :type
    (common-lisp:or aws-rds-db-instance-details common-lisp:null))
   (aws-sns-topic common-lisp:nil :type
    (common-lisp:or aws-sns-topic-details common-lisp:null))
   (aws-sqs-queue common-lisp:nil :type
    (common-lisp:or aws-sqs-queue-details common-lisp:null))
   (aws-waf-web-acl common-lisp:nil :type
    (common-lisp:or aws-waf-web-acl-details common-lisp:null))
   (aws-rds-db-snapshot common-lisp:nil :type
    (common-lisp:or aws-rds-db-snapshot-details common-lisp:null))
   (aws-rds-db-cluster-snapshot common-lisp:nil :type
    (common-lisp:or aws-rds-db-cluster-snapshot-details common-lisp:null))
   (aws-rds-db-cluster common-lisp:nil :type
    (common-lisp:or aws-rds-db-cluster-details common-lisp:null))
   (aws-ecs-cluster common-lisp:nil :type
    (common-lisp:or aws-ecs-cluster-details common-lisp:null))
   (aws-ecs-container common-lisp:nil :type
    (common-lisp:or aws-ecs-container-details common-lisp:null))
   (aws-ecs-task-definition common-lisp:nil :type
    (common-lisp:or aws-ecs-task-definition-details common-lisp:null))
   (container common-lisp:nil :type
    (common-lisp:or container-details common-lisp:null))
   (other common-lisp:nil :type (common-lisp:or field-map common-lisp:null))
   (aws-rds-event-subscription common-lisp:nil :type
    (common-lisp:or aws-rds-event-subscription-details common-lisp:null))
   (aws-ecs-service common-lisp:nil :type
    (common-lisp:or aws-ecs-service-details common-lisp:null))
   (aws-auto-scaling-launch-configuration common-lisp:nil :type
    (common-lisp:or aws-auto-scaling-launch-configuration-details
                    common-lisp:null))
   (aws-ec2vpn-connection common-lisp:nil :type
    (common-lisp:or aws-ec2vpn-connection-details common-lisp:null))
   (aws-ecr-container-image common-lisp:nil :type
    (common-lisp:or aws-ecr-container-image-details common-lisp:null))
   (aws-open-search-service-domain common-lisp:nil :type
    (common-lisp:or aws-open-search-service-domain-details common-lisp:null))
   (aws-ec2vpc-endpoint-service common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-endpoint-service-details common-lisp:null))
   (aws-xray-encryption-config common-lisp:nil :type
    (common-lisp:or aws-xray-encryption-config-details common-lisp:null))
   (aws-waf-rate-based-rule common-lisp:nil :type
    (common-lisp:or aws-waf-rate-based-rule-details common-lisp:null))
   (aws-waf-regional-rate-based-rule common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rate-based-rule-details common-lisp:null))
   (aws-ecr-repository common-lisp:nil :type
    (common-lisp:or aws-ecr-repository-details common-lisp:null))
   (aws-eks-cluster common-lisp:nil :type
    (common-lisp:or aws-eks-cluster-details common-lisp:null))
   (aws-network-firewall-firewall-policy common-lisp:nil :type
    (common-lisp:or aws-network-firewall-firewall-policy-details
                    common-lisp:null))
   (aws-network-firewall-firewall common-lisp:nil :type
    (common-lisp:or aws-network-firewall-firewall-details common-lisp:null))
   (aws-network-firewall-rule-group common-lisp:nil :type
    (common-lisp:or aws-network-firewall-rule-group-details common-lisp:null))
   (aws-rds-db-security-group common-lisp:nil :type
    (common-lisp:or aws-rds-db-security-group-details common-lisp:null))
   (aws-kinesis-stream common-lisp:nil :type
    (common-lisp:or aws-kinesis-stream-details common-lisp:null))
   (aws-ec2transit-gateway common-lisp:nil :type
    (common-lisp:or aws-ec2transit-gateway-details common-lisp:null))
   (aws-efs-access-point common-lisp:nil :type
    (common-lisp:or aws-efs-access-point-details common-lisp:null))
   (aws-cloud-formation-stack common-lisp:nil :type
    (common-lisp:or aws-cloud-formation-stack-details common-lisp:null))
   (aws-cloud-watch-alarm common-lisp:nil :type
    (common-lisp:or aws-cloud-watch-alarm-details common-lisp:null))
   (aws-ec2vpc-peering-connection common-lisp:nil :type
    (common-lisp:or aws-ec2vpc-peering-connection-details common-lisp:null))
   (aws-waf-regional-rule-group common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rule-group-details common-lisp:null))
   (aws-waf-regional-rule common-lisp:nil :type
    (common-lisp:or aws-waf-regional-rule-details common-lisp:null))
   (aws-waf-regional-web-acl common-lisp:nil :type
    (common-lisp:or aws-waf-regional-web-acl-details common-lisp:null))
   (aws-waf-rule common-lisp:nil :type
    (common-lisp:or aws-waf-rule-details common-lisp:null))
   (aws-waf-rule-group common-lisp:nil :type
    (common-lisp:or aws-waf-rule-group-details common-lisp:null))
   (aws-ecs-task common-lisp:nil :type
    (common-lisp:or aws-ecs-task-details common-lisp:null))
   (aws-backup-backup-vault common-lisp:nil :type
    (common-lisp:or aws-backup-backup-vault-details common-lisp:null))
   (aws-backup-backup-plan common-lisp:nil :type
    (common-lisp:or aws-backup-backup-plan-details common-lisp:null))
   (aws-backup-recovery-point common-lisp:nil :type
    (common-lisp:or aws-backup-recovery-point-details common-lisp:null))
   (aws-ec2launch-template common-lisp:nil :type
    (common-lisp:or aws-ec2launch-template-details common-lisp:null))
   (aws-sage-maker-notebook-instance common-lisp:nil :type
    (common-lisp:or aws-sage-maker-notebook-instance-details common-lisp:null))
   (aws-wafv2web-acl common-lisp:nil :type
    (common-lisp:or aws-wafv2web-acl-details common-lisp:null))
   (aws-wafv2rule-group common-lisp:nil :type
    (common-lisp:or aws-wafv2rule-group-details common-lisp:null))
   (aws-ec2route-table common-lisp:nil :type
    (common-lisp:or aws-ec2route-table-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-auto-scaling-auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "AwsAutoScalingAutoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-code-build-project))
      (common-lisp:list
       (common-lisp:cons "AwsCodeBuildProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-front-distribution))
      (common-lisp:list
       (common-lisp:cons "AwsCloudFrontDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2instance))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2security-group))
      (common-lisp:list
       (common-lisp:cons "AwsEc2SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2volume))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2vpc))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2eip))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Eip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2subnet))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Subnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2network-acl))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elbv2load-balancer))
      (common-lisp:list
       (common-lisp:cons "AwsElbv2LoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elastic-beanstalk-environment))
      (common-lisp:list
       (common-lisp:cons "AwsElasticBeanstalkEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elasticsearch-domain))
      (common-lisp:list
       (common-lisp:cons "AwsElasticsearchDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-s3bucket))
      (common-lisp:list
       (common-lisp:cons "AwsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-s3account-public-access-block))
      (common-lisp:list
       (common-lisp:cons "AwsS3AccountPublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-s3object))
      (common-lisp:list
       (common-lisp:cons "AwsS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secrets-manager-secret))
      (common-lisp:list
       (common-lisp:cons "AwsSecretsManagerSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-access-key))
      (common-lisp:list
       (common-lisp:cons "AwsIamAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-user))
      (common-lisp:list
       (common-lisp:cons "AwsIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-policy))
      (common-lisp:list
       (common-lisp:cons "AwsIamPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-v2stage))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayV2Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-v2api))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayV2Api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-dynamo-db-table))
      (common-lisp:list
       (common-lisp:cons "AwsDynamoDbTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-stage))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-rest-api))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayRestApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-trail-trail))
      (common-lisp:list
       (common-lisp:cons "AwsCloudTrailTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ssm-patch-compliance))
      (common-lisp:list
       (common-lisp:cons "AwsSsmPatchCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-certificate-manager-certificate))
      (common-lisp:list
       (common-lisp:cons "AwsCertificateManagerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-redshift-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsRedshiftCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elb-load-balancer))
      (common-lisp:list
       (common-lisp:cons "AwsElbLoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-group))
      (common-lisp:list
       (common-lisp:cons "AwsIamGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-role))
      (common-lisp:list
       (common-lisp:cons "AwsIamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-lambda-function))
      (common-lisp:list
       (common-lisp:cons "AwsLambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-lambda-layer-version))
      (common-lisp:list
       (common-lisp:cons "AwsLambdaLayerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-instance))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-sns-topic))
      (common-lisp:list
       (common-lisp:cons "AwsSnsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-sqs-queue))
      (common-lisp:list
       (common-lisp:cons "AwsSqsQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafWebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-snapshot))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-db-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsEcsCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-container))
      (common-lisp:list
       (common-lisp:cons "AwsEcsContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecs-task-definition))
      (common-lisp:list
       (common-lisp:cons "AwsEcsTaskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other))
      (common-lisp:list
       (common-lisp:cons "Other"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-event-subscription))
      (common-lisp:list
       (common-lisp:cons "AwsRdsEventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-service))
      (common-lisp:list
       (common-lisp:cons "AwsEcsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-auto-scaling-launch-configuration))
      (common-lisp:list
       (common-lisp:cons "AwsAutoScalingLaunchConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpn-connection))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpnConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-image))
      (common-lisp:list
       (common-lisp:cons "AwsEcrContainerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-open-search-service-domain))
      (common-lisp:list
       (common-lisp:cons "AwsOpenSearchServiceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpc-endpoint-service))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpcEndpointService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-xray-encryption-config))
      (common-lisp:list
       (common-lisp:cons "AwsXrayEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-rate-based-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRateBasedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rate-based-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRateBasedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecr-repository))
      (common-lisp:list
       (common-lisp:cons "AwsEcrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-eks-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsEksCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-firewall))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-db-security-group))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kinesis-stream))
      (common-lisp:list
       (common-lisp:cons "AwsKinesisStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2transit-gateway))
      (common-lisp:list
       (common-lisp:cons "AwsEc2TransitGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-efs-access-point))
      (common-lisp:list
       (common-lisp:cons "AwsEfsAccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-formation-stack))
      (common-lisp:list
       (common-lisp:cons "AwsCloudFormationStack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-watch-alarm))
      (common-lisp:list
       (common-lisp:cons "AwsCloudWatchAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpc-peering-connection))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpcPeeringConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalWebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-task))
      (common-lisp:list
       (common-lisp:cons "AwsEcsTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-backup-vault))
      (common-lisp:list
       (common-lisp:cons "AwsBackupBackupVault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-backup-plan))
      (common-lisp:list
       (common-lisp:cons "AwsBackupBackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2launch-template))
      (common-lisp:list
       (common-lisp:cons "AwsEc2LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-sage-maker-notebook-instance))
      (common-lisp:list
       (common-lisp:cons "AwsSageMakerNotebookInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-wafv2web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafv2WebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-wafv2rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafv2RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2route-table))
      (common-lisp:list
       (common-lisp:cons "AwsEc2RouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code)))
(common-lisp:progn
 (common-lisp:defstruct
     (result (:copier common-lisp:nil) (:conc-name "struct-shape-result-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (processing-result common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-result))
      (common-lisp:list
       (common-lisp:cons "ProcessingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun |make-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (route-set-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-set-details-"))
   (carrier-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (core-network-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-ipv6cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-prefix-list-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (egress-only-internet-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-owner-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (local-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (nat-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (transit-gateway-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vpc-peering-connection-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-set-details 'make-route-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'carrier-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CarrierGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-gateway-id))
      (common-lisp:list
       (common-lisp:cons "LocalGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-set-list ()
   '(trivial-types:proper-list route-set-details))
 (common-lisp:defun |make-route-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-details-"))
   (rule-variables common-lisp:nil :type
    (common-lisp:or rule-group-variables common-lisp:null))
   (rules-source common-lisp:nil :type
    (common-lisp:or rule-group-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-details 'make-rule-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-variables))
      (common-lisp:list
       (common-lisp:cons "RuleVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-source))
      (common-lisp:list
       (common-lisp:cons "RulesSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-"))
   (rules-source-list common-lisp:nil :type
    (common-lisp:or rule-group-source-list-details common-lisp:null))
   (rules-string common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stateful-rules common-lisp:nil :type
    (common-lisp:or rule-group-source-stateful-rules-list common-lisp:null))
   (stateless-rules-and-custom-actions common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rules-and-custom-actions-details
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source 'make-rule-group-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-source-list))
      (common-lisp:list
       (common-lisp:cons "RulesSourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-string))
      (common-lisp:list
       (common-lisp:cons "RulesString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stateful-rules))
      (common-lisp:list
       (common-lisp:cons "StatefulRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rules-and-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessRulesAndCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-custom-actions-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-custom-actions-details-"))
   (action-definition common-lisp:nil :type
    (common-lisp:or stateless-custom-action-definition common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-custom-actions-details
                    'make-rule-group-source-custom-actions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definition))
      (common-lisp:list
       (common-lisp:cons "ActionDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-custom-actions-list ()
   '(trivial-types:proper-list rule-group-source-custom-actions-details))
 (common-lisp:defun |make-rule-group-source-custom-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-custom-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-list-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-list-details-"))
   (generated-rules-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (target-types common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-list-details
                    'make-rule-group-source-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-rules-type))
      (common-lisp:list
       (common-lisp:cons "GeneratedRulesType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-types))
      (common-lisp:list
       (common-lisp:cons "TargetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateful-rules-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-stateful-rules-details-"))
   (action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (header common-lisp:nil :type
    (common-lisp:or rule-group-source-stateful-rules-header-details
                    common-lisp:null))
   (rule-options common-lisp:nil :type
    (common-lisp:or rule-group-source-stateful-rules-options-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-details
                    'make-rule-group-source-stateful-rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-options))
      (common-lisp:list
       (common-lisp:cons "RuleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateful-rules-header-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateful-rules-header-details-"))
   (destination common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (destination-port common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (direction common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-port common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-header-details
                    'make-rule-group-source-stateful-rules-header-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-port))
      (common-lisp:list
       (common-lisp:cons "SourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-list ()
   '(trivial-types:proper-list rule-group-source-stateful-rules-details))
 (common-lisp:defun |make-rule-group-source-stateful-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateful-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateful-rules-options-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateful-rules-options-details-"))
   (keyword common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or rule-group-source-stateful-rules-rule-options-settings-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-options-details
                    'make-rule-group-source-stateful-rules-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-options-list ()
   '(trivial-types:proper-list
     rule-group-source-stateful-rules-options-details))
 (common-lisp:defun |make-rule-group-source-stateful-rules-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateful-rules-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-rule-options-settings-list
                      ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-rule-group-source-stateful-rules-rule-options-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-stateless-rule-definition-"))
   (actions common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (match-attributes common-lisp:nil :type
    (common-lisp:or rule-group-source-stateless-rule-match-attributes
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-definition
                    'make-rule-group-source-stateless-rule-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-attributes))
      (common-lisp:list
       (common-lisp:cons "MatchAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-"))
   (destination-ports common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-destination-ports-list
     common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-destinations-list
     common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-protocols-list
     common-lisp:null))
   (source-ports common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-source-ports-list
     common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-sources-list
     common-lisp:null))
   (tcp-flags common-lisp:nil :type
    (common-lisp:or
     rule-group-source-stateless-rule-match-attributes-tcp-flags-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-match-attributes
                    'make-rule-group-source-stateless-rule-match-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ports))
      (common-lisp:list
       (common-lisp:cons "SourcePorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-flags))
      (common-lisp:list
       (common-lisp:cons "TcpFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes-destination-ports
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-destination-ports-"))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-destination-ports
   'make-rule-group-source-stateless-rule-match-attributes-destination-ports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-destination-ports-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-destination-ports))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-destination-ports-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-destination-ports))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes-destinations
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-destinations-"))
   (address-definition common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-destinations
   'make-rule-group-source-stateless-rule-match-attributes-destinations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-definition))
      (common-lisp:list
       (common-lisp:cons "AddressDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-destinations-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-destinations))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-destinations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-destinations))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-protocols-list
                      ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-protocols-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes-source-ports
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-source-ports-"))
   (from-port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-source-ports
   'make-rule-group-source-stateless-rule-match-attributes-source-ports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-source-ports-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-source-ports))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-source-ports-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-source-ports))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes-sources
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-sources-"))
   (address-definition common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-match-attributes-sources
                    'make-rule-group-source-stateless-rule-match-attributes-sources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-definition))
      (common-lisp:list
       (common-lisp:cons "AddressDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-sources-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-sources))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-sources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rule-match-attributes-tcp-flags
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rule-match-attributes-tcp-flags-"))
   (flags common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null))
   (masks common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-tcp-flags
   'make-rule-group-source-stateless-rule-match-attributes-tcp-flags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flags))
      (common-lisp:list
       (common-lisp:cons "Flags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'masks))
      (common-lisp:list
       (common-lisp:cons "Masks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-tcp-flags-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-tcp-flags))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-tcp-flags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-tcp-flags))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rules-and-custom-actions-details
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rule-group-source-stateless-rules-and-custom-actions-details-"))
   (custom-actions common-lisp:nil :type
    (common-lisp:or rule-group-source-custom-actions-list common-lisp:null))
   (stateless-rules common-lisp:nil :type
    (common-lisp:or rule-group-source-stateless-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rules-and-custom-actions-details
   'make-rule-group-source-stateless-rules-and-custom-actions-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-actions))
      (common-lisp:list
       (common-lisp:cons "CustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stateless-rules))
      (common-lisp:list
       (common-lisp:cons "StatelessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-source-stateless-rules-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-source-stateless-rules-details-"))
   (priority common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (rule-definition common-lisp:nil :type
    (common-lisp:or rule-group-source-stateless-rule-definition
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rules-details
                    'make-rule-group-source-stateless-rules-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-definition))
      (common-lisp:list
       (common-lisp:cons "RuleDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rules-list ()
   '(trivial-types:proper-list rule-group-source-stateless-rules-details))
 (common-lisp:defun |make-rule-group-source-stateless-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-variables (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-variables-"))
   (ip-sets common-lisp:nil :type
    (common-lisp:or rule-group-variables-ip-sets-details common-lisp:null))
   (port-sets common-lisp:nil :type
    (common-lisp:or rule-group-variables-port-sets-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables 'make-rule-group-variables))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-variables))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-variables))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-sets))
      (common-lisp:list
       (common-lisp:cons "PortSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-variables))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-variables-ip-sets-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-variables-ip-sets-details-"))
   (definition common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables-ip-sets-details
                    'make-rule-group-variables-ip-sets-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-variables-port-sets-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-variables-port-sets-details-"))
   (definition common-lisp:nil :type
    (common-lisp:or non-empty-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables-port-sets-details
                    'make-rule-group-variables-port-sets-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-control-"))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (security-control-arn
    (common-lisp:error ":security-control-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation-url (common-lisp:error ":remediation-url is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-rating (common-lisp:error ":severity-rating is required") :type
    (common-lisp:or severity-rating common-lisp:null))
   (security-control-status
    (common-lisp:error ":security-control-status is required") :type
    (common-lisp:or control-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-control 'make-security-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-status))
      (common-lisp:list
       (common-lisp:cons "SecurityControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-control-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-control-definition-"))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation-url (common-lisp:error ":remediation-url is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-rating (common-lisp:error ":severity-rating is required") :type
    (common-lisp:or severity-rating common-lisp:null))
   (current-region-availability
    (common-lisp:error ":current-region-availability is required") :type
    (common-lisp:or region-availability-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-control-definition
                    'make-security-control-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-region-availability))
      (common-lisp:list
       (common-lisp:cons "CurrentRegionAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-control-definitions ()
   '(trivial-types:proper-list security-control-definition))
 (common-lisp:defun |make-security-control-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-control-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-controls ()
   '(trivial-types:proper-list security-control))
 (common-lisp:defun |make-security-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitive-data-detections (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitive-data-detections-"))
   (count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (occurrences common-lisp:nil :type
    (common-lisp:or occurrences common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-detections
                    'make-sensitive-data-detections))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "Occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data-detections-list ()
   '(trivial-types:proper-list sensitive-data-detections))
 (common-lisp:defun |make-sensitive-data-detections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sensitive-data-detections))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sensitive-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensitive-data-result-"))
   (category common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (detections common-lisp:nil :type
    (common-lisp:or sensitive-data-detections-list common-lisp:null))
   (total-count common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-result 'make-sensitive-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "Detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data-result-list ()
   '(trivial-types:proper-list sensitive-data-result))
 (common-lisp:defun |make-sensitive-data-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-data-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (severity (:copier common-lisp:nil) (:conc-name "struct-shape-severity-"))
   (product common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (label common-lisp:nil :type
    (common-lisp:or severity-label common-lisp:null))
   (normalized common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (original common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity 'make-severity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normalized))
      (common-lisp:list
       (common-lisp:cons "Normalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original))
      (common-lisp:list
       (common-lisp:cons "Original"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity))
   common-lisp:nil))
(common-lisp:deftype severity-label () 'common-lisp:string)
(common-lisp:deftype severity-rating () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (severity-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-severity-update-"))
   (normalized common-lisp:nil :type
    (common-lisp:or ratio-scale common-lisp:null))
   (product common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (label common-lisp:nil :type
    (common-lisp:or severity-label common-lisp:null)))
 (common-lisp:export (common-lisp:list 'severity-update 'make-severity-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normalized))
      (common-lisp:list
       (common-lisp:cons "Normalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-update))
   common-lisp:nil))
(common-lisp:deftype size-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (software-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-software-package-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (epoch common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (release common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (architecture common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (package-manager common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (file-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (fixed-in-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-layer-hash common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-layer-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'software-package 'make-software-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input software-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input software-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "Epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "Release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "PackageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-in-version))
      (common-lisp:list
       (common-lisp:cons "FixedInVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "Remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "SourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-arn))
      (common-lisp:list
       (common-lisp:cons "SourceLayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input software-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype software-package-list ()
   '(trivial-types:proper-list software-package))
 (common-lisp:defun |make-software-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list software-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sort-criteria ()
   '(trivial-types:proper-list sort-criterion))
 (common-lisp:defun |make-sort-criteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sort-criterion (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-criterion-"))
   (field common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-criterion 'make-sort-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criterion))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (standard (:copier common-lisp:nil) (:conc-name "struct-shape-standard-"))
   (standards-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (enabled-by-default common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (standards-managed-by common-lisp:nil :type
    (common-lisp:or standards-managed-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'standard 'make-standard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-by-default))
      (common-lisp:list
       (common-lisp:cons "EnabledByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-managed-by))
      (common-lisp:list
       (common-lisp:cons "StandardsManagedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards () '(trivial-types:proper-list standard))
 (common-lisp:defun |make-standards|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-control-"))
   (standards-control-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (control-status common-lisp:nil :type
    (common-lisp:or control-status common-lisp:null))
   (disabled-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (control-status-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (control-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (title common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (remediation-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity-rating common-lisp:nil :type
    (common-lisp:or severity-rating common-lisp:null))
   (related-requirements common-lisp:nil :type
    (common-lisp:or related-requirements-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-control 'make-standards-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standards-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standards-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "ControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "DisabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-status-updated-at))
      (common-lisp:list
       (common-lisp:cons "ControlStatusUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-id))
      (common-lisp:list
       (common-lisp:cons "ControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standards-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-standards-control-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-control-association-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-control-association-detail-"))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (security-control-arn
    (common-lisp:error ":security-control-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (association-status (common-lisp:error ":association-status is required")
    :type (common-lisp:or association-status common-lisp:null))
   (related-requirements common-lisp:nil :type
    (common-lisp:or related-requirements-list common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-control-title common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-control-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-control-arns common-lisp:nil :type
    (common-lisp:or standards-control-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-detail
                    'make-standards-control-association-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-title))
      (common-lisp:list
       (common-lisp:cons "StandardsControlTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-description))
      (common-lisp:list
       (common-lisp:cons "StandardsControlDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsControlArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-details ()
   '(trivial-types:proper-list standards-control-association-detail))
 (common-lisp:defun |make-standards-control-association-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-control-association-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-control-association-id-"))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-id
                    'make-standards-control-association-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-ids ()
   '(trivial-types:proper-list standards-control-association-id))
 (common-lisp:defun |make-standards-control-association-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-summaries ()
   '(trivial-types:proper-list standards-control-association-summary))
 (common-lisp:defun |make-standards-control-association-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-control-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-control-association-summary-"))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (security-control-arn
    (common-lisp:error ":security-control-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (association-status (common-lisp:error ":association-status is required")
    :type (common-lisp:or association-status common-lisp:null))
   (related-requirements common-lisp:nil :type
    (common-lisp:or related-requirements-list common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-control-title common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-control-description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-summary
                    'make-standards-control-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-title))
      (common-lisp:list
       (common-lisp:cons "StandardsControlTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-description))
      (common-lisp:list
       (common-lisp:cons "StandardsControlDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-control-association-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-control-association-update-"))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (association-status (common-lisp:error ":association-status is required")
    :type (common-lisp:or association-status common-lisp:null))
   (updated-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-update
                    'make-standards-control-association-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-updates ()
   '(trivial-types:proper-list standards-control-association-update))
 (common-lisp:defun |make-standards-control-association-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-controls ()
   '(trivial-types:proper-list standards-control))
 (common-lisp:defun |make-standards-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standards-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-input-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-standards-input-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-managed-by (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-managed-by-"))
   (company common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (product common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-managed-by 'make-standards-managed-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standards-managed-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standards-managed-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standards-managed-by))
   common-lisp:nil))
(common-lisp:deftype standards-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (standards-status-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-status-reason-"))
   (status-reason-code (common-lisp:error ":status-reason-code is required")
    :type (common-lisp:or status-reason-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-status-reason 'make-standards-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason-code))
      (common-lisp:list
       (common-lisp:cons "StatusReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-subscription-"))
   (standards-subscription-arn
    (common-lisp:error ":standards-subscription-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-input (common-lisp:error ":standards-input is required") :type
    (common-lisp:or standards-input-parameter-map common-lisp:null))
   (standards-status (common-lisp:error ":standards-status is required") :type
    (common-lisp:or standards-status common-lisp:null))
   (standards-status-reason common-lisp:nil :type
    (common-lisp:or standards-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-subscription 'make-standards-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-input))
      (common-lisp:list
       (common-lisp:cons "StandardsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-status))
      (common-lisp:list
       (common-lisp:cons "StandardsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-status-reason))
      (common-lisp:list
       (common-lisp:cons "StandardsStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-subscription-arns ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-standards-subscription-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (standards-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-standards-subscription-request-"))
   (standards-arn (common-lisp:error ":standards-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (standards-input common-lisp:nil :type
    (common-lisp:or standards-input-parameter-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standards-subscription-request
                    'make-standards-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-input))
      (common-lisp:list
       (common-lisp:cons "StandardsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-subscription-requests ()
   '(trivial-types:proper-list standards-subscription-request))
 (common-lisp:defun |make-standards-subscription-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-subscription-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-subscriptions ()
   '(trivial-types:proper-list standards-subscription))
 (common-lisp:defun |make-standards-subscriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standards-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stateless-custom-action-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-stateless-custom-action-definition-"))
   (publish-metric-action common-lisp:nil :type
    (common-lisp:or stateless-custom-publish-metric-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-action-definition
                    'make-stateless-custom-action-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-metric-action))
      (common-lisp:list
       (common-lisp:cons "PublishMetricAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stateless-custom-publish-metric-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-stateless-custom-publish-metric-action-"))
   (dimensions common-lisp:nil :type
    (common-lisp:or stateless-custom-publish-metric-action-dimensions-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-publish-metric-action
                    'make-stateless-custom-publish-metric-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stateless-custom-publish-metric-action-dimension
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-stateless-custom-publish-metric-action-dimension-"))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-publish-metric-action-dimension
                    'make-stateless-custom-publish-metric-action-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateless-custom-publish-metric-action-dimensions-list ()
   '(trivial-types:proper-list
     stateless-custom-publish-metric-action-dimension))
 (common-lisp:defun |make-stateless-custom-publish-metric-action-dimensions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stateless-custom-publish-metric-action-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (status-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-status-reason-"))
   (reason-code (common-lisp:error ":reason-code is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-reason 'make-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "ReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-reason))
   common-lisp:nil))
(common-lisp:deftype status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype status-reasons-list ()
   '(trivial-types:proper-list status-reason))
 (common-lisp:defun |make-status-reasons-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list status-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (string-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-filter-"))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (comparison common-lisp:nil :type
    (common-lisp:or string-filter-comparison common-lisp:null)))
 (common-lisp:export (common-lisp:list 'string-filter 'make-string-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-filter))
   common-lisp:nil))
(common-lisp:deftype string-filter-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-filter-list ()
   '(trivial-types:proper-list string-filter))
 (common-lisp:defun |make-string-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (threat (:copier common-lisp:nil) (:conc-name "struct-shape-threat-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (item-count common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (file-paths common-lisp:nil :type
    (common-lisp:or file-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'threat 'make-threat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input threat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input threat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-paths))
      (common-lisp:list
       (common-lisp:cons "FilePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input threat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (threat-intel-indicator (:copier common-lisp:nil)
      (:conc-name "struct-shape-threat-intel-indicator-"))
   (type common-lisp:nil :type
    (common-lisp:or threat-intel-indicator-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (category common-lisp:nil :type
    (common-lisp:or threat-intel-indicator-category common-lisp:null))
   (last-observed-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'threat-intel-indicator 'make-threat-intel-indicator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   common-lisp:nil))
(common-lisp:deftype threat-intel-indicator-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype threat-intel-indicator-list ()
   '(trivial-types:proper-list threat-intel-indicator))
 (common-lisp:defun |make-threat-intel-indicator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list threat-intel-indicator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype threat-intel-indicator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype threat-list () '(trivial-types:proper-list threat))
 (common-lisp:defun |make-threat-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list threat))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unprocessed-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unprocessed-security-control (:copier common-lisp:nil)
      (:conc-name "struct-shape-unprocessed-security-control-"))
   (security-control-id (common-lisp:error ":security-control-id is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or unprocessed-error-code common-lisp:null))
   (error-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-security-control
                    'make-unprocessed-security-control))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-security-controls ()
   '(trivial-types:proper-list unprocessed-security-control))
 (common-lisp:defun |make-unprocessed-security-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-security-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (unprocessed-standards-control-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-unprocessed-standards-control-association-"))
   (standards-control-association-id
    (common-lisp:error ":standards-control-association-id is required") :type
    (common-lisp:or standards-control-association-id common-lisp:null))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or unprocessed-error-code common-lisp:null))
   (error-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-standards-control-association
                    'make-unprocessed-standards-control-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-id))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unprocessed-standards-control-association-update
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-unprocessed-standards-control-association-update-"))
   (standards-control-association-update
    (common-lisp:error ":standards-control-association-update is required")
    :type
    (common-lisp:or standards-control-association-update common-lisp:null))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or unprocessed-error-code common-lisp:null))
   (error-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unprocessed-standards-control-association-update
                    'make-unprocessed-standards-control-association-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-update))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-standards-control-association-updates ()
   '(trivial-types:proper-list
     unprocessed-standards-control-association-update))
 (common-lisp:defun |make-unprocessed-standards-control-association-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-standards-control-association-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unprocessed-standards-control-associations ()
   '(trivial-types:proper-list unprocessed-standards-control-association))
 (common-lisp:defun |make-unprocessed-standards-control-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-standards-control-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-target-request-"))
   (action-target-arn (common-lisp:error ":action-target-arn is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-action-target-request
                    'make-update-action-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-target-response-")))
 (common-lisp:export
  (common-lisp:list 'update-action-target-response
                    'make-update-action-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-finding-aggregator-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-finding-aggregator-request-"))
   (finding-aggregator-arn
    (common-lisp:error ":finding-aggregator-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region-linking-mode (common-lisp:error ":region-linking-mode is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-finding-aggregator-request
                    'make-update-finding-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-finding-aggregator-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-finding-aggregator-response-"))
   (finding-aggregator-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (finding-aggregation-region common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (region-linking-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-finding-aggregator-response
                    'make-update-finding-aggregator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-findings-request-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or aws-security-finding-filters common-lisp:null))
   (note common-lisp:nil :type (common-lisp:or note-update common-lisp:null))
   (record-state common-lisp:nil :type
    (common-lisp:or record-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-findings-request 'make-update-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-findings-response-")))
 (common-lisp:export
  (common-lisp:list 'update-findings-response 'make-update-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-insight-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-insight-request-"))
   (insight-arn (common-lisp:error ":insight-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or aws-security-finding-filters common-lisp:null))
   (group-by-attribute common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-insight-request 'make-update-insight-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-insight-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-insight-response-")))
 (common-lisp:export
  (common-lisp:list 'update-insight-response 'make-update-insight-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-request-"))
   (auto-enable (common-lisp:error ":auto-enable is required") :type
    (common-lisp:or boolean common-lisp:null))
   (auto-enable-standards common-lisp:nil :type
    (common-lisp:or auto-enable-standards common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-standards))
      (common-lisp:list
       (common-lisp:cons "AutoEnableStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-organization-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-organization-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-security-hub-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-security-hub-configuration-request-"))
   (auto-enable-controls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (control-finding-generator common-lisp:nil :type
    (common-lisp:or control-finding-generator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-security-hub-configuration-request
                    'make-update-security-hub-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-controls))
      (common-lisp:list
       (common-lisp:cons "AutoEnableControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-security-hub-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-security-hub-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-security-hub-configuration-response
                    'make-update-security-hub-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-standards-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-standards-control-request-"))
   (standards-control-arn
    (common-lisp:error ":standards-control-arn is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (control-status common-lisp:nil :type
    (common-lisp:or control-status common-lisp:null))
   (disabled-reason common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-standards-control-request
                    'make-update-standards-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "ControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "DisabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-standards-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-standards-control-response-")))
 (common-lisp:export
  (common-lisp:list 'update-standards-control-response
                    'make-update-standards-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   common-lisp:nil))
(common-lisp:deftype verification-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (volume-mount (:copier common-lisp:nil)
      (:conc-name "struct-shape-volume-mount-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (mount-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'volume-mount 'make-volume-mount))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-path))
      (common-lisp:list
       (common-lisp:cons "MountPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-mount))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-mount-list ()
   '(trivial-types:proper-list volume-mount))
 (common-lisp:defun |make-volume-mount-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-mount))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-info-cidr-block-set-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-info-cidr-block-set-details-"))
   (cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-cidr-block-set-details
                    'make-vpc-info-cidr-block-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-info-cidr-block-set-list ()
   '(trivial-types:proper-list vpc-info-cidr-block-set-details))
 (common-lisp:defun |make-vpc-info-cidr-block-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-info-cidr-block-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-info-ipv6cidr-block-set-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-info-ipv6cidr-block-set-details-"))
   (ipv6cidr-block common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-ipv6cidr-block-set-details
                    'make-vpc-info-ipv6cidr-block-set-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-info-ipv6cidr-block-set-list ()
   '(trivial-types:proper-list vpc-info-ipv6cidr-block-set-details))
 (common-lisp:defun |make-vpc-info-ipv6cidr-block-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-info-ipv6cidr-block-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-info-peering-options-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-info-peering-options-details-"))
   (allow-dns-resolution-from-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-classic-link-to-remote-vpc common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (allow-egress-from-local-vpc-to-remote-classic-link common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-peering-options-details
                    'make-vpc-info-peering-options-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-dns-resolution-from-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowDnsResolutionFromRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-classic-link-to-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalClassicLinkToRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-vpc-to-remote-classic-link))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalVpcToRemoteClassicLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerability (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerability-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vulnerable-packages common-lisp:nil :type
    (common-lisp:or software-package-list common-lisp:null))
   (cvss common-lisp:nil :type (common-lisp:or cvss-list common-lisp:null))
   (related-vulnerabilities common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vendor common-lisp:nil :type
    (common-lisp:or vulnerability-vendor common-lisp:null))
   (reference-urls common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (fix-available common-lisp:nil :type
    (common-lisp:or vulnerability-fix-available common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vulnerability 'make-vulnerability))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "VulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "Cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "RelatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "ReferenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "FixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerability))
   common-lisp:nil))
(common-lisp:deftype vulnerability-fix-available () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vulnerability-list ()
   '(trivial-types:proper-list vulnerability))
 (common-lisp:defun |make-vulnerability-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vulnerability-vendor (:copier common-lisp:nil)
      (:conc-name "struct-shape-vulnerability-vendor-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-severity common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-created-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (vendor-updated-at common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vulnerability-vendor 'make-vulnerability-vendor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "VendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "VendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "VendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waf-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-waf-action-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'waf-action 'make-waf-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (waf-excluded-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-waf-excluded-rule-"))
   (rule-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waf-excluded-rule 'make-waf-excluded-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype waf-excluded-rule-list ()
   '(trivial-types:proper-list waf-excluded-rule))
 (common-lisp:defun |make-waf-excluded-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list waf-excluded-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (waf-override-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-waf-override-action-"))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waf-override-action 'make-waf-override-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-override-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow (:copier common-lisp:nil) (:conc-name "struct-shape-workflow-"))
   (status common-lisp:nil :type
    (common-lisp:or workflow-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow 'make-workflow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow))
   common-lisp:nil))
(common-lisp:deftype workflow-state () 'common-lisp:string)
(common-lisp:deftype workflow-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-update-"))
   (status common-lisp:nil :type
    (common-lisp:or workflow-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-update 'make-workflow-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-administrator-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key administrator-id invitation-id)
   (common-lisp:declare (common-lisp:ignorable administrator-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-administrator-invitation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/administrator"
                                                        "AcceptAdministratorInvitation"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-administrator-invitation))
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key master-id invitation-id)
   (common-lisp:declare (common-lisp:ignorable master-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/master"
                                                        "AcceptInvitation"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun batch-disable-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arns)
   (common-lisp:declare (common-lisp:ignorable standards-subscription-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-disable-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/deregister"
                                                        "BatchDisableStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disable-standards))
(common-lisp:progn
 (common-lisp:defun batch-enable-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-requests)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-enable-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/register"
                                                        "BatchEnableStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-enable-standards))
(common-lisp:progn
 (common-lisp:defun batch-get-security-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-control-ids)
   (common-lisp:declare (common-lisp:ignorable security-control-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-security-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/securityControls/batchGet"
                                                        "BatchGetSecurityControls"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-security-controls))
(common-lisp:progn
 (common-lisp:defun batch-get-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-association-ids)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-association-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/associations/batchGet"
                                                        "BatchGetStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun batch-import-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key findings)
   (common-lisp:declare (common-lisp:ignorable findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-import-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/import"
                                                        "BatchImportFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-import-findings))
(common-lisp:progn
 (common-lisp:defun batch-update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-identifiers note severity
                     verification-state confidence criticality types
                     user-defined-fields workflow related-findings)
   (common-lisp:declare
    (common-lisp:ignorable finding-identifiers note severity verification-state
     confidence criticality types user-defined-fields workflow
     related-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findings/batchupdate"
                                                        "BatchUpdateFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-findings))
(common-lisp:progn
 (common-lisp:defun batch-update-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-association-updates)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-association-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/associations"
                                                        "BatchUpdateStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun create-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description id)
   (common-lisp:declare (common-lisp:ignorable name description id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/actionTargets"
                                                        "CreateActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-action-target))
(common-lisp:progn
 (common-lisp:defun create-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region-linking-mode regions)
   (common-lisp:declare (common-lisp:ignorable region-linking-mode regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findingAggregator/create"
                                                        "CreateFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun create-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name filters group-by-attribute)
   (common-lisp:declare
    (common-lisp:ignorable name filters group-by-attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/insights"
                                                        "CreateInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-insight))
(common-lisp:progn
 (common-lisp:defun create-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-details)
   (common-lisp:declare (common-lisp:ignorable account-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members"
                                                        "CreateMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-members))
(common-lisp:progn
 (common-lisp:defun decline-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/decline"
                                                        "DeclineInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decline-invitations))
(common-lisp:progn
 (common-lisp:defun delete-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arn)
   (common-lisp:declare (common-lisp:ignorable action-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actionTargets/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'action-target-arn)))
                                                        "DeleteActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-action-target))
(common-lisp:progn
 (common-lisp:defun delete-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:declare (common-lisp:ignorable finding-aggregator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingAggregator/delete/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'finding-aggregator-arn)))
                                                        "DeleteFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun delete-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn)
   (common-lisp:declare (common-lisp:ignorable insight-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "DeleteInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-insight))
(common-lisp:progn
 (common-lisp:defun delete-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/delete"
                                                        "DeleteInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-invitations))
(common-lisp:progn
 (common-lisp:defun delete-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/delete"
                                                        "DeleteMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-members))
(common-lisp:progn
 (common-lisp:defun describe-action-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arns next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable action-target-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-action-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/actionTargets/get"
                                                        "DescribeActionTargets"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-action-targets))
(common-lisp:progn
 (common-lisp:defun describe-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-arn)
   (common-lisp:declare (common-lisp:ignorable hub-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/accounts"
                                                        "DescribeHub"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hub))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/organization/configuration" :protocol
                                :rest-json :operation
                                "DescribeOrganizationConfiguration" :params
                                `(("Action"
                                   ,@"DescribeOrganizationConfiguration")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun describe-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results product-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results product-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-products-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/products"
                                                        "DescribeProducts"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-products))
(common-lisp:progn
 (common-lisp:defun describe-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/standards"
                                                        "DescribeStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-standards))
(common-lisp:progn
 (common-lisp:defun describe-standards-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-standards-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/standards/controls/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'standards-subscription-arn)))
                                                        "DescribeStandardsControls"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-standards-controls))
(common-lisp:progn
 (common-lisp:defun disable-import-findings-for-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-subscription-arn)
   (common-lisp:declare (common-lisp:ignorable product-subscription-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-import-findings-for-product-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/productSubscriptions/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'product-subscription-arn)))
                                                        "DisableImportFindingsForProduct"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-import-findings-for-product))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/admin/disable"
                                                        "DisableOrganizationAdminAccount"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disable-security-hub ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "DELETE" :path
                                "/accounts" :protocol :rest-json :operation
                                "DisableSecurityHub" :params
                                `(("Action" ,@"DisableSecurityHub")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-security-hub))
(common-lisp:progn
 (common-lisp:defun disassociate-from-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "POST" :path
                                "/administrator/disassociate" :protocol
                                :rest-json :operation
                                "DisassociateFromAdministratorAccount" :params
                                `(("Action"
                                   ,@"DisassociateFromAdministratorAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-administrator-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "POST" :path
                                "/master/disassociate" :protocol :rest-json
                                :operation "DisassociateFromMasterAccount"
                                :params
                                `(("Action" ,@"DisassociateFromMasterAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-master-account))
(common-lisp:progn
 (common-lisp:defun disassociate-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/disassociate"
                                                        "DisassociateMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-members))
(common-lisp:progn
 (common-lisp:defun enable-import-findings-for-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-arn)
   (common-lisp:declare (common-lisp:ignorable product-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-import-findings-for-product-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/productSubscriptions"
                                                        "EnableImportFindingsForProduct"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-import-findings-for-product))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/admin/enable"
                                                        "EnableOrganizationAdminAccount"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun enable-security-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags enable-default-standards
                     control-finding-generator)
   (common-lisp:declare
    (common-lisp:ignorable tags enable-default-standards
     control-finding-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-security-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/accounts"
                                                        "EnableSecurityHub"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-security-hub))
(common-lisp:progn
 (common-lisp:defun get-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/administrator" :protocol :rest-json
                                :operation "GetAdministratorAccount" :params
                                `(("Action" ,@"GetAdministratorAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-administrator-account))
(common-lisp:progn
 (common-lisp:defun get-enabled-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arns next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-enabled-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/get"
                                                        "GetEnabledStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-enabled-standards))
(common-lisp:progn
 (common-lisp:defun get-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:declare (common-lisp:ignorable finding-aggregator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-aggregator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingAggregator/get/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'finding-aggregator-arn)))
                                                        "GetFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun get-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters sort-criteria next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters sort-criteria next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings"
                                                        "GetFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings))
(common-lisp:progn
 (common-lisp:defun get-insight-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn)
   (common-lisp:declare (common-lisp:ignorable insight-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/results/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "GetInsightResults"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insight-results))
(common-lisp:progn
 (common-lisp:defun get-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arns next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable insight-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/insights/get"
                                                        "GetInsights"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insights))
(common-lisp:progn
 (common-lisp:defun get-invitations-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/invitations/count" :protocol :rest-json
                                :operation "GetInvitationsCount" :params
                                `(("Action" ,@"GetInvitationsCount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitations-count))
(common-lisp:progn
 (common-lisp:defun get-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/master" :protocol :rest-json :operation
                                "GetMasterAccount" :params
                                `(("Action" ,@"GetMasterAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-master-account))
(common-lisp:progn
 (common-lisp:defun get-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/get"
                                                        "GetMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-members))
(common-lisp:progn
 (common-lisp:defun invite-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invite-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/invite"
                                                        "InviteMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'invite-members))
(common-lisp:progn
 (common-lisp:defun list-enabled-products-for-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-enabled-products-for-import-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/productSubscriptions"
                                                        "ListEnabledProductsForImport"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-enabled-products-for-import))
(common-lisp:progn
 (common-lisp:defun list-finding-aggregators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-finding-aggregators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/findingAggregator/list"
                                                        "ListFindingAggregators"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-finding-aggregators))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/invitations"
                                                        "ListInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key only-associated max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable only-associated max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/members"
                                                        "ListMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/organization/admin"
                                                        "ListOrganizationAdminAccounts"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-security-control-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-control-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/securityControls/definitions"
                                                        "ListSecurityControlDefinitions"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-control-definitions))
(common-lisp:progn
 (common-lisp:defun list-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-control-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable security-control-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/associations"
                                                        "ListStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arn name description)
   (common-lisp:declare
    (common-lisp:ignorable action-target-arn name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actionTargets/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'action-target-arn)))
                                                        "UpdateActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-action-target))
(common-lisp:progn
 (common-lisp:defun update-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn
                     region-linking-mode regions)
   (common-lisp:declare
    (common-lisp:ignorable finding-aggregator-arn region-linking-mode regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findingAggregator/update"
                                                        "UpdateFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters note record-state)
   (common-lisp:declare (common-lisp:ignorable filters note record-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findings"
                                                        "UpdateFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings))
(common-lisp:progn
 (common-lisp:defun update-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn name filters
                     group-by-attribute)
   (common-lisp:declare
    (common-lisp:ignorable insight-arn name filters group-by-attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "UpdateInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-insight))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable auto-enable-standards)
   (common-lisp:declare
    (common-lisp:ignorable auto-enable auto-enable-standards))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/configuration"
                                                        "UpdateOrganizationConfiguration"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organization-configuration))
(common-lisp:progn
 (common-lisp:defun update-security-hub-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable-controls
                     control-finding-generator)
   (common-lisp:declare
    (common-lisp:ignorable auto-enable-controls control-finding-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-security-hub-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/accounts"
                                                        "UpdateSecurityHubConfiguration"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-security-hub-configuration))
(common-lisp:progn
 (common-lisp:defun update-standards-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-arn control-status
                     disabled-reason)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-arn control-status
     disabled-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-standards-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/standards/control/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'standards-control-arn)))
                                                        "UpdateStandardsControl"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-standards-control))
