;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/securityhub/api
  (:use)
  (:nicknames #:aws/securityhub)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/securityhub/api)
(common-lisp:progn
 (common-lisp:defclass securityhub-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "securityhub" :protocol
                        :rest-json))
 (common-lisp:export 'securityhub-request))
(common-lisp:progn
 (common-lisp:define-condition securityhub-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'securityhub-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalException" . internal-exception)
    ("InvalidAccessException" . invalid-access-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-administrator-invitation-request common-lisp:nil
                       ((invitation-id :initarg :invitation-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %accept-administrator-invitation-request-invitation-id
                         :initform
                         (common-lisp:error ":invitation-id is required"))
                        (administrator-id :initarg :administrator-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %accept-administrator-invitation-request-administrator-id
                         :initform
                         (common-lisp:error ":administrator-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-request
                    'make-accept-administrator-invitation-request))
 (common-lisp:defun make-accept-administrator-invitation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invitation-id administrator-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-administrator-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-administrator-invitation-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-administrator-invitation-response
                    'make-accept-administrator-invitation-response))
 (common-lisp:defun make-accept-administrator-invitation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-administrator-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-administrator-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-request common-lisp:nil
                       ((invitation-id :initarg :invitation-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %accept-invitation-request-invitation-id
                         :initform
                         (common-lisp:error ":invitation-id is required"))
                        (master-id :initarg :master-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %accept-invitation-request-master-id
                         :initform
                         (common-lisp:error ":master-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-invitation-request
                    'make-accept-invitation-request))
 (common-lisp:defun make-accept-invitation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invitation-id master-id)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-invitation-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-invitation-response
                    'make-accept-invitation-response))
 (common-lisp:defun make-accept-invitation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'accept-invitation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-invitation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-code)))
(common-lisp:progn
 (common-lisp:defclass account-details common-lisp:nil
                       ((email :initarg :email :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %account-details-email :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %account-details-account-id :initform
                         (common-lisp:error ":account-id is required"))))
 (common-lisp:export (common-lisp:list 'account-details 'make-account-details))
 (common-lisp:defun make-account-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key email account-id)
   (common-lisp:apply #'common-lisp:make-instance 'account-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-details-list ()
   '(trivial-types:proper-list account-details))
 (common-lisp:defun |make-account-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((port-probe-action :initarg :port-probe-action :type
                         (common-lisp:or port-probe-action common-lisp:null)
                         :accessor %action-port-probe-action :initform
                         common-lisp:nil)
                        (dns-request-action :initarg :dns-request-action :type
                         (common-lisp:or dns-request-action common-lisp:null)
                         :accessor %action-dns-request-action :initform
                         common-lisp:nil)
                        (aws-api-call-action :initarg :aws-api-call-action
                         :type
                         (common-lisp:or aws-api-call-action common-lisp:null)
                         :accessor %action-aws-api-call-action :initform
                         common-lisp:nil)
                        (network-connection-action :initarg
                         :network-connection-action :type
                         (common-lisp:or network-connection-action
                                         common-lisp:null)
                         :accessor %action-network-connection-action :initform
                         common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-action-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-probe-action dns-request-action
                     aws-api-call-action network-connection-action action-type)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-connection-action))
      (common-lisp:list
       (common-lisp:cons "NetworkConnectionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-api-call-action))
      (common-lisp:list
       (common-lisp:cons "AwsApiCallAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-request-action))
      (common-lisp:list
       (common-lisp:cons "DnsRequestAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-action))
      (common-lisp:list
       (common-lisp:cons "PortProbeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-local-ip-details common-lisp:nil
                       ((ip-address-v4 :initarg :ip-address-v4 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-local-ip-details-ip-address-v4
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-local-ip-details 'make-action-local-ip-details))
 (common-lisp:defun make-action-local-ip-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address-v4)
   (common-lisp:apply #'common-lisp:make-instance 'action-local-ip-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-local-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-local-port-details common-lisp:nil
                       ((port-name :initarg :port-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-local-port-details-port-name
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %action-local-port-details-port :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-local-port-details
                    'make-action-local-port-details))
 (common-lisp:defun make-action-local-port-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-name port)
   (common-lisp:apply #'common-lisp:make-instance 'action-local-port-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-local-port-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-remote-ip-details common-lisp:nil
                       ((geo-location :initarg :geo-location :type
                         (common-lisp:or geo-location common-lisp:null)
                         :accessor %action-remote-ip-details-geo-location
                         :initform common-lisp:nil)
                        (city :initarg :city :type
                         (common-lisp:or city common-lisp:null) :accessor
                         %action-remote-ip-details-city :initform
                         common-lisp:nil)
                        (country :initarg :country :type
                         (common-lisp:or country common-lisp:null) :accessor
                         %action-remote-ip-details-country :initform
                         common-lisp:nil)
                        (organization :initarg :organization :type
                         (common-lisp:or ip-organization-details
                                         common-lisp:null)
                         :accessor %action-remote-ip-details-organization
                         :initform common-lisp:nil)
                        (ip-address-v4 :initarg :ip-address-v4 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-remote-ip-details-ip-address-v4
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-remote-ip-details 'make-action-remote-ip-details))
 (common-lisp:defun make-action-remote-ip-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-location city country organization
                     ip-address-v4)
   (common-lisp:apply #'common-lisp:make-instance 'action-remote-ip-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-v4))
      (common-lisp:list
       (common-lisp:cons "IpAddressV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-location))
      (common-lisp:list
       (common-lisp:cons "GeoLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-ip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-remote-port-details common-lisp:nil
                       ((port-name :initarg :port-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-remote-port-details-port-name
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %action-remote-port-details-port :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-remote-port-details
                    'make-action-remote-port-details))
 (common-lisp:defun make-action-remote-port-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-name port)
   (common-lisp:apply #'common-lisp:make-instance 'action-remote-port-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-name))
      (common-lisp:list
       (common-lisp:cons "PortName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          action-remote-port-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass action-target common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-target-description :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-target-name :initform
                         (common-lisp:error ":name is required"))
                        (action-target-arn :initarg :action-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %action-target-action-target-arn :initform
                         (common-lisp:error
                          ":action-target-arn is required"))))
 (common-lisp:export (common-lisp:list 'action-target 'make-action-target))
 (common-lisp:defun make-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name action-target-arn)
   (common-lisp:apply #'common-lisp:make-instance 'action-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-target-list ()
   '(trivial-types:proper-list action-target))
 (common-lisp:defun |make-action-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass adjustment common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %adjustment-reason :initform
                         common-lisp:nil)
                        (metric :initarg :metric :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %adjustment-metric :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'adjustment 'make-adjustment))
 (common-lisp:defun make-adjustment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason metric)
   (common-lisp:apply #'common-lisp:make-instance 'adjustment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input adjustment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input adjustment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input adjustment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype adjustment-list ()
   '(trivial-types:proper-list adjustment))
 (common-lisp:defun |make-adjustment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list adjustment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass admin-account common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or admin-status common-lisp:null)
                         :accessor %admin-account-status :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %admin-account-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'admin-account 'make-admin-account))
 (common-lisp:defun make-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status account-id)
   (common-lisp:apply #'common-lisp:make-instance 'admin-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input admin-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input admin-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype admin-accounts ()
   '(trivial-types:proper-list admin-account))
 (common-lisp:defun |make-admin-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list admin-account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype admin-status () 'common-lisp:string)
(common-lisp:deftype admins-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associated-standard common-lisp:nil
                       ((standards-id :initarg :standards-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %associated-standard-standards-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associated-standard 'make-associated-standard))
 (common-lisp:defun make-associated-standard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-id)
   (common-lisp:apply #'common-lisp:make-instance 'associated-standard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input associated-standard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input associated-standard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-id))
      (common-lisp:list
       (common-lisp:cons "StandardsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input associated-standard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-standards-list ()
   '(trivial-types:proper-list associated-standard))
 (common-lisp:defun |make-associated-standards-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-standard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass association-set-details common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %association-set-details-subnet-id :initform
                         common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %association-set-details-route-table-id
                         :initform common-lisp:nil)
                        (route-table-association-id :initarg
                         :route-table-association-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %association-set-details-route-table-association-id
                         :initform common-lisp:nil)
                        (main :initarg :main :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %association-set-details-main :initform
                         common-lisp:nil)
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %association-set-details-gateway-id
                         :initform common-lisp:nil)
                        (association-state :initarg :association-state :type
                         (common-lisp:or association-state-details
                                         common-lisp:null)
                         :accessor %association-set-details-association-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-set-details 'make-association-set-details))
 (common-lisp:defun make-association-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id route-table-id
                     route-table-association-id main gateway-id
                     association-state)
   (common-lisp:apply #'common-lisp:make-instance 'association-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-state))
      (common-lisp:list
       (common-lisp:cons "AssociationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'main))
      (common-lisp:list
       (common-lisp:cons "Main"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-table-association-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-set-list ()
   '(trivial-types:proper-list association-set-details))
 (common-lisp:defun |make-association-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass association-state-details common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %association-state-details-status-message
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %association-state-details-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-state-details
                    'make-association-state-details))
 (common-lisp:defun make-association-state-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message state)
   (common-lisp:apply #'common-lisp:make-instance 'association-state-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-state-details))
   common-lisp:nil))
(common-lisp:deftype association-status () 'common-lisp:string)
(common-lisp:deftype auto-enable-standards () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %availability-zone-subnet-id :initform
                         common-lisp:nil)
                        (zone-name :initarg :zone-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %availability-zone-zone-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defun make-availability-zone
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id zone-name)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "ZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-api-call-action common-lisp:nil
                       ((last-seen :initarg :last-seen :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-last-seen :initform
                         common-lisp:nil)
                        (first-seen :initarg :first-seen :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-first-seen :initform
                         common-lisp:nil)
                        (affected-resources :initarg :affected-resources :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-api-call-action-affected-resources :initform
                         common-lisp:nil)
                        (domain-details :initarg :domain-details :type
                         (common-lisp:or aws-api-call-action-domain-details
                                         common-lisp:null)
                         :accessor %aws-api-call-action-domain-details
                         :initform common-lisp:nil)
                        (remote-ip-details :initarg :remote-ip-details :type
                         (common-lisp:or action-remote-ip-details
                                         common-lisp:null)
                         :accessor %aws-api-call-action-remote-ip-details
                         :initform common-lisp:nil)
                        (caller-type :initarg :caller-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-caller-type :initform
                         common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-service-name :initform
                         common-lisp:nil)
                        (api :initarg :api :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-api :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-call-action 'make-aws-api-call-action))
 (common-lisp:defun make-aws-api-call-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-seen first-seen affected-resources
                     domain-details remote-ip-details caller-type service-name
                     api)
   (common-lisp:apply #'common-lisp:make-instance 'aws-api-call-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api))
      (common-lisp:list
       (common-lisp:cons "Api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-type))
      (common-lisp:list
       (common-lisp:cons "CallerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-details))
      (common-lisp:list
       (common-lisp:cons "DomainDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-resources))
      (common-lisp:list
       (common-lisp:cons "AffectedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-seen))
      (common-lisp:list
       (common-lisp:cons "FirstSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen))
      (common-lisp:list
       (common-lisp:cons "LastSeen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-api-call-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-call-action-domain-details common-lisp:nil
                       ((domain :initarg :domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-call-action-domain-details-domain
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-call-action-domain-details
                    'make-aws-api-call-action-domain-details))
 (common-lisp:defun make-aws-api-call-action-domain-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-call-action-domain-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-call-action-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-access-log-settings common-lisp:nil
                       ((destination-arn :initarg :destination-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-access-log-settings-destination-arn
                         :initform common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-access-log-settings-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-access-log-settings
                    'make-aws-api-gateway-access-log-settings))
 (common-lisp:defun make-aws-api-gateway-access-log-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-arn format)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-access-log-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-access-log-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-canary-settings common-lisp:nil
                       ((use-stage-cache :initarg :use-stage-cache :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-canary-settings-use-stage-cache
                         :initform common-lisp:nil)
                        (stage-variable-overrides :initarg
                         :stage-variable-overrides :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-api-gateway-canary-settings-stage-variable-overrides
                         :initform common-lisp:nil)
                        (deployment-id :initarg :deployment-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-canary-settings-deployment-id
                         :initform common-lisp:nil)
                        (percent-traffic :initarg :percent-traffic :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %aws-api-gateway-canary-settings-percent-traffic
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-canary-settings
                    'make-aws-api-gateway-canary-settings))
 (common-lisp:defun make-aws-api-gateway-canary-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-stage-cache stage-variable-overrides
                     deployment-id percent-traffic)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-canary-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-traffic))
      (common-lisp:list
       (common-lisp:cons "PercentTraffic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stage-variable-overrides))
      (common-lisp:list
       (common-lisp:cons "StageVariableOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-stage-cache))
      (common-lisp:list
       (common-lisp:cons "UseStageCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-canary-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-endpoint-configuration common-lisp:nil
                       ((types :initarg :types :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-endpoint-configuration-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-endpoint-configuration
                    'make-aws-api-gateway-endpoint-configuration))
 (common-lisp:defun make-aws-api-gateway-endpoint-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key types)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-endpoint-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-method-settings common-lisp:nil
                       ((resource-path :initarg :resource-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-resource-path
                         :initform common-lisp:nil)
                        (http-method :initarg :http-method :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-method-settings-http-method
                         :initform common-lisp:nil)
                        (unauthorized-cache-control-header-strategy :initarg
                         :unauthorized-cache-control-header-strategy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-unauthorized-cache-control-header-strategy
                         :initform common-lisp:nil)
                        (require-authorization-for-cache-control :initarg
                         :require-authorization-for-cache-control :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-method-settings-require-authorization-for-cache-control
                         :initform common-lisp:nil)
                        (cache-data-encrypted :initarg :cache-data-encrypted
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-cache-data-encrypted
                         :initform common-lisp:nil)
                        (cache-ttl-in-seconds :initarg :cache-ttl-in-seconds
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-cache-ttl-in-seconds
                         :initform common-lisp:nil)
                        (caching-enabled :initarg :caching-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-method-settings-caching-enabled
                         :initform common-lisp:nil)
                        (throttling-rate-limit :initarg :throttling-rate-limit
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-throttling-rate-limit
                         :initform common-lisp:nil)
                        (throttling-burst-limit :initarg
                         :throttling-burst-limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-api-gateway-method-settings-throttling-burst-limit
                         :initform common-lisp:nil)
                        (data-trace-enabled :initarg :data-trace-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-method-settings-data-trace-enabled
                         :initform common-lisp:nil)
                        (logging-level :initarg :logging-level :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-method-settings-logging-level
                         :initform common-lisp:nil)
                        (metrics-enabled :initarg :metrics-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-method-settings-metrics-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-method-settings
                    'make-aws-api-gateway-method-settings))
 (common-lisp:defun make-aws-api-gateway-method-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-path http-method
                     unauthorized-cache-control-header-strategy
                     require-authorization-for-cache-control
                     cache-data-encrypted cache-ttl-in-seconds caching-enabled
                     throttling-rate-limit throttling-burst-limit
                     data-trace-enabled logging-level metrics-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-method-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "MetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-level))
      (common-lisp:list
       (common-lisp:cons "LoggingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-trace-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTraceEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-burst-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingBurstLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-rate-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingRateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caching-enabled))
      (common-lisp:list
       (common-lisp:cons "CachingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-ttl-in-seconds))
      (common-lisp:list
       (common-lisp:cons "CacheTtlInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-data-encrypted))
      (common-lisp:list
       (common-lisp:cons "CacheDataEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-authorization-for-cache-control))
      (common-lisp:list
       (common-lisp:cons "RequireAuthorizationForCacheControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthorized-cache-control-header-strategy))
      (common-lisp:list
       (common-lisp:cons "UnauthorizedCacheControlHeaderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "HttpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-path))
      (common-lisp:list
       (common-lisp:cons "ResourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-method-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-api-gateway-method-settings-list ()
   '(trivial-types:proper-list aws-api-gateway-method-settings))
 (common-lisp:defun |make-aws-api-gateway-method-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-api-gateway-method-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-rest-api-details common-lisp:nil
                       ((endpoint-configuration :initarg
                         :endpoint-configuration :type
                         (common-lisp:or aws-api-gateway-endpoint-configuration
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-rest-api-details-endpoint-configuration
                         :initform common-lisp:nil)
                        (api-key-source :initarg :api-key-source :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-rest-api-details-api-key-source
                         :initform common-lisp:nil)
                        (minimum-compression-size :initarg
                         :minimum-compression-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-api-gateway-rest-api-details-minimum-compression-size
                         :initform common-lisp:nil)
                        (binary-media-types :initarg :binary-media-types :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-rest-api-details-binary-media-types
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-rest-api-details-version
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-rest-api-details-created-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-rest-api-details-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-rest-api-details-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-rest-api-details-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-rest-api-details
                    'make-aws-api-gateway-rest-api-details))
 (common-lisp:defun make-aws-api-gateway-rest-api-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint-configuration api-key-source
                     minimum-compression-size binary-media-types version
                     created-date description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-rest-api-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binary-media-types))
      (common-lisp:list
       (common-lisp:cons "BinaryMediaTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-compression-size))
      (common-lisp:list
       (common-lisp:cons "MinimumCompressionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key-source))
      (common-lisp:list
       (common-lisp:cons "ApiKeySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configuration))
      (common-lisp:list
       (common-lisp:cons "EndpointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-rest-api-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-stage-details common-lisp:nil
                       ((web-acl-arn :initarg :web-acl-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-stage-details-web-acl-arn
                         :initform common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-last-updated-date
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-stage-details-created-date
                         :initform common-lisp:nil)
                        (tracing-enabled :initarg :tracing-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-stage-details-tracing-enabled
                         :initform common-lisp:nil)
                        (canary-settings :initarg :canary-settings :type
                         (common-lisp:or aws-api-gateway-canary-settings
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-canary-settings
                         :initform common-lisp:nil)
                        (access-log-settings :initarg :access-log-settings
                         :type
                         (common-lisp:or aws-api-gateway-access-log-settings
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-access-log-settings
                         :initform common-lisp:nil)
                        (documentation-version :initarg :documentation-version
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-documentation-version
                         :initform common-lisp:nil)
                        (variables :initarg :variables :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-api-gateway-stage-details-variables :initform
                         common-lisp:nil)
                        (method-settings :initarg :method-settings :type
                         (common-lisp:or aws-api-gateway-method-settings-list
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-method-settings
                         :initform common-lisp:nil)
                        (cache-cluster-status :initarg :cache-cluster-status
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-cache-cluster-status
                         :initform common-lisp:nil)
                        (cache-cluster-size :initarg :cache-cluster-size :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-cache-cluster-size
                         :initform common-lisp:nil)
                        (cache-cluster-enabled :initarg :cache-cluster-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-cache-cluster-enabled
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-stage-details-description
                         :initform common-lisp:nil)
                        (stage-name :initarg :stage-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-stage-details-stage-name
                         :initform common-lisp:nil)
                        (client-certificate-id :initarg :client-certificate-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-stage-details-client-certificate-id
                         :initform common-lisp:nil)
                        (deployment-id :initarg :deployment-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-stage-details-deployment-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-stage-details
                    'make-aws-api-gateway-stage-details))
 (common-lisp:defun make-aws-api-gateway-stage-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-acl-arn last-updated-date
                     created-date tracing-enabled canary-settings
                     access-log-settings documentation-version variables
                     method-settings cache-cluster-status cache-cluster-size
                     cache-cluster-enabled description stage-name
                     client-certificate-id deployment-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-stage-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-enabled))
      (common-lisp:list
       (common-lisp:cons "CacheClusterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-cluster-size))
      (common-lisp:list
       (common-lisp:cons "CacheClusterSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-cluster-status))
      (common-lisp:list
       (common-lisp:cons "CacheClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method-settings))
      (common-lisp:list
       (common-lisp:cons "MethodSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'documentation-version))
      (common-lisp:list
       (common-lisp:cons "DocumentationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-settings))
      (common-lisp:list
       (common-lisp:cons "AccessLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-settings))
      (common-lisp:list
       (common-lisp:cons "CanarySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-enabled))
      (common-lisp:list
       (common-lisp:cons "TracingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-arn))
      (common-lisp:list
       (common-lisp:cons "WebAclArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-stage-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-v2api-details common-lisp:nil
                       ((cors-configuration :initarg :cors-configuration :type
                         (common-lisp:or aws-cors-configuration
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2api-details-cors-configuration
                         :initform common-lisp:nil)
                        (route-selection-expression :initarg
                         :route-selection-expression :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2api-details-route-selection-expression
                         :initform common-lisp:nil)
                        (protocol-type :initarg :protocol-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-protocol-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-name
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-version
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-description
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-created-date
                         :initform common-lisp:nil)
                        (api-key-selection-expression :initarg
                         :api-key-selection-expression :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2api-details-api-key-selection-expression
                         :initform common-lisp:nil)
                        (api-id :initarg :api-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-api-id
                         :initform common-lisp:nil)
                        (api-endpoint :initarg :api-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2api-details-api-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2api-details
                    'make-aws-api-gateway-v2api-details))
 (common-lisp:defun make-aws-api-gateway-v2api-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cors-configuration
                     route-selection-expression protocol-type name version
                     description created-date api-key-selection-expression
                     api-id api-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-v2api-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-endpoint))
      (common-lisp:list
       (common-lisp:cons "ApiEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-id))
      (common-lisp:list
       (common-lisp:cons "ApiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-key-selection-expression))
      (common-lisp:list
       (common-lisp:cons "ApiKeySelectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-type))
      (common-lisp:list
       (common-lisp:cons "ProtocolType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-selection-expression))
      (common-lisp:list
       (common-lisp:cons "RouteSelectionExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cors-configuration))
      (common-lisp:list
       (common-lisp:cons "CorsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2api-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-v2route-settings common-lisp:nil
                       ((throttling-rate-limit :initarg :throttling-rate-limit
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2route-settings-throttling-rate-limit
                         :initform common-lisp:nil)
                        (throttling-burst-limit :initarg
                         :throttling-burst-limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-api-gateway-v2route-settings-throttling-burst-limit
                         :initform common-lisp:nil)
                        (data-trace-enabled :initarg :data-trace-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-v2route-settings-data-trace-enabled
                         :initform common-lisp:nil)
                        (logging-level :initarg :logging-level :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2route-settings-logging-level
                         :initform common-lisp:nil)
                        (detailed-metrics-enabled :initarg
                         :detailed-metrics-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-v2route-settings-detailed-metrics-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2route-settings
                    'make-aws-api-gateway-v2route-settings))
 (common-lisp:defun make-aws-api-gateway-v2route-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key throttling-rate-limit
                     throttling-burst-limit data-trace-enabled logging-level
                     detailed-metrics-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-v2route-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "DetailedMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-level))
      (common-lisp:list
       (common-lisp:cons "LoggingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-trace-enabled))
      (common-lisp:list
       (common-lisp:cons "DataTraceEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-burst-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingBurstLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-rate-limit))
      (common-lisp:list
       (common-lisp:cons "ThrottlingRateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2route-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-api-gateway-v2stage-details common-lisp:nil
                       ((api-gateway-managed :initarg :api-gateway-managed
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-api-gateway-managed
                         :initform common-lisp:nil)
                        (last-deployment-status-message :initarg
                         :last-deployment-status-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-last-deployment-status-message
                         :initform common-lisp:nil)
                        (auto-deploy :initarg :auto-deploy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-api-gateway-v2stage-details-auto-deploy :initform
                         common-lisp:nil)
                        (access-log-settings :initarg :access-log-settings
                         :type
                         (common-lisp:or aws-api-gateway-access-log-settings
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-access-log-settings
                         :initform common-lisp:nil)
                        (stage-variables :initarg :stage-variables :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-api-gateway-v2stage-details-stage-variables
                         :initform common-lisp:nil)
                        (stage-name :initarg :stage-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2stage-details-stage-name
                         :initform common-lisp:nil)
                        (route-settings :initarg :route-settings :type
                         (common-lisp:or aws-api-gateway-v2route-settings
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-route-settings
                         :initform common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-last-updated-date
                         :initform common-lisp:nil)
                        (deployment-id :initarg :deployment-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-deployment-id
                         :initform common-lisp:nil)
                        (default-route-settings :initarg
                         :default-route-settings :type
                         (common-lisp:or aws-api-gateway-v2route-settings
                                         common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-default-route-settings
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-api-gateway-v2stage-details-description
                         :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-created-date
                         :initform common-lisp:nil)
                        (client-certificate-id :initarg :client-certificate-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-api-gateway-v2stage-details-client-certificate-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-api-gateway-v2stage-details
                    'make-aws-api-gateway-v2stage-details))
 (common-lisp:defun make-aws-api-gateway-v2stage-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key api-gateway-managed
                     last-deployment-status-message auto-deploy
                     access-log-settings stage-variables stage-name
                     route-settings last-updated-date deployment-id
                     default-route-settings description created-date
                     client-certificate-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-api-gateway-v2stage-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ClientCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-settings))
      (common-lisp:list
       (common-lisp:cons "RouteSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-variables))
      (common-lisp:list
       (common-lisp:cons "StageVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-settings))
      (common-lisp:list
       (common-lisp:cons "AccessLogSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deploy))
      (common-lisp:list
       (common-lisp:cons "AutoDeploy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "LastDeploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-gateway-managed))
      (common-lisp:list
       (common-lisp:cons "ApiGatewayManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-api-gateway-v2stage-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-auto-scaling-group-availability-zones-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
 (common-lisp:defun |make-aws-auto-scaling-auto-scaling-group-availability-zones-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-availability-zones-list-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-availability-zones-list-details-value
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-availability-zones-list-details
   'make-aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-availability-zones-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-availability-zones-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-availability-zones-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-auto-scaling-auto-scaling-group-details
                       common-lisp:nil
                       ((capacity-rebalance :initarg :capacity-rebalance :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-auto-scaling-auto-scaling-group-details-capacity-rebalance
                         :initform common-lisp:nil)
                        (launch-template :initarg :launch-template :type
                         (common-lisp:or
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-launch-template
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or
                          aws-auto-scaling-auto-scaling-group-availability-zones-list
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-availability-zones
                         :initform common-lisp:nil)
                        (mixed-instances-policy :initarg
                         :mixed-instances-policy :type
                         (common-lisp:or
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-mixed-instances-policy
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-created-time
                         :initform common-lisp:nil)
                        (health-check-grace-period :initarg
                         :health-check-grace-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-auto-scaling-auto-scaling-group-details-health-check-grace-period
                         :initform common-lisp:nil)
                        (health-check-type :initarg :health-check-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-health-check-type
                         :initform common-lisp:nil)
                        (load-balancer-names :initarg :load-balancer-names
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-load-balancer-names
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-auto-scaling-group-details-launch-configuration-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-auto-scaling-group-details
                    'make-aws-auto-scaling-auto-scaling-group-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-rebalance launch-template
                     availability-zones mixed-instances-policy created-time
                     health-check-grace-period health-check-type
                     load-balancer-names launch-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-names))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-type))
      (common-lisp:list
       (common-lisp:cons "HealthCheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mixed-instances-policy))
      (common-lisp:list
       (common-lisp:cons "MixedInstancesPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-rebalance))
      (common-lisp:list
       (common-lisp:cons "CapacityRebalance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
  common-lisp:nil
  ((version :initarg :version :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification-version
    :initform common-lisp:nil)
   (launch-template-name :initarg :launch-template-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification-launch-template-name
    :initform common-lisp:nil)
   (launch-template-id :initarg :launch-template-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification-launch-template-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
   'make-aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version launch-template-name
                     launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-launch-template-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
  common-lisp:nil
  ((launch-template :initarg :launch-template :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
     common-lisp:null)
    :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details-launch-template
    :initform common-lisp:nil)
   (instances-distribution :initarg :instances-distribution :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
     common-lisp:null)
    :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details-instances-distribution
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-template instances-distribution)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-distribution))
      (common-lisp:list
       (common-lisp:cons "InstancesDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
  common-lisp:nil
  ((spot-max-price :initarg :spot-max-price :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-spot-max-price
    :initform common-lisp:nil)
   (spot-instance-pools :initarg :spot-instance-pools :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-spot-instance-pools
    :initform common-lisp:nil)
   (spot-allocation-strategy :initarg :spot-allocation-strategy :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-spot-allocation-strategy
    :initform common-lisp:nil)
   (on-demand-percentage-above-base-capacity :initarg
    :on-demand-percentage-above-base-capacity :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-on-demand-percentage-above-base-capacity
    :initform common-lisp:nil)
   (on-demand-base-capacity :initarg :on-demand-base-capacity :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-on-demand-base-capacity
    :initform common-lisp:nil)
   (on-demand-allocation-strategy :initarg :on-demand-allocation-strategy :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details-on-demand-allocation-strategy
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spot-max-price spot-instance-pools
                     spot-allocation-strategy
                     on-demand-percentage-above-base-capacity
                     on-demand-base-capacity on-demand-allocation-strategy)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "OnDemandAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-percentage-above-base-capacity))
      (common-lisp:list
       (common-lisp:cons "OnDemandPercentageAboveBaseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "SpotAllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-pools))
      (common-lisp:list
       (common-lisp:cons "SpotInstancePools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-max-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-instances-distribution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
  common-lisp:nil
  ((overrides :initarg :overrides :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list
     common-lisp:null)
    :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details-overrides
    :initform common-lisp:nil)
   (launch-template-specification :initarg :launch-template-specification :type
    (common-lisp:or
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
     common-lisp:null)
    :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details-launch-template-specification
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key overrides launch-template-specification)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-specification))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overrides))
      (common-lisp:list
       (common-lisp:cons "Overrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
  common-lisp:nil
  ((version :initarg :version :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification-version
    :initform common-lisp:nil)
   (launch-template-name :initarg :launch-template-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification-launch-template-name
    :initform common-lisp:nil)
   (launch-template-id :initarg :launch-template-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification-launch-template-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version launch-template-name
                     launch-template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-template-id))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-launch-template-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
 (common-lisp:defun |make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
  common-lisp:nil
  ((weighted-capacity :initarg :weighted-capacity :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details-weighted-capacity
    :initform common-lisp:nil)
   (instance-type :initarg :instance-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details-instance-type
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
   'make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
 (common-lisp:defun make-aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-capacity instance-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-capacity))
      (common-lisp:list
       (common-lisp:cons "WeightedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-auto-scaling-group-mixed-instances-policy-launch-template-overrides-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-launch-configuration-block-device-mappings-details
  common-lisp:nil
  ((virtual-name :initarg :virtual-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-details-virtual-name
    :initform common-lisp:nil)
   (no-device :initarg :no-device :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-details-no-device
    :initform common-lisp:nil)
   (ebs :initarg :ebs :type
    (common-lisp:or
     aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
     common-lisp:null)
    :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-details-ebs
    :initform common-lisp:nil)
   (device-name :initarg :device-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-details-device-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-block-device-mappings-details
   'make-aws-auto-scaling-launch-configuration-block-device-mappings-details))
 (common-lisp:defun make-aws-auto-scaling-launch-configuration-block-device-mappings-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-name no-device ebs device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-launch-configuration-block-device-mappings-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
  common-lisp:nil
  ((volume-type :initarg :volume-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-volume-type
    :initform common-lisp:nil)
   (volume-size :initarg :volume-size :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-volume-size
    :initform common-lisp:nil)
   (snapshot-id :initarg :snapshot-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-snapshot-id
    :initform common-lisp:nil)
   (iops :initarg :iops :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-iops
    :initform common-lisp:nil)
   (encrypted :initarg :encrypted :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-encrypted
    :initform common-lisp:nil)
   (delete-on-termination :initarg :delete-on-termination :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details-delete-on-termination
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
   'make-aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
 (common-lisp:defun make-aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-type volume-size snapshot-id iops
                     encrypted delete-on-termination)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-block-device-mappings-ebs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-auto-scaling-launch-configuration-block-device-mappings-list
                      ()
   '(trivial-types:proper-list
     aws-auto-scaling-launch-configuration-block-device-mappings-details))
 (common-lisp:defun |make-aws-auto-scaling-launch-configuration-block-device-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-auto-scaling-launch-configuration-block-device-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-auto-scaling-launch-configuration-details
                       common-lisp:nil
                       ((metadata-options :initarg :metadata-options :type
                         (common-lisp:or
                          aws-auto-scaling-launch-configuration-metadata-options
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-metadata-options
                         :initform common-lisp:nil)
                        (user-data :initarg :user-data :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-user-data
                         :initform common-lisp:nil)
                        (spot-price :initarg :spot-price :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-spot-price
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-security-groups
                         :initform common-lisp:nil)
                        (ramdisk-id :initarg :ramdisk-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-ramdisk-id
                         :initform common-lisp:nil)
                        (placement-tenancy :initarg :placement-tenancy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-placement-tenancy
                         :initform common-lisp:nil)
                        (launch-configuration-name :initarg
                         :launch-configuration-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-launch-configuration-name
                         :initform common-lisp:nil)
                        (key-name :initarg :key-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-key-name
                         :initform common-lisp:nil)
                        (kernel-id :initarg :kernel-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-kernel-id
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-instance-type
                         :initform common-lisp:nil)
                        (instance-monitoring :initarg :instance-monitoring
                         :type
                         (common-lisp:or
                          aws-auto-scaling-launch-configuration-instance-monitoring-details
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-instance-monitoring
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-image-id
                         :initform common-lisp:nil)
                        (iam-instance-profile :initarg :iam-instance-profile
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-iam-instance-profile
                         :initform common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-auto-scaling-launch-configuration-details-ebs-optimized
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-created-time
                         :initform common-lisp:nil)
                        (classic-link-vpc-security-groups :initarg
                         :classic-link-vpc-security-groups :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-classic-link-vpc-security-groups
                         :initform common-lisp:nil)
                        (classic-link-vpc-id :initarg :classic-link-vpc-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-classic-link-vpc-id
                         :initform common-lisp:nil)
                        (block-device-mappings :initarg :block-device-mappings
                         :type
                         (common-lisp:or
                          aws-auto-scaling-launch-configuration-block-device-mappings-list
                          common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-details-block-device-mappings
                         :initform common-lisp:nil)
                        (associate-public-ip-address :initarg
                         :associate-public-ip-address :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-auto-scaling-launch-configuration-details-associate-public-ip-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-launch-configuration-details
                    'make-aws-auto-scaling-launch-configuration-details))
 (common-lisp:defun make-aws-auto-scaling-launch-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-options user-data spot-price
                     security-groups ramdisk-id placement-tenancy
                     launch-configuration-name key-name kernel-id instance-type
                     instance-monitoring image-id iam-instance-profile
                     ebs-optimized created-time
                     classic-link-vpc-security-groups classic-link-vpc-id
                     block-device-mappings associate-public-ip-address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-launch-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classic-link-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'classic-link-vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClassicLinkVpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-monitoring))
      (common-lisp:list
       (common-lisp:cons "InstanceMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-name))
      (common-lisp:list
       (common-lisp:cons "LaunchConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-tenancy))
      (common-lisp:list
       (common-lisp:cons "PlacementTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ramdisk-id))
      (common-lisp:list
       (common-lisp:cons "RamdiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-price))
      (common-lisp:list
       (common-lisp:cons "SpotPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-auto-scaling-launch-configuration-instance-monitoring-details
  common-lisp:nil
  ((enabled :initarg :enabled :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-auto-scaling-launch-configuration-instance-monitoring-details-enabled
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-auto-scaling-launch-configuration-instance-monitoring-details
   'make-aws-auto-scaling-launch-configuration-instance-monitoring-details))
 (common-lisp:defun make-aws-auto-scaling-launch-configuration-instance-monitoring-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-launch-configuration-instance-monitoring-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-instance-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-auto-scaling-launch-configuration-metadata-options
                       common-lisp:nil
                       ((http-tokens :initarg :http-tokens :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-metadata-options-http-tokens
                         :initform common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-auto-scaling-launch-configuration-metadata-options-http-put-response-hop-limit
                         :initform common-lisp:nil)
                        (http-endpoint :initarg :http-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-auto-scaling-launch-configuration-metadata-options-http-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-auto-scaling-launch-configuration-metadata-options
                    'make-aws-auto-scaling-launch-configuration-metadata-options))
 (common-lisp:defun make-aws-auto-scaling-launch-configuration-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key http-tokens http-put-response-hop-limit
                     http-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-auto-scaling-launch-configuration-metadata-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-auto-scaling-launch-configuration-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-advanced-backup-settings-details
                       common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-advanced-backup-settings-details-resource-type
                         :initform common-lisp:nil)
                        (backup-options :initarg :backup-options :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-backup-backup-plan-advanced-backup-settings-details-backup-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-advanced-backup-settings-details
                    'make-aws-backup-backup-plan-advanced-backup-settings-details))
 (common-lisp:defun make-aws-backup-backup-plan-advanced-backup-settings-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type backup-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-advanced-backup-settings-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-options))
      (common-lisp:list
       (common-lisp:cons "BackupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-advanced-backup-settings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-advanced-backup-settings-list ()
   '(trivial-types:proper-list
     aws-backup-backup-plan-advanced-backup-settings-details))
 (common-lisp:defun |make-aws-backup-backup-plan-advanced-backup-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-advanced-backup-settings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-backup-plan-details
                       common-lisp:nil
                       ((backup-plan-rule :initarg :backup-plan-rule :type
                         (common-lisp:or aws-backup-backup-plan-rule-list
                                         common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-backup-plan-details-backup-plan-rule
                         :initform common-lisp:nil)
                        (advanced-backup-settings :initarg
                         :advanced-backup-settings :type
                         (common-lisp:or
                          aws-backup-backup-plan-advanced-backup-settings-list
                          common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-backup-plan-details-advanced-backup-settings
                         :initform common-lisp:nil)
                        (backup-plan-name :initarg :backup-plan-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-backup-plan-details-backup-plan-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-backup-plan-details
                    'make-aws-backup-backup-plan-backup-plan-details))
 (common-lisp:defun make-aws-backup-backup-plan-backup-plan-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-plan-rule advanced-backup-settings
                     backup-plan-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-backup-plan-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-name))
      (common-lisp:list
       (common-lisp:cons "BackupPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-backup-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedBackupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-rule))
      (common-lisp:list
       (common-lisp:cons "BackupPlanRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-backup-plan-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-details common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-backup-backup-plan-details-version-id
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-details-backup-plan-id
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-details-backup-plan-arn
                         :initform common-lisp:nil)
                        (backup-plan :initarg :backup-plan :type
                         (common-lisp:or
                          aws-backup-backup-plan-backup-plan-details
                          common-lisp:null)
                         :accessor %aws-backup-backup-plan-details-backup-plan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-details
                    'make-aws-backup-backup-plan-details))
 (common-lisp:defun make-aws-backup-backup-plan-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id backup-plan-id backup-plan-arn
                     backup-plan)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan))
      (common-lisp:list
       (common-lisp:cons "BackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-lifecycle-details common-lisp:nil
                       ((move-to-cold-storage-after-days :initarg
                         :move-to-cold-storage-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-backup-plan-lifecycle-details-move-to-cold-storage-after-days
                         :initform common-lisp:nil)
                        (delete-after-days :initarg :delete-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-backup-plan-lifecycle-details-delete-after-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-lifecycle-details
                    'make-aws-backup-backup-plan-lifecycle-details))
 (common-lisp:defun make-aws-backup-backup-plan-lifecycle-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key move-to-cold-storage-after-days
                     delete-after-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-lifecycle-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-after-days))
      (common-lisp:list
       (common-lisp:cons "DeleteAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-after-days))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-rule-copy-actions-details
                       common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or
                          aws-backup-backup-plan-lifecycle-details
                          common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-copy-actions-details-lifecycle
                         :initform common-lisp:nil)
                        (destination-backup-vault-arn :initarg
                         :destination-backup-vault-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-copy-actions-details-destination-backup-vault-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-rule-copy-actions-details
                    'make-aws-backup-backup-plan-rule-copy-actions-details))
 (common-lisp:defun make-aws-backup-backup-plan-rule-copy-actions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle destination-backup-vault-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-rule-copy-actions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-copy-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-rule-copy-actions-list ()
   '(trivial-types:proper-list
     aws-backup-backup-plan-rule-copy-actions-details))
 (common-lisp:defun |make-aws-backup-backup-plan-rule-copy-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-rule-copy-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-plan-rule-details common-lisp:nil
                       ((lifecycle :initarg :lifecycle :type
                         (common-lisp:or
                          aws-backup-backup-plan-lifecycle-details
                          common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-details-lifecycle
                         :initform common-lisp:nil)
                        (copy-actions :initarg :copy-actions :type
                         (common-lisp:or
                          aws-backup-backup-plan-rule-copy-actions-list
                          common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-details-copy-actions
                         :initform common-lisp:nil)
                        (completion-window-minutes :initarg
                         :completion-window-minutes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-backup-plan-rule-details-completion-window-minutes
                         :initform common-lisp:nil)
                        (enable-continuous-backup :initarg
                         :enable-continuous-backup :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-backup-backup-plan-rule-details-enable-continuous-backup
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-backup-backup-plan-rule-details-rule-id
                         :initform common-lisp:nil)
                        (rule-name :initarg :rule-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-details-rule-name
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-details-schedule-expression
                         :initform common-lisp:nil)
                        (start-window-minutes :initarg :start-window-minutes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-backup-plan-rule-details-start-window-minutes
                         :initform common-lisp:nil)
                        (target-backup-vault :initarg :target-backup-vault
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-plan-rule-details-target-backup-vault
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-plan-rule-details
                    'make-aws-backup-backup-plan-rule-details))
 (common-lisp:defun make-aws-backup-backup-plan-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lifecycle copy-actions
                     completion-window-minutes enable-continuous-backup rule-id
                     rule-name schedule-expression start-window-minutes
                     target-backup-vault)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-plan-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-backup-vault))
      (common-lisp:list
       (common-lisp:cons "TargetBackupVault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-window-minutes))
      (common-lisp:list
       (common-lisp:cons "StartWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-continuous-backup))
      (common-lisp:list
       (common-lisp:cons "EnableContinuousBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-window-minutes))
      (common-lisp:list
       (common-lisp:cons "CompletionWindowMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-actions))
      (common-lisp:list
       (common-lisp:cons "CopyActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-plan-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-backup-backup-plan-rule-list ()
   '(trivial-types:proper-list aws-backup-backup-plan-rule-details))
 (common-lisp:defun |make-aws-backup-backup-plan-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-backup-backup-plan-rule-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-vault-details common-lisp:nil
                       ((access-policy :initarg :access-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-details-access-policy
                         :initform common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or
                          aws-backup-backup-vault-notifications-details
                          common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-details-notifications
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-details-encryption-key-arn
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-details-backup-vault-name
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-details-backup-vault-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-vault-details
                    'make-aws-backup-backup-vault-details))
 (common-lisp:defun make-aws-backup-backup-vault-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-policy notifications
                     encryption-key-arn backup-vault-name backup-vault-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-vault-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy))
      (common-lisp:list
       (common-lisp:cons "AccessPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-backup-vault-notifications-details
                       common-lisp:nil
                       ((sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-notifications-details-sns-topic-arn
                         :initform common-lisp:nil)
                        (backup-vault-events :initarg :backup-vault-events
                         :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-backup-backup-vault-notifications-details-backup-vault-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-backup-vault-notifications-details
                    'make-aws-backup-backup-vault-notifications-details))
 (common-lisp:defun make-aws-backup-backup-vault-notifications-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-topic-arn backup-vault-events)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-backup-vault-notifications-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-events))
      (common-lisp:list
       (common-lisp:cons "BackupVaultEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-backup-vault-notifications-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-recovery-point-calculated-lifecycle-details
                       common-lisp:nil
                       ((move-to-cold-storage-at :initarg
                         :move-to-cold-storage-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-calculated-lifecycle-details-move-to-cold-storage-at
                         :initform common-lisp:nil)
                        (delete-at :initarg :delete-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-calculated-lifecycle-details-delete-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-calculated-lifecycle-details
                    'make-aws-backup-recovery-point-calculated-lifecycle-details))
 (common-lisp:defun make-aws-backup-recovery-point-calculated-lifecycle-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key move-to-cold-storage-at delete-at)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-recovery-point-calculated-lifecycle-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-at))
      (common-lisp:list
       (common-lisp:cons "DeleteAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-at))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-calculated-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-recovery-point-created-by-details
                       common-lisp:nil
                       ((backup-rule-id :initarg :backup-rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-created-by-details-backup-rule-id
                         :initform common-lisp:nil)
                        (backup-plan-version :initarg :backup-plan-version
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-created-by-details-backup-plan-version
                         :initform common-lisp:nil)
                        (backup-plan-id :initarg :backup-plan-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-created-by-details-backup-plan-id
                         :initform common-lisp:nil)
                        (backup-plan-arn :initarg :backup-plan-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-created-by-details-backup-plan-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-created-by-details
                    'make-aws-backup-recovery-point-created-by-details))
 (common-lisp:defun make-aws-backup-recovery-point-created-by-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backup-rule-id backup-plan-version
                     backup-plan-id backup-plan-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-recovery-point-created-by-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-arn))
      (common-lisp:list
       (common-lisp:cons "BackupPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-id))
      (common-lisp:list
       (common-lisp:cons "BackupPlanId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-plan-version))
      (common-lisp:list
       (common-lisp:cons "BackupPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-rule-id))
      (common-lisp:list
       (common-lisp:cons "BackupRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-created-by-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-recovery-point-details common-lisp:nil
                       ((storage-class :initarg :storage-class :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-storage-class
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-backup-recovery-point-details-status
                         :initform common-lisp:nil)
                        (source-backup-vault-arn :initarg
                         :source-backup-vault-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-source-backup-vault-arn
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-resource-type
                         :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-resource-arn
                         :initform common-lisp:nil)
                        (recovery-point-arn :initarg :recovery-point-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-recovery-point-arn
                         :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or
                          aws-backup-recovery-point-lifecycle-details
                          common-lisp:null)
                         :accessor %aws-backup-recovery-point-details-lifecycle
                         :initform common-lisp:nil)
                        (last-restore-time :initarg :last-restore-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-last-restore-time
                         :initform common-lisp:nil)
                        (is-encrypted :initarg :is-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-backup-recovery-point-details-is-encrypted
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-iam-role-arn
                         :initform common-lisp:nil)
                        (encryption-key-arn :initarg :encryption-key-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-encryption-key-arn
                         :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-creation-date
                         :initform common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or
                          aws-backup-recovery-point-created-by-details
                          common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-created-by
                         :initform common-lisp:nil)
                        (completion-date :initarg :completion-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-completion-date
                         :initform common-lisp:nil)
                        (calculated-lifecycle :initarg :calculated-lifecycle
                         :type
                         (common-lisp:or
                          aws-backup-recovery-point-calculated-lifecycle-details
                          common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-calculated-lifecycle
                         :initform common-lisp:nil)
                        (backup-vault-name :initarg :backup-vault-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-backup-vault-name
                         :initform common-lisp:nil)
                        (backup-vault-arn :initarg :backup-vault-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-backup-recovery-point-details-backup-vault-arn
                         :initform common-lisp:nil)
                        (backup-size-in-bytes :initarg :backup-size-in-bytes
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-recovery-point-details-backup-size-in-bytes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-details
                    'make-aws-backup-recovery-point-details))
 (common-lisp:defun make-aws-backup-recovery-point-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class status-message status
                     source-backup-vault-arn resource-type resource-arn
                     recovery-point-arn lifecycle last-restore-time
                     is-encrypted iam-role-arn encryption-key-arn creation-date
                     created-by completion-date calculated-lifecycle
                     backup-vault-name backup-vault-arn backup-size-in-bytes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-recovery-point-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "BackupSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "BackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-vault-name))
      (common-lisp:list
       (common-lisp:cons "BackupVaultName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-lifecycle))
      (common-lisp:list
       (common-lisp:cons "CalculatedLifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-date))
      (common-lisp:list
       (common-lisp:cons "CompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "IsEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-restore-time))
      (common-lisp:list
       (common-lisp:cons "LastRestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "RecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-backup-vault-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupVaultArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-backup-recovery-point-lifecycle-details
                       common-lisp:nil
                       ((move-to-cold-storage-after-days :initarg
                         :move-to-cold-storage-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-recovery-point-lifecycle-details-move-to-cold-storage-after-days
                         :initform common-lisp:nil)
                        (delete-after-days :initarg :delete-after-days :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-backup-recovery-point-lifecycle-details-delete-after-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-backup-recovery-point-lifecycle-details
                    'make-aws-backup-recovery-point-lifecycle-details))
 (common-lisp:defun make-aws-backup-recovery-point-lifecycle-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key move-to-cold-storage-after-days
                     delete-after-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-backup-recovery-point-lifecycle-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-after-days))
      (common-lisp:list
       (common-lisp:cons "DeleteAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'move-to-cold-storage-after-days))
      (common-lisp:list
       (common-lisp:cons "MoveToColdStorageAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-backup-recovery-point-lifecycle-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-type
                         :initform common-lisp:nil)
                        (subject-alternative-names :initarg
                         :subject-alternative-names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-subject-alternative-names
                         :initform common-lisp:nil)
                        (subject :initarg :subject :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-subject
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-status
                         :initform common-lisp:nil)
                        (signature-algorithm :initarg :signature-algorithm
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-signature-algorithm
                         :initform common-lisp:nil)
                        (serial :initarg :serial :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-serial
                         :initform common-lisp:nil)
                        (renewal-summary :initarg :renewal-summary :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-renewal-summary
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-renewal-summary
                         :initform common-lisp:nil)
                        (renewal-eligibility :initarg :renewal-eligibility
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-renewal-eligibility
                         :initform common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-options
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-options
                         :initform common-lisp:nil)
                        (not-before :initarg :not-before :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-not-before
                         :initform common-lisp:nil)
                        (not-after :initarg :not-after :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-not-after
                         :initform common-lisp:nil)
                        (key-usages :initarg :key-usages :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-key-usages
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-key-usages
                         :initform common-lisp:nil)
                        (key-algorithm :initarg :key-algorithm :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-key-algorithm
                         :initform common-lisp:nil)
                        (issuer :initarg :issuer :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-issuer
                         :initform common-lisp:nil)
                        (issued-at :initarg :issued-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-issued-at
                         :initform common-lisp:nil)
                        (in-use-by :initarg :in-use-by :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-in-use-by
                         :initform common-lisp:nil)
                        (imported-at :initarg :imported-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-imported-at
                         :initform common-lisp:nil)
                        (failure-reason :initarg :failure-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-failure-reason
                         :initform common-lisp:nil)
                        (extended-key-usages :initarg :extended-key-usages
                         :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-extended-key-usages
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-extended-key-usages
                         :initform common-lisp:nil)
                        (domain-validation-options :initarg
                         :domain-validation-options :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-domain-validation-options
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-domain-validation-options
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-domain-name
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-created-at
                         :initform common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-details-certificate-authority-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-details
                    'make-aws-certificate-manager-certificate-details))
 (common-lisp:defun make-aws-certificate-manager-certificate-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type subject-alternative-names subject
                     status signature-algorithm serial renewal-summary
                     renewal-eligibility options not-before not-after
                     key-usages key-algorithm issuer issued-at in-use-by
                     imported-at failure-reason extended-key-usages
                     domain-validation-options domain-name created-at
                     certificate-authority-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usages))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-at))
      (common-lisp:list
       (common-lisp:cons "ImportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-use-by))
      (common-lisp:list
       (common-lisp:cons "InUseBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "IssuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usages))
      (common-lisp:list
       (common-lisp:cons "KeyUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-eligibility))
      (common-lisp:list
       (common-lisp:cons "RenewalEligibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "RenewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "SignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-certificate-manager-certificate-domain-validation-option common-lisp:nil
  ((validation-status :initarg :validation-status :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-certificate-manager-certificate-domain-validation-option-validation-status
    :initform common-lisp:nil)
   (validation-method :initarg :validation-method :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-certificate-manager-certificate-domain-validation-option-validation-method
    :initform common-lisp:nil)
   (validation-emails :initarg :validation-emails :type
    (common-lisp:or string-list common-lisp:null) :accessor
    %aws-certificate-manager-certificate-domain-validation-option-validation-emails
    :initform common-lisp:nil)
   (validation-domain :initarg :validation-domain :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-certificate-manager-certificate-domain-validation-option-validation-domain
    :initform common-lisp:nil)
   (resource-record :initarg :resource-record :type
    (common-lisp:or aws-certificate-manager-certificate-resource-record
                    common-lisp:null)
    :accessor
    %aws-certificate-manager-certificate-domain-validation-option-resource-record
    :initform common-lisp:nil)
   (domain-name :initarg :domain-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-certificate-manager-certificate-domain-validation-option-domain-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-certificate-manager-certificate-domain-validation-option
   'make-aws-certificate-manager-certificate-domain-validation-option))
 (common-lisp:defun make-aws-certificate-manager-certificate-domain-validation-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-status validation-method
                     validation-emails validation-domain resource-record
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-domain-validation-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record))
      (common-lisp:list
       (common-lisp:cons "ResourceRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-domain))
      (common-lisp:list
       (common-lisp:cons "ValidationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-emails))
      (common-lisp:list
       (common-lisp:cons "ValidationEmails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-method))
      (common-lisp:list
       (common-lisp:cons "ValidationMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "ValidationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-domain-validation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-domain-validation-options
                      ()
   '(trivial-types:proper-list
     aws-certificate-manager-certificate-domain-validation-option))
 (common-lisp:defun |make-aws-certificate-manager-certificate-domain-validation-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-domain-validation-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-extended-key-usage
                       common-lisp:nil
                       ((oid :initarg :oid :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-extended-key-usage-oid
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-extended-key-usage-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-extended-key-usage
                    'make-aws-certificate-manager-certificate-extended-key-usage))
 (common-lisp:defun make-aws-certificate-manager-certificate-extended-key-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key oid name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-extended-key-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oid))
      (common-lisp:list
       (common-lisp:cons "OId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-extended-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-extended-key-usages
                      ()
   '(trivial-types:proper-list
     aws-certificate-manager-certificate-extended-key-usage))
 (common-lisp:defun |make-aws-certificate-manager-certificate-extended-key-usages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-extended-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-key-usage
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-key-usage-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-key-usage
                    'make-aws-certificate-manager-certificate-key-usage))
 (common-lisp:defun make-aws-certificate-manager-certificate-key-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-key-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-certificate-manager-certificate-key-usages ()
   '(trivial-types:proper-list aws-certificate-manager-certificate-key-usage))
 (common-lisp:defun |make-aws-certificate-manager-certificate-key-usages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-certificate-manager-certificate-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-options
                       common-lisp:nil
                       ((certificate-transparency-logging-preference :initarg
                         :certificate-transparency-logging-preference :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-options-certificate-transparency-logging-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-options
                    'make-aws-certificate-manager-certificate-options))
 (common-lisp:defun make-aws-certificate-manager-certificate-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     certificate-transparency-logging-preference)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-transparency-logging-preference))
      (common-lisp:list
       (common-lisp:cons "CertificateTransparencyLoggingPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-renewal-summary
                       common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-renewal-summary-updated-at
                         :initform common-lisp:nil)
                        (renewal-status-reason :initarg :renewal-status-reason
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-renewal-summary-renewal-status-reason
                         :initform common-lisp:nil)
                        (renewal-status :initarg :renewal-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-renewal-summary-renewal-status
                         :initform common-lisp:nil)
                        (domain-validation-options :initarg
                         :domain-validation-options :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-domain-validation-options
                          common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-renewal-summary-domain-validation-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-renewal-summary
                    'make-aws-certificate-manager-certificate-renewal-summary))
 (common-lisp:defun make-aws-certificate-manager-certificate-renewal-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at renewal-status-reason
                     renewal-status domain-validation-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-renewal-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "DomainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "RenewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'renewal-status-reason))
      (common-lisp:list
       (common-lisp:cons "RenewalStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-renewal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-certificate-manager-certificate-resource-record
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-resource-record-value
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-resource-record-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-certificate-manager-certificate-resource-record-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-certificate-manager-certificate-resource-record
                    'make-aws-certificate-manager-certificate-resource-record))
 (common-lisp:defun make-aws-certificate-manager-certificate-resource-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-certificate-manager-certificate-resource-record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-certificate-manager-certificate-resource-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-formation-stack-details common-lisp:nil
                       ((timeout-in-minutes :initarg :timeout-in-minutes :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-formation-stack-details-timeout-in-minutes
                         :initform common-lisp:nil)
                        (stack-status-reason :initarg :stack-status-reason
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-stack-status-reason
                         :initform common-lisp:nil)
                        (stack-status :initarg :stack-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-stack-status
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-stack-name
                         :initform common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-formation-stack-details-stack-id
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-formation-stack-details-role-arn
                         :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or aws-cloud-formation-stack-outputs-list
                                         common-lisp:null)
                         :accessor %aws-cloud-formation-stack-details-outputs
                         :initform common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-notification-arns
                         :initform common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-last-updated-time
                         :initform common-lisp:nil)
                        (enable-termination-protection :initarg
                         :enable-termination-protection :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-formation-stack-details-enable-termination-protection
                         :initform common-lisp:nil)
                        (drift-information :initarg :drift-information :type
                         (common-lisp:or
                          aws-cloud-formation-stack-drift-information-details
                          common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-drift-information
                         :initform common-lisp:nil)
                        (disable-rollback :initarg :disable-rollback :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-formation-stack-details-disable-rollback
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-creation-time
                         :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-details-capabilities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-details
                    'make-aws-cloud-formation-stack-details))
 (common-lisp:defun make-aws-cloud-formation-stack-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-in-minutes stack-status-reason
                     stack-status stack-name stack-id role-arn outputs
                     notification-arns last-updated-time
                     enable-termination-protection drift-information
                     disable-rollback description creation-time capabilities)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-formation-stack-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-termination-protection))
      (common-lisp:list
       (common-lisp:cons "EnableTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-formation-stack-drift-information-details
                       common-lisp:nil
                       ((stack-drift-status :initarg :stack-drift-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-drift-information-details-stack-drift-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-drift-information-details
                    'make-aws-cloud-formation-stack-drift-information-details))
 (common-lisp:defun make-aws-cloud-formation-stack-drift-information-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-drift-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-formation-stack-drift-information-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-drift-information-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-formation-stack-outputs-details
                       common-lisp:nil
                       ((output-value :initarg :output-value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-outputs-details-output-value
                         :initform common-lisp:nil)
                        (output-key :initarg :output-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-outputs-details-output-key
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-formation-stack-outputs-details-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-formation-stack-outputs-details
                    'make-aws-cloud-formation-stack-outputs-details))
 (common-lisp:defun make-aws-cloud-formation-stack-outputs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-value output-key description)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-formation-stack-outputs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-value))
      (common-lisp:list
       (common-lisp:cons "OutputValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-formation-stack-outputs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-formation-stack-outputs-list ()
   '(trivial-types:proper-list aws-cloud-formation-stack-outputs-details))
 (common-lisp:defun |make-aws-cloud-formation-stack-outputs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-formation-stack-outputs-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-cache-behavior
                       common-lisp:nil
                       ((viewer-protocol-policy :initarg
                         :viewer-protocol-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-cache-behavior-viewer-protocol-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-cache-behavior
                    'make-aws-cloud-front-distribution-cache-behavior))
 (common-lisp:defun make-aws-cloud-front-distribution-cache-behavior
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key viewer-protocol-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-cache-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-cache-behaviors
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          aws-cloud-front-distribution-cache-behaviors-item-list
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-cache-behaviors-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-cache-behaviors
                    'make-aws-cloud-front-distribution-cache-behaviors))
 (common-lisp:defun make-aws-cloud-front-distribution-cache-behaviors
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-cache-behaviors
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-cache-behaviors))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-cache-behaviors-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-cache-behavior))
 (common-lisp:defun |make-aws-cloud-front-distribution-cache-behaviors-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-cache-behavior))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-default-cache-behavior
                       common-lisp:nil
                       ((viewer-protocol-policy :initarg
                         :viewer-protocol-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-default-cache-behavior-viewer-protocol-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-default-cache-behavior
                    'make-aws-cloud-front-distribution-default-cache-behavior))
 (common-lisp:defun make-aws-cloud-front-distribution-default-cache-behavior
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key viewer-protocol-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-default-cache-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'viewer-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "ViewerProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-default-cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-details common-lisp:nil
                       ((web-acl-id :initarg :web-acl-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-web-acl-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-front-distribution-details-status
                         :initform common-lisp:nil)
                        (viewer-certificate :initarg :viewer-certificate :type
                         (common-lisp:or
                          aws-cloud-front-distribution-viewer-certificate
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-viewer-certificate
                         :initform common-lisp:nil)
                        (origin-groups :initarg :origin-groups :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-groups
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-origin-groups
                         :initform common-lisp:nil)
                        (origins :initarg :origins :type
                         (common-lisp:or aws-cloud-front-distribution-origins
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-origins
                         :initform common-lisp:nil)
                        (logging :initarg :logging :type
                         (common-lisp:or aws-cloud-front-distribution-logging
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-logging
                         :initform common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-last-modified-time
                         :initform common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-front-distribution-details-etag
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-domain-name
                         :initform common-lisp:nil)
                        (default-root-object :initarg :default-root-object
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-default-root-object
                         :initform common-lisp:nil)
                        (default-cache-behavior :initarg
                         :default-cache-behavior :type
                         (common-lisp:or
                          aws-cloud-front-distribution-default-cache-behavior
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-default-cache-behavior
                         :initform common-lisp:nil)
                        (cache-behaviors :initarg :cache-behaviors :type
                         (common-lisp:or
                          aws-cloud-front-distribution-cache-behaviors
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-details-cache-behaviors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-details
                    'make-aws-cloud-front-distribution-details))
 (common-lisp:defun make-aws-cloud-front-distribution-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-acl-id status viewer-certificate
                     origin-groups origins logging last-modified-time etag
                     domain-name default-root-object default-cache-behavior
                     cache-behaviors)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "CacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "DefaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-root-object))
      (common-lisp:list
       (common-lisp:cons "DefaultRootObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origins))
      (common-lisp:list
       (common-lisp:cons "Origins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-groups))
      (common-lisp:list
       (common-lisp:cons "OriginGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'viewer-certificate))
      (common-lisp:list
       (common-lisp:cons "ViewerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-logging common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-front-distribution-logging-prefix
                         :initform common-lisp:nil)
                        (include-cookies :initarg :include-cookies :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-front-distribution-logging-include-cookies
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-front-distribution-logging-enabled
                         :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-front-distribution-logging-bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-logging
                    'make-aws-cloud-front-distribution-logging))
 (common-lisp:defun make-aws-cloud-front-distribution-logging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix include-cookies enabled bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-logging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-cookies))
      (common-lisp:list
       (common-lisp:cons "IncludeCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-custom-origin-config
                       common-lisp:nil
                       ((origin-ssl-protocols :initarg :origin-ssl-protocols
                         :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-ssl-protocols
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-origin-ssl-protocols
                         :initform common-lisp:nil)
                        (origin-read-timeout :initarg :origin-read-timeout
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-origin-read-timeout
                         :initform common-lisp:nil)
                        (origin-protocol-policy :initarg
                         :origin-protocol-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-origin-protocol-policy
                         :initform common-lisp:nil)
                        (origin-keepalive-timeout :initarg
                         :origin-keepalive-timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-origin-keepalive-timeout
                         :initform common-lisp:nil)
                        (https-port :initarg :https-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-https-port
                         :initform common-lisp:nil)
                        (http-port :initarg :http-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-front-distribution-origin-custom-origin-config-http-port
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-custom-origin-config
                    'make-aws-cloud-front-distribution-origin-custom-origin-config))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-custom-origin-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-ssl-protocols origin-read-timeout
                     origin-protocol-policy origin-keepalive-timeout https-port
                     http-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-custom-origin-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-port))
      (common-lisp:list
       (common-lisp:cons "HttpPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-port))
      (common-lisp:list
       (common-lisp:cons "HttpsPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-keepalive-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginKeepaliveTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-protocol-policy))
      (common-lisp:list
       (common-lisp:cons "OriginProtocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-read-timeout))
      (common-lisp:list
       (common-lisp:cons "OriginReadTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-ssl-protocols))
      (common-lisp:list
       (common-lisp:cons "OriginSslProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-custom-origin-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-group
                       common-lisp:nil
                       ((failover-criteria :initarg :failover-criteria :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-group-failover
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-group-failover-criteria
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-group
                    'make-aws-cloud-front-distribution-origin-group))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failover-criteria)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-criteria))
      (common-lisp:list
       (common-lisp:cons "FailoverCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-group-failover
                       common-lisp:nil
                       ((status-codes :initarg :status-codes :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-group-failover-status-codes
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-group-failover-status-codes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-group-failover
                    'make-aws-cloud-front-distribution-origin-group-failover))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-group-failover
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-codes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-group-failover
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-codes))
      (common-lisp:list
       (common-lisp:cons "StatusCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-cloud-front-distribution-origin-group-failover-status-codes
  common-lisp:nil
  ((quantity :initarg :quantity :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-cloud-front-distribution-origin-group-failover-status-codes-quantity
    :initform common-lisp:nil)
   (items :initarg :items :type
    (common-lisp:or
     aws-cloud-front-distribution-origin-group-failover-status-codes-item-list
     common-lisp:null)
    :accessor
    %aws-cloud-front-distribution-origin-group-failover-status-codes-items
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-cloud-front-distribution-origin-group-failover-status-codes
   'make-aws-cloud-front-distribution-origin-group-failover-status-codes))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-group-failover-status-codes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantity items)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-group-failover-status-codes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-group-failover-status-codes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-group-failover-status-codes-item-list
                      ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-group-failover-status-codes-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-groups
                       common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-groups-item-list
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-groups-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-groups
                    'make-aws-cloud-front-distribution-origin-groups))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-groups
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-groups
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-groups-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-origin-group))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-groups-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-origin-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-item common-lisp:nil
                       ((custom-origin-config :initarg :custom-origin-config
                         :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-custom-origin-config
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-item-custom-origin-config
                         :initform common-lisp:nil)
                        (s3origin-config :initarg :s3origin-config :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-s3origin-config
                          common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-item-s3origin-config
                         :initform common-lisp:nil)
                        (origin-path :initarg :origin-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-item-origin-path
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-front-distribution-origin-item-id
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-item-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-item
                    'make-aws-cloud-front-distribution-origin-item))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-origin-config s3origin-config
                     origin-path id domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-path))
      (common-lisp:list
       (common-lisp:cons "OriginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3origin-config))
      (common-lisp:list
       (common-lisp:cons "S3OriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-origin-config))
      (common-lisp:list
       (common-lisp:cons "CustomOriginConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-front-distribution-origin-item-list ()
   '(trivial-types:proper-list aws-cloud-front-distribution-origin-item))
 (common-lisp:defun |make-aws-cloud-front-distribution-origin-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-front-distribution-origin-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-s3origin-config
                       common-lisp:nil
                       ((origin-access-identity :initarg
                         :origin-access-identity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-s3origin-config-origin-access-identity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-s3origin-config
                    'make-aws-cloud-front-distribution-origin-s3origin-config))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-s3origin-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-access-identity)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-s3origin-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-access-identity))
      (common-lisp:list
       (common-lisp:cons "OriginAccessIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-s3origin-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origin-ssl-protocols
                       common-lisp:nil
                       ((quantity :initarg :quantity :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-front-distribution-origin-ssl-protocols-quantity
                         :initform common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-origin-ssl-protocols-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origin-ssl-protocols
                    'make-aws-cloud-front-distribution-origin-ssl-protocols))
 (common-lisp:defun make-aws-cloud-front-distribution-origin-ssl-protocols
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantity items)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origin-ssl-protocols
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origin-ssl-protocols))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-origins common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or
                          aws-cloud-front-distribution-origin-item-list
                          common-lisp:null)
                         :accessor %aws-cloud-front-distribution-origins-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-origins
                    'make-aws-cloud-front-distribution-origins))
 (common-lisp:defun make-aws-cloud-front-distribution-origins
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-origins
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-origins))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-front-distribution-viewer-certificate
                       common-lisp:nil
                       ((ssl-support-method :initarg :ssl-support-method :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-ssl-support-method
                         :initform common-lisp:nil)
                        (minimum-protocol-version :initarg
                         :minimum-protocol-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-minimum-protocol-version
                         :initform common-lisp:nil)
                        (iam-certificate-id :initarg :iam-certificate-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-iam-certificate-id
                         :initform common-lisp:nil)
                        (cloud-front-default-certificate :initarg
                         :cloud-front-default-certificate :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-front-distribution-viewer-certificate-cloud-front-default-certificate
                         :initform common-lisp:nil)
                        (certificate-source :initarg :certificate-source :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-certificate-source
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-certificate
                         :initform common-lisp:nil)
                        (acm-certificate-arn :initarg :acm-certificate-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-front-distribution-viewer-certificate-acm-certificate-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-front-distribution-viewer-certificate
                    'make-aws-cloud-front-distribution-viewer-certificate))
 (common-lisp:defun make-aws-cloud-front-distribution-viewer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssl-support-method
                     minimum-protocol-version iam-certificate-id
                     cloud-front-default-certificate certificate-source
                     certificate acm-certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-front-distribution-viewer-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "AcmCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-source))
      (common-lisp:list
       (common-lisp:cons "CertificateSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-front-default-certificate))
      (common-lisp:list
       (common-lisp:cons "CloudFrontDefaultCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-certificate-id))
      (common-lisp:list
       (common-lisp:cons "IamCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-protocol-version))
      (common-lisp:list
       (common-lisp:cons "MinimumProtocolVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-support-method))
      (common-lisp:list
       (common-lisp:cons "SslSupportMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-front-distribution-viewer-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-trail-trail-details common-lisp:nil
                       ((trail-arn :initarg :trail-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-trail-arn
                         :initform common-lisp:nil)
                        (sns-topic-name :initarg :sns-topic-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-trail-trail-details-sns-topic-name
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-sns-topic-arn
                         :initform common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-s3key-prefix
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-s3bucket-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-name
                         :initform common-lisp:nil)
                        (log-file-validation-enabled :initarg
                         :log-file-validation-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-trail-trail-details-log-file-validation-enabled
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-kms-key-id
                         :initform common-lisp:nil)
                        (is-organization-trail :initarg :is-organization-trail
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-cloud-trail-trail-details-is-organization-trail
                         :initform common-lisp:nil)
                        (is-multi-region-trail :initarg :is-multi-region-trail
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-cloud-trail-trail-details-is-multi-region-trail
                         :initform common-lisp:nil)
                        (include-global-service-events :initarg
                         :include-global-service-events :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-trail-trail-details-include-global-service-events
                         :initform common-lisp:nil)
                        (home-region :initarg :home-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-trail-trail-details-home-region
                         :initform common-lisp:nil)
                        (has-custom-event-selectors :initarg
                         :has-custom-event-selectors :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-trail-trail-details-has-custom-event-selectors
                         :initform common-lisp:nil)
                        (cloud-watch-logs-role-arn :initarg
                         :cloud-watch-logs-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-trail-trail-details-cloud-watch-logs-role-arn
                         :initform common-lisp:nil)
                        (cloud-watch-logs-log-group-arn :initarg
                         :cloud-watch-logs-log-group-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-trail-trail-details-cloud-watch-logs-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-trail-trail-details
                    'make-aws-cloud-trail-trail-details))
 (common-lisp:defun make-aws-cloud-trail-trail-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trail-arn sns-topic-name sns-topic-arn
                     s3key-prefix s3bucket-name name
                     log-file-validation-enabled kms-key-id
                     is-organization-trail is-multi-region-trail
                     include-global-service-events home-region
                     has-custom-event-selectors cloud-watch-logs-role-arn
                     cloud-watch-logs-log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-trail-trail-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-custom-event-selectors))
      (common-lisp:list
       (common-lisp:cons "HasCustomEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-file-validation-enabled))
      (common-lisp:list
       (common-lisp:cons "LogFileValidationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-trail-trail-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-watch-alarm-details common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-unit
                         :initform common-lisp:nil)
                        (treat-missing-data :initarg :treat-missing-data :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-treat-missing-data
                         :initform common-lisp:nil)
                        (threshold-metric-id :initarg :threshold-metric-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-threshold-metric-id
                         :initform common-lisp:nil)
                        (threshold :initarg :threshold :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %aws-cloud-watch-alarm-details-threshold :initform
                         common-lisp:nil)
                        (statistic :initarg :statistic :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-statistic
                         :initform common-lisp:nil)
                        (period :initarg :period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-watch-alarm-details-period :initform
                         common-lisp:nil)
                        (ok-actions :initarg :ok-actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-ok-actions
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-namespace
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-metric-name
                         :initform common-lisp:nil)
                        (insufficient-data-actions :initarg
                         :insufficient-data-actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-insufficient-data-actions
                         :initform common-lisp:nil)
                        (extended-statistic :initarg :extended-statistic :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-extended-statistic
                         :initform common-lisp:nil)
                        (evaluation-periods :initarg :evaluation-periods :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cloud-watch-alarm-details-evaluation-periods
                         :initform common-lisp:nil)
                        (evaluate-low-sample-count-percentile :initarg
                         :evaluate-low-sample-count-percentile :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-evaluate-low-sample-count-percentile
                         :initform common-lisp:nil)
                        (dimensions :initarg :dimensions :type
                         (common-lisp:or aws-cloud-watch-alarm-dimensions-list
                                         common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-dimensions
                         :initform common-lisp:nil)
                        (datapoints-to-alarm :initarg :datapoints-to-alarm
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-datapoints-to-alarm
                         :initform common-lisp:nil)
                        (comparison-operator :initarg :comparison-operator
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-comparison-operator
                         :initform common-lisp:nil)
                        (alarm-name :initarg :alarm-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-alarm-name
                         :initform common-lisp:nil)
                        (alarm-description :initarg :alarm-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-alarm-description
                         :initform common-lisp:nil)
                        (alarm-configuration-updated-timestamp :initarg
                         :alarm-configuration-updated-timestamp :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-details-alarm-configuration-updated-timestamp
                         :initform common-lisp:nil)
                        (alarm-arn :initarg :alarm-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-alarm-arn
                         :initform common-lisp:nil)
                        (alarm-actions :initarg :alarm-actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cloud-watch-alarm-details-alarm-actions
                         :initform common-lisp:nil)
                        (actions-enabled :initarg :actions-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cloud-watch-alarm-details-actions-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-watch-alarm-details
                    'make-aws-cloud-watch-alarm-details))
 (common-lisp:defun make-aws-cloud-watch-alarm-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit treat-missing-data
                     threshold-metric-id threshold statistic period ok-actions
                     namespace metric-name insufficient-data-actions
                     extended-statistic evaluation-periods
                     evaluate-low-sample-count-percentile dimensions
                     datapoints-to-alarm comparison-operator alarm-name
                     alarm-description alarm-configuration-updated-timestamp
                     alarm-arn alarm-actions actions-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-watch-alarm-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions-enabled))
      (common-lisp:list
       (common-lisp:cons "ActionsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-actions))
      (common-lisp:list
       (common-lisp:cons "AlarmActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-arn))
      (common-lisp:list
       (common-lisp:cons "AlarmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alarm-configuration-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "AlarmConfigurationUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-description))
      (common-lisp:list
       (common-lisp:cons "AlarmDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "DatapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-low-sample-count-percentile))
      (common-lisp:list
       (common-lisp:cons "EvaluateLowSampleCountPercentile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-statistic))
      (common-lisp:list
       (common-lisp:cons "ExtendedStatistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insufficient-data-actions))
      (common-lisp:list
       (common-lisp:cons "InsufficientDataActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ok-actions))
      (common-lisp:list
       (common-lisp:cons "OkActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-metric-id))
      (common-lisp:list
       (common-lisp:cons "ThresholdMetricId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "TreatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cloud-watch-alarm-dimensions-details common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-dimensions-details-value
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-cloud-watch-alarm-dimensions-details-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-watch-alarm-dimensions-details
                    'make-aws-cloud-watch-alarm-dimensions-details))
 (common-lisp:defun make-aws-cloud-watch-alarm-dimensions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-watch-alarm-dimensions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-watch-alarm-dimensions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-cloud-watch-alarm-dimensions-list ()
   '(trivial-types:proper-list aws-cloud-watch-alarm-dimensions-details))
 (common-lisp:defun |make-aws-cloud-watch-alarm-dimensions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-watch-alarm-dimensions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-artifacts-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-type
                         :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-path
                         :initform common-lisp:nil)
                        (packaging :initarg :packaging :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-packaging
                         :initform common-lisp:nil)
                        (override-artifact-name :initarg
                         :override-artifact-name :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-code-build-project-artifacts-details-override-artifact-name
                         :initform common-lisp:nil)
                        (namespace-type :initarg :namespace-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-namespace-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-name
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-location
                         :initform common-lisp:nil)
                        (encryption-disabled :initarg :encryption-disabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-encryption-disabled
                         :initform common-lisp:nil)
                        (artifact-identifier :initarg :artifact-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-artifacts-details-artifact-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-artifacts-details
                    'make-aws-code-build-project-artifacts-details))
 (common-lisp:defun make-aws-code-build-project-artifacts-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type path packaging
                     override-artifact-name namespace-type name location
                     encryption-disabled artifact-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-artifacts-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-identifier))
      (common-lisp:list
       (common-lisp:cons "ArtifactIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-disabled))
      (common-lisp:list
       (common-lisp:cons "EncryptionDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-type))
      (common-lisp:list
       (common-lisp:cons "NamespaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'override-artifact-name))
      (common-lisp:list
       (common-lisp:cons "OverrideArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packaging))
      (common-lisp:list
       (common-lisp:cons "Packaging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-artifacts-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-code-build-project-artifacts-list ()
   '(trivial-types:proper-list aws-code-build-project-artifacts-details))
 (common-lisp:defun |make-aws-code-build-project-artifacts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-code-build-project-artifacts-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-details common-lisp:nil
                       ((secondary-artifacts :initarg :secondary-artifacts
                         :type
                         (common-lisp:or aws-code-build-project-artifacts-list
                                         common-lisp:null)
                         :accessor
                         %aws-code-build-project-details-secondary-artifacts
                         :initform common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or aws-code-build-project-vpc-config
                                         common-lisp:null)
                         :accessor %aws-code-build-project-details-vpc-config
                         :initform common-lisp:nil)
                        (logs-config :initarg :logs-config :type
                         (common-lisp:or
                          aws-code-build-project-logs-config-details
                          common-lisp:null)
                         :accessor %aws-code-build-project-details-logs-config
                         :initform common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-details-service-role
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or aws-code-build-project-source
                                         common-lisp:null)
                         :accessor %aws-code-build-project-details-source
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-details-name
                         :initform common-lisp:nil)
                        (environment :initarg :environment :type
                         (common-lisp:or aws-code-build-project-environment
                                         common-lisp:null)
                         :accessor %aws-code-build-project-details-environment
                         :initform common-lisp:nil)
                        (artifacts :initarg :artifacts :type
                         (common-lisp:or aws-code-build-project-artifacts-list
                                         common-lisp:null)
                         :accessor %aws-code-build-project-details-artifacts
                         :initform common-lisp:nil)
                        (encryption-key :initarg :encryption-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-details-encryption-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-details
                    'make-aws-code-build-project-details))
 (common-lisp:defun make-aws-code-build-project-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary-artifacts vpc-config
                     logs-config service-role source name environment artifacts
                     encryption-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "Artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logs-config))
      (common-lisp:list
       (common-lisp:cons "LogsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-artifacts))
      (common-lisp:list
       (common-lisp:cons "SecondaryArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-environment common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-environment-type
                         :initform common-lisp:nil)
                        (registry-credential :initarg :registry-credential
                         :type
                         (common-lisp:or
                          aws-code-build-project-environment-registry-credential
                          common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-registry-credential
                         :initform common-lisp:nil)
                        (image-pull-credentials-type :initarg
                         :image-pull-credentials-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-image-pull-credentials-type
                         :initform common-lisp:nil)
                        (privileged-mode :initarg :privileged-mode :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-code-build-project-environment-privileged-mode
                         :initform common-lisp:nil)
                        (environment-variables :initarg :environment-variables
                         :type
                         (common-lisp:or
                          aws-code-build-project-environment-environment-variables-list
                          common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-environment-variables
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-certificate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-environment
                    'make-aws-code-build-project-environment))
 (common-lisp:defun make-aws-code-build-project-environment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type registry-credential
                     image-pull-credentials-type privileged-mode
                     environment-variables certificate)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-environment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "EnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged-mode))
      (common-lisp:list
       (common-lisp:cons "PrivilegedMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-pull-credentials-type))
      (common-lisp:list
       (common-lisp:cons "ImagePullCredentialsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-credential))
      (common-lisp:list
       (common-lisp:cons "RegistryCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-code-build-project-environment-environment-variables-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-environment-environment-variables-details-value
    :initform common-lisp:nil)
   (type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-environment-environment-variables-details-type
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-environment-environment-variables-details-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-code-build-project-environment-environment-variables-details
   'make-aws-code-build-project-environment-environment-variables-details))
 (common-lisp:defun make-aws-code-build-project-environment-environment-variables-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-environment-environment-variables-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-environment-variables-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-code-build-project-environment-environment-variables-list
                      ()
   '(trivial-types:proper-list
     aws-code-build-project-environment-environment-variables-details))
 (common-lisp:defun |make-aws-code-build-project-environment-environment-variables-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-code-build-project-environment-environment-variables-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-environment-registry-credential
                       common-lisp:nil
                       ((credential-provider :initarg :credential-provider
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-registry-credential-credential-provider
                         :initform common-lisp:nil)
                        (credential :initarg :credential :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-environment-registry-credential-credential
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-environment-registry-credential
                    'make-aws-code-build-project-environment-registry-credential))
 (common-lisp:defun make-aws-code-build-project-environment-registry-credential
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credential-provider credential)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-environment-registry-credential
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential))
      (common-lisp:list
       (common-lisp:cons "Credential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credential-provider))
      (common-lisp:list
       (common-lisp:cons "CredentialProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-environment-registry-credential))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-code-build-project-logs-config-cloud-watch-logs-details common-lisp:nil
  ((stream-name :initarg :stream-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-logs-config-cloud-watch-logs-details-stream-name
    :initform common-lisp:nil)
   (status :initarg :status :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-logs-config-cloud-watch-logs-details-status
    :initform common-lisp:nil)
   (group-name :initarg :group-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-code-build-project-logs-config-cloud-watch-logs-details-group-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-code-build-project-logs-config-cloud-watch-logs-details
   'make-aws-code-build-project-logs-config-cloud-watch-logs-details))
 (common-lisp:defun make-aws-code-build-project-logs-config-cloud-watch-logs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-name status group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-logs-config-cloud-watch-logs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-cloud-watch-logs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-logs-config-details
                       common-lisp:nil
                       ((s3logs :initarg :s3logs :type
                         (common-lisp:or
                          aws-code-build-project-logs-config-s3logs-details
                          common-lisp:null)
                         :accessor
                         %aws-code-build-project-logs-config-details-s3logs
                         :initform common-lisp:nil)
                        (cloud-watch-logs :initarg :cloud-watch-logs :type
                         (common-lisp:or
                          aws-code-build-project-logs-config-cloud-watch-logs-details
                          common-lisp:null)
                         :accessor
                         %aws-code-build-project-logs-config-details-cloud-watch-logs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-logs-config-details
                    'make-aws-code-build-project-logs-config-details))
 (common-lisp:defun make-aws-code-build-project-logs-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3logs cloud-watch-logs)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-logs-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-watch-logs))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3logs))
      (common-lisp:list
       (common-lisp:cons "S3Logs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-logs-config-s3logs-details
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-logs-config-s3logs-details-status
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-code-build-project-logs-config-s3logs-details-location
                         :initform common-lisp:nil)
                        (encryption-disabled :initarg :encryption-disabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-code-build-project-logs-config-s3logs-details-encryption-disabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-logs-config-s3logs-details
                    'make-aws-code-build-project-logs-config-s3logs-details))
 (common-lisp:defun make-aws-code-build-project-logs-config-s3logs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status location encryption-disabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-logs-config-s3logs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-disabled))
      (common-lisp:list
       (common-lisp:cons "EncryptionDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-logs-config-s3logs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-source common-lisp:nil
                       ((insecure-ssl :initarg :insecure-ssl :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-code-build-project-source-insecure-ssl :initform
                         common-lisp:nil)
                        (git-clone-depth :initarg :git-clone-depth :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-code-build-project-source-git-clone-depth
                         :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-source-location
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-source-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-source
                    'make-aws-code-build-project-source))
 (common-lisp:defun make-aws-code-build-project-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insecure-ssl git-clone-depth location
                     type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-clone-depth))
      (common-lisp:list
       (common-lisp:cons "GitCloneDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insecure-ssl))
      (common-lisp:list
       (common-lisp:cons "InsecureSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-code-build-project-vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-code-build-project-vpc-config-security-group-ids
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-code-build-project-vpc-config-subnets
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-code-build-project-vpc-config-vpc-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-code-build-project-vpc-config
                    'make-aws-code-build-project-vpc-config))
 (common-lisp:defun make-aws-code-build-project-vpc-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnets vpc-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-code-build-project-vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-code-build-project-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-cors-configuration common-lisp:nil
                       ((allow-headers :initarg :allow-headers :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cors-configuration-allow-headers
                         :initform common-lisp:nil)
                        (allow-methods :initarg :allow-methods :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cors-configuration-allow-methods
                         :initform common-lisp:nil)
                        (max-age :initarg :max-age :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-cors-configuration-max-age :initform
                         common-lisp:nil)
                        (expose-headers :initarg :expose-headers :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cors-configuration-expose-headers
                         :initform common-lisp:nil)
                        (allow-credentials :initarg :allow-credentials :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-cors-configuration-allow-credentials :initform
                         common-lisp:nil)
                        (allow-origins :initarg :allow-origins :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-cors-configuration-allow-origins
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cors-configuration 'make-aws-cors-configuration))
 (common-lisp:defun make-aws-cors-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-headers allow-methods max-age
                     expose-headers allow-credentials allow-origins)
   (common-lisp:apply #'common-lisp:make-instance 'aws-cors-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-origins))
      (common-lisp:list
       (common-lisp:cons "AllowOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-credentials))
      (common-lisp:list
       (common-lisp:cons "AllowCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age))
      (common-lisp:list
       (common-lisp:cons "MaxAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-methods))
      (common-lisp:list
       (common-lisp:cons "AllowMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-headers))
      (common-lisp:list
       (common-lisp:cons "AllowHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cors-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-attribute-definition common-lisp:nil
                       ((attribute-type :initarg :attribute-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-attribute-definition-attribute-type
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-attribute-definition-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-attribute-definition
                    'make-aws-dynamo-db-table-attribute-definition))
 (common-lisp:defun make-aws-dynamo-db-table-attribute-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-type attribute-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-attribute-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-type))
      (common-lisp:list
       (common-lisp:cons "AttributeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-attribute-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-attribute-definition-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-attribute-definition))
 (common-lisp:defun |make-aws-dynamo-db-table-attribute-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-attribute-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-billing-mode-summary common-lisp:nil
                       ((last-update-to-pay-per-request-date-time :initarg
                         :last-update-to-pay-per-request-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-billing-mode-summary-last-update-to-pay-per-request-date-time
                         :initform common-lisp:nil)
                        (billing-mode :initarg :billing-mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-billing-mode-summary-billing-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-billing-mode-summary
                    'make-aws-dynamo-db-table-billing-mode-summary))
 (common-lisp:defun make-aws-dynamo-db-table-billing-mode-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-update-to-pay-per-request-date-time
                     billing-mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-billing-mode-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-mode))
      (common-lisp:list
       (common-lisp:cons "BillingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-to-pay-per-request-date-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateToPayPerRequestDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-billing-mode-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-details common-lisp:nil
                       ((table-status :initarg :table-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-table-status
                         :initform common-lisp:nil)
                        (table-size-bytes :initarg :table-size-bytes :type
                         (common-lisp:or size-bytes common-lisp:null) :accessor
                         %aws-dynamo-db-table-details-table-size-bytes
                         :initform common-lisp:nil)
                        (table-name :initarg :table-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-table-name
                         :initform common-lisp:nil)
                        (table-id :initarg :table-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-table-id
                         :initform common-lisp:nil)
                        (stream-specification :initarg :stream-specification
                         :type
                         (common-lisp:or
                          aws-dynamo-db-table-stream-specification
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-stream-specification
                         :initform common-lisp:nil)
                        (sse-description :initarg :sse-description :type
                         (common-lisp:or aws-dynamo-db-table-sse-description
                                         common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-sse-description
                         :initform common-lisp:nil)
                        (restore-summary :initarg :restore-summary :type
                         (common-lisp:or aws-dynamo-db-table-restore-summary
                                         common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-restore-summary
                         :initform common-lisp:nil)
                        (replicas :initarg :replicas :type
                         (common-lisp:or aws-dynamo-db-table-replica-list
                                         common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-replicas
                         :initform common-lisp:nil)
                        (provisioned-throughput :initarg
                         :provisioned-throughput :type
                         (common-lisp:or
                          aws-dynamo-db-table-provisioned-throughput
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-provisioned-throughput
                         :initform common-lisp:nil)
                        (local-secondary-indexes :initarg
                         :local-secondary-indexes :type
                         (common-lisp:or
                          aws-dynamo-db-table-local-secondary-index-list
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-local-secondary-indexes
                         :initform common-lisp:nil)
                        (latest-stream-label :initarg :latest-stream-label
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-latest-stream-label
                         :initform common-lisp:nil)
                        (latest-stream-arn :initarg :latest-stream-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-latest-stream-arn
                         :initform common-lisp:nil)
                        (key-schema :initarg :key-schema :type
                         (common-lisp:or aws-dynamo-db-table-key-schema-list
                                         common-lisp:null)
                         :accessor %aws-dynamo-db-table-details-key-schema
                         :initform common-lisp:nil)
                        (item-count :initarg :item-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-dynamo-db-table-details-item-count :initform
                         common-lisp:nil)
                        (global-table-version :initarg :global-table-version
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-global-table-version
                         :initform common-lisp:nil)
                        (global-secondary-indexes :initarg
                         :global-secondary-indexes :type
                         (common-lisp:or
                          aws-dynamo-db-table-global-secondary-index-list
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-global-secondary-indexes
                         :initform common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-creation-date-time
                         :initform common-lisp:nil)
                        (billing-mode-summary :initarg :billing-mode-summary
                         :type
                         (common-lisp:or
                          aws-dynamo-db-table-billing-mode-summary
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-billing-mode-summary
                         :initform common-lisp:nil)
                        (attribute-definitions :initarg :attribute-definitions
                         :type
                         (common-lisp:or
                          aws-dynamo-db-table-attribute-definition-list
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-details-attribute-definitions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-details
                    'make-aws-dynamo-db-table-details))
 (common-lisp:defun make-aws-dynamo-db-table-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key table-status table-size-bytes table-name
                     table-id stream-specification sse-description
                     restore-summary replicas provisioned-throughput
                     local-secondary-indexes latest-stream-label
                     latest-stream-arn key-schema item-count
                     global-table-version global-secondary-indexes
                     creation-date-time billing-mode-summary
                     attribute-definitions)
   (common-lisp:apply #'common-lisp:make-instance 'aws-dynamo-db-table-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definitions))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-mode-summary))
      (common-lisp:list
       (common-lisp:cons "BillingModeSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-table-version))
      (common-lisp:list
       (common-lisp:cons "GlobalTableVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-arn))
      (common-lisp:list
       (common-lisp:cons "LatestStreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-stream-label))
      (common-lisp:list
       (common-lisp:cons "LatestStreamLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "LocalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicas))
      (common-lisp:list
       (common-lisp:cons "Replicas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-summary))
      (common-lisp:list
       (common-lisp:cons "RestoreSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-description))
      (common-lisp:list
       (common-lisp:cons "SseDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-specification))
      (common-lisp:list
       (common-lisp:cons "StreamSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-id))
      (common-lisp:list
       (common-lisp:cons "TableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-size-bytes))
      (common-lisp:list
       (common-lisp:cons "TableSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-status))
      (common-lisp:list
       (common-lisp:cons "TableStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-global-secondary-index
                       common-lisp:nil
                       ((provisioned-throughput :initarg
                         :provisioned-throughput :type
                         (common-lisp:or
                          aws-dynamo-db-table-provisioned-throughput
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-provisioned-throughput
                         :initform common-lisp:nil)
                        (projection :initarg :projection :type
                         (common-lisp:or aws-dynamo-db-table-projection
                                         common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-projection
                         :initform common-lisp:nil)
                        (key-schema :initarg :key-schema :type
                         (common-lisp:or aws-dynamo-db-table-key-schema-list
                                         common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-key-schema
                         :initform common-lisp:nil)
                        (item-count :initarg :item-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-dynamo-db-table-global-secondary-index-item-count
                         :initform common-lisp:nil)
                        (index-status :initarg :index-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-index-status
                         :initform common-lisp:nil)
                        (index-size-bytes :initarg :index-size-bytes :type
                         (common-lisp:or size-bytes common-lisp:null) :accessor
                         %aws-dynamo-db-table-global-secondary-index-index-size-bytes
                         :initform common-lisp:nil)
                        (index-name :initarg :index-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-index-name
                         :initform common-lisp:nil)
                        (index-arn :initarg :index-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-global-secondary-index-index-arn
                         :initform common-lisp:nil)
                        (backfilling :initarg :backfilling :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-dynamo-db-table-global-secondary-index-backfilling
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-global-secondary-index
                    'make-aws-dynamo-db-table-global-secondary-index))
 (common-lisp:defun make-aws-dynamo-db-table-global-secondary-index
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioned-throughput projection
                     key-schema item-count index-status index-size-bytes
                     index-name index-arn backfilling)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-global-secondary-index
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfilling))
      (common-lisp:list
       (common-lisp:cons "Backfilling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-size-bytes))
      (common-lisp:list
       (common-lisp:cons "IndexSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "IndexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-global-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-global-secondary-index-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-global-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-global-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-global-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-key-schema common-lisp:nil
                       ((key-type :initarg :key-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-key-schema-key-type
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-key-schema-attribute-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-key-schema
                    'make-aws-dynamo-db-table-key-schema))
 (common-lisp:defun make-aws-dynamo-db-table-key-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-type attribute-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-key-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-key-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-key-schema-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-key-schema))
 (common-lisp:defun |make-aws-dynamo-db-table-key-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-key-schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-local-secondary-index
                       common-lisp:nil
                       ((projection :initarg :projection :type
                         (common-lisp:or aws-dynamo-db-table-projection
                                         common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-local-secondary-index-projection
                         :initform common-lisp:nil)
                        (key-schema :initarg :key-schema :type
                         (common-lisp:or aws-dynamo-db-table-key-schema-list
                                         common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-local-secondary-index-key-schema
                         :initform common-lisp:nil)
                        (index-name :initarg :index-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-local-secondary-index-index-name
                         :initform common-lisp:nil)
                        (index-arn :initarg :index-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-local-secondary-index-index-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-local-secondary-index
                    'make-aws-dynamo-db-table-local-secondary-index))
 (common-lisp:defun make-aws-dynamo-db-table-local-secondary-index
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key projection key-schema index-name
                     index-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-local-secondary-index
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-arn))
      (common-lisp:list
       (common-lisp:cons "IndexArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-schema))
      (common-lisp:list
       (common-lisp:cons "KeySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection))
      (common-lisp:list
       (common-lisp:cons "Projection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-local-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-local-secondary-index-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-local-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-local-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-local-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-projection common-lisp:nil
                       ((projection-type :initarg :projection-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-projection-projection-type
                         :initform common-lisp:nil)
                        (non-key-attributes :initarg :non-key-attributes :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-projection-non-key-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-projection
                    'make-aws-dynamo-db-table-projection))
 (common-lisp:defun make-aws-dynamo-db-table-projection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key projection-type non-key-attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-projection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-key-attributes))
      (common-lisp:list
       (common-lisp:cons "NonKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projection-type))
      (common-lisp:list
       (common-lisp:cons "ProjectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-projection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-provisioned-throughput
                       common-lisp:nil
                       ((write-capacity-units :initarg :write-capacity-units
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-provisioned-throughput-write-capacity-units
                         :initform common-lisp:nil)
                        (read-capacity-units :initarg :read-capacity-units
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-provisioned-throughput-read-capacity-units
                         :initform common-lisp:nil)
                        (number-of-decreases-today :initarg
                         :number-of-decreases-today :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-dynamo-db-table-provisioned-throughput-number-of-decreases-today
                         :initform common-lisp:nil)
                        (last-increase-date-time :initarg
                         :last-increase-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-provisioned-throughput-last-increase-date-time
                         :initform common-lisp:nil)
                        (last-decrease-date-time :initarg
                         :last-decrease-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-provisioned-throughput-last-decrease-date-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-provisioned-throughput
                    'make-aws-dynamo-db-table-provisioned-throughput))
 (common-lisp:defun make-aws-dynamo-db-table-provisioned-throughput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-capacity-units read-capacity-units
                     number-of-decreases-today last-increase-date-time
                     last-decrease-date-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-provisioned-throughput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-decrease-date-time))
      (common-lisp:list
       (common-lisp:cons "LastDecreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-increase-date-time))
      (common-lisp:list
       (common-lisp:cons "LastIncreaseDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-decreases-today))
      (common-lisp:list
       (common-lisp:cons "NumberOfDecreasesToday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-capacity-units))
      (common-lisp:list
       (common-lisp:cons "WriteCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-provisioned-throughput-override
                       common-lisp:nil
                       ((read-capacity-units :initarg :read-capacity-units
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-provisioned-throughput-override-read-capacity-units
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-provisioned-throughput-override
                    'make-aws-dynamo-db-table-provisioned-throughput-override))
 (common-lisp:defun make-aws-dynamo-db-table-provisioned-throughput-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key read-capacity-units)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-provisioned-throughput-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ReadCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-provisioned-throughput-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-replica common-lisp:nil
                       ((replica-status-description :initarg
                         :replica-status-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-replica-status-description
                         :initform common-lisp:nil)
                        (replica-status :initarg :replica-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-replica-replica-status
                         :initform common-lisp:nil)
                        (region-name :initarg :region-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-replica-region-name
                         :initform common-lisp:nil)
                        (provisioned-throughput-override :initarg
                         :provisioned-throughput-override :type
                         (common-lisp:or
                          aws-dynamo-db-table-provisioned-throughput-override
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-provisioned-throughput-override
                         :initform common-lisp:nil)
                        (kms-master-key-id :initarg :kms-master-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-kms-master-key-id
                         :initform common-lisp:nil)
                        (global-secondary-indexes :initarg
                         :global-secondary-indexes :type
                         (common-lisp:or
                          aws-dynamo-db-table-replica-global-secondary-index-list
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-global-secondary-indexes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-replica
                    'make-aws-dynamo-db-table-replica))
 (common-lisp:defun make-aws-dynamo-db-table-replica
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replica-status-description replica-status
                     region-name provisioned-throughput-override
                     kms-master-key-id global-secondary-indexes)
   (common-lisp:apply #'common-lisp:make-instance 'aws-dynamo-db-table-replica
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-secondary-indexes))
      (common-lisp:list
       (common-lisp:cons "GlobalSecondaryIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-override))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-status))
      (common-lisp:list
       (common-lisp:cons "ReplicaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-status-description))
      (common-lisp:list
       (common-lisp:cons "ReplicaStatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-replica-global-secondary-index
                       common-lisp:nil
                       ((provisioned-throughput-override :initarg
                         :provisioned-throughput-override :type
                         (common-lisp:or
                          aws-dynamo-db-table-provisioned-throughput-override
                          common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-global-secondary-index-provisioned-throughput-override
                         :initform common-lisp:nil)
                        (index-name :initarg :index-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-replica-global-secondary-index-index-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-replica-global-secondary-index
                    'make-aws-dynamo-db-table-replica-global-secondary-index))
 (common-lisp:defun make-aws-dynamo-db-table-replica-global-secondary-index
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provisioned-throughput-override
                     index-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-replica-global-secondary-index
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-throughput-override))
      (common-lisp:list
       (common-lisp:cons "ProvisionedThroughputOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-replica-global-secondary-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-replica-global-secondary-index-list
                      ()
   '(trivial-types:proper-list
     aws-dynamo-db-table-replica-global-secondary-index))
 (common-lisp:defun |make-aws-dynamo-db-table-replica-global-secondary-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-replica-global-secondary-index))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-dynamo-db-table-replica-list ()
   '(trivial-types:proper-list aws-dynamo-db-table-replica))
 (common-lisp:defun |make-aws-dynamo-db-table-replica-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-dynamo-db-table-replica))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-restore-summary common-lisp:nil
                       ((restore-in-progress :initarg :restore-in-progress
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-restore-summary-restore-in-progress
                         :initform common-lisp:nil)
                        (restore-date-time :initarg :restore-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-restore-summary-restore-date-time
                         :initform common-lisp:nil)
                        (source-table-arn :initarg :source-table-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-restore-summary-source-table-arn
                         :initform common-lisp:nil)
                        (source-backup-arn :initarg :source-backup-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-restore-summary-source-backup-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-restore-summary
                    'make-aws-dynamo-db-table-restore-summary))
 (common-lisp:defun make-aws-dynamo-db-table-restore-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-in-progress restore-date-time
                     source-table-arn source-backup-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-restore-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-backup-arn))
      (common-lisp:list
       (common-lisp:cons "SourceBackupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-arn))
      (common-lisp:list
       (common-lisp:cons "SourceTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date-time))
      (common-lisp:list
       (common-lisp:cons "RestoreDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-in-progress))
      (common-lisp:list
       (common-lisp:cons "RestoreInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-restore-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-sse-description common-lisp:nil
                       ((kms-master-key-arn :initarg :kms-master-key-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-sse-description-kms-master-key-arn
                         :initform common-lisp:nil)
                        (sse-type :initarg :sse-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-sse-description-sse-type
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-dynamo-db-table-sse-description-status
                         :initform common-lisp:nil)
                        (inaccessible-encryption-date-time :initarg
                         :inaccessible-encryption-date-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-sse-description-inaccessible-encryption-date-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-sse-description
                    'make-aws-dynamo-db-table-sse-description))
 (common-lisp:defun make-aws-dynamo-db-table-sse-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-master-key-arn sse-type status
                     inaccessible-encryption-date-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-sse-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inaccessible-encryption-date-time))
      (common-lisp:list
       (common-lisp:cons "InaccessibleEncryptionDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-type))
      (common-lisp:list
       (common-lisp:cons "SseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-sse-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-dynamo-db-table-stream-specification common-lisp:nil
                       ((stream-view-type :initarg :stream-view-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-dynamo-db-table-stream-specification-stream-view-type
                         :initform common-lisp:nil)
                        (stream-enabled :initarg :stream-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-dynamo-db-table-stream-specification-stream-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-dynamo-db-table-stream-specification
                    'make-aws-dynamo-db-table-stream-specification))
 (common-lisp:defun make-aws-dynamo-db-table-stream-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-view-type stream-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-dynamo-db-table-stream-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-enabled))
      (common-lisp:list
       (common-lisp:cons "StreamEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view-type))
      (common-lisp:list
       (common-lisp:cons "StreamViewType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-dynamo-db-table-stream-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2eip-details common-lisp:nil
                       ((private-ip-address :initarg :private-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-private-ip-address
                         :initform common-lisp:nil)
                        (network-interface-owner-id :initarg
                         :network-interface-owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2eip-details-network-interface-owner-id
                         :initform common-lisp:nil)
                        (network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-network-interface-id
                         :initform common-lisp:nil)
                        (network-border-group :initarg :network-border-group
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-network-border-group
                         :initform common-lisp:nil)
                        (public-ipv4pool :initarg :public-ipv4pool :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-public-ipv4pool
                         :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-domain :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-association-id :initform
                         common-lisp:nil)
                        (allocation-id :initarg :allocation-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-allocation-id :initform
                         common-lisp:nil)
                        (public-ip :initarg :public-ip :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-public-ip :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2eip-details-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2eip-details 'make-aws-ec2eip-details))
 (common-lisp:defun make-aws-ec2eip-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-ip-address
                     network-interface-owner-id network-interface-id
                     network-border-group public-ipv4pool domain association-id
                     allocation-id public-ip instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2eip-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-id))
      (common-lisp:list
       (common-lisp:cons "AllocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ipv4pool))
      (common-lisp:list
       (common-lisp:cons "PublicIpv4Pool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-border-group))
      (common-lisp:list
       (common-lisp:cons "NetworkBorderGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-owner-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ec2eip-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2instance-details common-lisp:nil
                       ((monitoring :initarg :monitoring :type
                         (common-lisp:or aws-ec2instance-monitoring-details
                                         common-lisp:null)
                         :accessor %aws-ec2instance-details-monitoring
                         :initform common-lisp:nil)
                        (metadata-options :initarg :metadata-options :type
                         (common-lisp:or aws-ec2instance-metadata-options
                                         common-lisp:null)
                         :accessor %aws-ec2instance-details-metadata-options
                         :initform common-lisp:nil)
                        (virtualization-type :initarg :virtualization-type
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-virtualization-type
                         :initform common-lisp:nil)
                        (network-interfaces :initarg :network-interfaces :type
                         (common-lisp:or
                          aws-ec2instance-network-interfaces-list
                          common-lisp:null)
                         :accessor %aws-ec2instance-details-network-interfaces
                         :initform common-lisp:nil)
                        (launched-at :initarg :launched-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-launched-at
                         :initform common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-subnet-id :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-vpc-id :initform
                         common-lisp:nil)
                        (iam-instance-profile-arn :initarg
                         :iam-instance-profile-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-details-iam-instance-profile-arn
                         :initform common-lisp:nil)
                        (key-name :initarg :key-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-key-name :initform
                         common-lisp:nil)
                        (ip-v6addresses :initarg :ip-v6addresses :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-ec2instance-details-ip-v6addresses
                         :initform common-lisp:nil)
                        (ip-v4addresses :initarg :ip-v4addresses :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-ec2instance-details-ip-v4addresses
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-image-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-details-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-details 'make-aws-ec2instance-details))
 (common-lisp:defun make-aws-ec2instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring metadata-options
                     virtualization-type network-interfaces launched-at
                     subnet-id vpc-id iam-instance-profile-arn key-name
                     ip-v6addresses ip-v4addresses image-id type)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v4addresses))
      (common-lisp:list
       (common-lisp:cons "IpV4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "IpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2instance-metadata-options common-lisp:nil
                       ((instance-metadata-tags :initarg
                         :instance-metadata-tags :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-metadata-options-instance-metadata-tags
                         :initform common-lisp:nil)
                        (http-tokens :initarg :http-tokens :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-metadata-options-http-tokens
                         :initform common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2instance-metadata-options-http-put-response-hop-limit
                         :initform common-lisp:nil)
                        (http-protocol-ipv6 :initarg :http-protocol-ipv6 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-metadata-options-http-protocol-ipv6
                         :initform common-lisp:nil)
                        (http-endpoint :initarg :http-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-metadata-options-http-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-metadata-options
                    'make-aws-ec2instance-metadata-options))
 (common-lisp:defun make-aws-ec2instance-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-metadata-tags http-tokens
                     http-put-response-hop-limit http-protocol-ipv6
                     http-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2instance-metadata-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "HttpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-tags))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-metadata-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2instance-monitoring-details common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2instance-monitoring-details-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-monitoring-details
                    'make-aws-ec2instance-monitoring-details))
 (common-lisp:defun make-aws-ec2instance-monitoring-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2instance-monitoring-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2instance-network-interfaces-details
                       common-lisp:nil
                       ((network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2instance-network-interfaces-details-network-interface-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2instance-network-interfaces-details
                    'make-aws-ec2instance-network-interfaces-details))
 (common-lisp:defun make-aws-ec2instance-network-interfaces-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-interface-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2instance-network-interfaces-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2instance-network-interfaces-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2instance-network-interfaces-list ()
   '(trivial-types:proper-list aws-ec2instance-network-interfaces-details))
 (common-lisp:defun |make-aws-ec2instance-network-interfaces-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2instance-network-interfaces-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-block-device-mapping-set-details common-lisp:nil
  ((virtual-name :initarg :virtual-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-details-virtual-name
    :initform common-lisp:nil)
   (no-device :initarg :no-device :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-details-no-device
    :initform common-lisp:nil)
   (ebs :initarg :ebs :type
    (common-lisp:or
     aws-ec2launch-template-data-block-device-mapping-set-ebs-details
     common-lisp:null)
    :accessor %aws-ec2launch-template-data-block-device-mapping-set-details-ebs
    :initform common-lisp:nil)
   (device-name :initarg :device-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-details-device-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-block-device-mapping-set-details
   'make-aws-ec2launch-template-data-block-device-mapping-set-details))
 (common-lisp:defun make-aws-ec2launch-template-data-block-device-mapping-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-name no-device ebs device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-block-device-mapping-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-block-device-mapping-set-ebs-details
  common-lisp:nil
  ((volume-type :initarg :volume-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-volume-type
    :initform common-lisp:nil)
   (volume-size :initarg :volume-size :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-volume-size
    :initform common-lisp:nil)
   (throughput :initarg :throughput :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-throughput
    :initform common-lisp:nil)
   (snapshot-id :initarg :snapshot-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-snapshot-id
    :initform common-lisp:nil)
   (kms-key-id :initarg :kms-key-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-kms-key-id
    :initform common-lisp:nil)
   (iops :initarg :iops :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-iops
    :initform common-lisp:nil)
   (encrypted :initarg :encrypted :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-encrypted
    :initform common-lisp:nil)
   (delete-on-termination :initarg :delete-on-termination :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-block-device-mapping-set-ebs-details-delete-on-termination
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-block-device-mapping-set-ebs-details
   'make-aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
 (common-lisp:defun make-aws-ec2launch-template-data-block-device-mapping-set-ebs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-type volume-size throughput
                     snapshot-id kms-key-id iops encrypted
                     delete-on-termination)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-block-device-mapping-set-ebs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-block-device-mapping-set-ebs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-block-device-mapping-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-block-device-mapping-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-block-device-mapping-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-block-device-mapping-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
  common-lisp:nil
  ((capacity-reservation-resource-group-arn :initarg
    :capacity-reservation-resource-group-arn :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details-capacity-reservation-resource-group-arn
    :initform common-lisp:nil)
   (capacity-reservation-id :initarg :capacity-reservation-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details-capacity-reservation-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
   'make-aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
 (common-lisp:defun make-aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-reservation-resource-group-arn
                     capacity-reservation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-id))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationResourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-capacity-reservation-specification-details
  common-lisp:nil
  ((capacity-reservation-target :initarg :capacity-reservation-target :type
    (common-lisp:or
     aws-ec2launch-template-data-capacity-reservation-specification-capacity-reservation-target-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-capacity-reservation-specification-details-capacity-reservation-target
    :initform common-lisp:nil)
   (capacity-reservation-preference :initarg :capacity-reservation-preference
    :type (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-capacity-reservation-specification-details-capacity-reservation-preference
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-capacity-reservation-specification-details
   'make-aws-ec2launch-template-data-capacity-reservation-specification-details))
 (common-lisp:defun make-aws-ec2launch-template-data-capacity-reservation-specification-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity-reservation-target
                     capacity-reservation-preference)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-capacity-reservation-specification-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-preference))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-target))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-capacity-reservation-specification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-cpu-options-details
                       common-lisp:nil
                       ((threads-per-core :initarg :threads-per-core :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2launch-template-data-cpu-options-details-threads-per-core
                         :initform common-lisp:nil)
                        (core-count :initarg :core-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2launch-template-data-cpu-options-details-core-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-cpu-options-details
                    'make-aws-ec2launch-template-data-cpu-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-cpu-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threads-per-core core-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-cpu-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-count))
      (common-lisp:list
       (common-lisp:cons "CoreCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threads-per-core))
      (common-lisp:list
       (common-lisp:cons "ThreadsPerCore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-cpu-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-credit-specification-details
                       common-lisp:nil
                       ((cpu-credits :initarg :cpu-credits :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-credit-specification-details-cpu-credits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-credit-specification-details
                    'make-aws-ec2launch-template-data-credit-specification-details))
 (common-lisp:defun make-aws-ec2launch-template-data-credit-specification-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cpu-credits)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-credit-specification-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-credits))
      (common-lisp:list
       (common-lisp:cons "CpuCredits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-credit-specification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-details common-lisp:nil
                       ((user-data :initarg :user-data :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-user-data
                         :initform common-lisp:nil)
                        (security-group-set :initarg :security-group-set :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-security-group-set
                         :initform common-lisp:nil)
                        (security-group-id-set :initarg :security-group-id-set
                         :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-security-group-id-set
                         :initform common-lisp:nil)
                        (ram-disk-id :initarg :ram-disk-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-ram-disk-id
                         :initform common-lisp:nil)
                        (private-dns-name-options :initarg
                         :private-dns-name-options :type
                         (common-lisp:or
                          aws-ec2launch-template-data-private-dns-name-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-private-dns-name-options
                         :initform common-lisp:nil)
                        (placement :initarg :placement :type
                         (common-lisp:or
                          aws-ec2launch-template-data-placement-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-placement
                         :initform common-lisp:nil)
                        (network-interface-set :initarg :network-interface-set
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-network-interface-set-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-network-interface-set
                         :initform common-lisp:nil)
                        (monitoring :initarg :monitoring :type
                         (common-lisp:or
                          aws-ec2launch-template-data-monitoring-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-monitoring
                         :initform common-lisp:nil)
                        (metadata-options :initarg :metadata-options :type
                         (common-lisp:or
                          aws-ec2launch-template-data-metadata-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-metadata-options
                         :initform common-lisp:nil)
                        (maintenance-options :initarg :maintenance-options
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-maintenance-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-maintenance-options
                         :initform common-lisp:nil)
                        (license-set :initarg :license-set :type
                         (common-lisp:or
                          aws-ec2launch-template-data-license-set-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-license-set
                         :initform common-lisp:nil)
                        (key-name :initarg :key-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-key-name
                         :initform common-lisp:nil)
                        (kernel-id :initarg :kernel-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-kernel-id
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-instance-type
                         :initform common-lisp:nil)
                        (instance-requirements :initarg :instance-requirements
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-instance-requirements-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-instance-requirements
                         :initform common-lisp:nil)
                        (instance-market-options :initarg
                         :instance-market-options :type
                         (common-lisp:or
                          aws-ec2launch-template-data-instance-market-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-instance-market-options
                         :initform common-lisp:nil)
                        (instance-initiated-shutdown-behavior :initarg
                         :instance-initiated-shutdown-behavior :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-instance-initiated-shutdown-behavior
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-image-id
                         :initform common-lisp:nil)
                        (iam-instance-profile :initarg :iam-instance-profile
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-iam-instance-profile-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-iam-instance-profile
                         :initform common-lisp:nil)
                        (hibernation-options :initarg :hibernation-options
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-hibernation-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-hibernation-options
                         :initform common-lisp:nil)
                        (enclave-options :initarg :enclave-options :type
                         (common-lisp:or
                          aws-ec2launch-template-data-enclave-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-enclave-options
                         :initform common-lisp:nil)
                        (elastic-inference-accelerator-set :initarg
                         :elastic-inference-accelerator-set :type
                         (common-lisp:or
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-elastic-inference-accelerator-set
                         :initform common-lisp:nil)
                        (elastic-gpu-specification-set :initarg
                         :elastic-gpu-specification-set :type
                         (common-lisp:or
                          aws-ec2launch-template-data-elastic-gpu-specification-set-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-elastic-gpu-specification-set
                         :initform common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-details-ebs-optimized
                         :initform common-lisp:nil)
                        (disable-api-termination :initarg
                         :disable-api-termination :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-details-disable-api-termination
                         :initform common-lisp:nil)
                        (disable-api-stop :initarg :disable-api-stop :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-details-disable-api-stop
                         :initform common-lisp:nil)
                        (credit-specification :initarg :credit-specification
                         :type
                         (common-lisp:or
                          aws-ec2launch-template-data-credit-specification-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-credit-specification
                         :initform common-lisp:nil)
                        (cpu-options :initarg :cpu-options :type
                         (common-lisp:or
                          aws-ec2launch-template-data-cpu-options-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-cpu-options
                         :initform common-lisp:nil)
                        (capacity-reservation-specification :initarg
                         :capacity-reservation-specification :type
                         (common-lisp:or
                          aws-ec2launch-template-data-capacity-reservation-specification-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-capacity-reservation-specification
                         :initform common-lisp:nil)
                        (block-device-mapping-set :initarg
                         :block-device-mapping-set :type
                         (common-lisp:or
                          aws-ec2launch-template-data-block-device-mapping-set-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-details-block-device-mapping-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-details
                    'make-aws-ec2launch-template-data-details))
 (common-lisp:defun make-aws-ec2launch-template-data-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-data security-group-set
                     security-group-id-set ram-disk-id private-dns-name-options
                     placement network-interface-set monitoring
                     metadata-options maintenance-options license-set key-name
                     kernel-id instance-type instance-requirements
                     instance-market-options
                     instance-initiated-shutdown-behavior image-id
                     iam-instance-profile hibernation-options enclave-options
                     elastic-inference-accelerator-set
                     elastic-gpu-specification-set ebs-optimized
                     disable-api-termination disable-api-stop
                     credit-specification cpu-options
                     capacity-reservation-specification
                     block-device-mapping-set)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mapping-set))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappingSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-reservation-specification))
      (common-lisp:list
       (common-lisp:cons "CapacityReservationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-options))
      (common-lisp:list
       (common-lisp:cons "CpuOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credit-specification))
      (common-lisp:list
       (common-lisp:cons "CreditSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-api-stop))
      (common-lisp:list
       (common-lisp:cons "DisableApiStop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-api-termination))
      (common-lisp:list
       (common-lisp:cons "DisableApiTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-gpu-specification-set))
      (common-lisp:list
       (common-lisp:cons "ElasticGpuSpecificationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-inference-accelerator-set))
      (common-lisp:list
       (common-lisp:cons "ElasticInferenceAcceleratorSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enclave-options))
      (common-lisp:list
       (common-lisp:cons "EnclaveOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hibernation-options))
      (common-lisp:list
       (common-lisp:cons "HibernationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "IamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-initiated-shutdown-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInitiatedShutdownBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-market-options))
      (common-lisp:list
       (common-lisp:cons "InstanceMarketOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-requirements))
      (common-lisp:list
       (common-lisp:cons "InstanceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-id))
      (common-lisp:list
       (common-lisp:cons "KernelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-name))
      (common-lisp:list
       (common-lisp:cons "KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-set))
      (common-lisp:list
       (common-lisp:cons "LicenseSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-options))
      (common-lisp:list
       (common-lisp:cons "MaintenanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "MetadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring))
      (common-lisp:list
       (common-lisp:cons "Monitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-set))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement))
      (common-lisp:list
       (common-lisp:cons "Placement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-dns-name-options))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsNameOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-disk-id))
      (common-lisp:list
       (common-lisp:cons "RamDiskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-set))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-set))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "UserData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-elastic-gpu-specification-set-details
  common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-elastic-gpu-specification-set-details-type
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-elastic-gpu-specification-set-details
   'make-aws-ec2launch-template-data-elastic-gpu-specification-set-details))
 (common-lisp:defun make-aws-ec2launch-template-data-elastic-gpu-specification-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-elastic-gpu-specification-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-elastic-gpu-specification-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-elastic-gpu-specification-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-elastic-gpu-specification-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-elastic-gpu-specification-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-elastic-inference-accelerator-set-details
  common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-elastic-inference-accelerator-set-details-type
    :initform common-lisp:nil)
   (count :initarg :count :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-elastic-inference-accelerator-set-details-count
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-elastic-inference-accelerator-set-details
   'make-aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
 (common-lisp:defun make-aws-ec2launch-template-data-elastic-inference-accelerator-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-elastic-inference-accelerator-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-elastic-inference-accelerator-set-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-elastic-inference-accelerator-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-elastic-inference-accelerator-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-enclave-options-details
                       common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-enclave-options-details-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-enclave-options-details
                    'make-aws-ec2launch-template-data-enclave-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-enclave-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-enclave-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-enclave-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-hibernation-options-details
                       common-lisp:nil
                       ((configured :initarg :configured :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-hibernation-options-details-configured
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-hibernation-options-details
                    'make-aws-ec2launch-template-data-hibernation-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-hibernation-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-hibernation-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured))
      (common-lisp:list
       (common-lisp:cons "Configured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-hibernation-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-iam-instance-profile-details
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-iam-instance-profile-details-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-iam-instance-profile-details-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-iam-instance-profile-details
                    'make-aws-ec2launch-template-data-iam-instance-profile-details))
 (common-lisp:defun make-aws-ec2launch-template-data-iam-instance-profile-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-iam-instance-profile-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-iam-instance-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-market-options-details common-lisp:nil
  ((spot-options :initarg :spot-options :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-market-options-spot-options-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-market-options-details-spot-options
    :initform common-lisp:nil)
   (market-type :initarg :market-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-details-market-type
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-market-options-details
   'make-aws-ec2launch-template-data-instance-market-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-market-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spot-options market-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-market-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'market-type))
      (common-lisp:list
       (common-lisp:cons "MarketType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-options))
      (common-lisp:list
       (common-lisp:cons "SpotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-market-options-spot-options-details
  common-lisp:nil
  ((valid-until :initarg :valid-until :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-spot-options-details-valid-until
    :initform common-lisp:nil)
   (spot-instance-type :initarg :spot-instance-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-spot-options-details-spot-instance-type
    :initform common-lisp:nil)
   (max-price :initarg :max-price :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-spot-options-details-max-price
    :initform common-lisp:nil)
   (instance-interruption-behavior :initarg :instance-interruption-behavior
    :type (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-spot-options-details-instance-interruption-behavior
    :initform common-lisp:nil)
   (block-duration-minutes :initarg :block-duration-minutes :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-market-options-spot-options-details-block-duration-minutes
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-market-options-spot-options-details
   'make-aws-ec2launch-template-data-instance-market-options-spot-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-market-options-spot-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key valid-until spot-instance-type max-price
                     instance-interruption-behavior block-duration-minutes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-market-options-spot-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-duration-minutes))
      (common-lisp:list
       (common-lisp:cons "BlockDurationMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-interruption-behavior))
      (common-lisp:list
       (common-lisp:cons "InstanceInterruptionBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-price))
      (common-lisp:list
       (common-lisp:cons "MaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spot-instance-type))
      (common-lisp:list
       (common-lisp:cons "SpotInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-market-options-spot-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-accelerator-count-details
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-accelerator-count-details-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-accelerator-count-details-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-accelerator-count-details
   'make-aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-accelerator-count-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-accelerator-count-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
   'make-aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
   'make-aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-details common-lisp:nil
  ((vcpu-count :initarg :vcpu-count :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-vcpu-count-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-vcpu-count
    :initform common-lisp:nil)
   (total-local-storage-gb :initarg :total-local-storage-gb :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-total-local-storage-gb
    :initform common-lisp:nil)
   (spot-max-price-percentage-over-lowest-price :initarg
    :spot-max-price-percentage-over-lowest-price :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-spot-max-price-percentage-over-lowest-price
    :initform common-lisp:nil)
   (require-hibernate-support :initarg :require-hibernate-support :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-require-hibernate-support
    :initform common-lisp:nil)
   (on-demand-max-price-percentage-over-lowest-price :initarg
    :on-demand-max-price-percentage-over-lowest-price :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-on-demand-max-price-percentage-over-lowest-price
    :initform common-lisp:nil)
   (network-interface-count :initarg :network-interface-count :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-network-interface-count-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-network-interface-count
    :initform common-lisp:nil)
   (memory-mi-b :initarg :memory-mi-b :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-memory-mi-b
    :initform common-lisp:nil)
   (memory-gi-bper-vcpu :initarg :memory-gi-bper-vcpu :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-memory-gi-bper-vcpu
    :initform common-lisp:nil)
   (local-storage-types :initarg :local-storage-types :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-local-storage-types
    :initform common-lisp:nil)
   (local-storage :initarg :local-storage :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-local-storage
    :initform common-lisp:nil)
   (instance-generations :initarg :instance-generations :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-instance-generations
    :initform common-lisp:nil)
   (excluded-instance-types :initarg :excluded-instance-types :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-excluded-instance-types
    :initform common-lisp:nil)
   (cpu-manufacturers :initarg :cpu-manufacturers :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-cpu-manufacturers
    :initform common-lisp:nil)
   (burstable-performance :initarg :burstable-performance :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-burstable-performance
    :initform common-lisp:nil)
   (baseline-ebs-bandwidth-mbps :initarg :baseline-ebs-bandwidth-mbps :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-baseline-ebs-bandwidth-mbps-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-baseline-ebs-bandwidth-mbps
    :initform common-lisp:nil)
   (bare-metal :initarg :bare-metal :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-bare-metal
    :initform common-lisp:nil)
   (accelerator-types :initarg :accelerator-types :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-accelerator-types
    :initform common-lisp:nil)
   (accelerator-total-memory-mi-b :initarg :accelerator-total-memory-mi-b :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-accelerator-total-memory-mi-bdetails
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-accelerator-total-memory-mi-b
    :initform common-lisp:nil)
   (accelerator-names :initarg :accelerator-names :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-accelerator-names
    :initform common-lisp:nil)
   (accelerator-manufacturers :initarg :accelerator-manufacturers :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-details-accelerator-manufacturers
    :initform common-lisp:nil)
   (accelerator-count :initarg :accelerator-count :type
    (common-lisp:or
     aws-ec2launch-template-data-instance-requirements-accelerator-count-details
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-instance-requirements-details-accelerator-count
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-instance-requirements-details
                    'make-aws-ec2launch-template-data-instance-requirements-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vcpu-count total-local-storage-gb
                     spot-max-price-percentage-over-lowest-price
                     require-hibernate-support
                     on-demand-max-price-percentage-over-lowest-price
                     network-interface-count memory-mi-b memory-gi-bper-vcpu
                     local-storage-types local-storage instance-generations
                     excluded-instance-types cpu-manufacturers
                     burstable-performance baseline-ebs-bandwidth-mbps
                     bare-metal accelerator-types accelerator-total-memory-mi-b
                     accelerator-names accelerator-manufacturers
                     accelerator-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-count))
      (common-lisp:list
       (common-lisp:cons "AcceleratorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-manufacturers))
      (common-lisp:list
       (common-lisp:cons "AcceleratorManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-names))
      (common-lisp:list
       (common-lisp:cons "AcceleratorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerator-total-memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTotalMemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bare-metal))
      (common-lisp:list
       (common-lisp:cons "BareMetal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-ebs-bandwidth-mbps))
      (common-lisp:list
       (common-lisp:cons "BaselineEbsBandwidthMbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burstable-performance))
      (common-lisp:list
       (common-lisp:cons "BurstablePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-manufacturers))
      (common-lisp:list
       (common-lisp:cons "CpuManufacturers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-instance-types))
      (common-lisp:list
       (common-lisp:cons "ExcludedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-generations))
      (common-lisp:list
       (common-lisp:cons "InstanceGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage))
      (common-lisp:list
       (common-lisp:cons "LocalStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-storage-types))
      (common-lisp:list
       (common-lisp:cons "LocalStorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-gi-bper-vcpu))
      (common-lisp:list
       (common-lisp:cons "MemoryGiBPerVCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-mi-b))
      (common-lisp:list
       (common-lisp:cons "MemoryMiB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-count))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "OnDemandMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-hibernate-support))
      (common-lisp:list
       (common-lisp:cons "RequireHibernateSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spot-max-price-percentage-over-lowest-price))
      (common-lisp:list
       (common-lisp:cons "SpotMaxPricePercentageOverLowestPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-local-storage-gb))
      (common-lisp:list
       (common-lisp:cons "TotalLocalStorageGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu-count))
      (common-lisp:list
       (common-lisp:cons "VCpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or double common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or double common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
   'make-aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-gi-bper-vcpu-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
   'make-aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-memory-mi-bdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-network-interface-count-details
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-network-interface-count-details-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-network-interface-count-details-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-network-interface-count-details
   'make-aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-network-interface-count-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-network-interface-count-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-network-interface-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or double common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or double common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
   'make-aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-total-local-storage-gbdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-instance-requirements-vcpu-count-details
  common-lisp:nil
  ((min :initarg :min :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-vcpu-count-details-min
    :initform common-lisp:nil)
   (max :initarg :max :type (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-instance-requirements-vcpu-count-details-max
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-instance-requirements-vcpu-count-details
   'make-aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
 (common-lisp:defun make-aws-ec2launch-template-data-instance-requirements-vcpu-count-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min max)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-instance-requirements-vcpu-count-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-instance-requirements-vcpu-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-license-set-details
                       common-lisp:nil
                       ((license-configuration-arn :initarg
                         :license-configuration-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-license-set-details-license-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-license-set-details
                    'make-aws-ec2launch-template-data-license-set-details))
 (common-lisp:defun make-aws-ec2launch-template-data-license-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key license-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-license-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'license-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "LicenseConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-license-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-license-set-list ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-license-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-license-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-license-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-maintenance-options-details
                       common-lisp:nil
                       ((auto-recovery :initarg :auto-recovery :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-maintenance-options-details-auto-recovery
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-maintenance-options-details
                    'make-aws-ec2launch-template-data-maintenance-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-maintenance-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-recovery)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-maintenance-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-recovery))
      (common-lisp:list
       (common-lisp:cons "AutoRecovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-maintenance-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-metadata-options-details
                       common-lisp:nil
                       ((instance-metadata-tags :initarg
                         :instance-metadata-tags :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-metadata-options-details-instance-metadata-tags
                         :initform common-lisp:nil)
                        (http-put-response-hop-limit :initarg
                         :http-put-response-hop-limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2launch-template-data-metadata-options-details-http-put-response-hop-limit
                         :initform common-lisp:nil)
                        (http-tokens :initarg :http-tokens :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-metadata-options-details-http-tokens
                         :initform common-lisp:nil)
                        (http-protocol-ipv6 :initarg :http-protocol-ipv6 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-metadata-options-details-http-protocol-ipv6
                         :initform common-lisp:nil)
                        (http-endpoint :initarg :http-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-metadata-options-details-http-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-metadata-options-details
                    'make-aws-ec2launch-template-data-metadata-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-metadata-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-metadata-tags
                     http-put-response-hop-limit http-tokens http-protocol-ipv6
                     http-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-metadata-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "HttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "HttpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "HttpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "HttpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-tags))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-metadata-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-monitoring-details
                       common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2launch-template-data-monitoring-details-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-monitoring-details
                    'make-aws-ec2launch-template-data-monitoring-details))
 (common-lisp:defun make-aws-ec2launch-template-data-monitoring-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-monitoring-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-monitoring-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-network-interface-set-details common-lisp:nil
  ((subnet-id :initarg :subnet-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-subnet-id
    :initform common-lisp:nil)
   (secondary-private-ip-address-count :initarg
    :secondary-private-ip-address-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-secondary-private-ip-address-count
    :initform common-lisp:nil)
   (private-ip-addresses :initarg :private-ip-addresses :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-network-interface-set-details-private-ip-addresses
    :initform common-lisp:nil)
   (private-ip-address :initarg :private-ip-address :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-private-ip-address
    :initform common-lisp:nil)
   (network-interface-id :initarg :network-interface-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-network-interface-id
    :initform common-lisp:nil)
   (network-card-index :initarg :network-card-index :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-network-card-index
    :initform common-lisp:nil)
   (ipv6prefixes :initarg :ipv6prefixes :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv6prefixes
    :initform common-lisp:nil)
   (ipv6prefix-count :initarg :ipv6prefix-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv6prefix-count
    :initform common-lisp:nil)
   (ipv6addresses :initarg :ipv6addresses :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv6addresses-list
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv6addresses
    :initform common-lisp:nil)
   (ipv6address-count :initarg :ipv6address-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv6address-count
    :initform common-lisp:nil)
   (ipv4prefixes :initarg :ipv4prefixes :type
    (common-lisp:or
     aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list
     common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv4prefixes
    :initform common-lisp:nil)
   (ipv4prefix-count :initarg :ipv4prefix-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-ipv4prefix-count
    :initform common-lisp:nil)
   (interface-type :initarg :interface-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-interface-type
    :initform common-lisp:nil)
   (groups :initarg :groups :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-groups :initform
    common-lisp:nil)
   (device-index :initarg :device-index :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-device-index
    :initform common-lisp:nil)
   (description :initarg :description :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-description
    :initform common-lisp:nil)
   (delete-on-termination :initarg :delete-on-termination :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-delete-on-termination
    :initform common-lisp:nil)
   (associate-public-ip-address :initarg :associate-public-ip-address :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-associate-public-ip-address
    :initform common-lisp:nil)
   (associate-carrier-ip-address :initarg :associate-carrier-ip-address :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-details-associate-carrier-ip-address
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-network-interface-set-details
                    'make-aws-ec2launch-template-data-network-interface-set-details))
 (common-lisp:defun make-aws-ec2launch-template-data-network-interface-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id
                     secondary-private-ip-address-count private-ip-addresses
                     private-ip-address network-interface-id network-card-index
                     ipv6prefixes ipv6prefix-count ipv6addresses
                     ipv6address-count ipv4prefixes ipv4prefix-count
                     interface-type groups device-index description
                     delete-on-termination associate-public-ip-address
                     associate-carrier-ip-address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-network-interface-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-carrier-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociateCarrierIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "AssociatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface-type))
      (common-lisp:list
       (common-lisp:cons "InterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefix-count))
      (common-lisp:list
       (common-lisp:cons "Ipv4PrefixCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefixes))
      (common-lisp:list
       (common-lisp:cons "Ipv4Prefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "Ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefix-count))
      (common-lisp:list
       (common-lisp:cons "Ipv6PrefixCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefixes))
      (common-lisp:list
       (common-lisp:cons "Ipv6Prefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-card-index))
      (common-lisp:list
       (common-lisp:cons "NetworkCardIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-private-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "SecondaryPrivateIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
  common-lisp:nil
  ((ipv4prefix :initarg :ipv4prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details-ipv4prefix
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
 (common-lisp:defun make-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv4prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4prefix))
      (common-lisp:list
       (common-lisp:cons "Ipv4Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv4prefixes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv4prefixes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
  common-lisp:nil
  ((ipv6address :initarg :ipv6address :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-ipv6addresses-details-ipv6address
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
 (common-lisp:defun make-aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-network-interface-set-ipv6addresses-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6address))
      (common-lisp:list
       (common-lisp:cons "Ipv6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv6addresses-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv6addresses-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv6addresses-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
  common-lisp:nil
  ((ipv6prefix :initarg :ipv6prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details-ipv6prefix
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
   'make-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
 (common-lisp:defun make-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6prefix))
      (common-lisp:list
       (common-lisp:cons "Ipv6Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-ipv6prefixes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-ipv6prefixes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-list ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
  common-lisp:nil
  ((private-ip-address :initarg :private-ip-address :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details-private-ip-address
    :initform common-lisp:nil)
   (primary :initarg :primary :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details-primary
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
   'make-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
 (common-lisp:defun make-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-ip-address primary)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary))
      (common-lisp:list
       (common-lisp:cons "Primary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list
                      ()
   '(trivial-types:proper-list
     aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
 (common-lisp:defun |make-aws-ec2launch-template-data-network-interface-set-private-ip-addresses-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2launch-template-data-network-interface-set-private-ip-addresses-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-data-placement-details
                       common-lisp:nil
                       ((tenancy :initarg :tenancy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-tenancy
                         :initform common-lisp:nil)
                        (spread-domain :initarg :spread-domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-spread-domain
                         :initform common-lisp:nil)
                        (partition-number :initarg :partition-number :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2launch-template-data-placement-details-partition-number
                         :initform common-lisp:nil)
                        (host-resource-group-arn :initarg
                         :host-resource-group-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-host-resource-group-arn
                         :initform common-lisp:nil)
                        (host-id :initarg :host-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-host-id
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-group-name
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-availability-zone
                         :initform common-lisp:nil)
                        (affinity :initarg :affinity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-data-placement-details-affinity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-data-placement-details
                    'make-aws-ec2launch-template-data-placement-details))
 (common-lisp:defun make-aws-ec2launch-template-data-placement-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tenancy spread-domain partition-number
                     host-resource-group-arn host-id group-name
                     availability-zone affinity)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-placement-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affinity))
      (common-lisp:list
       (common-lisp:cons "Affinity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "HostResourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-number))
      (common-lisp:list
       (common-lisp:cons "PartitionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spread-domain))
      (common-lisp:list
       (common-lisp:cons "SpreadDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-placement-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ec2launch-template-data-private-dns-name-options-details common-lisp:nil
  ((hostname-type :initarg :hostname-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ec2launch-template-data-private-dns-name-options-details-hostname-type
    :initform common-lisp:nil)
   (enable-resource-name-dns-arecord :initarg :enable-resource-name-dns-arecord
    :type (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-private-dns-name-options-details-enable-resource-name-dns-arecord
    :initform common-lisp:nil)
   (enable-resource-name-dns-aaaarecord :initarg
    :enable-resource-name-dns-aaaarecord :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ec2launch-template-data-private-dns-name-options-details-enable-resource-name-dns-aaaarecord
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ec2launch-template-data-private-dns-name-options-details
   'make-aws-ec2launch-template-data-private-dns-name-options-details))
 (common-lisp:defun make-aws-ec2launch-template-data-private-dns-name-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hostname-type
                     enable-resource-name-dns-arecord
                     enable-resource-name-dns-aaaarecord)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-data-private-dns-name-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-resource-name-dns-aaaarecord))
      (common-lisp:list
       (common-lisp:cons "EnableResourceNameDnsAAAARecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-resource-name-dns-arecord))
      (common-lisp:list
       (common-lisp:cons "EnableResourceNameDnsARecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-type))
      (common-lisp:list
       (common-lisp:cons "HostnameType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-data-private-dns-name-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2launch-template-details common-lisp:nil
                       ((latest-version-number :initarg :latest-version-number
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %aws-ec2launch-template-details-latest-version-number
                         :initform common-lisp:nil)
                        (default-version-number :initarg
                         :default-version-number :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-ec2launch-template-details-default-version-number
                         :initform common-lisp:nil)
                        (launch-template-data :initarg :launch-template-data
                         :type
                         (common-lisp:or aws-ec2launch-template-data-details
                                         common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-details-launch-template-data
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2launch-template-details-id :initform
                         common-lisp:nil)
                        (launch-template-name :initarg :launch-template-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2launch-template-details-launch-template-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2launch-template-details
                    'make-aws-ec2launch-template-details))
 (common-lisp:defun make-aws-ec2launch-template-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-version-number
                     default-version-number launch-template-data id
                     launch-template-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2launch-template-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-name))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-template-data))
      (common-lisp:list
       (common-lisp:cons "LaunchTemplateData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-number))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-version-number))
      (common-lisp:list
       (common-lisp:cons "LatestVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2launch-template-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-acl-association common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-association-subnet-id
                         :initform common-lisp:nil)
                        (network-acl-id :initarg :network-acl-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-acl-association-network-acl-id
                         :initform common-lisp:nil)
                        (network-acl-association-id :initarg
                         :network-acl-association-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-acl-association-network-acl-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-association
                    'make-aws-ec2network-acl-association))
 (common-lisp:defun make-aws-ec2network-acl-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id network-acl-id
                     network-acl-association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-acl-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-acl-association-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-acl-association-list ()
   '(trivial-types:proper-list aws-ec2network-acl-association))
 (common-lisp:defun |make-aws-ec2network-acl-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-acl-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-acl-details common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or aws-ec2network-acl-entry-list
                                         common-lisp:null)
                         :accessor %aws-ec2network-acl-details-entries
                         :initform common-lisp:nil)
                        (associations :initarg :associations :type
                         (common-lisp:or aws-ec2network-acl-association-list
                                         common-lisp:null)
                         :accessor %aws-ec2network-acl-details-associations
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-details-vpc-id :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-details-owner-id
                         :initform common-lisp:nil)
                        (network-acl-id :initarg :network-acl-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-details-network-acl-id
                         :initform common-lisp:nil)
                        (is-default :initarg :is-default :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2network-acl-details-is-default :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-details
                    'make-aws-ec2network-acl-details))
 (common-lisp:defun make-aws-ec2network-acl-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries associations vpc-id owner-id
                     network-acl-id is-default)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2network-acl-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-acl-id))
      (common-lisp:list
       (common-lisp:cons "NetworkAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-acl-entry common-lisp:nil
                       ((rule-number :initarg :rule-number :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2network-acl-entry-rule-number :initform
                         common-lisp:nil)
                        (rule-action :initarg :rule-action :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-rule-action
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-protocol :initform
                         common-lisp:nil)
                        (port-range :initarg :port-range :type
                         (common-lisp:or port-range-from-to common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-port-range
                         :initform common-lisp:nil)
                        (ipv6cidr-block :initarg :ipv6cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-ipv6cidr-block
                         :initform common-lisp:nil)
                        (icmp-type-code :initarg :icmp-type-code :type
                         (common-lisp:or icmp-type-code common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-icmp-type-code
                         :initform common-lisp:nil)
                        (egress :initarg :egress :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2network-acl-entry-egress :initform
                         common-lisp:nil)
                        (cidr-block :initarg :cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-acl-entry-cidr-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-acl-entry 'make-aws-ec2network-acl-entry))
 (common-lisp:defun make-aws-ec2network-acl-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-number rule-action protocol
                     port-range ipv6cidr-block icmp-type-code egress
                     cidr-block)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2network-acl-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icmp-type-code))
      (common-lisp:list
       (common-lisp:cons "IcmpTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "PortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-action))
      (common-lisp:list
       (common-lisp:cons "RuleAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-number))
      (common-lisp:list
       (common-lisp:cons "RuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-acl-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-acl-entry-list ()
   '(trivial-types:proper-list aws-ec2network-acl-entry))
 (common-lisp:defun |make-aws-ec2network-acl-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-acl-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-attachment common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-interface-attachment-status
                         :initform common-lisp:nil)
                        (instance-owner-id :initarg :instance-owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-attachment-instance-owner-id
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-attachment-instance-id
                         :initform common-lisp:nil)
                        (device-index :initarg :device-index :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2network-interface-attachment-device-index
                         :initform common-lisp:nil)
                        (delete-on-termination :initarg :delete-on-termination
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-attachment-delete-on-termination
                         :initform common-lisp:nil)
                        (attachment-id :initarg :attachment-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-attachment-attachment-id
                         :initform common-lisp:nil)
                        (attach-time :initarg :attach-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-attachment-attach-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-attachment
                    'make-aws-ec2network-interface-attachment))
 (common-lisp:defun make-aws-ec2network-interface-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status instance-owner-id instance-id
                     device-index delete-on-termination attachment-id
                     attach-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-index))
      (common-lisp:list
       (common-lisp:cons "DeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-details common-lisp:nil
                       ((public-ip :initarg :public-ip :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2network-interface-details-public-ip
                         :initform common-lisp:nil)
                        (public-dns-name :initarg :public-dns-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-details-public-dns-name
                         :initform common-lisp:nil)
                        (private-ip-addresses :initarg :private-ip-addresses
                         :type
                         (common-lisp:or
                          aws-ec2network-interface-private-ip-address-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-details-private-ip-addresses
                         :initform common-lisp:nil)
                        (ip-v6addresses :initarg :ip-v6addresses :type
                         (common-lisp:or
                          aws-ec2network-interface-ip-v6address-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-details-ip-v6addresses
                         :initform common-lisp:nil)
                        (source-dest-check :initarg :source-dest-check :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2network-interface-details-source-dest-check
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or
                          aws-ec2network-interface-security-group-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-details-security-groups
                         :initform common-lisp:nil)
                        (network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-details-network-interface-id
                         :initform common-lisp:nil)
                        (attachment :initarg :attachment :type
                         (common-lisp:or aws-ec2network-interface-attachment
                                         common-lisp:null)
                         :accessor %aws-ec2network-interface-details-attachment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-details
                    'make-aws-ec2network-interface-details))
 (common-lisp:defun make-aws-ec2network-interface-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-ip public-dns-name
                     private-ip-addresses ip-v6addresses source-dest-check
                     security-groups network-interface-id attachment)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-dest-check))
      (common-lisp:list
       (common-lisp:cons "SourceDestCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "IpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "PublicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-ip-v6address-detail
                       common-lisp:nil
                       ((ip-v6address :initarg :ip-v6address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-ip-v6address-detail-ip-v6address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-ip-v6address-detail
                    'make-aws-ec2network-interface-ip-v6address-detail))
 (common-lisp:defun make-aws-ec2network-interface-ip-v6address-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-v6address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-ip-v6address-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-v6address))
      (common-lisp:list
       (common-lisp:cons "IpV6Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-ip-v6address-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-ip-v6address-list ()
   '(trivial-types:proper-list aws-ec2network-interface-ip-v6address-detail))
 (common-lisp:defun |make-aws-ec2network-interface-ip-v6address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-ip-v6address-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-private-ip-address-detail
                       common-lisp:nil
                       ((private-dns-name :initarg :private-dns-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-private-ip-address-detail-private-dns-name
                         :initform common-lisp:nil)
                        (private-ip-address :initarg :private-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-private-ip-address-detail-private-ip-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-private-ip-address-detail
                    'make-aws-ec2network-interface-private-ip-address-detail))
 (common-lisp:defun make-aws-ec2network-interface-private-ip-address-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-dns-name private-ip-address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-private-ip-address-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-private-ip-address-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-private-ip-address-list ()
   '(trivial-types:proper-list
     aws-ec2network-interface-private-ip-address-detail))
 (common-lisp:defun |make-aws-ec2network-interface-private-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-private-ip-address-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2network-interface-security-group common-lisp:nil
                       ((group-id :initarg :group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-security-group-group-id
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2network-interface-security-group-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2network-interface-security-group
                    'make-aws-ec2network-interface-security-group))
 (common-lisp:defun make-aws-ec2network-interface-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-id group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2network-interface-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2network-interface-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2network-interface-security-group-list ()
   '(trivial-types:proper-list aws-ec2network-interface-security-group))
 (common-lisp:defun |make-aws-ec2network-interface-security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2network-interface-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2route-table-details common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2route-table-details-vpc-id :initform
                         common-lisp:nil)
                        (route-set :initarg :route-set :type
                         (common-lisp:or route-set-list common-lisp:null)
                         :accessor %aws-ec2route-table-details-route-set
                         :initform common-lisp:nil)
                        (route-table-id :initarg :route-table-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2route-table-details-route-table-id
                         :initform common-lisp:nil)
                        (propagating-vgw-set :initarg :propagating-vgw-set
                         :type
                         (common-lisp:or propagating-vgw-set-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2route-table-details-propagating-vgw-set
                         :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2route-table-details-owner-id
                         :initform common-lisp:nil)
                        (association-set :initarg :association-set :type
                         (common-lisp:or association-set-list common-lisp:null)
                         :accessor %aws-ec2route-table-details-association-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2route-table-details
                    'make-aws-ec2route-table-details))
 (common-lisp:defun make-aws-ec2route-table-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id route-set route-table-id
                     propagating-vgw-set owner-id association-set)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2route-table-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-set))
      (common-lisp:list
       (common-lisp:cons "AssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagating-vgw-set))
      (common-lisp:list
       (common-lisp:cons "PropagatingVgwSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-id))
      (common-lisp:list
       (common-lisp:cons "RouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-set))
      (common-lisp:list
       (common-lisp:cons "RouteSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2route-table-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-details common-lisp:nil
                       ((ip-permissions-egress :initarg :ip-permissions-egress
                         :type
                         (common-lisp:or
                          aws-ec2security-group-ip-permission-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2security-group-details-ip-permissions-egress
                         :initform common-lisp:nil)
                        (ip-permissions :initarg :ip-permissions :type
                         (common-lisp:or
                          aws-ec2security-group-ip-permission-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2security-group-details-ip-permissions
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-details-vpc-id
                         :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-details-owner-id
                         :initform common-lisp:nil)
                        (group-id :initarg :group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-details-group-id
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-details-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-details
                    'make-aws-ec2security-group-details))
 (common-lisp:defun make-aws-ec2security-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-permissions-egress ip-permissions
                     vpc-id owner-id group-id group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-permissions))
      (common-lisp:list
       (common-lisp:cons "IpPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ip-permissions-egress))
      (common-lisp:list
       (common-lisp:cons "IpPermissionsEgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-ip-permission common-lisp:nil
                       ((prefix-list-ids :initarg :prefix-list-ids :type
                         (common-lisp:or
                          aws-ec2security-group-prefix-list-id-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2security-group-ip-permission-prefix-list-ids
                         :initform common-lisp:nil)
                        (ipv6ranges :initarg :ipv6ranges :type
                         (common-lisp:or aws-ec2security-group-ipv6range-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2security-group-ip-permission-ipv6ranges
                         :initform common-lisp:nil)
                        (ip-ranges :initarg :ip-ranges :type
                         (common-lisp:or aws-ec2security-group-ip-range-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2security-group-ip-permission-ip-ranges
                         :initform common-lisp:nil)
                        (user-id-group-pairs :initarg :user-id-group-pairs
                         :type
                         (common-lisp:or
                          aws-ec2security-group-user-id-group-pair-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2security-group-ip-permission-user-id-group-pairs
                         :initform common-lisp:nil)
                        (to-port :initarg :to-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2security-group-ip-permission-to-port :initform
                         common-lisp:nil)
                        (from-port :initarg :from-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2security-group-ip-permission-from-port
                         :initform common-lisp:nil)
                        (ip-protocol :initarg :ip-protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-ip-permission-ip-protocol
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ip-permission
                    'make-aws-ec2security-group-ip-permission))
 (common-lisp:defun make-aws-ec2security-group-ip-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix-list-ids ipv6ranges ip-ranges
                     user-id-group-pairs to-port from-port ip-protocol)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-ip-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-protocol))
      (common-lisp:list
       (common-lisp:cons "IpProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id-group-pairs))
      (common-lisp:list
       (common-lisp:cons "UserIdGroupPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6ranges))
      (common-lisp:list
       (common-lisp:cons "Ipv6Ranges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ip-permission-list ()
   '(trivial-types:proper-list aws-ec2security-group-ip-permission))
 (common-lisp:defun |make-aws-ec2security-group-ip-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ip-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-ip-range common-lisp:nil
                       ((cidr-ip :initarg :cidr-ip :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-ip-range-cidr-ip
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ip-range
                    'make-aws-ec2security-group-ip-range))
 (common-lisp:defun make-aws-ec2security-group-ip-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-ip-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ip-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ip-range-list ()
   '(trivial-types:proper-list aws-ec2security-group-ip-range))
 (common-lisp:defun |make-aws-ec2security-group-ip-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-ipv6range common-lisp:nil
                       ((cidr-ipv6 :initarg :cidr-ipv6 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2security-group-ipv6range-cidr-ipv6
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-ipv6range
                    'make-aws-ec2security-group-ipv6range))
 (common-lisp:defun make-aws-ec2security-group-ipv6range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-ipv6)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-ipv6range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ipv6))
      (common-lisp:list
       (common-lisp:cons "CidrIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-ipv6range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-ipv6range-list ()
   '(trivial-types:proper-list aws-ec2security-group-ipv6range))
 (common-lisp:defun |make-aws-ec2security-group-ipv6range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-ipv6range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-prefix-list-id common-lisp:nil
                       ((prefix-list-id :initarg :prefix-list-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-prefix-list-id-prefix-list-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-prefix-list-id
                    'make-aws-ec2security-group-prefix-list-id))
 (common-lisp:defun make-aws-ec2security-group-prefix-list-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix-list-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-prefix-list-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-prefix-list-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-prefix-list-id-list ()
   '(trivial-types:proper-list aws-ec2security-group-prefix-list-id))
 (common-lisp:defun |make-aws-ec2security-group-prefix-list-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-prefix-list-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2security-group-user-id-group-pair common-lisp:nil
                       ((vpc-peering-connection-id :initarg
                         :vpc-peering-connection-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-vpc-peering-connection-id
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-vpc-id
                         :initform common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-user-id
                         :initform common-lisp:nil)
                        (peering-status :initarg :peering-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-peering-status
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-group-name
                         :initform common-lisp:nil)
                        (group-id :initarg :group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2security-group-user-id-group-pair-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2security-group-user-id-group-pair
                    'make-aws-ec2security-group-user-id-group-pair))
 (common-lisp:defun make-aws-ec2security-group-user-id-group-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-connection-id vpc-id user-id
                     peering-status group-name group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2security-group-user-id-group-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-status))
      (common-lisp:list
       (common-lisp:cons "PeeringStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2security-group-user-id-group-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2security-group-user-id-group-pair-list ()
   '(trivial-types:proper-list aws-ec2security-group-user-id-group-pair))
 (common-lisp:defun |make-aws-ec2security-group-user-id-group-pair-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2security-group-user-id-group-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2subnet-details common-lisp:nil
                       ((ipv6cidr-block-association-set :initarg
                         :ipv6cidr-block-association-set :type
                         (common-lisp:or ipv6cidr-block-association-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2subnet-details-ipv6cidr-block-association-set
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-vpc-id :initform
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-subnet-id :initform
                         common-lisp:nil)
                        (subnet-arn :initarg :subnet-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-subnet-arn :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-state :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-owner-id :initform
                         common-lisp:nil)
                        (map-public-ip-on-launch :initarg
                         :map-public-ip-on-launch :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2subnet-details-map-public-ip-on-launch
                         :initform common-lisp:nil)
                        (default-for-az :initarg :default-for-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2subnet-details-default-for-az :initform
                         common-lisp:nil)
                        (cidr-block :initarg :cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-cidr-block :initform
                         common-lisp:nil)
                        (available-ip-address-count :initarg
                         :available-ip-address-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2subnet-details-available-ip-address-count
                         :initform common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-availability-zone-id
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2subnet-details-availability-zone
                         :initform common-lisp:nil)
                        (assign-ipv6address-on-creation :initarg
                         :assign-ipv6address-on-creation :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2subnet-details-assign-ipv6address-on-creation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2subnet-details 'make-aws-ec2subnet-details))
 (common-lisp:defun make-aws-ec2subnet-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6cidr-block-association-set vpc-id
                     subnet-id subnet-arn state owner-id
                     map-public-ip-on-launch default-for-az cidr-block
                     available-ip-address-count availability-zone-id
                     availability-zone assign-ipv6address-on-creation)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2subnet-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assign-ipv6address-on-creation))
      (common-lisp:list
       (common-lisp:cons "AssignIpv6AddressOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-ip-address-count))
      (common-lisp:list
       (common-lisp:cons "AvailableIpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-for-az))
      (common-lisp:list
       (common-lisp:cons "DefaultForAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-public-ip-on-launch))
      (common-lisp:list
       (common-lisp:cons "MapPublicIpOnLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2subnet-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2transit-gateway-details common-lisp:nil
                       ((amazon-side-asn :initarg :amazon-side-asn :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2transit-gateway-details-amazon-side-asn
                         :initform common-lisp:nil)
                        (multicast-support :initarg :multicast-support :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-multicast-support
                         :initform common-lisp:nil)
                        (dns-support :initarg :dns-support :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2transit-gateway-details-dns-support
                         :initform common-lisp:nil)
                        (vpn-ecmp-support :initarg :vpn-ecmp-support :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-vpn-ecmp-support
                         :initform common-lisp:nil)
                        (propagation-default-route-table-id :initarg
                         :propagation-default-route-table-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-propagation-default-route-table-id
                         :initform common-lisp:nil)
                        (association-default-route-table-id :initarg
                         :association-default-route-table-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-association-default-route-table-id
                         :initform common-lisp:nil)
                        (transit-gateway-cidr-blocks :initarg
                         :transit-gateway-cidr-blocks :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-transit-gateway-cidr-blocks
                         :initform common-lisp:nil)
                        (default-route-table-association :initarg
                         :default-route-table-association :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-default-route-table-association
                         :initform common-lisp:nil)
                        (auto-accept-shared-attachments :initarg
                         :auto-accept-shared-attachments :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-auto-accept-shared-attachments
                         :initform common-lisp:nil)
                        (default-route-table-propagation :initarg
                         :default-route-table-propagation :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2transit-gateway-details-default-route-table-propagation
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2transit-gateway-details-description
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2transit-gateway-details-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2transit-gateway-details
                    'make-aws-ec2transit-gateway-details))
 (common-lisp:defun make-aws-ec2transit-gateway-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key amazon-side-asn multicast-support
                     dns-support vpn-ecmp-support
                     propagation-default-route-table-id
                     association-default-route-table-id
                     transit-gateway-cidr-blocks
                     default-route-table-association
                     auto-accept-shared-attachments
                     default-route-table-propagation description id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2transit-gateway-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-table-propagation))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteTablePropagation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-accept-shared-attachments))
      (common-lisp:list
       (common-lisp:cons "AutoAcceptSharedAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-route-table-association))
      (common-lisp:list
       (common-lisp:cons "DefaultRouteTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-default-route-table-id))
      (common-lisp:list
       (common-lisp:cons "AssociationDefaultRouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'propagation-default-route-table-id))
      (common-lisp:list
       (common-lisp:cons "PropagationDefaultRouteTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-ecmp-support))
      (common-lisp:list
       (common-lisp:cons "VpnEcmpSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-support))
      (common-lisp:list
       (common-lisp:cons "DnsSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-support))
      (common-lisp:list
       (common-lisp:cons "MulticastSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-side-asn))
      (common-lisp:list
       (common-lisp:cons "AmazonSideAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2transit-gateway-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2volume-attachment common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-attachment-status :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-attachment-instance-id
                         :initform common-lisp:nil)
                        (delete-on-termination :initarg :delete-on-termination
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-ec2volume-attachment-delete-on-termination
                         :initform common-lisp:nil)
                        (attach-time :initarg :attach-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-attachment-attach-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2volume-attachment 'make-aws-ec2volume-attachment))
 (common-lisp:defun make-aws-ec2volume-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status instance-id delete-on-termination
                     attach-time)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2volume-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-time))
      (common-lisp:list
       (common-lisp:cons "AttachTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2volume-attachment-list ()
   '(trivial-types:proper-list aws-ec2volume-attachment))
 (common-lisp:defun |make-aws-ec2volume-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2volume-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2volume-details common-lisp:nil
                       ((volume-scan-status :initarg :volume-scan-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-volume-scan-status
                         :initform common-lisp:nil)
                        (volume-type :initarg :volume-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-volume-type :initform
                         common-lisp:nil)
                        (volume-id :initarg :volume-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-volume-id :initform
                         common-lisp:nil)
                        (attachments :initarg :attachments :type
                         (common-lisp:or aws-ec2volume-attachment-list
                                         common-lisp:null)
                         :accessor %aws-ec2volume-details-attachments :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-kms-key-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-status :initform
                         common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-snapshot-id :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2volume-details-size :initform common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2volume-details-encrypted :initform
                         common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-device-name :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2volume-details-create-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2volume-details 'make-aws-ec2volume-details))
 (common-lisp:defun make-aws-ec2volume-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-scan-status volume-type volume-id
                     attachments kms-key-id status snapshot-id size encrypted
                     device-name create-time)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2volume-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-scan-status))
      (common-lisp:list
       (common-lisp:cons "VolumeScanStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2volume-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-details common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpc-details-state :initform
                         common-lisp:nil)
                        (dhcp-options-id :initarg :dhcp-options-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpc-details-dhcp-options-id
                         :initform common-lisp:nil)
                        (ipv6cidr-block-association-set :initarg
                         :ipv6cidr-block-association-set :type
                         (common-lisp:or ipv6cidr-block-association-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-details-ipv6cidr-block-association-set
                         :initform common-lisp:nil)
                        (cidr-block-association-set :initarg
                         :cidr-block-association-set :type
                         (common-lisp:or cidr-block-association-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-details-cidr-block-association-set
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-details 'make-aws-ec2vpc-details))
 (common-lisp:defun make-aws-ec2vpc-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state dhcp-options-id
                     ipv6cidr-block-association-set cidr-block-association-set)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ec2vpc-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ipv6cidr-block-association-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockAssociationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dhcp-options-id))
      (common-lisp:list
       (common-lisp:cons "DhcpOptionsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ec2vpc-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-endpoint-service-details common-lisp:nil
                       ((service-type :initarg :service-type :type
                         (common-lisp:or
                          aws-ec2vpc-endpoint-service-service-type-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-service-type
                         :initform common-lisp:nil)
                        (service-state :initarg :service-state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-service-state
                         :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-service-name
                         :initform common-lisp:nil)
                        (service-id :initarg :service-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-service-id
                         :initform common-lisp:nil)
                        (private-dns-name :initarg :private-dns-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-private-dns-name
                         :initform common-lisp:nil)
                        (network-load-balancer-arns :initarg
                         :network-load-balancer-arns :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-network-load-balancer-arns
                         :initform common-lisp:nil)
                        (gateway-load-balancer-arns :initarg
                         :gateway-load-balancer-arns :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-gateway-load-balancer-arns
                         :initform common-lisp:nil)
                        (manages-vpc-endpoints :initarg :manages-vpc-endpoints
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-manages-vpc-endpoints
                         :initform common-lisp:nil)
                        (base-endpoint-dns-names :initarg
                         :base-endpoint-dns-names :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-base-endpoint-dns-names
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-availability-zones
                         :initform common-lisp:nil)
                        (acceptance-required :initarg :acceptance-required
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-details-acceptance-required
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-endpoint-service-details
                    'make-aws-ec2vpc-endpoint-service-details))
 (common-lisp:defun make-aws-ec2vpc-endpoint-service-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-type service-state service-name
                     service-id private-dns-name network-load-balancer-arns
                     gateway-load-balancer-arns manages-vpc-endpoints
                     base-endpoint-dns-names availability-zones
                     acceptance-required)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpc-endpoint-service-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceptance-required))
      (common-lisp:list
       (common-lisp:cons "AcceptanceRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-endpoint-dns-names))
      (common-lisp:list
       (common-lisp:cons "BaseEndpointDnsNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manages-vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "ManagesVpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "GatewayLoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-load-balancer-arns))
      (common-lisp:list
       (common-lisp:cons "NetworkLoadBalancerArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "PrivateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-state))
      (common-lisp:list
       (common-lisp:cons "ServiceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-endpoint-service-service-type-details
                       common-lisp:nil
                       ((service-type :initarg :service-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-endpoint-service-service-type-details-service-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-endpoint-service-service-type-details
                    'make-aws-ec2vpc-endpoint-service-service-type-details))
 (common-lisp:defun make-aws-ec2vpc-endpoint-service-service-type-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpc-endpoint-service-service-type-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-endpoint-service-service-type-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpc-endpoint-service-service-type-list ()
   '(trivial-types:proper-list
     aws-ec2vpc-endpoint-service-service-type-details))
 (common-lisp:defun |make-aws-ec2vpc-endpoint-service-service-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpc-endpoint-service-service-type-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-peering-connection-details common-lisp:nil
                       ((vpc-peering-connection-id :initarg
                         :vpc-peering-connection-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-details-vpc-peering-connection-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or
                          aws-ec2vpc-peering-connection-status-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-details-status
                         :initform common-lisp:nil)
                        (requester-vpc-info :initarg :requester-vpc-info :type
                         (common-lisp:or
                          aws-ec2vpc-peering-connection-vpc-info-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-details-requester-vpc-info
                         :initform common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-details-expiration-time
                         :initform common-lisp:nil)
                        (accepter-vpc-info :initarg :accepter-vpc-info :type
                         (common-lisp:or
                          aws-ec2vpc-peering-connection-vpc-info-details
                          common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-details-accepter-vpc-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-details
                    'make-aws-ec2vpc-peering-connection-details))
 (common-lisp:defun make-aws-ec2vpc-peering-connection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-connection-id status
                     requester-vpc-info expiration-time accepter-vpc-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpc-peering-connection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accepter-vpc-info))
      (common-lisp:list
       (common-lisp:cons "AccepterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester-vpc-info))
      (common-lisp:list
       (common-lisp:cons "RequesterVpcInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-peering-connection-status-details
                       common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-status-details-message
                         :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-status-details-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-status-details
                    'make-aws-ec2vpc-peering-connection-status-details))
 (common-lisp:defun make-aws-ec2vpc-peering-connection-status-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpc-peering-connection-status-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpc-peering-connection-vpc-info-details
                       common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-vpc-id
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-region
                         :initform common-lisp:nil)
                        (peering-options :initarg :peering-options :type
                         (common-lisp:or vpc-info-peering-options-details
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-peering-options
                         :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-owner-id
                         :initform common-lisp:nil)
                        (ipv6cidr-block-set :initarg :ipv6cidr-block-set :type
                         (common-lisp:or vpc-info-ipv6cidr-block-set-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-ipv6cidr-block-set
                         :initform common-lisp:nil)
                        (cidr-block-set :initarg :cidr-block-set :type
                         (common-lisp:or vpc-info-cidr-block-set-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-cidr-block-set
                         :initform common-lisp:nil)
                        (cidr-block :initarg :cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpc-peering-connection-vpc-info-details-cidr-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpc-peering-connection-vpc-info-details
                    'make-aws-ec2vpc-peering-connection-vpc-info-details))
 (common-lisp:defun make-aws-ec2vpc-peering-connection-vpc-info-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id region peering-options owner-id
                     ipv6cidr-block-set cidr-block-set cidr-block)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpc-peering-connection-vpc-info-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-set))
      (common-lisp:list
       (common-lisp:cons "CidrBlockSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block-set))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlockSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-options))
      (common-lisp:list
       (common-lisp:cons "PeeringOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpc-peering-connection-vpc-info-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpn-connection-details common-lisp:nil
                       ((transit-gateway-id :initarg :transit-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-details-transit-gateway-id
                         :initform common-lisp:nil)
                        (routes :initarg :routes :type
                         (common-lisp:or aws-ec2vpn-connection-routes-list
                                         common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-routes
                         :initform common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or aws-ec2vpn-connection-options-details
                                         common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-options
                         :initform common-lisp:nil)
                        (vgw-telemetry :initarg :vgw-telemetry :type
                         (common-lisp:or
                          aws-ec2vpn-connection-vgw-telemetry-list
                          common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-vgw-telemetry
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-category
                         :initform common-lisp:nil)
                        (vpn-gateway-id :initarg :vpn-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-details-vpn-gateway-id
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-type
                         :initform common-lisp:nil)
                        (customer-gateway-configuration :initarg
                         :customer-gateway-configuration :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-details-customer-gateway-configuration
                         :initform common-lisp:nil)
                        (customer-gateway-id :initarg :customer-gateway-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-details-customer-gateway-id
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpn-connection-details-state
                         :initform common-lisp:nil)
                        (vpn-connection-id :initarg :vpn-connection-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-details-vpn-connection-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-details
                    'make-aws-ec2vpn-connection-details))
 (common-lisp:defun make-aws-ec2vpn-connection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transit-gateway-id routes options
                     vgw-telemetry category vpn-gateway-id type
                     customer-gateway-configuration customer-gateway-id state
                     vpn-connection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpn-connection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-configuration))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-gateway-id))
      (common-lisp:list
       (common-lisp:cons "VpnGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vgw-telemetry))
      (common-lisp:list
       (common-lisp:cons "VgwTelemetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "Routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpn-connection-options-details common-lisp:nil
                       ((tunnel-options :initarg :tunnel-options :type
                         (common-lisp:or
                          aws-ec2vpn-connection-options-tunnel-options-list
                          common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-details-tunnel-options
                         :initform common-lisp:nil)
                        (static-routes-only :initarg :static-routes-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ec2vpn-connection-options-details-static-routes-only
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-options-details
                    'make-aws-ec2vpn-connection-options-details))
 (common-lisp:defun make-aws-ec2vpn-connection-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tunnel-options static-routes-only)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpn-connection-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-routes-only))
      (common-lisp:list
       (common-lisp:cons "StaticRoutesOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tunnel-options))
      (common-lisp:list
       (common-lisp:cons "TunnelOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpn-connection-options-tunnel-options-details
                       common-lisp:nil
                       ((tunnel-inside-cidr :initarg :tunnel-inside-cidr :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-tunnel-inside-cidr
                         :initform common-lisp:nil)
                        (replay-window-size :initarg :replay-window-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-replay-window-size
                         :initform common-lisp:nil)
                        (rekey-margin-time-seconds :initarg
                         :rekey-margin-time-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-rekey-margin-time-seconds
                         :initform common-lisp:nil)
                        (rekey-fuzz-percentage :initarg :rekey-fuzz-percentage
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-rekey-fuzz-percentage
                         :initform common-lisp:nil)
                        (pre-shared-key :initarg :pre-shared-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-pre-shared-key
                         :initform common-lisp:nil)
                        (phase2lifetime-seconds :initarg
                         :phase2lifetime-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase2lifetime-seconds
                         :initform common-lisp:nil)
                        (phase2integrity-algorithms :initarg
                         :phase2integrity-algorithms :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase2integrity-algorithms
                         :initform common-lisp:nil)
                        (phase2encryption-algorithms :initarg
                         :phase2encryption-algorithms :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase2encryption-algorithms
                         :initform common-lisp:nil)
                        (phase2dh-group-numbers :initarg
                         :phase2dh-group-numbers :type
                         (common-lisp:or integer-list common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase2dh-group-numbers
                         :initform common-lisp:nil)
                        (phase1lifetime-seconds :initarg
                         :phase1lifetime-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase1lifetime-seconds
                         :initform common-lisp:nil)
                        (phase1integrity-algorithms :initarg
                         :phase1integrity-algorithms :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase1integrity-algorithms
                         :initform common-lisp:nil)
                        (phase1encryption-algorithms :initarg
                         :phase1encryption-algorithms :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase1encryption-algorithms
                         :initform common-lisp:nil)
                        (phase1dh-group-numbers :initarg
                         :phase1dh-group-numbers :type
                         (common-lisp:or integer-list common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-phase1dh-group-numbers
                         :initform common-lisp:nil)
                        (outside-ip-address :initarg :outside-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-outside-ip-address
                         :initform common-lisp:nil)
                        (ike-versions :initarg :ike-versions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-ike-versions
                         :initform common-lisp:nil)
                        (dpd-timeout-seconds :initarg :dpd-timeout-seconds
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-options-tunnel-options-details-dpd-timeout-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-options-tunnel-options-details
                    'make-aws-ec2vpn-connection-options-tunnel-options-details))
 (common-lisp:defun make-aws-ec2vpn-connection-options-tunnel-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tunnel-inside-cidr replay-window-size
                     rekey-margin-time-seconds rekey-fuzz-percentage
                     pre-shared-key phase2lifetime-seconds
                     phase2integrity-algorithms phase2encryption-algorithms
                     phase2dh-group-numbers phase1lifetime-seconds
                     phase1integrity-algorithms phase1encryption-algorithms
                     phase1dh-group-numbers outside-ip-address ike-versions
                     dpd-timeout-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpn-connection-options-tunnel-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpd-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "DpdTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ike-versions))
      (common-lisp:list
       (common-lisp:cons "IkeVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outside-ip-address))
      (common-lisp:list
       (common-lisp:cons "OutsideIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1dh-group-numbers))
      (common-lisp:list
       (common-lisp:cons "Phase1DhGroupNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase1EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1integrity-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase1IntegrityAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase1lifetime-seconds))
      (common-lisp:list
       (common-lisp:cons "Phase1LifetimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2dh-group-numbers))
      (common-lisp:list
       (common-lisp:cons "Phase2DhGroupNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase2EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2integrity-algorithms))
      (common-lisp:list
       (common-lisp:cons "Phase2IntegrityAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'phase2lifetime-seconds))
      (common-lisp:list
       (common-lisp:cons "Phase2LifetimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-shared-key))
      (common-lisp:list
       (common-lisp:cons "PreSharedKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rekey-fuzz-percentage))
      (common-lisp:list
       (common-lisp:cons "RekeyFuzzPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rekey-margin-time-seconds))
      (common-lisp:list
       (common-lisp:cons "RekeyMarginTimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replay-window-size))
      (common-lisp:list
       (common-lisp:cons "ReplayWindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tunnel-inside-cidr))
      (common-lisp:list
       (common-lisp:cons "TunnelInsideCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-options-tunnel-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-options-tunnel-options-list ()
   '(trivial-types:proper-list
     aws-ec2vpn-connection-options-tunnel-options-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-options-tunnel-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-options-tunnel-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpn-connection-routes-details common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ec2vpn-connection-routes-details-state
                         :initform common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-routes-details-destination-cidr-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-routes-details
                    'make-aws-ec2vpn-connection-routes-details))
 (common-lisp:defun make-aws-ec2vpn-connection-routes-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state destination-cidr-block)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpn-connection-routes-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-routes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-routes-list ()
   '(trivial-types:proper-list aws-ec2vpn-connection-routes-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-routes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-routes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ec2vpn-connection-vgw-telemetry-details
                       common-lisp:nil
                       ((status-message :initarg :status-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-status-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-status
                         :initform common-lisp:nil)
                        (outside-ip-address :initarg :outside-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-outside-ip-address
                         :initform common-lisp:nil)
                        (last-status-change :initarg :last-status-change :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-last-status-change
                         :initform common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-certificate-arn
                         :initform common-lisp:nil)
                        (accepted-route-count :initarg :accepted-route-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ec2vpn-connection-vgw-telemetry-details-accepted-route-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ec2vpn-connection-vgw-telemetry-details
                    'make-aws-ec2vpn-connection-vgw-telemetry-details))
 (common-lisp:defun make-aws-ec2vpn-connection-vgw-telemetry-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status outside-ip-address
                     last-status-change certificate-arn accepted-route-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ec2vpn-connection-vgw-telemetry-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accepted-route-count))
      (common-lisp:list
       (common-lisp:cons "AcceptedRouteCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-change))
      (common-lisp:list
       (common-lisp:cons "LastStatusChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outside-ip-address))
      (common-lisp:list
       (common-lisp:cons "OutsideIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ec2vpn-connection-vgw-telemetry-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ec2vpn-connection-vgw-telemetry-list ()
   '(trivial-types:proper-list aws-ec2vpn-connection-vgw-telemetry-details))
 (common-lisp:defun |make-aws-ec2vpn-connection-vgw-telemetry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ec2vpn-connection-vgw-telemetry-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecr-container-image-details common-lisp:nil
                       ((image-published-at :initarg :image-published-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-container-image-details-image-published-at
                         :initform common-lisp:nil)
                        (image-tags :initarg :image-tags :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-ecr-container-image-details-image-tags
                         :initform common-lisp:nil)
                        (image-digest :initarg :image-digest :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-container-image-details-image-digest
                         :initform common-lisp:nil)
                        (architecture :initarg :architecture :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-container-image-details-architecture
                         :initform common-lisp:nil)
                        (repository-name :initarg :repository-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-container-image-details-repository-name
                         :initform common-lisp:nil)
                        (registry-id :initarg :registry-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecr-container-image-details-registry-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-container-image-details
                    'make-aws-ecr-container-image-details))
 (common-lisp:defun make-aws-ecr-container-image-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-published-at image-tags
                     image-digest architecture repository-name registry-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecr-container-image-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "ImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-tags))
      (common-lisp:list
       (common-lisp:cons "ImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-published-at))
      (common-lisp:list
       (common-lisp:cons "ImagePublishedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-container-image-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecr-repository-details common-lisp:nil
                       ((repository-policy-text :initarg
                         :repository-policy-text :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-repository-details-repository-policy-text
                         :initform common-lisp:nil)
                        (repository-name :initarg :repository-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecr-repository-details-repository-name
                         :initform common-lisp:nil)
                        (lifecycle-policy :initarg :lifecycle-policy :type
                         (common-lisp:or
                          aws-ecr-repository-lifecycle-policy-details
                          common-lisp:null)
                         :accessor %aws-ecr-repository-details-lifecycle-policy
                         :initform common-lisp:nil)
                        (image-tag-mutability :initarg :image-tag-mutability
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-repository-details-image-tag-mutability
                         :initform common-lisp:nil)
                        (image-scanning-configuration :initarg
                         :image-scanning-configuration :type
                         (common-lisp:or
                          aws-ecr-repository-image-scanning-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecr-repository-details-image-scanning-configuration
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecr-repository-details-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-details
                    'make-aws-ecr-repository-details))
 (common-lisp:defun make-aws-ecr-repository-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-policy-text repository-name
                     lifecycle-policy image-tag-mutability
                     image-scanning-configuration arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecr-repository-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-scanning-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageScanningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-tag-mutability))
      (common-lisp:list
       (common-lisp:cons "ImageTagMutability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle-policy))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-policy-text))
      (common-lisp:list
       (common-lisp:cons "RepositoryPolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecr-repository-image-scanning-configuration-details
                       common-lisp:nil
                       ((scan-on-push :initarg :scan-on-push :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecr-repository-image-scanning-configuration-details-scan-on-push
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-image-scanning-configuration-details
                    'make-aws-ecr-repository-image-scanning-configuration-details))
 (common-lisp:defun make-aws-ecr-repository-image-scanning-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scan-on-push)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecr-repository-image-scanning-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-on-push))
      (common-lisp:list
       (common-lisp:cons "ScanOnPush"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-image-scanning-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecr-repository-lifecycle-policy-details
                       common-lisp:nil
                       ((registry-id :initarg :registry-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-repository-lifecycle-policy-details-registry-id
                         :initform common-lisp:nil)
                        (lifecycle-policy-text :initarg :lifecycle-policy-text
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecr-repository-lifecycle-policy-details-lifecycle-policy-text
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecr-repository-lifecycle-policy-details
                    'make-aws-ecr-repository-lifecycle-policy-details))
 (common-lisp:defun make-aws-ecr-repository-lifecycle-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registry-id lifecycle-policy-text)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecr-repository-lifecycle-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-policy-text))
      (common-lisp:list
       (common-lisp:cons "LifecyclePolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecr-repository-lifecycle-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-cluster-cluster-settings-details common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-cluster-cluster-settings-details-value
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-cluster-cluster-settings-details-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-cluster-settings-details
                    'make-aws-ecs-cluster-cluster-settings-details))
 (common-lisp:defun make-aws-ecs-cluster-cluster-settings-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-cluster-cluster-settings-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-cluster-settings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-cluster-cluster-settings-list ()
   '(trivial-types:proper-list aws-ecs-cluster-cluster-settings-details))
 (common-lisp:defun |make-aws-ecs-cluster-cluster-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-cluster-cluster-settings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-cluster-configuration-details common-lisp:nil
                       ((execute-command-configuration :initarg
                         :execute-command-configuration :type
                         (common-lisp:or
                          aws-ecs-cluster-configuration-execute-command-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-cluster-configuration-details-execute-command-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-configuration-details
                    'make-aws-ecs-cluster-configuration-details))
 (common-lisp:defun make-aws-ecs-cluster-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execute-command-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-cluster-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-command-configuration))
      (common-lisp:list
       (common-lisp:cons "ExecuteCommandConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-cluster-configuration-execute-command-configuration-details
  common-lisp:nil
  ((logging :initarg :logging :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-details-logging
    :initform common-lisp:nil)
   (log-configuration :initarg :log-configuration :type
    (common-lisp:or
     aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
     common-lisp:null)
    :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-details-log-configuration
    :initform common-lisp:nil)
   (kms-key-id :initarg :kms-key-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-details-kms-key-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-cluster-configuration-execute-command-configuration-details
   'make-aws-ecs-cluster-configuration-execute-command-configuration-details))
 (common-lisp:defun make-aws-ecs-cluster-configuration-execute-command-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging log-configuration kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-cluster-configuration-execute-command-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
  common-lisp:nil
  ((s3key-prefix :initarg :s3key-prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-s3key-prefix
    :initform common-lisp:nil)
   (s3encryption-enabled :initarg :s3encryption-enabled :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-s3encryption-enabled
    :initform common-lisp:nil)
   (s3bucket-name :initarg :s3bucket-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-s3bucket-name
    :initform common-lisp:nil)
   (cloud-watch-log-group-name :initarg :cloud-watch-log-group-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-cloud-watch-log-group-name
    :initform common-lisp:nil)
   (cloud-watch-encryption-enabled :initarg :cloud-watch-encryption-enabled
    :type (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details-cloud-watch-encryption-enabled
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
   'make-aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
 (common-lisp:defun make-aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key-prefix s3encryption-enabled
                     s3bucket-name cloud-watch-log-group-name
                     cloud-watch-encryption-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "S3EncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-configuration-execute-command-configuration-log-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-cluster-default-capacity-provider-strategy-details common-lisp:nil
  ((weight :initarg :weight :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-cluster-default-capacity-provider-strategy-details-weight
    :initform common-lisp:nil)
   (capacity-provider :initarg :capacity-provider :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-cluster-default-capacity-provider-strategy-details-capacity-provider
    :initform common-lisp:nil)
   (base :initarg :base :type (common-lisp:or integer common-lisp:null)
    :accessor %aws-ecs-cluster-default-capacity-provider-strategy-details-base
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-default-capacity-provider-strategy-details
                    'make-aws-ecs-cluster-default-capacity-provider-strategy-details))
 (common-lisp:defun make-aws-ecs-cluster-default-capacity-provider-strategy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight capacity-provider base)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-cluster-default-capacity-provider-strategy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "CapacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-default-capacity-provider-strategy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-cluster-default-capacity-provider-strategy-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-cluster-default-capacity-provider-strategy-details))
 (common-lisp:defun |make-aws-ecs-cluster-default-capacity-provider-strategy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-cluster-default-capacity-provider-strategy-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-cluster-details common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-cluster-details-status :initform
                         common-lisp:nil)
                        (running-tasks-count :initarg :running-tasks-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %aws-ecs-cluster-details-running-tasks-count
                         :initform common-lisp:nil)
                        (registered-container-instances-count :initarg
                         :registered-container-instances-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-cluster-details-registered-container-instances-count
                         :initform common-lisp:nil)
                        (cluster-name :initarg :cluster-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-cluster-details-cluster-name
                         :initform common-lisp:nil)
                        (default-capacity-provider-strategy :initarg
                         :default-capacity-provider-strategy :type
                         (common-lisp:or
                          aws-ecs-cluster-default-capacity-provider-strategy-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-cluster-details-default-capacity-provider-strategy
                         :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or aws-ecs-cluster-configuration-details
                                         common-lisp:null)
                         :accessor %aws-ecs-cluster-details-configuration
                         :initform common-lisp:nil)
                        (cluster-settings :initarg :cluster-settings :type
                         (common-lisp:or aws-ecs-cluster-cluster-settings-list
                                         common-lisp:null)
                         :accessor %aws-ecs-cluster-details-cluster-settings
                         :initform common-lisp:nil)
                        (capacity-providers :initarg :capacity-providers :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-ecs-cluster-details-capacity-providers
                         :initform common-lisp:nil)
                        (active-services-count :initarg :active-services-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ecs-cluster-details-active-services-count
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-cluster-details-cluster-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-cluster-details 'make-aws-ecs-cluster-details))
 (common-lisp:defun make-aws-ecs-cluster-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status running-tasks-count
                     registered-container-instances-count cluster-name
                     default-capacity-provider-strategy configuration
                     cluster-settings capacity-providers active-services-count
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecs-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-services-count))
      (common-lisp:list
       (common-lisp:cons "ActiveServicesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-providers))
      (common-lisp:list
       (common-lisp:cons "CapacityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-settings))
      (common-lisp:list
       (common-lisp:cons "ClusterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "DefaultCapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-name))
      (common-lisp:list
       (common-lisp:cons "ClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-container-instances-count))
      (common-lisp:list
       (common-lisp:cons "RegisteredContainerInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-tasks-count))
      (common-lisp:list
       (common-lisp:cons "RunningTasksCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-container-details common-lisp:nil
                       ((privileged :initarg :privileged :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-container-details-privileged :initform
                         common-lisp:nil)
                        (mount-points :initarg :mount-points :type
                         (common-lisp:or aws-mount-point-list common-lisp:null)
                         :accessor %aws-ecs-container-details-mount-points
                         :initform common-lisp:nil)
                        (image :initarg :image :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-container-details-image :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-container-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-container-details
                    'make-aws-ecs-container-details))
 (common-lisp:defun make-aws-ecs-container-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key privileged mount-points image name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecs-container-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "MountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-container-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-container-details-list ()
   '(trivial-types:proper-list aws-ecs-container-details))
 (common-lisp:defun |make-aws-ecs-container-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-container-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-capacity-provider-strategy-details
                       common-lisp:nil
                       ((weight :initarg :weight :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-capacity-provider-strategy-details-weight
                         :initform common-lisp:nil)
                        (capacity-provider :initarg :capacity-provider :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-capacity-provider-strategy-details-capacity-provider
                         :initform common-lisp:nil)
                        (base :initarg :base :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-capacity-provider-strategy-details-base
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-capacity-provider-strategy-details
                    'make-aws-ecs-service-capacity-provider-strategy-details))
 (common-lisp:defun make-aws-ecs-service-capacity-provider-strategy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight capacity-provider base)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-capacity-provider-strategy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base))
      (common-lisp:list
       (common-lisp:cons "Base"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity-provider))
      (common-lisp:list
       (common-lisp:cons "CapacityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-capacity-provider-strategy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-capacity-provider-strategy-list ()
   '(trivial-types:proper-list
     aws-ecs-service-capacity-provider-strategy-details))
 (common-lisp:defun |make-aws-ecs-service-capacity-provider-strategy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-capacity-provider-strategy-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
  common-lisp:nil
  ((rollback :initarg :rollback :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details-rollback
    :initform common-lisp:nil)
   (enable :initarg :enable :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details-enable
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
   'make-aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
 (common-lisp:defun make-aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollback enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback))
      (common-lisp:list
       (common-lisp:cons "Rollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-deployment-configuration-details
                       common-lisp:nil
                       ((minimum-healthy-percent :initarg
                         :minimum-healthy-percent :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-deployment-configuration-details-minimum-healthy-percent
                         :initform common-lisp:nil)
                        (maximum-percent :initarg :maximum-percent :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-deployment-configuration-details-maximum-percent
                         :initform common-lisp:nil)
                        (deployment-circuit-breaker :initarg
                         :deployment-circuit-breaker :type
                         (common-lisp:or
                          aws-ecs-service-deployment-configuration-deployment-circuit-breaker-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-deployment-configuration-details-deployment-circuit-breaker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-deployment-configuration-details
                    'make-aws-ecs-service-deployment-configuration-details))
 (common-lisp:defun make-aws-ecs-service-deployment-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-healthy-percent maximum-percent
                     deployment-circuit-breaker)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-deployment-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-circuit-breaker))
      (common-lisp:list
       (common-lisp:cons "DeploymentCircuitBreaker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-percent))
      (common-lisp:list
       (common-lisp:cons "MaximumPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-healthy-percent))
      (common-lisp:list
       (common-lisp:cons "MinimumHealthyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-deployment-controller-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-deployment-controller-details-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-deployment-controller-details
                    'make-aws-ecs-service-deployment-controller-details))
 (common-lisp:defun make-aws-ecs-service-deployment-controller-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-deployment-controller-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-deployment-controller-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-details common-lisp:nil
                       ((task-definition :initarg :task-definition :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-task-definition
                         :initform common-lisp:nil)
                        (service-registries :initarg :service-registries :type
                         (common-lisp:or
                          aws-ecs-service-service-registries-list
                          common-lisp:null)
                         :accessor %aws-ecs-service-details-service-registries
                         :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-service-name
                         :initform common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-service-arn
                         :initform common-lisp:nil)
                        (scheduling-strategy :initarg :scheduling-strategy
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-scheduling-strategy
                         :initform common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-role :initform
                         common-lisp:nil)
                        (propagate-tags :initarg :propagate-tags :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-propagate-tags
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-platform-version
                         :initform common-lisp:nil)
                        (placement-strategies :initarg :placement-strategies
                         :type
                         (common-lisp:or
                          aws-ecs-service-placement-strategies-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-placement-strategies
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :type
                         (common-lisp:or
                          aws-ecs-service-placement-constraints-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-placement-constraints
                         :initform common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or
                          aws-ecs-service-network-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-network-configuration
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-name :initform
                         common-lisp:nil)
                        (load-balancers :initarg :load-balancers :type
                         (common-lisp:or aws-ecs-service-load-balancers-list
                                         common-lisp:null)
                         :accessor %aws-ecs-service-details-load-balancers
                         :initform common-lisp:nil)
                        (launch-type :initarg :launch-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-launch-type
                         :initform common-lisp:nil)
                        (health-check-grace-period-seconds :initarg
                         :health-check-grace-period-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-details-health-check-grace-period-seconds
                         :initform common-lisp:nil)
                        (enable-execute-command :initarg
                         :enable-execute-command :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-service-details-enable-execute-command
                         :initform common-lisp:nil)
                        (enable-ecs-managed-tags :initarg
                         :enable-ecs-managed-tags :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-service-details-enable-ecs-managed-tags
                         :initform common-lisp:nil)
                        (desired-count :initarg :desired-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-details-desired-count :initform
                         common-lisp:nil)
                        (deployment-controller :initarg :deployment-controller
                         :type
                         (common-lisp:or
                          aws-ecs-service-deployment-controller-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-deployment-controller
                         :initform common-lisp:nil)
                        (deployment-configuration :initarg
                         :deployment-configuration :type
                         (common-lisp:or
                          aws-ecs-service-deployment-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-deployment-configuration
                         :initform common-lisp:nil)
                        (cluster :initarg :cluster :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-service-details-cluster :initform
                         common-lisp:nil)
                        (capacity-provider-strategy :initarg
                         :capacity-provider-strategy :type
                         (common-lisp:or
                          aws-ecs-service-capacity-provider-strategy-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-details-capacity-provider-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-details 'make-aws-ecs-service-details))
 (common-lisp:defun make-aws-ecs-service-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition service-registries
                     service-name service-arn scheduling-strategy role
                     propagate-tags platform-version placement-strategies
                     placement-constraints network-configuration name
                     load-balancers launch-type
                     health-check-grace-period-seconds enable-execute-command
                     enable-ecs-managed-tags desired-count
                     deployment-controller deployment-configuration cluster
                     capacity-provider-strategy)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecs-service-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capacity-provider-strategy))
      (common-lisp:list
       (common-lisp:cons "CapacityProviderStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster))
      (common-lisp:list
       (common-lisp:cons "Cluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-configuration))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-controller))
      (common-lisp:list
       (common-lisp:cons "DeploymentController"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-count))
      (common-lisp:list
       (common-lisp:cons "DesiredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-ecs-managed-tags))
      (common-lisp:list
       (common-lisp:cons "EnableEcsManagedTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-execute-command))
      (common-lisp:list
       (common-lisp:cons "EnableExecuteCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-grace-period-seconds))
      (common-lisp:list
       (common-lisp:cons "HealthCheckGracePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-type))
      (common-lisp:list
       (common-lisp:cons "LaunchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "LoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-strategies))
      (common-lisp:list
       (common-lisp:cons "PlacementStrategies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'propagate-tags))
      (common-lisp:list
       (common-lisp:cons "PropagateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduling-strategy))
      (common-lisp:list
       (common-lisp:cons "SchedulingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-registries))
      (common-lisp:list
       (common-lisp:cons "ServiceRegistries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition))
      (common-lisp:list
       (common-lisp:cons "TaskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-load-balancers-details common-lisp:nil
                       ((target-group-arn :initarg :target-group-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-load-balancers-details-target-group-arn
                         :initform common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-load-balancers-details-load-balancer-name
                         :initform common-lisp:nil)
                        (container-port :initarg :container-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-load-balancers-details-container-port
                         :initform common-lisp:nil)
                        (container-name :initarg :container-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-load-balancers-details-container-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-load-balancers-details
                    'make-aws-ecs-service-load-balancers-details))
 (common-lisp:defun make-aws-ecs-service-load-balancers-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-group-arn load-balancer-name
                     container-port container-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-load-balancers-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-load-balancers-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-load-balancers-list ()
   '(trivial-types:proper-list aws-ecs-service-load-balancers-details))
 (common-lisp:defun |make-aws-ecs-service-load-balancers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-load-balancers-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-service-network-configuration-aws-vpc-configuration-details
  common-lisp:nil
  ((subnets :initarg :subnets :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-service-network-configuration-aws-vpc-configuration-details-subnets
    :initform common-lisp:nil)
   (security-groups :initarg :security-groups :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-service-network-configuration-aws-vpc-configuration-details-security-groups
    :initform common-lisp:nil)
   (assign-public-ip :initarg :assign-public-ip :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-service-network-configuration-aws-vpc-configuration-details-assign-public-ip
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-service-network-configuration-aws-vpc-configuration-details
   'make-aws-ecs-service-network-configuration-aws-vpc-configuration-details))
 (common-lisp:defun make-aws-ecs-service-network-configuration-aws-vpc-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnets security-groups assign-public-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-network-configuration-aws-vpc-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign-public-ip))
      (common-lisp:list
       (common-lisp:cons "AssignPublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-network-configuration-details
                       common-lisp:nil
                       ((aws-vpc-configuration :initarg :aws-vpc-configuration
                         :type
                         (common-lisp:or
                          aws-ecs-service-network-configuration-aws-vpc-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-service-network-configuration-details-aws-vpc-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-network-configuration-details
                    'make-aws-ecs-service-network-configuration-details))
 (common-lisp:defun make-aws-ecs-service-network-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-vpc-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-network-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "AwsVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-network-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-placement-constraints-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-placement-constraints-details-type
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-placement-constraints-details-expression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-placement-constraints-details
                    'make-aws-ecs-service-placement-constraints-details))
 (common-lisp:defun make-aws-ecs-service-placement-constraints-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-placement-constraints-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-constraints-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-placement-constraints-list ()
   '(trivial-types:proper-list aws-ecs-service-placement-constraints-details))
 (common-lisp:defun |make-aws-ecs-service-placement-constraints-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-placement-constraints-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-placement-strategies-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-placement-strategies-details-type
                         :initform common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-placement-strategies-details-field
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-placement-strategies-details
                    'make-aws-ecs-service-placement-strategies-details))
 (common-lisp:defun make-aws-ecs-service-placement-strategies-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type field)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-placement-strategies-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-placement-strategies-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-placement-strategies-list ()
   '(trivial-types:proper-list aws-ecs-service-placement-strategies-details))
 (common-lisp:defun |make-aws-ecs-service-placement-strategies-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-placement-strategies-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-service-service-registries-details
                       common-lisp:nil
                       ((registry-arn :initarg :registry-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-service-registries-details-registry-arn
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-service-registries-details-port
                         :initform common-lisp:nil)
                        (container-port :initarg :container-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-service-service-registries-details-container-port
                         :initform common-lisp:nil)
                        (container-name :initarg :container-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-service-service-registries-details-container-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-service-service-registries-details
                    'make-aws-ecs-service-service-registries-details))
 (common-lisp:defun make-aws-ecs-service-service-registries-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registry-arn port container-port
                     container-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-service-service-registries-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-service-service-registries-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-service-service-registries-list ()
   '(trivial-types:proper-list aws-ecs-service-service-registries-details))
 (common-lisp:defun |make-aws-ecs-service-service-registries-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-service-service-registries-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-depends-on-details
  common-lisp:nil
  ((container-name :initarg :container-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-depends-on-details-container-name
    :initform common-lisp:nil)
   (condition :initarg :condition :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-depends-on-details-condition
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-depends-on-details
   'make-aws-ecs-task-definition-container-definitions-depends-on-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-depends-on-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-name condition)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-depends-on-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-depends-on-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-depends-on-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-depends-on-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-depends-on-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-depends-on-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-container-definitions-details
                       common-lisp:nil
                       ((working-directory :initarg :working-directory :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-working-directory
                         :initform common-lisp:nil)
                        (volumes-from :initarg :volumes-from :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-volumes-from-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-volumes-from
                         :initform common-lisp:nil)
                        (user :initarg :user :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-user
                         :initform common-lisp:nil)
                        (ulimits :initarg :ulimits :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-ulimits-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-ulimits
                         :initform common-lisp:nil)
                        (system-controls :initarg :system-controls :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-system-controls-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-system-controls
                         :initform common-lisp:nil)
                        (stop-timeout :initarg :stop-timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-stop-timeout
                         :initform common-lisp:nil)
                        (start-timeout :initarg :start-timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-start-timeout
                         :initform common-lisp:nil)
                        (secrets :initarg :secrets :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-secrets-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-secrets
                         :initform common-lisp:nil)
                        (resource-requirements :initarg :resource-requirements
                         :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-resource-requirements-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-resource-requirements
                         :initform common-lisp:nil)
                        (repository-credentials :initarg
                         :repository-credentials :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-repository-credentials-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-repository-credentials
                         :initform common-lisp:nil)
                        (readonly-root-filesystem :initarg
                         :readonly-root-filesystem :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-readonly-root-filesystem
                         :initform common-lisp:nil)
                        (pseudo-terminal :initarg :pseudo-terminal :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-pseudo-terminal
                         :initform common-lisp:nil)
                        (privileged :initarg :privileged :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-privileged
                         :initform common-lisp:nil)
                        (port-mappings :initarg :port-mappings :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-port-mappings-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-port-mappings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-name
                         :initform common-lisp:nil)
                        (mount-points :initarg :mount-points :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-mount-points-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-mount-points
                         :initform common-lisp:nil)
                        (memory-reservation :initarg :memory-reservation :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-memory-reservation
                         :initform common-lisp:nil)
                        (memory :initarg :memory :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-memory
                         :initform common-lisp:nil)
                        (log-configuration :initarg :log-configuration :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-log-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-log-configuration
                         :initform common-lisp:nil)
                        (linux-parameters :initarg :linux-parameters :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-linux-parameters-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-linux-parameters
                         :initform common-lisp:nil)
                        (links :initarg :links :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-links
                         :initform common-lisp:nil)
                        (interactive :initarg :interactive :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-interactive
                         :initform common-lisp:nil)
                        (image :initarg :image :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-image
                         :initform common-lisp:nil)
                        (hostname :initarg :hostname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-hostname
                         :initform common-lisp:nil)
                        (health-check :initarg :health-check :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-health-check-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-health-check
                         :initform common-lisp:nil)
                        (firelens-configuration :initarg
                         :firelens-configuration :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-firelens-configuration
                         :initform common-lisp:nil)
                        (extra-hosts :initarg :extra-hosts :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-extra-hosts-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-extra-hosts
                         :initform common-lisp:nil)
                        (essential :initarg :essential :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-essential
                         :initform common-lisp:nil)
                        (environment-files :initarg :environment-files :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-environment-files-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-environment-files
                         :initform common-lisp:nil)
                        (environment :initarg :environment :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-environment-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-environment
                         :initform common-lisp:nil)
                        (entry-point :initarg :entry-point :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-entry-point
                         :initform common-lisp:nil)
                        (docker-security-options :initarg
                         :docker-security-options :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-docker-security-options
                         :initform common-lisp:nil)
                        (docker-labels :initarg :docker-labels :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-docker-labels
                         :initform common-lisp:nil)
                        (dns-servers :initarg :dns-servers :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-dns-servers
                         :initform common-lisp:nil)
                        (dns-search-domains :initarg :dns-search-domains :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-dns-search-domains
                         :initform common-lisp:nil)
                        (disable-networking :initarg :disable-networking :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-disable-networking
                         :initform common-lisp:nil)
                        (depends-on :initarg :depends-on :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-depends-on-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-depends-on
                         :initform common-lisp:nil)
                        (cpu :initarg :cpu :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ecs-task-definition-container-definitions-details-cpu
                         :initform common-lisp:nil)
                        (command :initarg :command :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-container-definitions-details-command
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-container-definitions-details
                    'make-aws-ecs-task-definition-container-definitions-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key working-directory volumes-from user
                     ulimits system-controls stop-timeout start-timeout secrets
                     resource-requirements repository-credentials
                     readonly-root-filesystem pseudo-terminal privileged
                     port-mappings name mount-points memory-reservation memory
                     log-configuration linux-parameters links interactive image
                     hostname health-check firelens-configuration extra-hosts
                     essential environment-files environment entry-point
                     docker-security-options docker-labels dns-servers
                     dns-search-domains disable-networking depends-on cpu
                     command)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'depends-on))
      (common-lisp:list
       (common-lisp:cons "DependsOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-networking))
      (common-lisp:list
       (common-lisp:cons "DisableNetworking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-search-domains))
      (common-lisp:list
       (common-lisp:cons "DnsSearchDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-servers))
      (common-lisp:list
       (common-lisp:cons "DnsServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docker-labels))
      (common-lisp:list
       (common-lisp:cons "DockerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-security-options))
      (common-lisp:list
       (common-lisp:cons "DockerSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "EntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-files))
      (common-lisp:list
       (common-lisp:cons "EnvironmentFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'essential))
      (common-lisp:list
       (common-lisp:cons "Essential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-hosts))
      (common-lisp:list
       (common-lisp:cons "ExtraHosts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firelens-configuration))
      (common-lisp:list
       (common-lisp:cons "FirelensConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interactive))
      (common-lisp:list
       (common-lisp:cons "Interactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "Links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux-parameters))
      (common-lisp:list
       (common-lisp:cons "LinuxParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-configuration))
      (common-lisp:list
       (common-lisp:cons "LogConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-reservation))
      (common-lisp:list
       (common-lisp:cons "MemoryReservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-points))
      (common-lisp:list
       (common-lisp:cons "MountPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mappings))
      (common-lisp:list
       (common-lisp:cons "PortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pseudo-terminal))
      (common-lisp:list
       (common-lisp:cons "PseudoTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-root-filesystem))
      (common-lisp:list
       (common-lisp:cons "ReadonlyRootFilesystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-credentials))
      (common-lisp:list
       (common-lisp:cons "RepositoryCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-requirements))
      (common-lisp:list
       (common-lisp:cons "ResourceRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secrets))
      (common-lisp:list
       (common-lisp:cons "Secrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timeout))
      (common-lisp:list
       (common-lisp:cons "StartTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timeout))
      (common-lisp:list
       (common-lisp:cons "StopTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-controls))
      (common-lisp:list
       (common-lisp:cons "SystemControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ulimits))
      (common-lisp:list
       (common-lisp:cons "Ulimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes-from))
      (common-lisp:list
       (common-lisp:cons "VolumesFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-environment-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-environment-details-value
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-environment-details-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-environment-details
   'make-aws-ecs-task-definition-container-definitions-environment-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-environment-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-environment-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-environment-files-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-environment-files-details-value
    :initform common-lisp:nil)
   (type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-environment-files-details-type
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-environment-files-details
   'make-aws-ecs-task-definition-container-definitions-environment-files-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-environment-files-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-environment-files-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-environment-files-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-environment-files-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-environment-files-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-environment-files-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-environment-files-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-environment-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-environment-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-environment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-environment-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-extra-hosts-details
  common-lisp:nil
  ((ip-address :initarg :ip-address :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-extra-hosts-details-ip-address
    :initform common-lisp:nil)
   (hostname :initarg :hostname :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-extra-hosts-details-hostname
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-extra-hosts-details
   'make-aws-ecs-task-definition-container-definitions-extra-hosts-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-extra-hosts-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address hostname)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-extra-hosts-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-extra-hosts-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-extra-hosts-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-extra-hosts-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-extra-hosts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-extra-hosts-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-firelens-configuration-details
  common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-firelens-configuration-details-type
    :initform common-lisp:nil)
   (options :initarg :options :type (common-lisp:or field-map common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-firelens-configuration-details-options
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-firelens-configuration-details
   'make-aws-ecs-task-definition-container-definitions-firelens-configuration-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-firelens-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type options)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-firelens-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-firelens-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-health-check-details
  common-lisp:nil
  ((timeout :initarg :timeout :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-health-check-details-timeout
    :initform common-lisp:nil)
   (start-period :initarg :start-period :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-health-check-details-start-period
    :initform common-lisp:nil)
   (retries :initarg :retries :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-health-check-details-retries
    :initform common-lisp:nil)
   (interval :initarg :interval :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-health-check-details-interval
    :initform common-lisp:nil)
   (command :initarg :command :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-health-check-details-command
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-health-check-details
   'make-aws-ecs-task-definition-container-definitions-health-check-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-health-check-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout start-period retries interval
                     command)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-health-check-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "Retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-period))
      (common-lisp:list
       (common-lisp:cons "StartPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-health-check-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
  common-lisp:nil
  ((drop :initarg :drop :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details-drop
    :initform common-lisp:nil)
   (add :initarg :add :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details-add
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drop add)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add))
      (common-lisp:list
       (common-lisp:cons "Add"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop))
      (common-lisp:list
       (common-lisp:cons "Drop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-linux-parameters-details
  common-lisp:nil
  ((tmpfs :initarg :tmpfs :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list
     common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-tmpfs
    :initform common-lisp:nil)
   (swappiness :initarg :swappiness :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-swappiness
    :initform common-lisp:nil)
   (shared-memory-size :initarg :shared-memory-size :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-shared-memory-size
    :initform common-lisp:nil)
   (max-swap :initarg :max-swap :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-max-swap
    :initform common-lisp:nil)
   (init-process-enabled :initarg :init-process-enabled :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-init-process-enabled
    :initform common-lisp:nil)
   (devices :initarg :devices :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-devices-list
     common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-devices
    :initform common-lisp:nil)
   (capabilities :initarg :capabilities :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-linux-parameters-capabilities-details
     common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-details-capabilities
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-linux-parameters-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tmpfs swappiness shared-memory-size
                     max-swap init-process-enabled devices capabilities)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-linux-parameters-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'init-process-enabled))
      (common-lisp:list
       (common-lisp:cons "InitProcessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-swap))
      (common-lisp:list
       (common-lisp:cons "MaxSwap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-memory-size))
      (common-lisp:list
       (common-lisp:cons "SharedMemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'swappiness))
      (common-lisp:list
       (common-lisp:cons "Swappiness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmpfs))
      (common-lisp:list
       (common-lisp:cons "Tmpfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
  common-lisp:nil
  ((permissions :initarg :permissions :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-devices-details-permissions
    :initform common-lisp:nil)
   (host-path :initarg :host-path :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-devices-details-host-path
    :initform common-lisp:nil)
   (container-path :initarg :container-path :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-devices-details-container-path
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions host-path container-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-linux-parameters-devices-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-path))
      (common-lisp:list
       (common-lisp:cons "HostPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-linux-parameters-devices-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-linux-parameters-devices-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-linux-parameters-devices-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
  common-lisp:nil
  ((size :initarg :size :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details-size
    :initform common-lisp:nil)
   (mount-options :initarg :mount-options :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details-mount-options
    :initform common-lisp:nil)
   (container-path :initarg :container-path :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details-container-path
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
   'make-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key size mount-options container-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-options))
      (common-lisp:list
       (common-lisp:cons "MountOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-linux-parameters-tmpfs-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-log-configuration-details
  common-lisp:nil
  ((secret-options :initarg :secret-options :type
    (common-lisp:or
     aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list
     common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-log-configuration-details-secret-options
    :initform common-lisp:nil)
   (options :initarg :options :type (common-lisp:or field-map common-lisp:null)
    :accessor
    %aws-ecs-task-definition-container-definitions-log-configuration-details-options
    :initform common-lisp:nil)
   (log-driver :initarg :log-driver :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-log-configuration-details-log-driver
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-log-configuration-details
   'make-aws-ecs-task-definition-container-definitions-log-configuration-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-log-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-options options log-driver)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-log-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-driver))
      (common-lisp:list
       (common-lisp:cons "LogDriver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-options))
      (common-lisp:list
       (common-lisp:cons "SecretOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
  common-lisp:nil
  ((value-from :initarg :value-from :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details-value-from
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
   'make-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-from name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "ValueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-log-configuration-secret-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-log-configuration-secret-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-mount-points-details
  common-lisp:nil
  ((source-volume :initarg :source-volume :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-mount-points-details-source-volume
    :initform common-lisp:nil)
   (read-only :initarg :read-only :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-mount-points-details-read-only
    :initform common-lisp:nil)
   (container-path :initarg :container-path :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-mount-points-details-container-path
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-mount-points-details
   'make-aws-ecs-task-definition-container-definitions-mount-points-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-mount-points-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-volume read-only container-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-mount-points-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "SourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-mount-points-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-mount-points-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-mount-points-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-mount-points-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-mount-points-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-port-mappings-details
  common-lisp:nil
  ((protocol :initarg :protocol :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-port-mappings-details-protocol
    :initform common-lisp:nil)
   (host-port :initarg :host-port :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-port-mappings-details-host-port
    :initform common-lisp:nil)
   (container-port :initarg :container-port :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-port-mappings-details-container-port
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-port-mappings-details
   'make-aws-ecs-task-definition-container-definitions-port-mappings-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-port-mappings-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol host-port container-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-port-mappings-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "ContainerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-port))
      (common-lisp:list
       (common-lisp:cons "HostPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-port-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-port-mappings-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-port-mappings-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-port-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-port-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-repository-credentials-details
  common-lisp:nil
  ((credentials-parameter :initarg :credentials-parameter :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-repository-credentials-details-credentials-parameter
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-repository-credentials-details
   'make-aws-ecs-task-definition-container-definitions-repository-credentials-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-repository-credentials-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key credentials-parameter)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-repository-credentials-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-parameter))
      (common-lisp:list
       (common-lisp:cons "CredentialsParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-repository-credentials-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-resource-requirements-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-resource-requirements-details-value
    :initform common-lisp:nil)
   (type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-resource-requirements-details-type
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-resource-requirements-details
   'make-aws-ecs-task-definition-container-definitions-resource-requirements-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-resource-requirements-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-resource-requirements-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-resource-requirements-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-resource-requirements-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-resource-requirements-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-resource-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-resource-requirements-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-secrets-details common-lisp:nil
  ((value-from :initarg :value-from :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-secrets-details-value-from
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-secrets-details-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-secrets-details
   'make-aws-ecs-task-definition-container-definitions-secrets-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-secrets-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-from name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-secrets-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-from))
      (common-lisp:list
       (common-lisp:cons "ValueFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-secrets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-secrets-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-secrets-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-secrets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-secrets-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-system-controls-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-system-controls-details-value
    :initform common-lisp:nil)
   (namespace :initarg :namespace :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-system-controls-details-namespace
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-system-controls-details
   'make-aws-ecs-task-definition-container-definitions-system-controls-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-system-controls-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-system-controls-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-system-controls-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-system-controls-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-system-controls-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-system-controls-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-system-controls-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-ulimits-details common-lisp:nil
  ((soft-limit :initarg :soft-limit :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-ulimits-details-soft-limit
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-ulimits-details-name
    :initform common-lisp:nil)
   (hard-limit :initarg :hard-limit :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-ulimits-details-hard-limit
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-ulimits-details
   'make-aws-ecs-task-definition-container-definitions-ulimits-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-ulimits-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key soft-limit name hard-limit)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-ulimits-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-limit))
      (common-lisp:list
       (common-lisp:cons "HardLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'soft-limit))
      (common-lisp:list
       (common-lisp:cons "SoftLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-ulimits-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-ulimits-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-ulimits-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-ulimits-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-ulimits-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-container-definitions-volumes-from-details
  common-lisp:nil
  ((source-container :initarg :source-container :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-volumes-from-details-source-container
    :initform common-lisp:nil)
   (read-only :initarg :read-only :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-task-definition-container-definitions-volumes-from-details-read-only
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-container-definitions-volumes-from-details
   'make-aws-ecs-task-definition-container-definitions-volumes-from-details))
 (common-lisp:defun make-aws-ecs-task-definition-container-definitions-volumes-from-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-container read-only)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-container-definitions-volumes-from-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-container))
      (common-lisp:list
       (common-lisp:cons "SourceContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-container-definitions-volumes-from-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-container-definitions-volumes-from-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-container-definitions-volumes-from-details))
 (common-lisp:defun |make-aws-ecs-task-definition-container-definitions-volumes-from-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-container-definitions-volumes-from-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-details common-lisp:nil
                       ((volumes :initarg :volumes :type
                         (common-lisp:or aws-ecs-task-definition-volumes-list
                                         common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-volumes
                         :initform common-lisp:nil)
                        (task-role-arn :initarg :task-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-task-role-arn
                         :initform common-lisp:nil)
                        (requires-compatibilities :initarg
                         :requires-compatibilities :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-requires-compatibilities
                         :initform common-lisp:nil)
                        (proxy-configuration :initarg :proxy-configuration
                         :type
                         (common-lisp:or
                          aws-ecs-task-definition-proxy-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-proxy-configuration
                         :initform common-lisp:nil)
                        (placement-constraints :initarg :placement-constraints
                         :type
                         (common-lisp:or
                          aws-ecs-task-definition-placement-constraints-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-placement-constraints
                         :initform common-lisp:nil)
                        (pid-mode :initarg :pid-mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-pid-mode
                         :initform common-lisp:nil)
                        (network-mode :initarg :network-mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-network-mode
                         :initform common-lisp:nil)
                        (memory :initarg :memory :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-memory
                         :initform common-lisp:nil)
                        (ipc-mode :initarg :ipc-mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-ipc-mode
                         :initform common-lisp:nil)
                        (inference-accelerators :initarg
                         :inference-accelerators :type
                         (common-lisp:or
                          aws-ecs-task-definition-inference-accelerators-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-inference-accelerators
                         :initform common-lisp:nil)
                        (family :initarg :family :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-family
                         :initform common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-execution-role-arn
                         :initform common-lisp:nil)
                        (cpu :initarg :cpu :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-definition-details-cpu
                         :initform common-lisp:nil)
                        (container-definitions :initarg :container-definitions
                         :type
                         (common-lisp:or
                          aws-ecs-task-definition-container-definitions-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-details-container-definitions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-details
                    'make-aws-ecs-task-definition-details))
 (common-lisp:defun make-aws-ecs-task-definition-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volumes task-role-arn
                     requires-compatibilities proxy-configuration
                     placement-constraints pid-mode network-mode memory
                     ipc-mode inference-accelerators family execution-role-arn
                     cpu container-definitions)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-definitions))
      (common-lisp:list
       (common-lisp:cons "ContainerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-accelerators))
      (common-lisp:list
       (common-lisp:cons "InferenceAccelerators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipc-mode))
      (common-lisp:list
       (common-lisp:cons "IpcMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-mode))
      (common-lisp:list
       (common-lisp:cons "NetworkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid-mode))
      (common-lisp:list
       (common-lisp:cons "PidMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'placement-constraints))
      (common-lisp:list
       (common-lisp:cons "PlacementConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "ProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-compatibilities))
      (common-lisp:list
       (common-lisp:cons "RequiresCompatibilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-role-arn))
      (common-lisp:list
       (common-lisp:cons "TaskRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-inference-accelerators-details
                       common-lisp:nil
                       ((device-type :initarg :device-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-inference-accelerators-details-device-type
                         :initform common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-inference-accelerators-details-device-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-inference-accelerators-details
                    'make-aws-ecs-task-definition-inference-accelerators-details))
 (common-lisp:defun make-aws-ecs-task-definition-inference-accelerators-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type device-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-inference-accelerators-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "DeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-inference-accelerators-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-inference-accelerators-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-inference-accelerators-details))
 (common-lisp:defun |make-aws-ecs-task-definition-inference-accelerators-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-inference-accelerators-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-placement-constraints-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-placement-constraints-details-type
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-placement-constraints-details-expression
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-placement-constraints-details
                    'make-aws-ecs-task-definition-placement-constraints-details))
 (common-lisp:defun make-aws-ecs-task-definition-placement-constraints-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type expression)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-placement-constraints-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-placement-constraints-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-placement-constraints-list ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-placement-constraints-details))
 (common-lisp:defun |make-aws-ecs-task-definition-placement-constraints-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-placement-constraints-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-proxy-configuration-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-proxy-configuration-details-type
                         :initform common-lisp:nil)
                        (proxy-configuration-properties :initarg
                         :proxy-configuration-properties :type
                         (common-lisp:or
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-proxy-configuration-details-proxy-configuration-properties
                         :initform common-lisp:nil)
                        (container-name :initarg :container-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-proxy-configuration-details-container-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-proxy-configuration-details
                    'make-aws-ecs-task-definition-proxy-configuration-details))
 (common-lisp:defun make-aws-ecs-task-definition-proxy-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type proxy-configuration-properties
                     container-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-proxy-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "ContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proxy-configuration-properties))
      (common-lisp:list
       (common-lisp:cons "ProxyConfigurationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details-value
    :initform common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
   'make-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
 (common-lisp:defun make-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list
                      ()
   '(trivial-types:proper-list
     aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
 (common-lisp:defun |make-aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-proxy-configuration-proxy-configuration-properties-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-volumes-details common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-volumes-details-name
                         :initform common-lisp:nil)
                        (host :initarg :host :type
                         (common-lisp:or
                          aws-ecs-task-definition-volumes-host-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-volumes-details-host
                         :initform common-lisp:nil)
                        (efs-volume-configuration :initarg
                         :efs-volume-configuration :type
                         (common-lisp:or
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-volumes-details-efs-volume-configuration
                         :initform common-lisp:nil)
                        (docker-volume-configuration :initarg
                         :docker-volume-configuration :type
                         (common-lisp:or
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-volumes-details-docker-volume-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-volumes-details
                    'make-aws-ecs-task-definition-volumes-details))
 (common-lisp:defun make-aws-ecs-task-definition-volumes-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name host efs-volume-configuration
                     docker-volume-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-volumes-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'docker-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "DockerVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'efs-volume-configuration))
      (common-lisp:list
       (common-lisp:cons "EfsVolumeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-volumes-docker-volume-configuration-details
  common-lisp:nil
  ((scope :initarg :scope :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-docker-volume-configuration-details-scope
    :initform common-lisp:nil)
   (labels :initarg :labels :type (common-lisp:or field-map common-lisp:null)
    :accessor
    %aws-ecs-task-definition-volumes-docker-volume-configuration-details-labels
    :initform common-lisp:nil)
   (driver-opts :initarg :driver-opts :type
    (common-lisp:or field-map common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-docker-volume-configuration-details-driver-opts
    :initform common-lisp:nil)
   (driver :initarg :driver :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-docker-volume-configuration-details-driver
    :initform common-lisp:nil)
   (autoprovision :initarg :autoprovision :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-docker-volume-configuration-details-autoprovision
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-docker-volume-configuration-details
   'make-aws-ecs-task-definition-volumes-docker-volume-configuration-details))
 (common-lisp:defun make-aws-ecs-task-definition-volumes-docker-volume-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scope labels driver-opts driver
                     autoprovision)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-volumes-docker-volume-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autoprovision))
      (common-lisp:list
       (common-lisp:cons "Autoprovision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver))
      (common-lisp:list
       (common-lisp:cons "Driver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'driver-opts))
      (common-lisp:list
       (common-lisp:cons "DriverOpts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-docker-volume-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
  common-lisp:nil
  ((iam :initarg :iam :type (common-lisp:or non-empty-string common-lisp:null)
    :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details-iam
    :initform common-lisp:nil)
   (access-point-id :initarg :access-point-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details-access-point-id
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
   'make-aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
 (common-lisp:defun make-aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam access-point-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "AccessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam))
      (common-lisp:list
       (common-lisp:cons "Iam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-ecs-task-definition-volumes-efs-volume-configuration-details
  common-lisp:nil
  ((transit-encryption-port :initarg :transit-encryption-port :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-details-transit-encryption-port
    :initform common-lisp:nil)
   (transit-encryption :initarg :transit-encryption :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-details-transit-encryption
    :initform common-lisp:nil)
   (root-directory :initarg :root-directory :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-details-root-directory
    :initform common-lisp:nil)
   (filesystem-id :initarg :filesystem-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-details-filesystem-id
    :initform common-lisp:nil)
   (authorization-config :initarg :authorization-config :type
    (common-lisp:or
     aws-ecs-task-definition-volumes-efs-volume-configuration-authorization-config-details
     common-lisp:null)
    :accessor
    %aws-ecs-task-definition-volumes-efs-volume-configuration-details-authorization-config
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-ecs-task-definition-volumes-efs-volume-configuration-details
   'make-aws-ecs-task-definition-volumes-efs-volume-configuration-details))
 (common-lisp:defun make-aws-ecs-task-definition-volumes-efs-volume-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transit-encryption-port
                     transit-encryption root-directory filesystem-id
                     authorization-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-volumes-efs-volume-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-config))
      (common-lisp:list
       (common-lisp:cons "AuthorizationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filesystem-id))
      (common-lisp:list
       (common-lisp:cons "FilesystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-encryption))
      (common-lisp:list
       (common-lisp:cons "TransitEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-encryption-port))
      (common-lisp:list
       (common-lisp:cons "TransitEncryptionPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-efs-volume-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-definition-volumes-host-details
                       common-lisp:nil
                       ((source-path :initarg :source-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-definition-volumes-host-details-source-path
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-definition-volumes-host-details
                    'make-aws-ecs-task-definition-volumes-host-details))
 (common-lisp:defun make-aws-ecs-task-definition-volumes-host-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-definition-volumes-host-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-definition-volumes-host-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-definition-volumes-list ()
   '(trivial-types:proper-list aws-ecs-task-definition-volumes-details))
 (common-lisp:defun |make-aws-ecs-task-definition-volumes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-definition-volumes-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-details common-lisp:nil
                       ((containers :initarg :containers :type
                         (common-lisp:or aws-ecs-container-details-list
                                         common-lisp:null)
                         :accessor %aws-ecs-task-details-containers :initform
                         common-lisp:nil)
                        (volumes :initarg :volumes :type
                         (common-lisp:or aws-ecs-task-volume-details-list
                                         common-lisp:null)
                         :accessor %aws-ecs-task-details-volumes :initform
                         common-lisp:nil)
                        (group :initarg :group :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-group :initform
                         common-lisp:nil)
                        (started-by :initarg :started-by :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-started-by :initform
                         common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-started-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-created-at :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-version :initform
                         common-lisp:nil)
                        (task-definition-arn :initarg :task-definition-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-task-definition-arn
                         :initform common-lisp:nil)
                        (cluster-arn :initarg :cluster-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-details-cluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-details 'make-aws-ecs-task-details))
 (common-lisp:defun make-aws-ecs-task-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key containers volumes group started-by
                     started-at created-at version task-definition-arn
                     cluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecs-task-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definition-arn))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-by))
      (common-lisp:list
       (common-lisp:cons "StartedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ecs-task-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-volume-details common-lisp:nil
                       ((host :initarg :host :type
                         (common-lisp:or aws-ecs-task-volume-host-details
                                         common-lisp:null)
                         :accessor %aws-ecs-task-volume-details-host :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ecs-task-volume-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-volume-details
                    'make-aws-ecs-task-volume-details))
 (common-lisp:defun make-aws-ecs-task-volume-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ecs-task-volume-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host))
      (common-lisp:list
       (common-lisp:cons "Host"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-ecs-task-volume-details-list ()
   '(trivial-types:proper-list aws-ecs-task-volume-details))
 (common-lisp:defun |make-aws-ecs-task-volume-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-ecs-task-volume-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-ecs-task-volume-host-details common-lisp:nil
                       ((source-path :initarg :source-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ecs-task-volume-host-details-source-path
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ecs-task-volume-host-details
                    'make-aws-ecs-task-volume-host-details))
 (common-lisp:defun make-aws-ecs-task-volume-host-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-path)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ecs-task-volume-host-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ecs-task-volume-host-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-efs-access-point-details common-lisp:nil
                       ((root-directory :initarg :root-directory :type
                         (common-lisp:or
                          aws-efs-access-point-root-directory-details
                          common-lisp:null)
                         :accessor %aws-efs-access-point-details-root-directory
                         :initform common-lisp:nil)
                        (posix-user :initarg :posix-user :type
                         (common-lisp:or
                          aws-efs-access-point-posix-user-details
                          common-lisp:null)
                         :accessor %aws-efs-access-point-details-posix-user
                         :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-efs-access-point-details-file-system-id
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-efs-access-point-details-client-token
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-efs-access-point-details-arn :initform
                         common-lisp:nil)
                        (access-point-id :initarg :access-point-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-efs-access-point-details-access-point-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-details
                    'make-aws-efs-access-point-details))
 (common-lisp:defun make-aws-efs-access-point-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-directory posix-user file-system-id
                     client-token arn access-point-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-efs-access-point-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-id))
      (common-lisp:list
       (common-lisp:cons "AccessPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-user))
      (common-lisp:list
       (common-lisp:cons "PosixUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-directory))
      (common-lisp:list
       (common-lisp:cons "RootDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-efs-access-point-posix-user-details common-lisp:nil
                       ((uid :initarg :uid :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-efs-access-point-posix-user-details-uid
                         :initform common-lisp:nil)
                        (secondary-gids :initarg :secondary-gids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-efs-access-point-posix-user-details-secondary-gids
                         :initform common-lisp:nil)
                        (gid :initarg :gid :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-efs-access-point-posix-user-details-gid
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-posix-user-details
                    'make-aws-efs-access-point-posix-user-details))
 (common-lisp:defun make-aws-efs-access-point-posix-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uid secondary-gids gid)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-efs-access-point-posix-user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gid))
      (common-lisp:list
       (common-lisp:cons "Gid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-gids))
      (common-lisp:list
       (common-lisp:cons "SecondaryGids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-posix-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-efs-access-point-root-directory-creation-info-details common-lisp:nil
  ((permissions :initarg :permissions :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-efs-access-point-root-directory-creation-info-details-permissions
    :initform common-lisp:nil)
   (owner-uid :initarg :owner-uid :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-efs-access-point-root-directory-creation-info-details-owner-uid
    :initform common-lisp:nil)
   (owner-gid :initarg :owner-gid :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-efs-access-point-root-directory-creation-info-details-owner-gid
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-root-directory-creation-info-details
                    'make-aws-efs-access-point-root-directory-creation-info-details))
 (common-lisp:defun make-aws-efs-access-point-root-directory-creation-info-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions owner-uid owner-gid)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-efs-access-point-root-directory-creation-info-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-gid))
      (common-lisp:list
       (common-lisp:cons "OwnerGid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-uid))
      (common-lisp:list
       (common-lisp:cons "OwnerUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-creation-info-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-efs-access-point-root-directory-details
                       common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-efs-access-point-root-directory-details-path
                         :initform common-lisp:nil)
                        (creation-info :initarg :creation-info :type
                         (common-lisp:or
                          aws-efs-access-point-root-directory-creation-info-details
                          common-lisp:null)
                         :accessor
                         %aws-efs-access-point-root-directory-details-creation-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-efs-access-point-root-directory-details
                    'make-aws-efs-access-point-root-directory-details))
 (common-lisp:defun make-aws-efs-access-point-root-directory-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path creation-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-efs-access-point-root-directory-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-info))
      (common-lisp:list
       (common-lisp:cons "CreationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-efs-access-point-root-directory-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-eks-cluster-details common-lisp:nil
                       ((logging :initarg :logging :type
                         (common-lisp:or aws-eks-cluster-logging-details
                                         common-lisp:null)
                         :accessor %aws-eks-cluster-details-logging :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-version :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-role-arn :initform
                         common-lisp:nil)
                        (resources-vpc-config :initarg :resources-vpc-config
                         :type
                         (common-lisp:or
                          aws-eks-cluster-resources-vpc-config-details
                          common-lisp:null)
                         :accessor
                         %aws-eks-cluster-details-resources-vpc-config
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-name :initform
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-endpoint :initform
                         common-lisp:nil)
                        (cluster-status :initarg :cluster-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-cluster-status
                         :initform common-lisp:nil)
                        (certificate-authority-data :initarg
                         :certificate-authority-data :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-eks-cluster-details-certificate-authority-data
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-eks-cluster-details-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-details 'make-aws-eks-cluster-details))
 (common-lisp:defun make-aws-eks-cluster-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging version role-arn
                     resources-vpc-config name endpoint cluster-status
                     certificate-authority-data arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-eks-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-data))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-vpc-config))
      (common-lisp:list
       (common-lisp:cons "ResourcesVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "Logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-eks-cluster-logging-cluster-logging-details
                       common-lisp:nil
                       ((types :initarg :types :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-eks-cluster-logging-cluster-logging-details-types
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-eks-cluster-logging-cluster-logging-details-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-logging-cluster-logging-details
                    'make-aws-eks-cluster-logging-cluster-logging-details))
 (common-lisp:defun make-aws-eks-cluster-logging-cluster-logging-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key types enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-eks-cluster-logging-cluster-logging-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-cluster-logging-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-eks-cluster-logging-cluster-logging-list ()
   '(trivial-types:proper-list
     aws-eks-cluster-logging-cluster-logging-details))
 (common-lisp:defun |make-aws-eks-cluster-logging-cluster-logging-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-eks-cluster-logging-cluster-logging-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-eks-cluster-logging-details common-lisp:nil
                       ((cluster-logging :initarg :cluster-logging :type
                         (common-lisp:or
                          aws-eks-cluster-logging-cluster-logging-list
                          common-lisp:null)
                         :accessor
                         %aws-eks-cluster-logging-details-cluster-logging
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-logging-details
                    'make-aws-eks-cluster-logging-details))
 (common-lisp:defun make-aws-eks-cluster-logging-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cluster-logging)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-eks-cluster-logging-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-logging))
      (common-lisp:list
       (common-lisp:cons "ClusterLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-logging-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-eks-cluster-resources-vpc-config-details
                       common-lisp:nil
                       ((endpoint-public-access :initarg
                         :endpoint-public-access :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-eks-cluster-resources-vpc-config-details-endpoint-public-access
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-eks-cluster-resources-vpc-config-details-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-eks-cluster-resources-vpc-config-details-security-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-eks-cluster-resources-vpc-config-details
                    'make-aws-eks-cluster-resources-vpc-config-details))
 (common-lisp:defun make-aws-eks-cluster-resources-vpc-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint-public-access subnet-ids
                     security-group-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-eks-cluster-resources-vpc-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-public-access))
      (common-lisp:list
       (common-lisp:cons "EndpointPublicAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-eks-cluster-resources-vpc-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elastic-beanstalk-environment-details
                       common-lisp:nil
                       ((version-label :initarg :version-label :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-version-label
                         :initform common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or aws-elastic-beanstalk-environment-tier
                                         common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-tier
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-status
                         :initform common-lisp:nil)
                        (solution-stack-name :initarg :solution-stack-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-solution-stack-name
                         :initform common-lisp:nil)
                        (platform-arn :initarg :platform-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-platform-arn
                         :initform common-lisp:nil)
                        (option-settings :initarg :option-settings :type
                         (common-lisp:or
                          aws-elastic-beanstalk-environment-option-settings
                          common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-option-settings
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-environment-name
                         :initform common-lisp:nil)
                        (environment-links :initarg :environment-links :type
                         (common-lisp:or
                          aws-elastic-beanstalk-environment-environment-links
                          common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-environment-links
                         :initform common-lisp:nil)
                        (environment-id :initarg :environment-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-environment-id
                         :initform common-lisp:nil)
                        (environment-arn :initarg :environment-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-environment-arn
                         :initform common-lisp:nil)
                        (endpoint-url :initarg :endpoint-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-endpoint-url
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-description
                         :initform common-lisp:nil)
                        (date-updated :initarg :date-updated :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-date-updated
                         :initform common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-date-created
                         :initform common-lisp:nil)
                        (cname :initarg :cname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-cname
                         :initform common-lisp:nil)
                        (application-name :initarg :application-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-details-application-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-details
                    'make-aws-elastic-beanstalk-environment-details))
 (common-lisp:defun make-aws-elastic-beanstalk-environment-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-label tier status
                     solution-stack-name platform-arn option-settings
                     environment-name environment-links environment-id
                     environment-arn endpoint-url description date-updated
                     date-created cname application-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elastic-beanstalk-environment-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-name))
      (common-lisp:list
       (common-lisp:cons "ApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cname))
      (common-lisp:list
       (common-lisp:cons "Cname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-updated))
      (common-lisp:list
       (common-lisp:cons "DateUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-arn))
      (common-lisp:list
       (common-lisp:cons "EnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-id))
      (common-lisp:list
       (common-lisp:cons "EnvironmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-links))
      (common-lisp:list
       (common-lisp:cons "EnvironmentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-arn))
      (common-lisp:list
       (common-lisp:cons "PlatformArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solution-stack-name))
      (common-lisp:list
       (common-lisp:cons "SolutionStackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-label))
      (common-lisp:list
       (common-lisp:cons "VersionLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elastic-beanstalk-environment-environment-link
                       common-lisp:nil
                       ((link-name :initarg :link-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-environment-link-link-name
                         :initform common-lisp:nil)
                        (environment-name :initarg :environment-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-environment-link-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-environment-link
                    'make-aws-elastic-beanstalk-environment-environment-link))
 (common-lisp:defun make-aws-elastic-beanstalk-environment-environment-link
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key link-name environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elastic-beanstalk-environment-environment-link
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "EnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-environment-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elastic-beanstalk-environment-environment-links ()
   '(trivial-types:proper-list
     aws-elastic-beanstalk-environment-environment-link))
 (common-lisp:defun |make-aws-elastic-beanstalk-environment-environment-links|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elastic-beanstalk-environment-environment-link))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elastic-beanstalk-environment-option-setting
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-option-setting-value
                         :initform common-lisp:nil)
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-option-setting-resource-name
                         :initform common-lisp:nil)
                        (option-name :initarg :option-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-option-setting-option-name
                         :initform common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-option-setting-namespace
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-option-setting
                    'make-aws-elastic-beanstalk-environment-option-setting))
 (common-lisp:defun make-aws-elastic-beanstalk-environment-option-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value resource-name option-name
                     namespace)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elastic-beanstalk-environment-option-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elastic-beanstalk-environment-option-settings ()
   '(trivial-types:proper-list
     aws-elastic-beanstalk-environment-option-setting))
 (common-lisp:defun |make-aws-elastic-beanstalk-environment-option-settings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elastic-beanstalk-environment-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elastic-beanstalk-environment-tier common-lisp:nil
                       ((version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elastic-beanstalk-environment-tier-version
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elastic-beanstalk-environment-tier-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elastic-beanstalk-environment-tier-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elastic-beanstalk-environment-tier
                    'make-aws-elastic-beanstalk-environment-tier))
 (common-lisp:defun make-aws-elastic-beanstalk-environment-tier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version type name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elastic-beanstalk-environment-tier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elastic-beanstalk-environment-tier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-details common-lisp:nil
                       ((vpcoptions :initarg :vpcoptions :type
                         (common-lisp:or aws-elasticsearch-domain-vpcoptions
                                         common-lisp:null)
                         :accessor %aws-elasticsearch-domain-details-vpcoptions
                         :initform common-lisp:nil)
                        (service-software-options :initarg
                         :service-software-options :type
                         (common-lisp:or
                          aws-elasticsearch-domain-service-software-options
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-service-software-options
                         :initform common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or
                          aws-elasticsearch-domain-node-to-node-encryption-options
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or
                          aws-elasticsearch-domain-log-publishing-options
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-log-publishing-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or
                          aws-elasticsearch-domain-encryption-at-rest-options
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (elasticsearch-cluster-config :initarg
                         :elasticsearch-cluster-config :type
                         (common-lisp:or
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-elasticsearch-cluster-config
                         :initform common-lisp:nil)
                        (elasticsearch-version :initarg :elasticsearch-version
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-elasticsearch-version
                         :initform common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-elasticsearch-domain-details-endpoints :initform
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elasticsearch-domain-details-endpoint
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-domain-name
                         :initform common-lisp:nil)
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elasticsearch-domain-details-domain-id
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or
                          aws-elasticsearch-domain-domain-endpoint-options
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-domain-endpoint-options
                         :initform common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-details-access-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-details
                    'make-aws-elasticsearch-domain-details))
 (common-lisp:defun make-aws-elasticsearch-domain-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpcoptions service-software-options
                     node-to-node-encryption-options log-publishing-options
                     encryption-at-rest-options elasticsearch-cluster-config
                     elasticsearch-version endpoints endpoint domain-name
                     domain-id domain-endpoint-options access-policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-domain-endpoint-options
                       common-lisp:nil
                       ((tlssecurity-policy :initarg :tlssecurity-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-domain-endpoint-options-tlssecurity-policy
                         :initform common-lisp:nil)
                        (enforce-https :initarg :enforce-https :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elasticsearch-domain-domain-endpoint-options-enforce-https
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-domain-endpoint-options
                    'make-aws-elasticsearch-domain-domain-endpoint-options))
 (common-lisp:defun make-aws-elasticsearch-domain-domain-endpoint-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tlssecurity-policy enforce-https)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-domain-endpoint-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-domain-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-elasticsearch-domain-elasticsearch-cluster-config-details common-lisp:nil
  ((zone-awareness-enabled :initarg :zone-awareness-enabled :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-zone-awareness-enabled
    :initform common-lisp:nil)
   (zone-awareness-config :initarg :zone-awareness-config :type
    (common-lisp:or
     aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
     common-lisp:null)
    :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-zone-awareness-config
    :initform common-lisp:nil)
   (instance-type :initarg :instance-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-instance-type
    :initform common-lisp:nil)
   (instance-count :initarg :instance-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-instance-count
    :initform common-lisp:nil)
   (dedicated-master-type :initarg :dedicated-master-type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-dedicated-master-type
    :initform common-lisp:nil)
   (dedicated-master-enabled :initarg :dedicated-master-enabled :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-dedicated-master-enabled
    :initform common-lisp:nil)
   (dedicated-master-count :initarg :dedicated-master-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-details-dedicated-master-count
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-elasticsearch-domain-elasticsearch-cluster-config-details
   'make-aws-elasticsearch-domain-elasticsearch-cluster-config-details))
 (common-lisp:defun make-aws-elasticsearch-domain-elasticsearch-cluster-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zone-awareness-enabled
                     zone-awareness-config instance-type instance-count
                     dedicated-master-type dedicated-master-enabled
                     dedicated-master-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-elasticsearch-cluster-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
  common-lisp:nil
  ((availability-zone-count :initarg :availability-zone-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details-availability-zone-count
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
   'make-aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
 (common-lisp:defun make-aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zone-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-elasticsearch-cluster-config-zone-awareness-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-encryption-at-rest-options
                       common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-encryption-at-rest-options-kms-key-id
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elasticsearch-domain-encryption-at-rest-options-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-encryption-at-rest-options
                    'make-aws-elasticsearch-domain-encryption-at-rest-options))
 (common-lisp:defun make-aws-elasticsearch-domain-encryption-at-rest-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-encryption-at-rest-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-encryption-at-rest-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-log-publishing-options
                       common-lisp:nil
                       ((audit-logs :initarg :audit-logs :type
                         (common-lisp:or
                          aws-elasticsearch-domain-log-publishing-options-log-config
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-log-publishing-options-audit-logs
                         :initform common-lisp:nil)
                        (search-slow-logs :initarg :search-slow-logs :type
                         (common-lisp:or
                          aws-elasticsearch-domain-log-publishing-options-log-config
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-log-publishing-options-search-slow-logs
                         :initform common-lisp:nil)
                        (index-slow-logs :initarg :index-slow-logs :type
                         (common-lisp:or
                          aws-elasticsearch-domain-log-publishing-options-log-config
                          common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-log-publishing-options-index-slow-logs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-log-publishing-options
                    'make-aws-elasticsearch-domain-log-publishing-options))
 (common-lisp:defun make-aws-elasticsearch-domain-log-publishing-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-logs search-slow-logs
                     index-slow-logs)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-log-publishing-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-slow-logs))
      (common-lisp:list
       (common-lisp:cons "IndexSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-slow-logs))
      (common-lisp:list
       (common-lisp:cons "SearchSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-elasticsearch-domain-log-publishing-options-log-config common-lisp:nil
  ((enabled :initarg :enabled :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-elasticsearch-domain-log-publishing-options-log-config-enabled
    :initform common-lisp:nil)
   (cloud-watch-logs-log-group-arn :initarg :cloud-watch-logs-log-group-arn
    :type (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-elasticsearch-domain-log-publishing-options-log-config-cloud-watch-logs-log-group-arn
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-log-publishing-options-log-config
                    'make-aws-elasticsearch-domain-log-publishing-options-log-config))
 (common-lisp:defun make-aws-elasticsearch-domain-log-publishing-options-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled cloud-watch-logs-log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-log-publishing-options-log-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-log-publishing-options-log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-node-to-node-encryption-options
                       common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elasticsearch-domain-node-to-node-encryption-options-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-node-to-node-encryption-options
                    'make-aws-elasticsearch-domain-node-to-node-encryption-options))
 (common-lisp:defun make-aws-elasticsearch-domain-node-to-node-encryption-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-node-to-node-encryption-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-node-to-node-encryption-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-service-software-options
                       common-lisp:nil
                       ((update-status :initarg :update-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-service-software-options-update-status
                         :initform common-lisp:nil)
                        (update-available :initarg :update-available :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elasticsearch-domain-service-software-options-update-available
                         :initform common-lisp:nil)
                        (new-version :initarg :new-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-service-software-options-new-version
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-service-software-options-description
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-service-software-options-current-version
                         :initform common-lisp:nil)
                        (cancellable :initarg :cancellable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elasticsearch-domain-service-software-options-cancellable
                         :initform common-lisp:nil)
                        (automated-update-date :initarg :automated-update-date
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-service-software-options-automated-update-date
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-service-software-options
                    'make-aws-elasticsearch-domain-service-software-options))
 (common-lisp:defun make-aws-elasticsearch-domain-service-software-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-status update-available
                     new-version description current-version cancellable
                     automated-update-date)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-service-software-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-service-software-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elasticsearch-domain-vpcoptions common-lisp:nil
                       ((vpcid :initarg :vpcid :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elasticsearch-domain-vpcoptions-vpcid
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-vpcoptions-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-vpcoptions-security-group-ids
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-elasticsearch-domain-vpcoptions-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elasticsearch-domain-vpcoptions
                    'make-aws-elasticsearch-domain-vpcoptions))
 (common-lisp:defun make-aws-elasticsearch-domain-vpcoptions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpcid subnet-ids security-group-ids
                     availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elasticsearch-domain-vpcoptions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elasticsearch-domain-vpcoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-app-cookie-stickiness-policies ()
   '(trivial-types:proper-list aws-elb-app-cookie-stickiness-policy))
 (common-lisp:defun |make-aws-elb-app-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-app-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-app-cookie-stickiness-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-app-cookie-stickiness-policy-policy-name
                         :initform common-lisp:nil)
                        (cookie-name :initarg :cookie-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-app-cookie-stickiness-policy-cookie-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-app-cookie-stickiness-policy
                    'make-aws-elb-app-cookie-stickiness-policy))
 (common-lisp:defun make-aws-elb-app-cookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name cookie-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-app-cookie-stickiness-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookie-name))
      (common-lisp:list
       (common-lisp:cons "CookieName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-app-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-lb-cookie-stickiness-policies ()
   '(trivial-types:proper-list aws-elb-lb-cookie-stickiness-policy))
 (common-lisp:defun |make-aws-elb-lb-cookie-stickiness-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-lb-cookie-stickiness-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-lb-cookie-stickiness-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-lb-cookie-stickiness-policy-policy-name
                         :initform common-lisp:nil)
                        (cookie-expiration-period :initarg
                         :cookie-expiration-period :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-elb-lb-cookie-stickiness-policy-cookie-expiration-period
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-lb-cookie-stickiness-policy
                    'make-aws-elb-lb-cookie-stickiness-policy))
 (common-lisp:defun make-aws-elb-lb-cookie-stickiness-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name cookie-expiration-period)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-lb-cookie-stickiness-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cookie-expiration-period))
      (common-lisp:list
       (common-lisp:cons "CookieExpirationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-lb-cookie-stickiness-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-access-log common-lisp:nil
                       ((s3bucket-prefix :initarg :s3bucket-prefix :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-access-log-s3bucket-prefix
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-access-log-s3bucket-name
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elb-load-balancer-access-log-enabled :initform
                         common-lisp:nil)
                        (emit-interval :initarg :emit-interval :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-access-log-emit-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-access-log
                    'make-aws-elb-load-balancer-access-log))
 (common-lisp:defun make-aws-elb-load-balancer-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-prefix s3bucket-name enabled
                     emit-interval)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emit-interval))
      (common-lisp:list
       (common-lisp:cons "EmitInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "S3BucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-additional-attribute
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-additional-attribute-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-additional-attribute-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-additional-attribute
                    'make-aws-elb-load-balancer-additional-attribute))
 (common-lisp:defun make-aws-elb-load-balancer-additional-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-additional-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-additional-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-additional-attribute-list ()
   '(trivial-types:proper-list aws-elb-load-balancer-additional-attribute))
 (common-lisp:defun |make-aws-elb-load-balancer-additional-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-additional-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-attributes common-lisp:nil
                       ((additional-attributes :initarg :additional-attributes
                         :type
                         (common-lisp:or
                          aws-elb-load-balancer-additional-attribute-list
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-attributes-additional-attributes
                         :initform common-lisp:nil)
                        (cross-zone-load-balancing :initarg
                         :cross-zone-load-balancing :type
                         (common-lisp:or
                          aws-elb-load-balancer-cross-zone-load-balancing
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-attributes-cross-zone-load-balancing
                         :initform common-lisp:nil)
                        (connection-settings :initarg :connection-settings
                         :type
                         (common-lisp:or
                          aws-elb-load-balancer-connection-settings
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-attributes-connection-settings
                         :initform common-lisp:nil)
                        (connection-draining :initarg :connection-draining
                         :type
                         (common-lisp:or
                          aws-elb-load-balancer-connection-draining
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-attributes-connection-draining
                         :initform common-lisp:nil)
                        (access-log :initarg :access-log :type
                         (common-lisp:or aws-elb-load-balancer-access-log
                                         common-lisp:null)
                         :accessor %aws-elb-load-balancer-attributes-access-log
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-attributes
                    'make-aws-elb-load-balancer-attributes))
 (common-lisp:defun make-aws-elb-load-balancer-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-attributes
                     cross-zone-load-balancing connection-settings
                     connection-draining access-log)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "AccessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-draining))
      (common-lisp:list
       (common-lisp:cons "ConnectionDraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-settings))
      (common-lisp:list
       (common-lisp:cons "ConnectionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-zone-load-balancing))
      (common-lisp:list
       (common-lisp:cons "CrossZoneLoadBalancing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-attributes))
      (common-lisp:list
       (common-lisp:cons "AdditionalAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-backend-server-description
                       common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-backend-server-description-policy-names
                         :initform common-lisp:nil)
                        (instance-port :initarg :instance-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-backend-server-description-instance-port
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-backend-server-description
                    'make-aws-elb-load-balancer-backend-server-description))
 (common-lisp:defun make-aws-elb-load-balancer-backend-server-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names instance-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-backend-server-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-backend-server-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-backend-server-descriptions ()
   '(trivial-types:proper-list
     aws-elb-load-balancer-backend-server-description))
 (common-lisp:defun |make-aws-elb-load-balancer-backend-server-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-backend-server-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-connection-draining
                       common-lisp:nil
                       ((timeout :initarg :timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-connection-draining-timeout
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elb-load-balancer-connection-draining-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-connection-draining
                    'make-aws-elb-load-balancer-connection-draining))
 (common-lisp:defun make-aws-elb-load-balancer-connection-draining
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-connection-draining
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-draining))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-connection-settings
                       common-lisp:nil
                       ((idle-timeout :initarg :idle-timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-connection-settings-idle-timeout
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-connection-settings
                    'make-aws-elb-load-balancer-connection-settings))
 (common-lisp:defun make-aws-elb-load-balancer-connection-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idle-timeout)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-connection-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-connection-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-cross-zone-load-balancing
                       common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-elb-load-balancer-cross-zone-load-balancing-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-cross-zone-load-balancing
                    'make-aws-elb-load-balancer-cross-zone-load-balancing))
 (common-lisp:defun make-aws-elb-load-balancer-cross-zone-load-balancing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-cross-zone-load-balancing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-cross-zone-load-balancing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-details common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-vpc-id
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-subnets
                         :initform common-lisp:nil)
                        (source-security-group :initarg :source-security-group
                         :type
                         (common-lisp:or
                          aws-elb-load-balancer-source-security-group
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-source-security-group
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-security-groups
                         :initform common-lisp:nil)
                        (scheme :initarg :scheme :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-scheme
                         :initform common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or aws-elb-load-balancer-policies
                                         common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-policies
                         :initform common-lisp:nil)
                        (load-balancer-name :initarg :load-balancer-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-load-balancer-name
                         :initform common-lisp:nil)
                        (load-balancer-attributes :initarg
                         :load-balancer-attributes :type
                         (common-lisp:or aws-elb-load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-load-balancer-attributes
                         :initform common-lisp:nil)
                        (listener-descriptions :initarg :listener-descriptions
                         :type
                         (common-lisp:or
                          aws-elb-load-balancer-listener-descriptions
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-listener-descriptions
                         :initform common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or aws-elb-load-balancer-instances
                                         common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-instances
                         :initform common-lisp:nil)
                        (health-check :initarg :health-check :type
                         (common-lisp:or aws-elb-load-balancer-health-check
                                         common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-health-check
                         :initform common-lisp:nil)
                        (dns-name :initarg :dns-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-dns-name
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-details-created-time
                         :initform common-lisp:nil)
                        (canonical-hosted-zone-name-id :initarg
                         :canonical-hosted-zone-name-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-canonical-hosted-zone-name-id
                         :initform common-lisp:nil)
                        (canonical-hosted-zone-name :initarg
                         :canonical-hosted-zone-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-canonical-hosted-zone-name
                         :initform common-lisp:nil)
                        (backend-server-descriptions :initarg
                         :backend-server-descriptions :type
                         (common-lisp:or
                          aws-elb-load-balancer-backend-server-descriptions
                          common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-backend-server-descriptions
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-details-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-details
                    'make-aws-elb-load-balancer-details))
 (common-lisp:defun make-aws-elb-load-balancer-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id subnets source-security-group
                     security-groups scheme policies load-balancer-name
                     load-balancer-attributes listener-descriptions instances
                     health-check dns-name created-time
                     canonical-hosted-zone-name-id canonical-hosted-zone-name
                     backend-server-descriptions availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-server-descriptions))
      (common-lisp:list
       (common-lisp:cons "BackendServerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-name-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneNameID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "HealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'listener-descriptions))
      (common-lisp:list
       (common-lisp:cons "ListenerDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-security-group))
      (common-lisp:list
       (common-lisp:cons "SourceSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-health-check common-lisp:nil
                       ((unhealthy-threshold :initarg :unhealthy-threshold
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-health-check-unhealthy-threshold
                         :initform common-lisp:nil)
                        (timeout :initarg :timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-health-check-timeout :initform
                         common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-health-check-target
                         :initform common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-health-check-interval :initform
                         common-lisp:nil)
                        (healthy-threshold :initarg :healthy-threshold :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-health-check-healthy-threshold
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-health-check
                    'make-aws-elb-load-balancer-health-check))
 (common-lisp:defun make-aws-elb-load-balancer-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unhealthy-threshold timeout target
                     interval healthy-threshold)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-health-check
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-health-check))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-instance common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-instance-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-instance
                    'make-aws-elb-load-balancer-instance))
 (common-lisp:defun make-aws-elb-load-balancer-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-instances ()
   '(trivial-types:proper-list aws-elb-load-balancer-instance))
 (common-lisp:defun |make-aws-elb-load-balancer-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-listener common-lisp:nil
                       ((ssl-certificate-id :initarg :ssl-certificate-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-listener-ssl-certificate-id
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elb-load-balancer-listener-protocol
                         :initform common-lisp:nil)
                        (load-balancer-port :initarg :load-balancer-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-listener-load-balancer-port
                         :initform common-lisp:nil)
                        (instance-protocol :initarg :instance-protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-listener-instance-protocol
                         :initform common-lisp:nil)
                        (instance-port :initarg :instance-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-elb-load-balancer-listener-instance-port
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-listener
                    'make-aws-elb-load-balancer-listener))
 (common-lisp:defun make-aws-elb-load-balancer-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssl-certificate-id protocol
                     load-balancer-port instance-protocol instance-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "InstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-protocol))
      (common-lisp:list
       (common-lisp:cons "InstanceProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-port))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-certificate-id))
      (common-lisp:list
       (common-lisp:cons "SslCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-listener-description
                       common-lisp:nil
                       ((policy-names :initarg :policy-names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-listener-description-policy-names
                         :initform common-lisp:nil)
                        (listener :initarg :listener :type
                         (common-lisp:or aws-elb-load-balancer-listener
                                         common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-listener-description-listener
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-listener-description
                    'make-aws-elb-load-balancer-listener-description))
 (common-lisp:defun make-aws-elb-load-balancer-listener-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-names listener)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-listener-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener))
      (common-lisp:list
       (common-lisp:cons "Listener"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-listener-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elb-load-balancer-listener-descriptions ()
   '(trivial-types:proper-list aws-elb-load-balancer-listener-description))
 (common-lisp:defun |make-aws-elb-load-balancer-listener-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elb-load-balancer-listener-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-policies common-lisp:nil
                       ((other-policies :initarg :other-policies :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-policies-other-policies
                         :initform common-lisp:nil)
                        (lb-cookie-stickiness-policies :initarg
                         :lb-cookie-stickiness-policies :type
                         (common-lisp:or aws-elb-lb-cookie-stickiness-policies
                                         common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-policies-lb-cookie-stickiness-policies
                         :initform common-lisp:nil)
                        (app-cookie-stickiness-policies :initarg
                         :app-cookie-stickiness-policies :type
                         (common-lisp:or aws-elb-app-cookie-stickiness-policies
                                         common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-policies-app-cookie-stickiness-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-policies
                    'make-aws-elb-load-balancer-policies))
 (common-lisp:defun make-aws-elb-load-balancer-policies
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key other-policies
                     lb-cookie-stickiness-policies
                     app-cookie-stickiness-policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-policies
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "AppCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lb-cookie-stickiness-policies))
      (common-lisp:list
       (common-lisp:cons "LbCookieStickinessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-policies))
      (common-lisp:list
       (common-lisp:cons "OtherPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elb-load-balancer-source-security-group
                       common-lisp:nil
                       ((owner-alias :initarg :owner-alias :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-source-security-group-owner-alias
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elb-load-balancer-source-security-group-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elb-load-balancer-source-security-group
                    'make-aws-elb-load-balancer-source-security-group))
 (common-lisp:defun make-aws-elb-load-balancer-source-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner-alias group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elb-load-balancer-source-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-alias))
      (common-lisp:list
       (common-lisp:cons "OwnerAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elb-load-balancer-source-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-elbv2load-balancer-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-attribute-value
                         :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-attribute-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elbv2load-balancer-attribute
                    'make-aws-elbv2load-balancer-attribute))
 (common-lisp:defun make-aws-elbv2load-balancer-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elbv2load-balancer-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-elbv2load-balancer-attributes ()
   '(trivial-types:proper-list aws-elbv2load-balancer-attribute))
 (common-lisp:defun |make-aws-elbv2load-balancer-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-elbv2load-balancer-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-elbv2load-balancer-details common-lisp:nil
                       ((load-balancer-attributes :initarg
                         :load-balancer-attributes :type
                         (common-lisp:or aws-elbv2load-balancer-attributes
                                         common-lisp:null)
                         :accessor
                         %aws-elbv2load-balancer-details-load-balancer-attributes
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-vpc-id
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-type
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or load-balancer-state common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-state
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor
                         %aws-elbv2load-balancer-details-security-groups
                         :initform common-lisp:nil)
                        (scheme :initarg :scheme :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-scheme
                         :initform common-lisp:nil)
                        (ip-address-type :initarg :ip-address-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elbv2load-balancer-details-ip-address-type
                         :initform common-lisp:nil)
                        (dnsname :initarg :dnsname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-dnsname
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-elbv2load-balancer-details-created-time
                         :initform common-lisp:nil)
                        (canonical-hosted-zone-id :initarg
                         :canonical-hosted-zone-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-elbv2load-balancer-details-canonical-hosted-zone-id
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %aws-elbv2load-balancer-details-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-elbv2load-balancer-details
                    'make-aws-elbv2load-balancer-details))
 (common-lisp:defun make-aws-elbv2load-balancer-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-balancer-attributes vpc-id type
                     state security-groups scheme ip-address-type dnsname
                     created-time canonical-hosted-zone-id availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-elbv2load-balancer-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canonical-hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "CanonicalHostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnsname))
      (common-lisp:list
       (common-lisp:cons "DNSName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "IpAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "Scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-balancer-attributes))
      (common-lisp:list
       (common-lisp:cons "LoadBalancerAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-elbv2load-balancer-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-access-key-details common-lisp:nil
                       ((session-context :initarg :session-context :type
                         (common-lisp:or aws-iam-access-key-session-context
                                         common-lisp:null)
                         :accessor %aws-iam-access-key-details-session-context
                         :initform common-lisp:nil)
                        (access-key-id :initarg :access-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-access-key-id
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-account-id
                         :initform common-lisp:nil)
                        (principal-name :initarg :principal-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-principal-name
                         :initform common-lisp:nil)
                        (principal-type :initarg :principal-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-principal-type
                         :initform common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-principal-id
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-created-at
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or aws-iam-access-key-status
                                         common-lisp:null)
                         :accessor %aws-iam-access-key-details-status :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-access-key-details-user-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-details
                    'make-aws-iam-access-key-details))
 (common-lisp:defun make-aws-iam-access-key-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-context access-key-id account-id
                     principal-name principal-type principal-id created-at
                     status user-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-access-key-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-name))
      (common-lisp:list
       (common-lisp:cons "PrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "SessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-access-key-session-context common-lisp:nil
                       ((session-issuer :initarg :session-issuer :type
                         (common-lisp:or
                          aws-iam-access-key-session-context-session-issuer
                          common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer
                         :initform common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or
                          aws-iam-access-key-session-context-attributes
                          common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context
                    'make-aws-iam-access-key-session-context))
 (common-lisp:defun make-aws-iam-access-key-session-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-issuer attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-iam-access-key-session-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-issuer))
      (common-lisp:list
       (common-lisp:cons "SessionIssuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-access-key-session-context-attributes
                       common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-attributes-creation-date
                         :initform common-lisp:nil)
                        (mfa-authenticated :initarg :mfa-authenticated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-iam-access-key-session-context-attributes-mfa-authenticated
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context-attributes
                    'make-aws-iam-access-key-session-context-attributes))
 (common-lisp:defun make-aws-iam-access-key-session-context-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date mfa-authenticated)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-iam-access-key-session-context-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-authenticated))
      (common-lisp:list
       (common-lisp:cons "MfaAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-access-key-session-context-session-issuer
                       common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer-user-name
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer-account-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer-arn
                         :initform common-lisp:nil)
                        (principal-id :initarg :principal-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer-principal-id
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-access-key-session-context-session-issuer-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-access-key-session-context-session-issuer
                    'make-aws-iam-access-key-session-context-session-issuer))
 (common-lisp:defun make-aws-iam-access-key-session-context-session-issuer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name account-id arn principal-id
                     type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-iam-access-key-session-context-session-issuer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-access-key-session-context-session-issuer))
   common-lisp:nil))
(common-lisp:deftype aws-iam-access-key-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-iam-attached-managed-policy common-lisp:nil
                       ((policy-arn :initarg :policy-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-attached-managed-policy-policy-arn
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-attached-managed-policy-policy-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-attached-managed-policy
                    'make-aws-iam-attached-managed-policy))
 (common-lisp:defun make-aws-iam-attached-managed-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-arn policy-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-iam-attached-managed-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-attached-managed-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-attached-managed-policy-list ()
   '(trivial-types:proper-list aws-iam-attached-managed-policy))
 (common-lisp:defun |make-aws-iam-attached-managed-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-attached-managed-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-iam-group-details common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-group-details-path :initform
                         common-lisp:nil)
                        (group-policy-list :initarg :group-policy-list :type
                         (common-lisp:or aws-iam-group-policy-list
                                         common-lisp:null)
                         :accessor %aws-iam-group-details-group-policy-list
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-group-details-group-name :initform
                         common-lisp:nil)
                        (group-id :initarg :group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-group-details-group-id :initform
                         common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-group-details-create-date :initform
                         common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :type
                         (common-lisp:or aws-iam-attached-managed-policy-list
                                         common-lisp:null)
                         :accessor
                         %aws-iam-group-details-attached-managed-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-group-details 'make-aws-iam-group-details))
 (common-lisp:defun make-aws-iam-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path group-policy-list group-name
                     group-id create-date attached-managed-policies)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-policy-list))
      (common-lisp:list
       (common-lisp:cons "GroupPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-group-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-group-policy-policy-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-group-policy 'make-aws-iam-group-policy))
 (common-lisp:defun make-aws-iam-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-group-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-group-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-group-policy-list ()
   '(trivial-types:proper-list aws-iam-group-policy))
 (common-lisp:defun |make-aws-iam-group-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-group-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-iam-instance-profile common-lisp:nil
                       ((roles :initarg :roles :type
                         (common-lisp:or aws-iam-instance-profile-roles
                                         common-lisp:null)
                         :accessor %aws-iam-instance-profile-roles :initform
                         common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-path :initform
                         common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-instance-profile-instance-profile-name
                         :initform common-lisp:nil)
                        (instance-profile-id :initarg :instance-profile-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-instance-profile-instance-profile-id
                         :initform common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-create-date
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-instance-profile 'make-aws-iam-instance-profile))
 (common-lisp:defun make-aws-iam-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key roles path instance-profile-name
                     instance-profile-id create-date arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-instance-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile-id))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-instance-profile-list ()
   '(trivial-types:proper-list aws-iam-instance-profile))
 (common-lisp:defun |make-aws-iam-instance-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-iam-instance-profile-role common-lisp:nil
                       ((role-name :initarg :role-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-role-role-name
                         :initform common-lisp:nil)
                        (role-id :initarg :role-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-role-role-id
                         :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-role-path
                         :initform common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-role-create-date
                         :initform common-lisp:nil)
                        (assume-role-policy-document :initarg
                         :assume-role-policy-document :type
                         (common-lisp:or
                          aws-iam-role-assume-role-policy-document
                          common-lisp:null)
                         :accessor
                         %aws-iam-instance-profile-role-assume-role-policy-document
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-instance-profile-role-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-instance-profile-role
                    'make-aws-iam-instance-profile-role))
 (common-lisp:defun make-aws-iam-instance-profile-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-name role-id path create-date
                     assume-role-policy-document arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-iam-instance-profile-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-instance-profile-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-instance-profile-roles ()
   '(trivial-types:proper-list aws-iam-instance-profile-role))
 (common-lisp:defun |make-aws-iam-instance-profile-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-iam-instance-profile-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-iam-permissions-boundary common-lisp:nil
                       ((permissions-boundary-type :initarg
                         :permissions-boundary-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-permissions-boundary-permissions-boundary-type
                         :initform common-lisp:nil)
                        (permissions-boundary-arn :initarg
                         :permissions-boundary-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-iam-permissions-boundary-permissions-boundary-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-permissions-boundary
                    'make-aws-iam-permissions-boundary))
 (common-lisp:defun make-aws-iam-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permissions-boundary-type
                     permissions-boundary-arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-permissions-boundary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-arn))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-type))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-permissions-boundary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-policy-details common-lisp:nil
                       ((update-date :initarg :update-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-update-date
                         :initform common-lisp:nil)
                        (policy-version-list :initarg :policy-version-list
                         :type
                         (common-lisp:or aws-iam-policy-version-list
                                         common-lisp:null)
                         :accessor %aws-iam-policy-details-policy-version-list
                         :initform common-lisp:nil)
                        (policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-policy-name
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-policy-id :initform
                         common-lisp:nil)
                        (permissions-boundary-usage-count :initarg
                         :permissions-boundary-usage-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-iam-policy-details-permissions-boundary-usage-count
                         :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-path :initform
                         common-lisp:nil)
                        (is-attachable :initarg :is-attachable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-iam-policy-details-is-attachable :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-description
                         :initform common-lisp:nil)
                        (default-version-id :initarg :default-version-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-default-version-id
                         :initform common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-details-create-date
                         :initform common-lisp:nil)
                        (attachment-count :initarg :attachment-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-iam-policy-details-attachment-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-policy-details 'make-aws-iam-policy-details))
 (common-lisp:defun make-aws-iam-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date policy-version-list
                     policy-name policy-id permissions-boundary-usage-count
                     path is-attachable description default-version-id
                     create-date attachment-count)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-list))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-policy-version common-lisp:nil
                       ((create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-version-create-date
                         :initform common-lisp:nil)
                        (is-default-version :initarg :is-default-version :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-iam-policy-version-is-default-version :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-policy-version-version-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-policy-version 'make-aws-iam-policy-version))
 (common-lisp:defun make-aws-iam-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key create-date is-default-version
                     version-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-policy-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-iam-policy-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-policy-version-list ()
   '(trivial-types:proper-list aws-iam-policy-version))
 (common-lisp:defun |make-aws-iam-policy-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-iam-role-assume-role-policy-document ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-iam-role-details common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-role-details-path :initform
                         common-lisp:nil)
                        (max-session-duration :initarg :max-session-duration
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %aws-iam-role-details-max-session-duration
                         :initform common-lisp:nil)
                        (role-policy-list :initarg :role-policy-list :type
                         (common-lisp:or aws-iam-role-policy-list
                                         common-lisp:null)
                         :accessor %aws-iam-role-details-role-policy-list
                         :initform common-lisp:nil)
                        (role-name :initarg :role-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-role-details-role-name :initform
                         common-lisp:nil)
                        (role-id :initarg :role-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-role-details-role-id :initform
                         common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :type
                         (common-lisp:or aws-iam-permissions-boundary
                                         common-lisp:null)
                         :accessor %aws-iam-role-details-permissions-boundary
                         :initform common-lisp:nil)
                        (instance-profile-list :initarg :instance-profile-list
                         :type
                         (common-lisp:or aws-iam-instance-profile-list
                                         common-lisp:null)
                         :accessor %aws-iam-role-details-instance-profile-list
                         :initform common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-role-details-create-date :initform
                         common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :type
                         (common-lisp:or aws-iam-attached-managed-policy-list
                                         common-lisp:null)
                         :accessor
                         %aws-iam-role-details-attached-managed-policies
                         :initform common-lisp:nil)
                        (assume-role-policy-document :initarg
                         :assume-role-policy-document :type
                         (common-lisp:or
                          aws-iam-role-assume-role-policy-document
                          common-lisp:null)
                         :accessor
                         %aws-iam-role-details-assume-role-policy-document
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-role-details 'make-aws-iam-role-details))
 (common-lisp:defun make-aws-iam-role-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path max-session-duration
                     role-policy-list role-name role-id permissions-boundary
                     instance-profile-list create-date
                     attached-managed-policies assume-role-policy-document)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-role-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-list))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-policy-list))
      (common-lisp:list
       (common-lisp:cons "RolePolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-role-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-role-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-role-policy-policy-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-role-policy 'make-aws-iam-role-policy))
 (common-lisp:defun make-aws-iam-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-role-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-role-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-role-policy-list ()
   '(trivial-types:proper-list aws-iam-role-policy))
 (common-lisp:defun |make-aws-iam-role-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-role-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-iam-user-details common-lisp:nil
                       ((user-policy-list :initarg :user-policy-list :type
                         (common-lisp:or aws-iam-user-policy-list
                                         common-lisp:null)
                         :accessor %aws-iam-user-details-user-policy-list
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-user-details-user-name :initform
                         common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-user-details-user-id :initform
                         common-lisp:nil)
                        (permissions-boundary :initarg :permissions-boundary
                         :type
                         (common-lisp:or aws-iam-permissions-boundary
                                         common-lisp:null)
                         :accessor %aws-iam-user-details-permissions-boundary
                         :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-user-details-path :initform
                         common-lisp:nil)
                        (group-list :initarg :group-list :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-iam-user-details-group-list :initform
                         common-lisp:nil)
                        (create-date :initarg :create-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-user-details-create-date :initform
                         common-lisp:nil)
                        (attached-managed-policies :initarg
                         :attached-managed-policies :type
                         (common-lisp:or aws-iam-attached-managed-policy-list
                                         common-lisp:null)
                         :accessor
                         %aws-iam-user-details-attached-managed-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-user-details 'make-aws-iam-user-details))
 (common-lisp:defun make-aws-iam-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-policy-list user-name user-id
                     permissions-boundary path group-list create-date
                     attached-managed-policies)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-policy-list))
      (common-lisp:list
       (common-lisp:cons "UserPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-user-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-iam-user-policy common-lisp:nil
                       ((policy-name :initarg :policy-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-iam-user-policy-policy-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-iam-user-policy 'make-aws-iam-user-policy))
 (common-lisp:defun make-aws-iam-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-iam-user-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-iam-user-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-iam-user-policy-list ()
   '(trivial-types:proper-list aws-iam-user-policy))
 (common-lisp:defun |make-aws-iam-user-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-iam-user-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-kinesis-stream-details common-lisp:nil
                       ((retention-period-hours :initarg
                         :retention-period-hours :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-kinesis-stream-details-retention-period-hours
                         :initform common-lisp:nil)
                        (shard-count :initarg :shard-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-kinesis-stream-details-shard-count :initform
                         common-lisp:nil)
                        (stream-encryption :initarg :stream-encryption :type
                         (common-lisp:or
                          aws-kinesis-stream-stream-encryption-details
                          common-lisp:null)
                         :accessor
                         %aws-kinesis-stream-details-stream-encryption
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kinesis-stream-details-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kinesis-stream-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-kinesis-stream-details
                    'make-aws-kinesis-stream-details))
 (common-lisp:defun make-aws-kinesis-stream-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention-period-hours shard-count
                     stream-encryption arn name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-kinesis-stream-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-encryption))
      (common-lisp:list
       (common-lisp:cons "StreamEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shard-count))
      (common-lisp:list
       (common-lisp:cons "ShardCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-hours))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-kinesis-stream-stream-encryption-details
                       common-lisp:nil
                       ((key-id :initarg :key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-kinesis-stream-stream-encryption-details-key-id
                         :initform common-lisp:nil)
                        (encryption-type :initarg :encryption-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-kinesis-stream-stream-encryption-details-encryption-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-kinesis-stream-stream-encryption-details
                    'make-aws-kinesis-stream-stream-encryption-details))
 (common-lisp:defun make-aws-kinesis-stream-stream-encryption-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-id encryption-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-kinesis-stream-stream-encryption-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-kinesis-stream-stream-encryption-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-kms-key-details common-lisp:nil
                       ((key-rotation-status :initarg :key-rotation-status
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %aws-kms-key-details-key-rotation-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-description :initform
                         common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-origin :initform
                         common-lisp:nil)
                        (key-state :initarg :key-state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-key-state :initform
                         common-lisp:nil)
                        (key-manager :initarg :key-manager :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-key-manager :initform
                         common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-key-id :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %aws-kms-key-details-creation-date :initform
                         common-lisp:nil)
                        (awsaccount-id :initarg :awsaccount-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-kms-key-details-awsaccount-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-kms-key-details 'make-aws-kms-key-details))
 (common-lisp:defun make-aws-kms-key-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-rotation-status description origin
                     key-state key-manager key-id creation-date awsaccount-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-kms-key-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-manager))
      (common-lisp:list
       (common-lisp:cons "KeyManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-state))
      (common-lisp:list
       (common-lisp:cons "KeyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-rotation-status))
      (common-lisp:list
       (common-lisp:cons "KeyRotationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-kms-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-code common-lisp:nil
                       ((zip-file :initarg :zip-file :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-code-zip-file :initform
                         common-lisp:nil)
                        (s3object-version :initarg :s3object-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-code-s3object-version
                         :initform common-lisp:nil)
                        (s3key :initarg :s3key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-code-s3key :initform
                         common-lisp:nil)
                        (s3bucket :initarg :s3bucket :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-code-s3bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-code 'make-aws-lambda-function-code))
 (common-lisp:defun make-aws-lambda-function-code
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zip-file s3object-version s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 'aws-lambda-function-code
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-version))
      (common-lisp:list
       (common-lisp:cons "S3ObjectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-file))
      (common-lisp:list
       (common-lisp:cons "ZipFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-dead-letter-config common-lisp:nil
                       ((target-arn :initarg :target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-lambda-function-dead-letter-config-target-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-dead-letter-config
                    'make-aws-lambda-function-dead-letter-config))
 (common-lisp:defun make-aws-lambda-function-dead-letter-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-function-dead-letter-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-dead-letter-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-details common-lisp:nil
                       ((package-type :initarg :package-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-package-type
                         :initform common-lisp:nil)
                        (architectures :initarg :architectures :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-architectures
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-version
                         :initform common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or aws-lambda-function-vpc-config
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-vpc-config
                         :initform common-lisp:nil)
                        (tracing-config :initarg :tracing-config :type
                         (common-lisp:or aws-lambda-function-tracing-config
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-tracing-config
                         :initform common-lisp:nil)
                        (timeout :initarg :timeout :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-lambda-function-details-timeout :initform
                         common-lisp:nil)
                        (runtime :initarg :runtime :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-runtime
                         :initform common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-role :initform
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-revision-id
                         :initform common-lisp:nil)
                        (memory-size :initarg :memory-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-lambda-function-details-memory-size :initform
                         common-lisp:nil)
                        (master-arn :initarg :master-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-master-arn
                         :initform common-lisp:nil)
                        (layers :initarg :layers :type
                         (common-lisp:or aws-lambda-function-layer-list
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-layers
                         :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-last-modified
                         :initform common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-kms-key-arn
                         :initform common-lisp:nil)
                        (handler :initarg :handler :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-handler
                         :initform common-lisp:nil)
                        (function-name :initarg :function-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-function-name
                         :initform common-lisp:nil)
                        (environment :initarg :environment :type
                         (common-lisp:or aws-lambda-function-environment
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-environment
                         :initform common-lisp:nil)
                        (dead-letter-config :initarg :dead-letter-config :type
                         (common-lisp:or aws-lambda-function-dead-letter-config
                                         common-lisp:null)
                         :accessor
                         %aws-lambda-function-details-dead-letter-config
                         :initform common-lisp:nil)
                        (code-sha256 :initarg :code-sha256 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-details-code-sha256
                         :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or aws-lambda-function-code
                                         common-lisp:null)
                         :accessor %aws-lambda-function-details-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-details
                    'make-aws-lambda-function-details))
 (common-lisp:defun make-aws-lambda-function-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-type architectures version
                     vpc-config tracing-config timeout runtime role revision-id
                     memory-size master-arn layers last-modified kms-key-arn
                     handler function-name environment dead-letter-config
                     code-sha256 code)
   (common-lisp:apply #'common-lisp:make-instance 'aws-lambda-function-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-sha256))
      (common-lisp:list
       (common-lisp:cons "CodeSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dead-letter-config))
      (common-lisp:list
       (common-lisp:cons "DeadLetterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'handler))
      (common-lisp:list
       (common-lisp:cons "Handler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-arn))
      (common-lisp:list
       (common-lisp:cons "MasterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size))
      (common-lisp:list
       (common-lisp:cons "MemorySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "RevisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracing-config))
      (common-lisp:list
       (common-lisp:cons "TracingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architectures))
      (common-lisp:list
       (common-lisp:cons "Architectures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-environment common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or aws-lambda-function-environment-error
                                         common-lisp:null)
                         :accessor %aws-lambda-function-environment-error
                         :initform common-lisp:nil)
                        (variables :initarg :variables :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-lambda-function-environment-variables :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-environment
                    'make-aws-lambda-function-environment))
 (common-lisp:defun make-aws-lambda-function-environment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error variables)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-function-environment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "Variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-environment-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-lambda-function-environment-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-lambda-function-environment-error-error-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-environment-error
                    'make-aws-lambda-function-environment-error))
 (common-lisp:defun make-aws-lambda-function-environment-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message error-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-function-environment-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-environment-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-layer common-lisp:nil
                       ((code-size :initarg :code-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-lambda-function-layer-code-size :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-layer-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-layer
                    'make-aws-lambda-function-layer))
 (common-lisp:defun make-aws-lambda-function-layer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-size arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-lambda-function-layer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-layer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-lambda-function-layer-list ()
   '(trivial-types:proper-list aws-lambda-function-layer))
 (common-lisp:defun |make-aws-lambda-function-layer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-lambda-function-layer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-tracing-config common-lisp:nil
                       ((mode :initarg :mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-tracing-config-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-tracing-config
                    'make-aws-lambda-function-tracing-config))
 (common-lisp:defun make-aws-lambda-function-tracing-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-function-tracing-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-tracing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-function-vpc-config common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-lambda-function-vpc-config-vpc-id
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %aws-lambda-function-vpc-config-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-lambda-function-vpc-config-security-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-function-vpc-config
                    'make-aws-lambda-function-vpc-config))
 (common-lisp:defun make-aws-lambda-function-vpc-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id subnet-ids security-group-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-function-vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-function-vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-lambda-layer-version-details common-lisp:nil
                       ((created-date :initarg :created-date :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-lambda-layer-version-details-created-date
                         :initform common-lisp:nil)
                        (compatible-runtimes :initarg :compatible-runtimes
                         :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-lambda-layer-version-details-compatible-runtimes
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or aws-lambda-layer-version-number
                                         common-lisp:null)
                         :accessor %aws-lambda-layer-version-details-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-lambda-layer-version-details
                    'make-aws-lambda-layer-version-details))
 (common-lisp:defun make-aws-lambda-layer-version-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-date compatible-runtimes version)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-lambda-layer-version-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-runtimes))
      (common-lisp:list
       (common-lisp:cons "CompatibleRuntimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-lambda-layer-version-details))
   common-lisp:nil))
(common-lisp:deftype aws-lambda-layer-version-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass aws-mount-point common-lisp:nil
                       ((container-path :initarg :container-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-mount-point-container-path :initform
                         common-lisp:nil)
                        (source-volume :initarg :source-volume :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-mount-point-source-volume :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-mount-point 'make-aws-mount-point))
 (common-lisp:defun make-aws-mount-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key container-path source-volume)
   (common-lisp:apply #'common-lisp:make-instance 'aws-mount-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-mount-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-mount-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-volume))
      (common-lisp:list
       (common-lisp:cons "SourceVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-path))
      (common-lisp:list
       (common-lisp:cons "ContainerPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-mount-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-mount-point-list ()
   '(trivial-types:proper-list aws-mount-point))
 (common-lisp:defun |make-aws-mount-point-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-mount-point))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-network-firewall-firewall-details common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-vpc-id
                         :initform common-lisp:nil)
                        (subnet-mappings :initarg :subnet-mappings :type
                         (common-lisp:or
                          aws-network-firewall-firewall-subnet-mappings-list
                          common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-subnet-mappings
                         :initform common-lisp:nil)
                        (subnet-change-protection :initarg
                         :subnet-change-protection :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-network-firewall-firewall-details-subnet-change-protection
                         :initform common-lisp:nil)
                        (firewall-policy-change-protection :initarg
                         :firewall-policy-change-protection :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-network-firewall-firewall-details-firewall-policy-change-protection
                         :initform common-lisp:nil)
                        (firewall-policy-arn :initarg :firewall-policy-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-firewall-policy-arn
                         :initform common-lisp:nil)
                        (firewall-name :initarg :firewall-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-firewall-name
                         :initform common-lisp:nil)
                        (firewall-id :initarg :firewall-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-firewall-id
                         :initform common-lisp:nil)
                        (firewall-arn :initarg :firewall-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-firewall-arn
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-details-description
                         :initform common-lisp:nil)
                        (delete-protection :initarg :delete-protection :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-network-firewall-firewall-details-delete-protection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-details
                    'make-aws-network-firewall-firewall-details))
 (common-lisp:defun make-aws-network-firewall-firewall-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id subnet-mappings
                     subnet-change-protection firewall-policy-change-protection
                     firewall-policy-arn firewall-name firewall-id firewall-arn
                     description delete-protection)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-network-firewall-firewall-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-protection))
      (common-lisp:list
       (common-lisp:cons "DeleteProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-id))
      (common-lisp:list
       (common-lisp:cons "FirewallId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-name))
      (common-lisp:list
       (common-lisp:cons "FirewallName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-change-protection))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyChangeProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-change-protection))
      (common-lisp:list
       (common-lisp:cons "SubnetChangeProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mappings))
      (common-lisp:list
       (common-lisp:cons "SubnetMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-network-firewall-firewall-policy-details
                       common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-policy-details-description
                         :initform common-lisp:nil)
                        (firewall-policy-name :initarg :firewall-policy-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-policy-details-firewall-policy-name
                         :initform common-lisp:nil)
                        (firewall-policy-id :initarg :firewall-policy-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-policy-details-firewall-policy-id
                         :initform common-lisp:nil)
                        (firewall-policy-arn :initarg :firewall-policy-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-policy-details-firewall-policy-arn
                         :initform common-lisp:nil)
                        (firewall-policy :initarg :firewall-policy :type
                         (common-lisp:or firewall-policy-details
                                         common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-policy-details-firewall-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-policy-details
                    'make-aws-network-firewall-firewall-policy-details))
 (common-lisp:defun make-aws-network-firewall-firewall-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description firewall-policy-name
                     firewall-policy-id firewall-policy-arn firewall-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-network-firewall-firewall-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-arn))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-policy-id))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-policy-name))
      (common-lisp:list
       (common-lisp:cons "FirewallPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-network-firewall-firewall-subnet-mappings-details
                       common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-firewall-subnet-mappings-details-subnet-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-firewall-subnet-mappings-details
                    'make-aws-network-firewall-firewall-subnet-mappings-details))
 (common-lisp:defun make-aws-network-firewall-firewall-subnet-mappings-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-network-firewall-firewall-subnet-mappings-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-firewall-subnet-mappings-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-network-firewall-firewall-subnet-mappings-list ()
   '(trivial-types:proper-list
     aws-network-firewall-firewall-subnet-mappings-details))
 (common-lisp:defun |make-aws-network-firewall-firewall-subnet-mappings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-network-firewall-firewall-subnet-mappings-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-network-firewall-rule-group-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-type
                         :initform common-lisp:nil)
                        (rule-group-name :initarg :rule-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-rule-group-name
                         :initform common-lisp:nil)
                        (rule-group-id :initarg :rule-group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-rule-group-id
                         :initform common-lisp:nil)
                        (rule-group-arn :initarg :rule-group-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-rule-group-arn
                         :initform common-lisp:nil)
                        (rule-group :initarg :rule-group :type
                         (common-lisp:or rule-group-details common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-rule-group
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-network-firewall-rule-group-details-description
                         :initform common-lisp:nil)
                        (capacity :initarg :capacity :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-network-firewall-rule-group-details-capacity
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-network-firewall-rule-group-details
                    'make-aws-network-firewall-rule-group-details))
 (common-lisp:defun make-aws-network-firewall-rule-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type rule-group-name rule-group-id
                     rule-group-arn rule-group description capacity)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-network-firewall-rule-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-arn))
      (common-lisp:list
       (common-lisp:cons "RuleGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-name))
      (common-lisp:list
       (common-lisp:cons "RuleGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-network-firewall-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-advanced-security-options-details
  common-lisp:nil
  ((master-user-options :initarg :master-user-options :type
    (common-lisp:or aws-open-search-service-domain-master-user-options-details
                    common-lisp:null)
    :accessor
    %aws-open-search-service-domain-advanced-security-options-details-master-user-options
    :initform common-lisp:nil)
   (internal-user-database-enabled :initarg :internal-user-database-enabled
    :type (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-advanced-security-options-details-internal-user-database-enabled
    :initform common-lisp:nil)
   (enabled :initarg :enabled :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-open-search-service-domain-advanced-security-options-details-enabled
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-advanced-security-options-details
   'make-aws-open-search-service-domain-advanced-security-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-advanced-security-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master-user-options
                     internal-user-database-enabled enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-advanced-security-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-options))
      (common-lisp:list
       (common-lisp:cons "MasterUserOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-advanced-security-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-open-search-service-domain-cluster-config-details
                       common-lisp:nil
                       ((dedicated-master-type :initarg :dedicated-master-type
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-cluster-config-details-dedicated-master-type
                         :initform common-lisp:nil)
                        (zone-awareness-enabled :initarg
                         :zone-awareness-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-zone-awareness-enabled
                         :initform common-lisp:nil)
                        (warm-type :initarg :warm-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-cluster-config-details-warm-type
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-cluster-config-details-instance-type
                         :initform common-lisp:nil)
                        (dedicated-master-count :initarg
                         :dedicated-master-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-dedicated-master-count
                         :initform common-lisp:nil)
                        (zone-awareness-config :initarg :zone-awareness-config
                         :type
                         (common-lisp:or
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-cluster-config-details-zone-awareness-config
                         :initform common-lisp:nil)
                        (dedicated-master-enabled :initarg
                         :dedicated-master-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-dedicated-master-enabled
                         :initform common-lisp:nil)
                        (warm-count :initarg :warm-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-warm-count
                         :initform common-lisp:nil)
                        (warm-enabled :initarg :warm-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-warm-enabled
                         :initform common-lisp:nil)
                        (instance-count :initarg :instance-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-open-search-service-domain-cluster-config-details-instance-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-cluster-config-details
                    'make-aws-open-search-service-domain-cluster-config-details))
 (common-lisp:defun make-aws-open-search-service-domain-cluster-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dedicated-master-type
                     zone-awareness-enabled warm-type instance-type
                     dedicated-master-count zone-awareness-config
                     dedicated-master-enabled warm-count warm-enabled
                     instance-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-cluster-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-enabled))
      (common-lisp:list
       (common-lisp:cons "WarmEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-count))
      (common-lisp:list
       (common-lisp:cons "WarmCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-type))
      (common-lisp:list
       (common-lisp:cons "WarmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-cluster-config-zone-awareness-config-details
  common-lisp:nil
  ((availability-zone-count :initarg :availability-zone-count :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-open-search-service-domain-cluster-config-zone-awareness-config-details-availability-zone-count
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-cluster-config-zone-awareness-config-details
   'make-aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
 (common-lisp:defun make-aws-open-search-service-domain-cluster-config-zone-awareness-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zone-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-cluster-config-zone-awareness-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-cluster-config-zone-awareness-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-open-search-service-domain-details common-lisp:nil
                       ((advanced-security-options :initarg
                         :advanced-security-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-advanced-security-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-advanced-security-options
                         :initform common-lisp:nil)
                        (domain-endpoints :initarg :domain-endpoints :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-open-search-service-domain-details-domain-endpoints
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-log-publishing-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-log-publishing-options
                         :initform common-lisp:nil)
                        (vpc-options :initarg :vpc-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-vpc-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-vpc-options
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-domain-endpoint-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-domain-endpoint-options
                         :initform common-lisp:nil)
                        (cluster-config :initarg :cluster-config :type
                         (common-lisp:or
                          aws-open-search-service-domain-cluster-config-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-cluster-config
                         :initform common-lisp:nil)
                        (service-software-options :initarg
                         :service-software-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-service-software-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-service-software-options
                         :initform common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-node-to-node-encryption-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or
                          aws-open-search-service-domain-encryption-at-rest-options-details
                          common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-engine-version
                         :initform common-lisp:nil)
                        (domain-endpoint :initarg :domain-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-domain-endpoint
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-open-search-service-domain-details-id
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-domain-name
                         :initform common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-details-access-policies
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-open-search-service-domain-details-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-details
                    'make-aws-open-search-service-domain-details))
 (common-lisp:defun make-aws-open-search-service-domain-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-security-options
                     domain-endpoints log-publishing-options vpc-options
                     domain-endpoint-options cluster-config
                     service-software-options node-to-node-encryption-options
                     encryption-at-rest-options engine-version domain-endpoint
                     id domain-name access-policies arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-endpoint))
      (common-lisp:list
       (common-lisp:cons "DomainEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-endpoints))
      (common-lisp:list
       (common-lisp:cons "DomainEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-domain-endpoint-options-details
  common-lisp:nil
  ((tlssecurity-policy :initarg :tlssecurity-policy :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-domain-endpoint-options-details-tlssecurity-policy
    :initform common-lisp:nil)
   (custom-endpoint :initarg :custom-endpoint :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-domain-endpoint-options-details-custom-endpoint
    :initform common-lisp:nil)
   (enforce-https :initarg :enforce-https :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-domain-endpoint-options-details-enforce-https
    :initform common-lisp:nil)
   (custom-endpoint-enabled :initarg :custom-endpoint-enabled :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-domain-endpoint-options-details-custom-endpoint-enabled
    :initform common-lisp:nil)
   (custom-endpoint-certificate-arn :initarg :custom-endpoint-certificate-arn
    :type (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-domain-endpoint-options-details-custom-endpoint-certificate-arn
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-domain-endpoint-options-details
   'make-aws-open-search-service-domain-domain-endpoint-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-domain-endpoint-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tlssecurity-policy custom-endpoint
                     enforce-https custom-endpoint-enabled
                     custom-endpoint-certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-domain-endpoint-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoint))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-domain-endpoint-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-encryption-at-rest-options-details
  common-lisp:nil
  ((kms-key-id :initarg :kms-key-id :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-encryption-at-rest-options-details-kms-key-id
    :initform common-lisp:nil)
   (enabled :initarg :enabled :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-open-search-service-domain-encryption-at-rest-options-details-enabled
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-encryption-at-rest-options-details
   'make-aws-open-search-service-domain-encryption-at-rest-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-encryption-at-rest-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-encryption-at-rest-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-encryption-at-rest-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-open-search-service-domain-log-publishing-option
                       common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-open-search-service-domain-log-publishing-option-enabled
                         :initform common-lisp:nil)
                        (cloud-watch-logs-log-group-arn :initarg
                         :cloud-watch-logs-log-group-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-log-publishing-option-cloud-watch-logs-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-log-publishing-option
                    'make-aws-open-search-service-domain-log-publishing-option))
 (common-lisp:defun make-aws-open-search-service-domain-log-publishing-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled cloud-watch-logs-log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-log-publishing-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-log-publishing-options-details common-lisp:nil
  ((audit-logs :initarg :audit-logs :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null)
    :accessor
    %aws-open-search-service-domain-log-publishing-options-details-audit-logs
    :initform common-lisp:nil)
   (search-slow-logs :initarg :search-slow-logs :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null)
    :accessor
    %aws-open-search-service-domain-log-publishing-options-details-search-slow-logs
    :initform common-lisp:nil)
   (index-slow-logs :initarg :index-slow-logs :type
    (common-lisp:or aws-open-search-service-domain-log-publishing-option
                    common-lisp:null)
    :accessor
    %aws-open-search-service-domain-log-publishing-options-details-index-slow-logs
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-log-publishing-options-details
   'make-aws-open-search-service-domain-log-publishing-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-log-publishing-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audit-logs search-slow-logs
                     index-slow-logs)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-log-publishing-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-slow-logs))
      (common-lisp:list
       (common-lisp:cons "IndexSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-slow-logs))
      (common-lisp:list
       (common-lisp:cons "SearchSlowLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-logs))
      (common-lisp:list
       (common-lisp:cons "AuditLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-log-publishing-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-master-user-options-details common-lisp:nil
  ((master-user-password :initarg :master-user-password :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-master-user-options-details-master-user-password
    :initform common-lisp:nil)
   (master-user-name :initarg :master-user-name :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-master-user-options-details-master-user-name
    :initform common-lisp:nil)
   (master-user-arn :initarg :master-user-arn :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-master-user-options-details-master-user-arn
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-master-user-options-details
                    'make-aws-open-search-service-domain-master-user-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-master-user-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master-user-password master-user-name
                     master-user-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-master-user-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-arn))
      (common-lisp:list
       (common-lisp:cons "MasterUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-master-user-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-node-to-node-encryption-options-details
  common-lisp:nil
  ((enabled :initarg :enabled :type (common-lisp:or boolean common-lisp:null)
    :accessor
    %aws-open-search-service-domain-node-to-node-encryption-options-details-enabled
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-node-to-node-encryption-options-details
   'make-aws-open-search-service-domain-node-to-node-encryption-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-node-to-node-encryption-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-node-to-node-encryption-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-node-to-node-encryption-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-open-search-service-domain-service-software-options-details
  common-lisp:nil
  ((optional-deployment :initarg :optional-deployment :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-optional-deployment
    :initform common-lisp:nil)
   (update-status :initarg :update-status :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-update-status
    :initform common-lisp:nil)
   (update-available :initarg :update-available :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-update-available
    :initform common-lisp:nil)
   (new-version :initarg :new-version :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-new-version
    :initform common-lisp:nil)
   (description :initarg :description :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-description
    :initform common-lisp:nil)
   (current-version :initarg :current-version :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-current-version
    :initform common-lisp:nil)
   (cancellable :initarg :cancellable :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-cancellable
    :initform common-lisp:nil)
   (automated-update-date :initarg :automated-update-date :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-open-search-service-domain-service-software-options-details-automated-update-date
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-open-search-service-domain-service-software-options-details
   'make-aws-open-search-service-domain-service-software-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-service-software-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key optional-deployment update-status
                     update-available new-version description current-version
                     cancellable automated-update-date)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-service-software-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-deployment))
      (common-lisp:list
       (common-lisp:cons "OptionalDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-service-software-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-open-search-service-domain-vpc-options-details
                       common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-vpc-options-details-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-open-search-service-domain-vpc-options-details-security-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-open-search-service-domain-vpc-options-details
                    'make-aws-open-search-service-domain-vpc-options-details))
 (common-lisp:defun make-aws-open-search-service-domain-vpc-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids security-group-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-open-search-service-domain-vpc-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-open-search-service-domain-vpc-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-cluster-associated-role common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-associated-role-status
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-associated-role-role-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-associated-role
                    'make-aws-rds-db-cluster-associated-role))
 (common-lisp:defun make-aws-rds-db-cluster-associated-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-cluster-associated-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-associated-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-associated-roles ()
   '(trivial-types:proper-list aws-rds-db-cluster-associated-role))
 (common-lisp:defun |make-aws-rds-db-cluster-associated-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-associated-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-cluster-details common-lisp:nil
                       ((iam-database-authentication-enabled :initarg
                         :iam-database-authentication-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-iam-database-authentication-enabled
                         :initform common-lisp:nil)
                        (db-cluster-members :initarg :db-cluster-members :type
                         (common-lisp:or aws-rds-db-cluster-members
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-db-cluster-members
                         :initform common-lisp:nil)
                        (db-cluster-identifier :initarg :db-cluster-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-db-cluster-identifier
                         :initform common-lisp:nil)
                        (db-cluster-option-group-memberships :initarg
                         :db-cluster-option-group-memberships :type
                         (common-lisp:or
                          aws-rds-db-cluster-option-group-memberships
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-db-cluster-option-group-memberships
                         :initform common-lisp:nil)
                        (db-subnet-group :initarg :db-subnet-group :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-db-subnet-group
                         :initform common-lisp:nil)
                        (db-cluster-parameter-group :initarg
                         :db-cluster-parameter-group :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-db-cluster-parameter-group
                         :initform common-lisp:nil)
                        (domain-memberships :initarg :domain-memberships :type
                         (common-lisp:or aws-rds-db-domain-memberships
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-domain-memberships
                         :initform common-lisp:nil)
                        (cross-account-clone :initarg :cross-account-clone
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-cross-account-clone
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-copy-tags-to-snapshot
                         :initform common-lisp:nil)
                        (activity-stream-status :initarg
                         :activity-stream-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-activity-stream-status
                         :initform common-lisp:nil)
                        (http-endpoint-enabled :initarg :http-endpoint-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-http-endpoint-enabled
                         :initform common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-deletion-protection
                         :initform common-lisp:nil)
                        (engine-mode :initarg :engine-mode :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-engine-mode
                         :initform common-lisp:nil)
                        (enabled-cloud-watch-logs-exports :initarg
                         :enabled-cloud-watch-logs-exports :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-enabled-cloud-watch-logs-exports
                         :initform common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-cluster-create-time
                         :initform common-lisp:nil)
                        (associated-roles :initarg :associated-roles :type
                         (common-lisp:or aws-rds-db-cluster-associated-roles
                                         common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-associated-roles
                         :initform common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-db-cluster-resource-id
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-kms-key-id
                         :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-storage-encrypted
                         :initform common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-hosted-zone-id
                         :initform common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :type
                         (common-lisp:or
                          aws-rds-db-instance-vpc-security-groups
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-vpc-security-groups
                         :initform common-lisp:nil)
                        (read-replica-identifiers :initarg
                         :read-replica-identifiers :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-read-replica-identifiers
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-preferred-backup-window
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-master-username
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-port :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-engine :initform
                         common-lisp:nil)
                        (multi-az :initarg :multi-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-multi-az :initform
                         common-lisp:nil)
                        (custom-endpoints :initarg :custom-endpoints :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-custom-endpoints
                         :initform common-lisp:nil)
                        (reader-endpoint :initarg :reader-endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-reader-endpoint
                         :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-endpoint
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-status :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-details-database-name
                         :initform common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-backup-retention-period
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-details-availability-zones
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-details-allocated-storage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-details
                    'make-aws-rds-db-cluster-details))
 (common-lisp:defun make-aws-rds-db-cluster-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-database-authentication-enabled
                     db-cluster-members db-cluster-identifier
                     db-cluster-option-group-memberships db-subnet-group
                     db-cluster-parameter-group domain-memberships
                     cross-account-clone copy-tags-to-snapshot
                     activity-stream-status http-endpoint-enabled
                     deletion-protection engine-mode
                     enabled-cloud-watch-logs-exports cluster-create-time
                     associated-roles db-cluster-resource-id kms-key-id
                     storage-encrypted hosted-zone-id vpc-security-groups
                     read-replica-identifiers preferred-maintenance-window
                     preferred-backup-window master-username port
                     engine-version engine multi-az custom-endpoints
                     reader-endpoint endpoint status database-name
                     backup-retention-period availability-zones
                     allocated-storage)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoints))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-clone))
      (common-lisp:list
       (common-lisp:cons "CrossAccountClone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DbClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DbClusterOptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-cluster-members))
      (common-lisp:list
       (common-lisp:cons "DbClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-cluster-member common-lisp:nil
                       ((db-cluster-parameter-group-status :initarg
                         :db-cluster-parameter-group-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-member-db-cluster-parameter-group-status
                         :initform common-lisp:nil)
                        (db-instance-identifier :initarg
                         :db-instance-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-member-db-instance-identifier
                         :initform common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-member-promotion-tier :initform
                         common-lisp:nil)
                        (is-cluster-writer :initarg :is-cluster-writer :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-member-is-cluster-writer :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-member
                    'make-aws-rds-db-cluster-member))
 (common-lisp:defun make-aws-rds-db-cluster-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key db-cluster-parameter-group-status
                     db-instance-identifier promotion-tier is-cluster-writer)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-cluster-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DbClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-members ()
   '(trivial-types:proper-list aws-rds-db-cluster-member))
 (common-lisp:defun |make-aws-rds-db-cluster-members|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-cluster-option-group-membership
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-option-group-membership-status
                         :initform common-lisp:nil)
                        (db-cluster-option-group-name :initarg
                         :db-cluster-option-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-option-group-membership-db-cluster-option-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-option-group-membership
                    'make-aws-rds-db-cluster-option-group-membership))
 (common-lisp:defun make-aws-rds-db-cluster-option-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status db-cluster-option-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-cluster-option-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-option-group-name))
      (common-lisp:list
       (common-lisp:cons "DbClusterOptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-cluster-option-group-memberships ()
   '(trivial-types:proper-list aws-rds-db-cluster-option-group-membership))
 (common-lisp:defun |make-aws-rds-db-cluster-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-cluster-option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-cluster-snapshot-details common-lisp:nil
                       ((iam-database-authentication-enabled :initarg
                         :iam-database-authentication-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-snapshot-details-iam-database-authentication-enabled
                         :initform common-lisp:nil)
                        (db-cluster-snapshot-identifier :initarg
                         :db-cluster-snapshot-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-db-cluster-snapshot-identifier
                         :initform common-lisp:nil)
                        (db-cluster-identifier :initarg :db-cluster-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-db-cluster-identifier
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-kms-key-id
                         :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-cluster-snapshot-details-storage-encrypted
                         :initform common-lisp:nil)
                        (percent-progress :initarg :percent-progress :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-snapshot-details-percent-progress
                         :initform common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-snapshot-type
                         :initform common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-license-model
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-engine-version
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-master-username
                         :initform common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-cluster-create-time
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-snapshot-details-vpc-id
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-snapshot-details-port :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-snapshot-details-status
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-cluster-snapshot-details-allocated-storage
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-cluster-snapshot-details-engine
                         :initform common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-snapshot-create-time
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-cluster-snapshot-details-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-cluster-snapshot-details
                    'make-aws-rds-db-cluster-snapshot-details))
 (common-lisp:defun make-aws-rds-db-cluster-snapshot-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-database-authentication-enabled
                     db-cluster-snapshot-identifier db-cluster-identifier
                     kms-key-id storage-encrypted percent-progress
                     snapshot-type license-model engine-version master-username
                     cluster-create-time vpc-id port status allocated-storage
                     engine snapshot-create-time availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-cluster-snapshot-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-cluster-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-domain-membership common-lisp:nil
                       ((iam-role-name :initarg :iam-role-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-domain-membership-iam-role-name
                         :initform common-lisp:nil)
                        (fqdn :initarg :fqdn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-domain-membership-fqdn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-domain-membership-status
                         :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-domain-membership-domain
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-domain-membership
                    'make-aws-rds-db-domain-membership))
 (common-lisp:defun make-aws-rds-db-domain-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-name fqdn status domain)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-domain-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "Fqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-name))
      (common-lisp:list
       (common-lisp:cons "IamRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-domain-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-domain-memberships ()
   '(trivial-types:proper-list aws-rds-db-domain-membership))
 (common-lisp:defun |make-aws-rds-db-domain-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-domain-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-instance-associated-role common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-associated-role-status
                         :initform common-lisp:nil)
                        (feature-name :initarg :feature-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-associated-role-feature-name
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-associated-role-role-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-associated-role
                    'make-aws-rds-db-instance-associated-role))
 (common-lisp:defun make-aws-rds-db-instance-associated-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status feature-name role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-instance-associated-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-associated-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-instance-associated-roles ()
   '(trivial-types:proper-list aws-rds-db-instance-associated-role))
 (common-lisp:defun |make-aws-rds-db-instance-associated-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-instance-associated-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-instance-details common-lisp:nil
                       ((max-allocated-storage :initarg :max-allocated-storage
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-max-allocated-storage
                         :initform common-lisp:nil)
                        (listener-endpoint :initarg :listener-endpoint :type
                         (common-lisp:or aws-rds-db-instance-endpoint
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-listener-endpoint
                         :initform common-lisp:nil)
                        (processor-features :initarg :processor-features :type
                         (common-lisp:or aws-rds-db-processor-features
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-processor-features
                         :initform common-lisp:nil)
                        (enabled-cloud-watch-logs-exports :initarg
                         :enabled-cloud-watch-logs-exports :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-enabled-cloud-watch-logs-exports
                         :initform common-lisp:nil)
                        (performance-insights-retention-period :initarg
                         :performance-insights-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-performance-insights-retention-period
                         :initform common-lisp:nil)
                        (performance-insights-kms-key-id :initarg
                         :performance-insights-kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-performance-insights-kms-key-id
                         :initform common-lisp:nil)
                        (performance-insights-enabled :initarg
                         :performance-insights-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-instance-details-performance-insights-enabled
                         :initform common-lisp:nil)
                        (timezone :initarg :timezone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-timezone
                         :initform common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-promotion-tier :initform
                         common-lisp:nil)
                        (monitoring-role-arn :initarg :monitoring-role-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-monitoring-role-arn
                         :initform common-lisp:nil)
                        (monitoring-interval :initarg :monitoring-interval
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-monitoring-interval
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-copy-tags-to-snapshot
                         :initform common-lisp:nil)
                        (domain-memberships :initarg :domain-memberships :type
                         (common-lisp:or aws-rds-db-domain-memberships
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-domain-memberships
                         :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-storage-type
                         :initform common-lisp:nil)
                        (status-infos :initarg :status-infos :type
                         (common-lisp:or aws-rds-db-status-infos
                                         common-lisp:null)
                         :accessor %aws-rds-db-instance-details-status-infos
                         :initform common-lisp:nil)
                        (secondary-availability-zone :initarg
                         :secondary-availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-secondary-availability-zone
                         :initform common-lisp:nil)
                        (character-set-name :initarg :character-set-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-character-set-name
                         :initform common-lisp:nil)
                        (option-group-memberships :initarg
                         :option-group-memberships :type
                         (common-lisp:or aws-rds-db-option-group-memberships
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-option-group-memberships
                         :initform common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-iops :initform
                         common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-license-model
                         :initform common-lisp:nil)
                        (read-replica-dbcluster-identifiers :initarg
                         :read-replica-dbcluster-identifiers :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-read-replica-dbcluster-identifiers
                         :initform common-lisp:nil)
                        (read-replica-dbinstance-identifiers :initarg
                         :read-replica-dbinstance-identifiers :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-read-replica-dbinstance-identifiers
                         :initform common-lisp:nil)
                        (read-replica-source-dbinstance-identifier :initarg
                         :read-replica-source-dbinstance-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-read-replica-source-dbinstance-identifier
                         :initform common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-instance-details-auto-minor-version-upgrade
                         :initform common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-latest-restorable-time
                         :initform common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :type
                         (common-lisp:or aws-rds-db-pending-modified-values
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-pending-modified-values
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (db-subnet-group :initarg :db-subnet-group :type
                         (common-lisp:or aws-rds-db-subnet-group
                                         common-lisp:null)
                         :accessor %aws-rds-db-instance-details-db-subnet-group
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-availability-zone
                         :initform common-lisp:nil)
                        (db-parameter-groups :initarg :db-parameter-groups
                         :type
                         (common-lisp:or aws-rds-db-parameter-groups
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-db-parameter-groups
                         :initform common-lisp:nil)
                        (db-security-groups :initarg :db-security-groups :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-db-security-groups
                         :initform common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-backup-retention-period
                         :initform common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-preferred-backup-window
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-allocated-storage
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-master-username
                         :initform common-lisp:nil)
                        (db-instance-status :initarg :db-instance-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-db-instance-status
                         :initform common-lisp:nil)
                        (enhanced-monitoring-resource-arn :initarg
                         :enhanced-monitoring-resource-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-enhanced-monitoring-resource-arn
                         :initform common-lisp:nil)
                        (multi-az :initarg :multi-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-instance-details-multi-az :initform
                         common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :type
                         (common-lisp:or
                          aws-rds-db-instance-vpc-security-groups
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-vpc-security-groups
                         :initform common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-tde-credential-arn
                         :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-instance-details-storage-encrypted
                         :initform common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-publicly-accessible
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-kms-key-id
                         :initform common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-instance-create-time
                         :initform common-lisp:nil)
                        (iamdatabase-authentication-enabled :initarg
                         :iamdatabase-authentication-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-instance-details-iamdatabase-authentication-enabled
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-engine
                         :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or aws-rds-db-instance-endpoint
                                         common-lisp:null)
                         :accessor %aws-rds-db-instance-details-endpoint
                         :initform common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-deletion-protection
                         :initform common-lisp:nil)
                        (dbname :initarg :dbname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-dbname
                         :initform common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-details-dbi-resource-id
                         :initform common-lisp:nil)
                        (db-instance-port :initarg :db-instance-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-details-db-instance-port
                         :initform common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-dbinstance-class
                         :initform common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-dbinstance-identifier
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-dbcluster-identifier
                         :initform common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-cacertificate-identifier
                         :initform common-lisp:nil)
                        (associated-roles :initarg :associated-roles :type
                         (common-lisp:or aws-rds-db-instance-associated-roles
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-details-associated-roles
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-details
                    'make-aws-rds-db-instance-details))
 (common-lisp:defun make-aws-rds-db-instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-allocated-storage listener-endpoint
                     processor-features enabled-cloud-watch-logs-exports
                     performance-insights-retention-period
                     performance-insights-kms-key-id
                     performance-insights-enabled timezone promotion-tier
                     monitoring-role-arn monitoring-interval
                     copy-tags-to-snapshot domain-memberships storage-type
                     status-infos secondary-availability-zone
                     character-set-name option-group-memberships iops
                     license-model read-replica-dbcluster-identifiers
                     read-replica-dbinstance-identifiers
                     read-replica-source-dbinstance-identifier
                     auto-minor-version-upgrade latest-restorable-time
                     pending-modified-values preferred-maintenance-window
                     db-subnet-group availability-zone db-parameter-groups
                     db-security-groups backup-retention-period
                     preferred-backup-window allocated-storage master-username
                     db-instance-status enhanced-monitoring-resource-arn
                     multi-az vpc-security-groups tde-credential-arn
                     storage-encrypted publicly-accessible kms-key-id
                     instance-create-time iamdatabase-authentication-enabled
                     engine-version engine endpoint deletion-protection dbname
                     dbi-resource-id db-instance-port dbinstance-class
                     dbinstance-identifier dbcluster-identifier
                     cacertificate-identifier associated-roles)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-port))
      (common-lisp:list
       (common-lisp:cons "DbInstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-monitoring-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoringResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-status))
      (common-lisp:list
       (common-lisp:cons "DbInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-security-groups))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DbParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "OptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-endpoint))
      (common-lisp:list
       (common-lisp:cons "ListenerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-instance-endpoint common-lisp:nil
                       ((hosted-zone-id :initarg :hosted-zone-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-endpoint-hosted-zone-id
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-instance-endpoint-port :initform
                         common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-instance-endpoint-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-endpoint
                    'make-aws-rds-db-instance-endpoint))
 (common-lisp:defun make-aws-rds-db-instance-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hosted-zone-id port address)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-instance-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-instance-vpc-security-group common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-vpc-security-group-status
                         :initform common-lisp:nil)
                        (vpc-security-group-id :initarg :vpc-security-group-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-instance-vpc-security-group-vpc-security-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-instance-vpc-security-group
                    'make-aws-rds-db-instance-vpc-security-group))
 (common-lisp:defun make-aws-rds-db-instance-vpc-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status vpc-security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-instance-vpc-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-instance-vpc-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-instance-vpc-security-groups ()
   '(trivial-types:proper-list aws-rds-db-instance-vpc-security-group))
 (common-lisp:defun |make-aws-rds-db-instance-vpc-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-instance-vpc-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-option-group-membership common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-option-group-membership-status
                         :initform common-lisp:nil)
                        (option-group-name :initarg :option-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-option-group-membership-option-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-option-group-membership
                    'make-aws-rds-db-option-group-membership))
 (common-lisp:defun make-aws-rds-db-option-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status option-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-option-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-option-group-memberships ()
   '(trivial-types:proper-list aws-rds-db-option-group-membership))
 (common-lisp:defun |make-aws-rds-db-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-parameter-group common-lisp:nil
                       ((parameter-apply-status :initarg
                         :parameter-apply-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-parameter-group-parameter-apply-status
                         :initform common-lisp:nil)
                        (db-parameter-group-name :initarg
                         :db-parameter-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-parameter-group-db-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-parameter-group
                    'make-aws-rds-db-parameter-group))
 (common-lisp:defun make-aws-rds-db-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-apply-status
                     db-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DbParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-parameter-groups ()
   '(trivial-types:proper-list aws-rds-db-parameter-group))
 (common-lisp:defun |make-aws-rds-db-parameter-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-pending-modified-values common-lisp:nil
                       ((processor-features :initarg :processor-features :type
                         (common-lisp:or aws-rds-db-processor-features
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-processor-features
                         :initform common-lisp:nil)
                        (pending-cloud-watch-logs-exports :initarg
                         :pending-cloud-watch-logs-exports :type
                         (common-lisp:or
                          aws-rds-pending-cloud-watch-logs-exports
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-pending-cloud-watch-logs-exports
                         :initform common-lisp:nil)
                        (db-subnet-group-name :initarg :db-subnet-group-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-db-subnet-group-name
                         :initform common-lisp:nil)
                        (ca-certificate-identifier :initarg
                         :ca-certificate-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-ca-certificate-identifier
                         :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-storage-type
                         :initform common-lisp:nil)
                        (db-instance-identifier :initarg
                         :db-instance-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-db-instance-identifier
                         :initform common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-pending-modified-values-iops :initform
                         common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-license-model
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-engine-version
                         :initform common-lisp:nil)
                        (multi-az :initarg :multi-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-pending-modified-values-multi-az :initform
                         common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-pending-modified-values-backup-retention-period
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-pending-modified-values-port :initform
                         common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-master-user-password
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-pending-modified-values-allocated-storage
                         :initform common-lisp:nil)
                        (db-instance-class :initarg :db-instance-class :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-pending-modified-values-db-instance-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-pending-modified-values
                    'make-aws-rds-db-pending-modified-values))
 (common-lisp:defun make-aws-rds-db-pending-modified-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processor-features
                     pending-cloud-watch-logs-exports db-subnet-group-name
                     ca-certificate-identifier storage-type
                     db-instance-identifier iops license-model engine-version
                     multi-az backup-retention-period port master-user-password
                     allocated-storage db-instance-class)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-class))
      (common-lisp:list
       (common-lisp:cons "DbInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CaCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloud-watch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudWatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-processor-feature common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-processor-feature-value
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-processor-feature-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-processor-feature
                    'make-aws-rds-db-processor-feature))
 (common-lisp:defun make-aws-rds-db-processor-feature
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-processor-feature
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-processor-features ()
   '(trivial-types:proper-list aws-rds-db-processor-feature))
 (common-lisp:defun |make-aws-rds-db-processor-features|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-security-group-details common-lisp:nil
                       ((vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-security-group-details-vpc-id
                         :initform common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-security-group-details-owner-id
                         :initform common-lisp:nil)
                        (ip-ranges :initarg :ip-ranges :type
                         (common-lisp:or aws-rds-db-security-group-ip-ranges
                                         common-lisp:null)
                         :accessor %aws-rds-db-security-group-details-ip-ranges
                         :initform common-lisp:nil)
                        (ec2security-groups :initarg :ec2security-groups :type
                         (common-lisp:or
                          aws-rds-db-security-group-ec2security-groups
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-details-ec2security-groups
                         :initform common-lisp:nil)
                        (db-security-group-name :initarg
                         :db-security-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-details-db-security-group-name
                         :initform common-lisp:nil)
                        (db-security-group-description :initarg
                         :db-security-group-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-details-db-security-group-description
                         :initform common-lisp:nil)
                        (db-security-group-arn :initarg :db-security-group-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-details-db-security-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-details
                    'make-aws-rds-db-security-group-details))
 (common-lisp:defun make-aws-rds-db-security-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id owner-id ip-ranges
                     ec2security-groups db-security-group-name
                     db-security-group-description db-security-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-security-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-arn))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-description))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-security-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-ranges))
      (common-lisp:list
       (common-lisp:cons "IpRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-security-group-ec2security-group
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-ec2security-group-status
                         :initform common-lisp:nil)
                        (ec2security-group-owner-id :initarg
                         :ec2security-group-owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-ec2security-group-ec2security-group-owner-id
                         :initform common-lisp:nil)
                        (ec2security-group-name :initarg
                         :ec2security-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-ec2security-group-ec2security-group-name
                         :initform common-lisp:nil)
                        (ec2security-group-id :initarg :ec2security-group-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-security-group-ec2security-group-ec2security-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-ec2security-group
                    'make-aws-rds-db-security-group-ec2security-group))
 (common-lisp:defun make-aws-rds-db-security-group-ec2security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status ec2security-group-owner-id
                     ec2security-group-name ec2security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-security-group-ec2security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "Ec2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-security-group-ec2security-groups ()
   '(trivial-types:proper-list aws-rds-db-security-group-ec2security-group))
 (common-lisp:defun |make-aws-rds-db-security-group-ec2security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-security-group-ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-security-group-ip-range common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-security-group-ip-range-status
                         :initform common-lisp:nil)
                        (cidr-ip :initarg :cidr-ip :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-security-group-ip-range-cidr-ip
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-security-group-ip-range
                    'make-aws-rds-db-security-group-ip-range))
 (common-lisp:defun make-aws-rds-db-security-group-ip-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status cidr-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-security-group-ip-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-ip))
      (common-lisp:list
       (common-lisp:cons "CidrIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-security-group-ip-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-security-group-ip-ranges ()
   '(trivial-types:proper-list aws-rds-db-security-group-ip-range))
 (common-lisp:defun |make-aws-rds-db-security-group-ip-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-security-group-ip-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-snapshot-details common-lisp:nil
                       ((dbi-resource-id :initarg :dbi-resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-dbi-resource-id
                         :initform common-lisp:nil)
                        (processor-features :initarg :processor-features :type
                         (common-lisp:or aws-rds-db-processor-features
                                         common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-processor-features
                         :initform common-lisp:nil)
                        (iam-database-authentication-enabled :initarg
                         :iam-database-authentication-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-iam-database-authentication-enabled
                         :initform common-lisp:nil)
                        (timezone :initarg :timezone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-timezone
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-kms-key-id
                         :initform common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-encrypted :initform
                         common-lisp:nil)
                        (tde-credential-arn :initarg :tde-credential-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-tde-credential-arn
                         :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-storage-type
                         :initform common-lisp:nil)
                        (source-db-snapshot-identifier :initarg
                         :source-db-snapshot-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-source-db-snapshot-identifier
                         :initform common-lisp:nil)
                        (source-region :initarg :source-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-source-region
                         :initform common-lisp:nil)
                        (percent-progress :initarg :percent-progress :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-percent-progress
                         :initform common-lisp:nil)
                        (option-group-name :initarg :option-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-option-group-name
                         :initform common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-iops :initform
                         common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-snapshot-type
                         :initform common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-license-model
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-engine-version
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-master-username
                         :initform common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-instance-create-time
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-vpc-id
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-availability-zone
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-port :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-status
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-rds-db-snapshot-details-allocated-storage
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-snapshot-details-engine
                         :initform common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-snapshot-create-time
                         :initform common-lisp:nil)
                        (db-instance-identifier :initarg
                         :db-instance-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-db-instance-identifier
                         :initform common-lisp:nil)
                        (db-snapshot-identifier :initarg
                         :db-snapshot-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-snapshot-details-db-snapshot-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-snapshot-details
                    'make-aws-rds-db-snapshot-details))
 (common-lisp:defun make-aws-rds-db-snapshot-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbi-resource-id processor-features
                     iam-database-authentication-enabled timezone kms-key-id
                     encrypted tde-credential-arn storage-type
                     source-db-snapshot-identifier source-region
                     percent-progress option-group-name iops snapshot-type
                     license-model engine-version master-username
                     instance-create-time vpc-id availability-zone port status
                     allocated-storage engine snapshot-create-time
                     db-instance-identifier db-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-snapshot-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DbSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-db-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDbSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-database-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IamDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-status-info common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-status-info-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-status-info-status :initform
                         common-lisp:nil)
                        (normal :initarg :normal :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-db-status-info-normal :initform
                         common-lisp:nil)
                        (status-type :initarg :status-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-status-info-status-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-status-info 'make-aws-rds-db-status-info))
 (common-lisp:defun make-aws-rds-db-status-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message status normal status-type)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-status-infos ()
   '(trivial-types:proper-list aws-rds-db-status-info))
 (common-lisp:defun |make-aws-rds-db-status-infos|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-rds-db-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-subnet-group common-lisp:nil
                       ((db-subnet-group-arn :initarg :db-subnet-group-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-subnet-group-db-subnet-group-arn
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or aws-rds-db-subnet-group-subnets
                                         common-lisp:null)
                         :accessor %aws-rds-db-subnet-group-subnets :initform
                         common-lisp:nil)
                        (subnet-group-status :initarg :subnet-group-status
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-subnet-group-subnet-group-status
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-db-subnet-group-vpc-id :initform
                         common-lisp:nil)
                        (db-subnet-group-description :initarg
                         :db-subnet-group-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-db-subnet-group-description
                         :initform common-lisp:nil)
                        (db-subnet-group-name :initarg :db-subnet-group-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-db-subnet-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group 'make-aws-rds-db-subnet-group))
 (common-lisp:defun make-aws-rds-db-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key db-subnet-group-arn subnets
                     subnet-group-status vpc-id db-subnet-group-description
                     db-subnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-rds-db-subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-subnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DbSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-subnet-group-subnet common-lisp:nil
                       ((subnet-status :initarg :subnet-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-subnet-subnet-status
                         :initform common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or
                          aws-rds-db-subnet-group-subnet-availability-zone
                          common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-subnet-subnet-availability-zone
                         :initform common-lisp:nil)
                        (subnet-identifier :initarg :subnet-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-subnet-subnet-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group-subnet
                    'make-aws-rds-db-subnet-group-subnet))
 (common-lisp:defun make-aws-rds-db-subnet-group-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-status subnet-availability-zone
                     subnet-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-subnet-group-subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-db-subnet-group-subnet-availability-zone
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-db-subnet-group-subnet-availability-zone-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-db-subnet-group-subnet-availability-zone
                    'make-aws-rds-db-subnet-group-subnet-availability-zone))
 (common-lisp:defun make-aws-rds-db-subnet-group-subnet-availability-zone
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-db-subnet-group-subnet-availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-db-subnet-group-subnet-availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-rds-db-subnet-group-subnets ()
   '(trivial-types:proper-list aws-rds-db-subnet-group-subnet))
 (common-lisp:defun |make-aws-rds-db-subnet-group-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-rds-db-subnet-group-subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-rds-event-subscription-details common-lisp:nil
                       ((subscription-creation-time :initarg
                         :subscription-creation-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-subscription-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-rds-event-subscription-details-status
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-source-type
                         :initform common-lisp:nil)
                        (source-ids-list :initarg :source-ids-list :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-source-ids-list
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-sns-topic-arn
                         :initform common-lisp:nil)
                        (event-subscription-arn :initarg
                         :event-subscription-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-event-subscription-arn
                         :initform common-lisp:nil)
                        (event-categories-list :initarg :event-categories-list
                         :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-event-categories-list
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-rds-event-subscription-details-enabled :initform
                         common-lisp:nil)
                        (customer-aws-id :initarg :customer-aws-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-customer-aws-id
                         :initform common-lisp:nil)
                        (cust-subscription-id :initarg :cust-subscription-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-rds-event-subscription-details-cust-subscription-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-event-subscription-details
                    'make-aws-rds-event-subscription-details))
 (common-lisp:defun make-aws-rds-event-subscription-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-creation-time status
                     source-type source-ids-list sns-topic-arn
                     event-subscription-arn event-categories-list enabled
                     customer-aws-id cust-subscription-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-event-subscription-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-event-subscription-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-rds-pending-cloud-watch-logs-exports common-lisp:nil
                       ((log-types-to-disable :initarg :log-types-to-disable
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-pending-cloud-watch-logs-exports-log-types-to-disable
                         :initform common-lisp:nil)
                        (log-types-to-enable :initarg :log-types-to-enable
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-rds-pending-cloud-watch-logs-exports-log-types-to-enable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-rds-pending-cloud-watch-logs-exports
                    'make-aws-rds-pending-cloud-watch-logs-exports))
 (common-lisp:defun make-aws-rds-pending-cloud-watch-logs-exports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-types-to-disable log-types-to-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-rds-pending-cloud-watch-logs-exports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-rds-pending-cloud-watch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-cluster-node common-lisp:nil
                       ((public-ip-address :initarg :public-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-node-public-ip-address
                         :initform common-lisp:nil)
                        (private-ip-address :initarg :private-ip-address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-node-private-ip-address
                         :initform common-lisp:nil)
                        (node-role :initarg :node-role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-cluster-node-node-role
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-node
                    'make-aws-redshift-cluster-cluster-node))
 (common-lisp:defun make-aws-redshift-cluster-cluster-node
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-ip-address private-ip-address
                     node-role)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-cluster-node
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-role))
      (common-lisp:list
       (common-lisp:cons "NodeRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "PrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "PublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-nodes ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-node))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-cluster-parameter-group
                       common-lisp:nil
                       ((parameter-group-name :initarg :parameter-group-name
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-group-parameter-group-name
                         :initform common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-group-parameter-apply-status
                         :initform common-lisp:nil)
                        (cluster-parameter-status-list :initarg
                         :cluster-parameter-status-list :type
                         (common-lisp:or
                          aws-redshift-cluster-cluster-parameter-status-list
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-group-cluster-parameter-status-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-parameter-group
                    'make-aws-redshift-cluster-cluster-parameter-group))
 (common-lisp:defun make-aws-redshift-cluster-cluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-group-name
                     parameter-apply-status cluster-parameter-status-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-cluster-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-status-list))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "ParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-parameter-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-parameter-group))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-parameter-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-cluster-parameter-status
                       common-lisp:nil
                       ((parameter-apply-error-description :initarg
                         :parameter-apply-error-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-status-parameter-apply-error-description
                         :initform common-lisp:nil)
                        (parameter-apply-status :initarg
                         :parameter-apply-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-status-parameter-apply-status
                         :initform common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-parameter-status-parameter-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-parameter-status
                    'make-aws-redshift-cluster-cluster-parameter-status))
 (common-lisp:defun make-aws-redshift-cluster-cluster-parameter-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-apply-error-description
                     parameter-apply-status parameter-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-cluster-parameter-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-error-description))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyErrorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-parameter-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-parameter-status-list ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-parameter-status))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-parameter-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-parameter-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-cluster-security-group
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-security-group-status
                         :initform common-lisp:nil)
                        (cluster-security-group-name :initarg
                         :cluster-security-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-security-group-cluster-security-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-security-group
                    'make-aws-redshift-cluster-cluster-security-group))
 (common-lisp:defun make-aws-redshift-cluster-cluster-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status cluster-security-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-cluster-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-cluster-security-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-cluster-security-group))
 (common-lisp:defun |make-aws-redshift-cluster-cluster-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-cluster-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-cluster-snapshot-copy-status
                       common-lisp:nil
                       ((snapshot-copy-grant-name :initarg
                         :snapshot-copy-grant-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-snapshot-copy-status-snapshot-copy-grant-name
                         :initform common-lisp:nil)
                        (retention-period :initarg :retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-cluster-snapshot-copy-status-retention-period
                         :initform common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-cluster-snapshot-copy-status-manual-snapshot-retention-period
                         :initform common-lisp:nil)
                        (destination-region :initarg :destination-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-cluster-snapshot-copy-status-destination-region
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-cluster-snapshot-copy-status
                    'make-aws-redshift-cluster-cluster-snapshot-copy-status))
 (common-lisp:defun make-aws-redshift-cluster-cluster-snapshot-copy-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-copy-grant-name retention-period
                     manual-snapshot-retention-period destination-region)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-cluster-snapshot-copy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-grant-name))
      (common-lisp:list
       (common-lisp:cons "SnapshotCopyGrantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-cluster-snapshot-copy-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-deferred-maintenance-window
                       common-lisp:nil
                       ((defer-maintenance-start-time :initarg
                         :defer-maintenance-start-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-deferred-maintenance-window-defer-maintenance-start-time
                         :initform common-lisp:nil)
                        (defer-maintenance-identifier :initarg
                         :defer-maintenance-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-deferred-maintenance-window-defer-maintenance-identifier
                         :initform common-lisp:nil)
                        (defer-maintenance-end-time :initarg
                         :defer-maintenance-end-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-deferred-maintenance-window-defer-maintenance-end-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-deferred-maintenance-window
                    'make-aws-redshift-cluster-deferred-maintenance-window))
 (common-lisp:defun make-aws-redshift-cluster-deferred-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key defer-maintenance-start-time
                     defer-maintenance-identifier defer-maintenance-end-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-deferred-maintenance-window
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-end-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-identifier))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'defer-maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "DeferMaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-deferred-maintenance-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-deferred-maintenance-windows ()
   '(trivial-types:proper-list
     aws-redshift-cluster-deferred-maintenance-window))
 (common-lisp:defun |make-aws-redshift-cluster-deferred-maintenance-windows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-deferred-maintenance-window))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-details common-lisp:nil
                       ((logging-status :initarg :logging-status :type
                         (common-lisp:or aws-redshift-cluster-logging-status
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-logging-status
                         :initform common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :type
                         (common-lisp:or
                          aws-redshift-cluster-vpc-security-groups
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-vpc-security-groups
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-details-vpc-id
                         :initform common-lisp:nil)
                        (snapshot-schedule-state :initarg
                         :snapshot-schedule-state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-snapshot-schedule-state
                         :initform common-lisp:nil)
                        (snapshot-schedule-identifier :initarg
                         :snapshot-schedule-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-snapshot-schedule-identifier
                         :initform common-lisp:nil)
                        (restore-status :initarg :restore-status :type
                         (common-lisp:or aws-redshift-cluster-restore-status
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-restore-status
                         :initform common-lisp:nil)
                        (resize-info :initarg :resize-info :type
                         (common-lisp:or aws-redshift-cluster-resize-info
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-resize-info
                         :initform common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-publicly-accessible
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :type
                         (common-lisp:or
                          aws-redshift-cluster-pending-modified-values
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-pending-modified-values
                         :initform common-lisp:nil)
                        (pending-actions :initarg :pending-actions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-pending-actions
                         :initform common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-details-number-of-nodes
                         :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-details-node-type
                         :initform common-lisp:nil)
                        (next-maintenance-window-start-time :initarg
                         :next-maintenance-window-start-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-next-maintenance-window-start-time
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-master-username
                         :initform common-lisp:nil)
                        (manual-snapshot-retention-period :initarg
                         :manual-snapshot-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-details-manual-snapshot-retention-period
                         :initform common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-maintenance-track-name
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-details-kms-key-id
                         :initform common-lisp:nil)
                        (iam-roles :initarg :iam-roles :type
                         (common-lisp:or aws-redshift-cluster-iam-roles
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-iam-roles
                         :initform common-lisp:nil)
                        (hsm-status :initarg :hsm-status :type
                         (common-lisp:or aws-redshift-cluster-hsm-status
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-hsm-status
                         :initform common-lisp:nil)
                        (expected-next-snapshot-schedule-time-status :initarg
                         :expected-next-snapshot-schedule-time-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-expected-next-snapshot-schedule-time-status
                         :initform common-lisp:nil)
                        (expected-next-snapshot-schedule-time :initarg
                         :expected-next-snapshot-schedule-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-expected-next-snapshot-schedule-time
                         :initform common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-enhanced-vpc-routing
                         :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or aws-redshift-cluster-endpoint
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-endpoint
                         :initform common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-redshift-cluster-details-encrypted :initform
                         common-lisp:nil)
                        (elastic-resize-number-of-node-options :initarg
                         :elastic-resize-number-of-node-options :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-elastic-resize-number-of-node-options
                         :initform common-lisp:nil)
                        (elastic-ip-status :initarg :elastic-ip-status :type
                         (common-lisp:or aws-redshift-cluster-elastic-ip-status
                                         common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-elastic-ip-status
                         :initform common-lisp:nil)
                        (deferred-maintenance-windows :initarg
                         :deferred-maintenance-windows :type
                         (common-lisp:or
                          aws-redshift-cluster-deferred-maintenance-windows
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-deferred-maintenance-windows
                         :initform common-lisp:nil)
                        (dbname :initarg :dbname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-details-dbname
                         :initform common-lisp:nil)
                        (cluster-version :initarg :cluster-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-version
                         :initform common-lisp:nil)
                        (cluster-subnet-group-name :initarg
                         :cluster-subnet-group-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-subnet-group-name
                         :initform common-lisp:nil)
                        (cluster-status :initarg :cluster-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-details-cluster-status
                         :initform common-lisp:nil)
                        (cluster-snapshot-copy-status :initarg
                         :cluster-snapshot-copy-status :type
                         (common-lisp:or
                          aws-redshift-cluster-cluster-snapshot-copy-status
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-snapshot-copy-status
                         :initform common-lisp:nil)
                        (cluster-security-groups :initarg
                         :cluster-security-groups :type
                         (common-lisp:or
                          aws-redshift-cluster-cluster-security-groups
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-security-groups
                         :initform common-lisp:nil)
                        (cluster-revision-number :initarg
                         :cluster-revision-number :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-revision-number
                         :initform common-lisp:nil)
                        (cluster-public-key :initarg :cluster-public-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-public-key
                         :initform common-lisp:nil)
                        (cluster-parameter-groups :initarg
                         :cluster-parameter-groups :type
                         (common-lisp:or
                          aws-redshift-cluster-cluster-parameter-groups
                          common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-parameter-groups
                         :initform common-lisp:nil)
                        (cluster-nodes :initarg :cluster-nodes :type
                         (common-lisp:or aws-redshift-cluster-cluster-nodes
                                         common-lisp:null)
                         :accessor %aws-redshift-cluster-details-cluster-nodes
                         :initform common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-identifier
                         :initform common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-create-time
                         :initform common-lisp:nil)
                        (cluster-availability-status :initarg
                         :cluster-availability-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-cluster-availability-status
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-availability-zone
                         :initform common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-details-automated-snapshot-retention-period
                         :initform common-lisp:nil)
                        (allow-version-upgrade :initarg :allow-version-upgrade
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-details-allow-version-upgrade
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-details
                    'make-aws-redshift-cluster-details))
 (common-lisp:defun make-aws-redshift-cluster-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging-status vpc-security-groups vpc-id
                     snapshot-schedule-state snapshot-schedule-identifier
                     restore-status resize-info publicly-accessible
                     preferred-maintenance-window pending-modified-values
                     pending-actions number-of-nodes node-type
                     next-maintenance-window-start-time master-username
                     manual-snapshot-retention-period maintenance-track-name
                     kms-key-id iam-roles hsm-status
                     expected-next-snapshot-schedule-time-status
                     expected-next-snapshot-schedule-time enhanced-vpc-routing
                     endpoint encrypted elastic-resize-number-of-node-options
                     elastic-ip-status deferred-maintenance-windows dbname
                     cluster-version cluster-subnet-group-name cluster-status
                     cluster-snapshot-copy-status cluster-security-groups
                     cluster-revision-number cluster-public-key
                     cluster-parameter-groups cluster-nodes cluster-identifier
                     cluster-create-time cluster-availability-status
                     availability-zone automated-snapshot-retention-period
                     allow-version-upgrade)
   (common-lisp:apply #'common-lisp:make-instance 'aws-redshift-cluster-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-availability-status))
      (common-lisp:list
       (common-lisp:cons "ClusterAvailabilityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-nodes))
      (common-lisp:list
       (common-lisp:cons "ClusterNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-public-key))
      (common-lisp:list
       (common-lisp:cons "ClusterPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-revision-number))
      (common-lisp:list
       (common-lisp:cons "ClusterRevisionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-security-groups))
      (common-lisp:list
       (common-lisp:cons "ClusterSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-snapshot-copy-status))
      (common-lisp:list
       (common-lisp:cons "ClusterSnapshotCopyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-status))
      (common-lisp:list
       (common-lisp:cons "ClusterStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cluster-subnet-group-name))
      (common-lisp:list
       (common-lisp:cons "ClusterSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deferred-maintenance-windows))
      (common-lisp:list
       (common-lisp:cons "DeferredMaintenanceWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip-status))
      (common-lisp:list
       (common-lisp:cons "ElasticIpStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-resize-number-of-node-options))
      (common-lisp:list
       (common-lisp:cons "ElasticResizeNumberOfNodeOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-next-snapshot-schedule-time-status))
      (common-lisp:list
       (common-lisp:cons "ExpectedNextSnapshotScheduleTimeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hsm-status))
      (common-lisp:list
       (common-lisp:cons "HsmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "IamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manual-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "ManualSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-maintenance-window-start-time))
      (common-lisp:list
       (common-lisp:cons "NextMaintenanceWindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-actions))
      (common-lisp:list
       (common-lisp:cons "PendingActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-info))
      (common-lisp:list
       (common-lisp:cons "ResizeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-schedule-state))
      (common-lisp:list
       (common-lisp:cons "SnapshotScheduleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-status))
      (common-lisp:list
       (common-lisp:cons "LoggingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-elastic-ip-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-elastic-ip-status-status
                         :initform common-lisp:nil)
                        (elastic-ip :initarg :elastic-ip :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-elastic-ip-status-elastic-ip
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-elastic-ip-status
                    'make-aws-redshift-cluster-elastic-ip-status))
 (common-lisp:defun make-aws-redshift-cluster-elastic-ip-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status elastic-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-elastic-ip-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-elastic-ip-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-endpoint common-lisp:nil
                       ((port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-endpoint-port :initform
                         common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-endpoint-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-endpoint
                    'make-aws-redshift-cluster-endpoint))
 (common-lisp:defun make-aws-redshift-cluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port address)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-hsm-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-hsm-status-status
                         :initform common-lisp:nil)
                        (hsm-configuration-identifier :initarg
                         :hsm-configuration-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-hsm-status-hsm-configuration-identifier
                         :initform common-lisp:nil)
                        (hsm-client-certificate-identifier :initarg
                         :hsm-client-certificate-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-hsm-status-hsm-client-certificate-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-hsm-status
                    'make-aws-redshift-cluster-hsm-status))
 (common-lisp:defun make-aws-redshift-cluster-hsm-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status hsm-configuration-identifier
                     hsm-client-certificate-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-hsm-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-client-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmClientCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hsm-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "HsmConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-hsm-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-iam-role common-lisp:nil
                       ((iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-iam-role-iam-role-arn
                         :initform common-lisp:nil)
                        (apply-status :initarg :apply-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-iam-role-apply-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-iam-role
                    'make-aws-redshift-cluster-iam-role))
 (common-lisp:defun make-aws-redshift-cluster-iam-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn apply-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-iam-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-status))
      (common-lisp:list
       (common-lisp:cons "ApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-iam-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-iam-roles ()
   '(trivial-types:proper-list aws-redshift-cluster-iam-role))
 (common-lisp:defun |make-aws-redshift-cluster-iam-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-iam-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-logging-status common-lisp:nil
                       ((s3key-prefix :initarg :s3key-prefix :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-logging-status-s3key-prefix
                         :initform common-lisp:nil)
                        (logging-enabled :initarg :logging-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-redshift-cluster-logging-status-logging-enabled
                         :initform common-lisp:nil)
                        (last-successful-delivery-time :initarg
                         :last-successful-delivery-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-logging-status-last-successful-delivery-time
                         :initform common-lisp:nil)
                        (last-failure-time :initarg :last-failure-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-logging-status-last-failure-time
                         :initform common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-logging-status-last-failure-message
                         :initform common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-logging-status-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-logging-status
                    'make-aws-redshift-cluster-logging-status))
 (common-lisp:defun make-aws-redshift-cluster-logging-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key-prefix logging-enabled
                     last-successful-delivery-time last-failure-time
                     last-failure-message bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-logging-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-failure-time))
      (common-lisp:list
       (common-lisp:cons "LastFailureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-logging-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-pending-modified-values
                       common-lisp:nil
                       ((publicly-accessible :initarg :publicly-accessible
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-publicly-accessible
                         :initform common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-pending-modified-values-number-of-nodes
                         :initform common-lisp:nil)
                        (node-type :initarg :node-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-node-type
                         :initform common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-master-user-password
                         :initform common-lisp:nil)
                        (maintenance-track-name :initarg
                         :maintenance-track-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-maintenance-track-name
                         :initform common-lisp:nil)
                        (enhanced-vpc-routing :initarg :enhanced-vpc-routing
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-enhanced-vpc-routing
                         :initform common-lisp:nil)
                        (encryption-type :initarg :encryption-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-encryption-type
                         :initform common-lisp:nil)
                        (cluster-version :initarg :cluster-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-cluster-version
                         :initform common-lisp:nil)
                        (cluster-type :initarg :cluster-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-cluster-type
                         :initform common-lisp:nil)
                        (cluster-identifier :initarg :cluster-identifier :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-pending-modified-values-cluster-identifier
                         :initform common-lisp:nil)
                        (automated-snapshot-retention-period :initarg
                         :automated-snapshot-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-redshift-cluster-pending-modified-values-automated-snapshot-retention-period
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-pending-modified-values
                    'make-aws-redshift-cluster-pending-modified-values))
 (common-lisp:defun make-aws-redshift-cluster-pending-modified-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publicly-accessible number-of-nodes
                     node-type master-user-password maintenance-track-name
                     enhanced-vpc-routing encryption-type cluster-version
                     cluster-type cluster-identifier
                     automated-snapshot-retention-period)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-type))
      (common-lisp:list
       (common-lisp:cons "ClusterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-version))
      (common-lisp:list
       (common-lisp:cons "ClusterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "EnhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-track-name))
      (common-lisp:list
       (common-lisp:cons "MaintenanceTrackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-resize-info common-lisp:nil
                       ((resize-type :initarg :resize-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-resize-info-resize-type
                         :initform common-lisp:nil)
                        (allow-cancel-resize :initarg :allow-cancel-resize
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-resize-info-allow-cancel-resize
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-resize-info
                    'make-aws-redshift-cluster-resize-info))
 (common-lisp:defun make-aws-redshift-cluster-resize-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resize-type allow-cancel-resize)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-resize-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cancel-resize))
      (common-lisp:list
       (common-lisp:cons "AllowCancelResize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resize-type))
      (common-lisp:list
       (common-lisp:cons "ResizeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-resize-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-restore-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-redshift-cluster-restore-status-status
                         :initform common-lisp:nil)
                        (snapshot-size-in-mega-bytes :initarg
                         :snapshot-size-in-mega-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-redshift-cluster-restore-status-snapshot-size-in-mega-bytes
                         :initform common-lisp:nil)
                        (progress-in-mega-bytes :initarg
                         :progress-in-mega-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-redshift-cluster-restore-status-progress-in-mega-bytes
                         :initform common-lisp:nil)
                        (estimated-time-to-completion-in-seconds :initarg
                         :estimated-time-to-completion-in-seconds :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-redshift-cluster-restore-status-estimated-time-to-completion-in-seconds
                         :initform common-lisp:nil)
                        (elapsed-time-in-seconds :initarg
                         :elapsed-time-in-seconds :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-redshift-cluster-restore-status-elapsed-time-in-seconds
                         :initform common-lisp:nil)
                        (current-restore-rate-in-mega-bytes-per-second :initarg
                         :current-restore-rate-in-mega-bytes-per-second :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %aws-redshift-cluster-restore-status-current-restore-rate-in-mega-bytes-per-second
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-restore-status
                    'make-aws-redshift-cluster-restore-status))
 (common-lisp:defun make-aws-redshift-cluster-restore-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status snapshot-size-in-mega-bytes
                     progress-in-mega-bytes
                     estimated-time-to-completion-in-seconds
                     elapsed-time-in-seconds
                     current-restore-rate-in-mega-bytes-per-second)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-restore-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-restore-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "CurrentRestoreRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-time-to-completion-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EstimatedTimeToCompletionInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "ProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "SnapshotSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-redshift-cluster-vpc-security-group common-lisp:nil
                       ((vpc-security-group-id :initarg :vpc-security-group-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-vpc-security-group-vpc-security-group-id
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-redshift-cluster-vpc-security-group-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-redshift-cluster-vpc-security-group
                    'make-aws-redshift-cluster-vpc-security-group))
 (common-lisp:defun make-aws-redshift-cluster-vpc-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-security-group-id status)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-redshift-cluster-vpc-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-redshift-cluster-vpc-security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-redshift-cluster-vpc-security-groups ()
   '(trivial-types:proper-list aws-redshift-cluster-vpc-security-group))
 (common-lisp:defun |make-aws-redshift-cluster-vpc-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-redshift-cluster-vpc-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3account-public-access-block-details
                       common-lisp:nil
                       ((restrict-public-buckets :initarg
                         :restrict-public-buckets :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-s3account-public-access-block-details-restrict-public-buckets
                         :initform common-lisp:nil)
                        (ignore-public-acls :initarg :ignore-public-acls :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-s3account-public-access-block-details-ignore-public-acls
                         :initform common-lisp:nil)
                        (block-public-policy :initarg :block-public-policy
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-s3account-public-access-block-details-block-public-policy
                         :initform common-lisp:nil)
                        (block-public-acls :initarg :block-public-acls :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-s3account-public-access-block-details-block-public-acls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3account-public-access-block-details
                    'make-aws-s3account-public-access-block-details))
 (common-lisp:defun make-aws-s3account-public-access-block-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrict-public-buckets
                     ignore-public-acls block-public-policy block-public-acls)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3account-public-access-block-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3account-public-access-block-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-bucket-lifecycle-configuration-details
                       common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or
                          aws-s3bucket-bucket-lifecycle-configuration-rules-list
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-bucket-lifecycle-configuration-details-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-lifecycle-configuration-details
                    'make-aws-s3bucket-bucket-lifecycle-configuration-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
  common-lisp:nil
  ((days-after-initiation :initarg :days-after-initiation :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details-days-after-initiation
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key days-after-initiation)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-details common-lisp:nil
  ((transitions :initarg :transitions :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-transitions
    :initform common-lisp:nil)
   (status :initarg :status :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-status :initform
    common-lisp:nil)
   (prefix :initarg :prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-prefix :initform
    common-lisp:nil)
   (noncurrent-version-transitions :initarg :noncurrent-version-transitions
    :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-noncurrent-version-transitions
    :initform common-lisp:nil)
   (noncurrent-version-expiration-in-days :initarg
    :noncurrent-version-expiration-in-days :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-noncurrent-version-expiration-in-days
    :initform common-lisp:nil)
   (id :initarg :id :type (common-lisp:or non-empty-string common-lisp:null)
    :accessor %aws-s3bucket-bucket-lifecycle-configuration-rules-details-id
    :initform common-lisp:nil)
   (filter :initarg :filter :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
     common-lisp:null)
    :accessor %aws-s3bucket-bucket-lifecycle-configuration-rules-details-filter
    :initform common-lisp:nil)
   (expired-object-delete-marker :initarg :expired-object-delete-marker :type
    (common-lisp:or boolean common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-expired-object-delete-marker
    :initform common-lisp:nil)
   (expiration-in-days :initarg :expiration-in-days :type
    (common-lisp:or integer common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-expiration-in-days
    :initform common-lisp:nil)
   (expiration-date :initarg :expiration-date :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-expiration-date
    :initform common-lisp:nil)
   (abort-incomplete-multipart-upload :initarg
    :abort-incomplete-multipart-upload :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-abort-incomplete-multipart-upload-details
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-details-abort-incomplete-multipart-upload
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-lifecycle-configuration-rules-details
                    'make-aws-s3bucket-bucket-lifecycle-configuration-rules-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transitions status prefix
                     noncurrent-version-transitions
                     noncurrent-version-expiration-in-days id filter
                     expired-object-delete-marker expiration-in-days
                     expiration-date abort-incomplete-multipart-upload)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
  common-lisp:nil
  ((predicate :initarg :predicate :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details-predicate
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key predicate)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
  common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details-type
    :initform common-lisp:nil)
   (tag :initarg :tag :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details-tag
    :initform common-lisp:nil)
   (prefix :initarg :prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details-prefix
    :initform common-lisp:nil)
   (operands :initarg :operands :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details-operands
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tag prefix operands)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operands))
      (common-lisp:list
       (common-lisp:cons "Operands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
  common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details-type
    :initform common-lisp:nil)
   (tag :initarg :tag :type
    (common-lisp:or
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
     common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details-tag
    :initform common-lisp:nil)
   (prefix :initarg :prefix :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details-prefix
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tag prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details-value
    :initform common-lisp:nil)
   (key :initarg :key :type (common-lisp:or non-empty-string common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details-key
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-operands-tag-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
  common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details-value
    :initform common-lisp:nil)
   (key :initarg :key :type (common-lisp:or non-empty-string common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details-key
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-filter-predicate-tag-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-list ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
  common-lisp:nil
  ((storage-class :initarg :storage-class :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details-storage-class
    :initform common-lisp:nil)
   (days :initarg :days :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details-days
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class days)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-noncurrent-version-transitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
  common-lisp:nil
  ((storage-class :initarg :storage-class :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details-storage-class
    :initform common-lisp:nil)
   (days :initarg :days :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details-days
    :initform common-lisp:nil)
   (date :initarg :date :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details-date
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
   'make-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
 (common-lisp:defun make-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-class days date)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
 (common-lisp:defun |make-aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-bucket-lifecycle-configuration-rules-transitions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-bucket-versioning-configuration
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-bucket-versioning-configuration-status
                         :initform common-lisp:nil)
                        (is-mfa-delete-enabled :initarg :is-mfa-delete-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %aws-s3bucket-bucket-versioning-configuration-is-mfa-delete-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-bucket-versioning-configuration
                    'make-aws-s3bucket-bucket-versioning-configuration))
 (common-lisp:defun make-aws-s3bucket-bucket-versioning-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status is-mfa-delete-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-bucket-versioning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-mfa-delete-enabled))
      (common-lisp:list
       (common-lisp:cons "IsMfaDeleteEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-bucket-versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-details common-lisp:nil
                       ((object-lock-configuration :initarg
                         :object-lock-configuration :type
                         (common-lisp:or aws-s3bucket-object-lock-configuration
                                         common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-object-lock-configuration
                         :initform common-lisp:nil)
                        (bucket-versioning-configuration :initarg
                         :bucket-versioning-configuration :type
                         (common-lisp:or
                          aws-s3bucket-bucket-versioning-configuration
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-bucket-versioning-configuration
                         :initform common-lisp:nil)
                        (bucket-notification-configuration :initarg
                         :bucket-notification-configuration :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-bucket-notification-configuration
                         :initform common-lisp:nil)
                        (bucket-website-configuration :initarg
                         :bucket-website-configuration :type
                         (common-lisp:or aws-s3bucket-website-configuration
                                         common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-bucket-website-configuration
                         :initform common-lisp:nil)
                        (bucket-logging-configuration :initarg
                         :bucket-logging-configuration :type
                         (common-lisp:or aws-s3bucket-logging-configuration
                                         common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-bucket-logging-configuration
                         :initform common-lisp:nil)
                        (access-control-list :initarg :access-control-list
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3bucket-details-access-control-list
                         :initform common-lisp:nil)
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :type
                         (common-lisp:or
                          aws-s3account-public-access-block-details
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-public-access-block-configuration
                         :initform common-lisp:nil)
                        (bucket-lifecycle-configuration :initarg
                         :bucket-lifecycle-configuration :type
                         (common-lisp:or
                          aws-s3bucket-bucket-lifecycle-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-bucket-lifecycle-configuration
                         :initform common-lisp:nil)
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :type
                         (common-lisp:or
                          aws-s3bucket-server-side-encryption-configuration
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-details-server-side-encryption-configuration
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3bucket-details-created-at :initform
                         common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3bucket-details-owner-account-id
                         :initform common-lisp:nil)
                        (owner-name :initarg :owner-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3bucket-details-owner-name :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3bucket-details-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-details 'make-aws-s3bucket-details))
 (common-lisp:defun make-aws-s3bucket-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-lock-configuration
                     bucket-versioning-configuration
                     bucket-notification-configuration
                     bucket-website-configuration bucket-logging-configuration
                     access-control-list public-access-block-configuration
                     bucket-lifecycle-configuration
                     server-side-encryption-configuration created-at
                     owner-account-id owner-name owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-s3bucket-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketLifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-logging-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketLoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-website-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketWebsiteConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-notification-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketNotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "BucketVersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-s3bucket-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-logging-configuration common-lisp:nil
                       ((log-file-prefix :initarg :log-file-prefix :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-logging-configuration-log-file-prefix
                         :initform common-lisp:nil)
                        (destination-bucket-name :initarg
                         :destination-bucket-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-logging-configuration-destination-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-logging-configuration
                    'make-aws-s3bucket-logging-configuration))
 (common-lisp:defun make-aws-s3bucket-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-file-prefix destination-bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-bucket-name))
      (common-lisp:list
       (common-lisp:cons "DestinationBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-prefix))
      (common-lisp:list
       (common-lisp:cons "LogFilePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-notification-configuration common-lisp:nil
                       ((configurations :initarg :configurations :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration
                    'make-aws-s3bucket-notification-configuration))
 (common-lisp:defun make-aws-s3bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "Configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-notification-configuration-detail
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-detail-type
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-detail-destination
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration-filter
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-detail-filter
                         :initform common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration-events
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-detail-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-detail
                    'make-aws-s3bucket-notification-configuration-detail))
 (common-lisp:defun make-aws-s3bucket-notification-configuration-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type destination filter events)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-notification-configuration-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-details ()
   '(trivial-types:proper-list aws-s3bucket-notification-configuration-detail))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-notification-configuration-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-events ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-notification-configuration-filter
                       common-lisp:nil
                       ((s3key-filter :initarg :s3key-filter :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration-s3key-filter
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-filter-s3key-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-filter
                    'make-aws-s3bucket-notification-configuration-filter))
 (common-lisp:defun make-aws-s3bucket-notification-configuration-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key-filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-notification-configuration-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-filter))
      (common-lisp:list
       (common-lisp:cons "S3KeyFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-notification-configuration-s3key-filter
                       common-lisp:nil
                       ((filter-rules :initarg :filter-rules :type
                         (common-lisp:or
                          aws-s3bucket-notification-configuration-s3key-filter-rules
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-notification-configuration-s3key-filter-filter-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-s3key-filter
                    'make-aws-s3bucket-notification-configuration-s3key-filter))
 (common-lisp:defun make-aws-s3bucket-notification-configuration-s3key-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-notification-configuration-s3key-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rules))
      (common-lisp:list
       (common-lisp:cons "FilterRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-notification-configuration-s3key-filter-rule common-lisp:nil
  ((value :initarg :value :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-notification-configuration-s3key-filter-rule-value :initform
    common-lisp:nil)
   (name :initarg :name :type
    (common-lisp:or
     aws-s3bucket-notification-configuration-s3key-filter-rule-name
     common-lisp:null)
    :accessor %aws-s3bucket-notification-configuration-s3key-filter-rule-name
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-notification-configuration-s3key-filter-rule
                    'make-aws-s3bucket-notification-configuration-s3key-filter-rule))
 (common-lisp:defun make-aws-s3bucket-notification-configuration-s3key-filter-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-notification-configuration-s3key-filter-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-notification-configuration-s3key-filter-rule))
   common-lisp:nil))
(common-lisp:deftype aws-s3bucket-notification-configuration-s3key-filter-rule-name
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-notification-configuration-s3key-filter-rules
                      ()
   '(trivial-types:proper-list
     aws-s3bucket-notification-configuration-s3key-filter-rule))
 (common-lisp:defun |make-aws-s3bucket-notification-configuration-s3key-filter-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-notification-configuration-s3key-filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-object-lock-configuration common-lisp:nil
                       ((rule :initarg :rule :type
                         (common-lisp:or
                          aws-s3bucket-object-lock-configuration-rule-details
                          common-lisp:null)
                         :accessor %aws-s3bucket-object-lock-configuration-rule
                         :initform common-lisp:nil)
                        (object-lock-enabled :initarg :object-lock-enabled
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-object-lock-configuration-object-lock-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-object-lock-configuration
                    'make-aws-s3bucket-object-lock-configuration))
 (common-lisp:defun make-aws-s3bucket-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule object-lock-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-object-lock-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-enabled))
      (common-lisp:list
       (common-lisp:cons "ObjectLockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-object-lock-configuration-rule-default-retention-details
  common-lisp:nil
  ((years :initarg :years :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-s3bucket-object-lock-configuration-rule-default-retention-details-years
    :initform common-lisp:nil)
   (mode :initarg :mode :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-object-lock-configuration-rule-default-retention-details-mode
    :initform common-lisp:nil)
   (days :initarg :days :type (common-lisp:or integer common-lisp:null)
    :accessor
    %aws-s3bucket-object-lock-configuration-rule-default-retention-details-days
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-s3bucket-object-lock-configuration-rule-default-retention-details
   'make-aws-s3bucket-object-lock-configuration-rule-default-retention-details))
 (common-lisp:defun make-aws-s3bucket-object-lock-configuration-rule-default-retention-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key years mode days)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-object-lock-configuration-rule-default-retention-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'years))
      (common-lisp:list
       (common-lisp:cons "Years"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-object-lock-configuration-rule-details
                       common-lisp:nil
                       ((default-retention :initarg :default-retention :type
                         (common-lisp:or
                          aws-s3bucket-object-lock-configuration-rule-default-retention-details
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-object-lock-configuration-rule-details-default-retention
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-object-lock-configuration-rule-details
                    'make-aws-s3bucket-object-lock-configuration-rule-details))
 (common-lisp:defun make-aws-s3bucket-object-lock-configuration-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-retention)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-object-lock-configuration-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-retention))
      (common-lisp:list
       (common-lisp:cons "DefaultRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-object-lock-configuration-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-server-side-encryption-by-default
                       common-lisp:nil
                       ((kmsmaster-key-id :initarg :kmsmaster-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-server-side-encryption-by-default-kmsmaster-key-id
                         :initform common-lisp:nil)
                        (ssealgorithm :initarg :ssealgorithm :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-server-side-encryption-by-default-ssealgorithm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-by-default
                    'make-aws-s3bucket-server-side-encryption-by-default))
 (common-lisp:defun make-aws-s3bucket-server-side-encryption-by-default
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kmsmaster-key-id ssealgorithm)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-server-side-encryption-by-default
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsmaster-key-id))
      (common-lisp:list
       (common-lisp:cons "KMSMasterKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-by-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-server-side-encryption-configuration
                       common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or
                          aws-s3bucket-server-side-encryption-rules
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-server-side-encryption-configuration-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-configuration
                    'make-aws-s3bucket-server-side-encryption-configuration))
 (common-lisp:defun make-aws-s3bucket-server-side-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-server-side-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-server-side-encryption-rule common-lisp:nil
                       ((apply-server-side-encryption-by-default :initarg
                         :apply-server-side-encryption-by-default :type
                         (common-lisp:or
                          aws-s3bucket-server-side-encryption-by-default
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-server-side-encryption-rule-apply-server-side-encryption-by-default
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-server-side-encryption-rule
                    'make-aws-s3bucket-server-side-encryption-rule))
 (common-lisp:defun make-aws-s3bucket-server-side-encryption-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apply-server-side-encryption-by-default)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-server-side-encryption-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-server-side-encryption-by-default))
      (common-lisp:list
       (common-lisp:cons "ApplyServerSideEncryptionByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-server-side-encryption-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-server-side-encryption-rules ()
   '(trivial-types:proper-list aws-s3bucket-server-side-encryption-rule))
 (common-lisp:defun |make-aws-s3bucket-server-side-encryption-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-server-side-encryption-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-website-configuration common-lisp:nil
                       ((routing-rules :initarg :routing-rules :type
                         (common-lisp:or
                          aws-s3bucket-website-configuration-routing-rules
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rules
                         :initform common-lisp:nil)
                        (redirect-all-requests-to :initarg
                         :redirect-all-requests-to :type
                         (common-lisp:or
                          aws-s3bucket-website-configuration-redirect-to
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-redirect-all-requests-to
                         :initform common-lisp:nil)
                        (index-document-suffix :initarg :index-document-suffix
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-index-document-suffix
                         :initform common-lisp:nil)
                        (error-document :initarg :error-document :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-error-document
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration
                    'make-aws-s3bucket-website-configuration))
 (common-lisp:defun make-aws-s3bucket-website-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routing-rules redirect-all-requests-to
                     index-document-suffix error-document)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-website-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'index-document-suffix))
      (common-lisp:list
       (common-lisp:cons "IndexDocumentSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-website-configuration-redirect-to
                       common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-redirect-to-protocol
                         :initform common-lisp:nil)
                        (hostname :initarg :hostname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-redirect-to-hostname
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-redirect-to
                    'make-aws-s3bucket-website-configuration-redirect-to))
 (common-lisp:defun make-aws-s3bucket-website-configuration-redirect-to
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol hostname)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-website-configuration-redirect-to
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-redirect-to))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-website-configuration-routing-rule
                       common-lisp:nil
                       ((redirect :initarg :redirect :type
                         (common-lisp:or
                          aws-s3bucket-website-configuration-routing-rule-redirect
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect
                         :initform common-lisp:nil)
                        (condition :initarg :condition :type
                         (common-lisp:or
                          aws-s3bucket-website-configuration-routing-rule-condition
                          common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-condition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule
                    'make-aws-s3bucket-website-configuration-routing-rule))
 (common-lisp:defun make-aws-s3bucket-website-configuration-routing-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key redirect condition)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-website-configuration-routing-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect))
      (common-lisp:list
       (common-lisp:cons "Redirect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-s3bucket-website-configuration-routing-rule-condition common-lisp:nil
  ((key-prefix-equals :initarg :key-prefix-equals :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-website-configuration-routing-rule-condition-key-prefix-equals
    :initform common-lisp:nil)
   (http-error-code-returned-equals :initarg :http-error-code-returned-equals
    :type (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-s3bucket-website-configuration-routing-rule-condition-http-error-code-returned-equals
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule-condition
                    'make-aws-s3bucket-website-configuration-routing-rule-condition))
 (common-lisp:defun make-aws-s3bucket-website-configuration-routing-rule-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-prefix-equals
                     http-error-code-returned-equals)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-website-configuration-routing-rule-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-error-code-returned-equals))
      (common-lisp:list
       (common-lisp:cons "HttpErrorCodeReturnedEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix-equals))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-s3bucket-website-configuration-routing-rule-redirect
                       common-lisp:nil
                       ((replace-key-with :initarg :replace-key-with :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect-replace-key-with
                         :initform common-lisp:nil)
                        (replace-key-prefix-with :initarg
                         :replace-key-prefix-with :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect-replace-key-prefix-with
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect-protocol
                         :initform common-lisp:nil)
                        (http-redirect-code :initarg :http-redirect-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect-http-redirect-code
                         :initform common-lisp:nil)
                        (hostname :initarg :hostname :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-s3bucket-website-configuration-routing-rule-redirect-hostname
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3bucket-website-configuration-routing-rule-redirect
                    'make-aws-s3bucket-website-configuration-routing-rule-redirect))
 (common-lisp:defun make-aws-s3bucket-website-configuration-routing-rule-redirect
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replace-key-with replace-key-prefix-with
                     protocol http-redirect-code hostname)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-s3bucket-website-configuration-routing-rule-redirect
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-redirect-code))
      (common-lisp:list
       (common-lisp:cons "HttpRedirectCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-key-prefix-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyPrefixWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-key-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-s3bucket-website-configuration-routing-rule-redirect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-s3bucket-website-configuration-routing-rules ()
   '(trivial-types:proper-list
     aws-s3bucket-website-configuration-routing-rule))
 (common-lisp:defun |make-aws-s3bucket-website-configuration-routing-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-s3bucket-website-configuration-routing-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-s3object-details common-lisp:nil
                       ((ssekmskey-id :initarg :ssekmskey-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-ssekmskey-id :initform
                         common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-server-side-encryption
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-content-type :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-version-id :initform
                         common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-etag :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-s3object-details-last-modified
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-s3object-details 'make-aws-s3object-details))
 (common-lisp:defun make-aws-s3object-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssekmskey-id server-side-encryption
                     content-type version-id etag last-modified)
   (common-lisp:apply #'common-lisp:make-instance 'aws-s3object-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:list
       (common-lisp:cons "SSEKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-s3object-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-sage-maker-notebook-instance-details common-lisp:nil
                       ((volume-size-in-gb :initarg :volume-size-in-gb :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-sage-maker-notebook-instance-details-volume-size-in-gb
                         :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-url
                         :initform common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-subnet-id
                         :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-security-groups
                         :initform common-lisp:nil)
                        (root-access :initarg :root-access :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-root-access
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-role-arn
                         :initform common-lisp:nil)
                        (platform-identifier :initarg :platform-identifier
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-platform-identifier
                         :initform common-lisp:nil)
                        (notebook-instance-status :initarg
                         :notebook-instance-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-notebook-instance-status
                         :initform common-lisp:nil)
                        (notebook-instance-name :initarg
                         :notebook-instance-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-notebook-instance-name
                         :initform common-lisp:nil)
                        (notebook-instance-lifecycle-config-name :initarg
                         :notebook-instance-lifecycle-config-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-notebook-instance-lifecycle-config-name
                         :initform common-lisp:nil)
                        (notebook-instance-arn :initarg :notebook-instance-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-notebook-instance-arn
                         :initform common-lisp:nil)
                        (network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-network-interface-id
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-kms-key-id
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-instance-type
                         :initform common-lisp:nil)
                        (instance-metadata-service-configuration :initarg
                         :instance-metadata-service-configuration :type
                         (common-lisp:or
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details
                          common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-instance-metadata-service-configuration
                         :initform common-lisp:nil)
                        (failure-reason :initarg :failure-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-failure-reason
                         :initform common-lisp:nil)
                        (direct-internet-access :initarg
                         :direct-internet-access :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-direct-internet-access
                         :initform common-lisp:nil)
                        (default-code-repository :initarg
                         :default-code-repository :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-default-code-repository
                         :initform common-lisp:nil)
                        (additional-code-repositories :initarg
                         :additional-code-repositories :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-additional-code-repositories
                         :initform common-lisp:nil)
                        (accelerator-types :initarg :accelerator-types :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %aws-sage-maker-notebook-instance-details-accelerator-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-sage-maker-notebook-instance-details
                    'make-aws-sage-maker-notebook-instance-details))
 (common-lisp:defun make-aws-sage-maker-notebook-instance-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-size-in-gb url subnet-id
                     security-groups root-access role-arn platform-identifier
                     notebook-instance-status notebook-instance-name
                     notebook-instance-lifecycle-config-name
                     notebook-instance-arn network-interface-id kms-key-id
                     instance-type instance-metadata-service-configuration
                     failure-reason direct-internet-access
                     default-code-repository additional-code-repositories
                     accelerator-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-sage-maker-notebook-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-internet-access))
      (common-lisp:list
       (common-lisp:cons "DirectInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-service-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-status))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-identifier))
      (common-lisp:list
       (common-lisp:cons "PlatformIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-access))
      (common-lisp:list
       (common-lisp:cons "RootAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-sage-maker-notebook-instance-metadata-service-configuration-details
  common-lisp:nil
  ((minimum-instance-metadata-service-version :initarg
    :minimum-instance-metadata-service-version :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-sage-maker-notebook-instance-metadata-service-configuration-details-minimum-instance-metadata-service-version
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-sage-maker-notebook-instance-metadata-service-configuration-details
   'make-aws-sage-maker-notebook-instance-metadata-service-configuration-details))
 (common-lisp:defun make-aws-sage-maker-notebook-instance-metadata-service-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     minimum-instance-metadata-service-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-sage-maker-notebook-instance-metadata-service-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-metadata-service-version))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceMetadataServiceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sage-maker-notebook-instance-metadata-service-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-secrets-manager-secret-details common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-secrets-manager-secret-details-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-secrets-manager-secret-details-name
                         :initform common-lisp:nil)
                        (deleted :initarg :deleted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-secrets-manager-secret-details-deleted :initform
                         common-lisp:nil)
                        (rotation-lambda-arn :initarg :rotation-lambda-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-secrets-manager-secret-details-rotation-lambda-arn
                         :initform common-lisp:nil)
                        (rotation-enabled :initarg :rotation-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-secrets-manager-secret-details-rotation-enabled
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-secrets-manager-secret-details-kms-key-id
                         :initform common-lisp:nil)
                        (rotation-occurred-within-frequency :initarg
                         :rotation-occurred-within-frequency :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-secrets-manager-secret-details-rotation-occurred-within-frequency
                         :initform common-lisp:nil)
                        (rotation-rules :initarg :rotation-rules :type
                         (common-lisp:or
                          aws-secrets-manager-secret-rotation-rules
                          common-lisp:null)
                         :accessor
                         %aws-secrets-manager-secret-details-rotation-rules
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-secrets-manager-secret-details
                    'make-aws-secrets-manager-secret-details))
 (common-lisp:defun make-aws-secrets-manager-secret-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name deleted
                     rotation-lambda-arn rotation-enabled kms-key-id
                     rotation-occurred-within-frequency rotation-rules)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-secrets-manager-secret-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-rules))
      (common-lisp:list
       (common-lisp:cons "RotationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotation-occurred-within-frequency))
      (common-lisp:list
       (common-lisp:cons "RotationOccurredWithinFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "RotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "RotationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-secrets-manager-secret-rotation-rules
                       common-lisp:nil
                       ((automatically-after-days :initarg
                         :automatically-after-days :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-secrets-manager-secret-rotation-rules-automatically-after-days
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-secrets-manager-secret-rotation-rules
                    'make-aws-secrets-manager-secret-rotation-rules))
 (common-lisp:defun make-aws-secrets-manager-secret-rotation-rules
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automatically-after-days)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-secrets-manager-secret-rotation-rules
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatically-after-days))
      (common-lisp:list
       (common-lisp:cons "AutomaticallyAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-secrets-manager-secret-rotation-rules))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-security-finding common-lisp:nil
                       ((sample :initarg :sample :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-security-finding-sample :initform
                         common-lisp:nil)
                        (finding-provider-fields :initarg
                         :finding-provider-fields :type
                         (common-lisp:or finding-provider-fields
                                         common-lisp:null)
                         :accessor
                         %aws-security-finding-finding-provider-fields
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %aws-security-finding-action :initform
                         common-lisp:nil)
                        (patch-summary :initarg :patch-summary :type
                         (common-lisp:or patch-summary common-lisp:null)
                         :accessor %aws-security-finding-patch-summary
                         :initform common-lisp:nil)
                        (vulnerabilities :initarg :vulnerabilities :type
                         (common-lisp:or vulnerability-list common-lisp:null)
                         :accessor %aws-security-finding-vulnerabilities
                         :initform common-lisp:nil)
                        (note :initarg :note :type
                         (common-lisp:or note common-lisp:null) :accessor
                         %aws-security-finding-note :initform common-lisp:nil)
                        (related-findings :initarg :related-findings :type
                         (common-lisp:or related-finding-list common-lisp:null)
                         :accessor %aws-security-finding-related-findings
                         :initform common-lisp:nil)
                        (record-state :initarg :record-state :type
                         (common-lisp:or record-state common-lisp:null)
                         :accessor %aws-security-finding-record-state :initform
                         common-lisp:nil)
                        (workflow :initarg :workflow :type
                         (common-lisp:or workflow common-lisp:null) :accessor
                         %aws-security-finding-workflow :initform
                         common-lisp:nil)
                        (workflow-state :initarg :workflow-state :type
                         (common-lisp:or workflow-state common-lisp:null)
                         :accessor %aws-security-finding-workflow-state
                         :initform common-lisp:nil)
                        (verification-state :initarg :verification-state :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor %aws-security-finding-verification-state
                         :initform common-lisp:nil)
                        (compliance :initarg :compliance :type
                         (common-lisp:or compliance common-lisp:null) :accessor
                         %aws-security-finding-compliance :initform
                         common-lisp:nil)
                        (resources :initarg :resources :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor %aws-security-finding-resources :initform
                         (common-lisp:error ":resources is required"))
                        (threat-intel-indicators :initarg
                         :threat-intel-indicators :type
                         (common-lisp:or threat-intel-indicator-list
                                         common-lisp:null)
                         :accessor
                         %aws-security-finding-threat-intel-indicators
                         :initform common-lisp:nil)
                        (threats :initarg :threats :type
                         (common-lisp:or threat-list common-lisp:null)
                         :accessor %aws-security-finding-threats :initform
                         common-lisp:nil)
                        (process :initarg :process :type
                         (common-lisp:or process-details common-lisp:null)
                         :accessor %aws-security-finding-process :initform
                         common-lisp:nil)
                        (network-path :initarg :network-path :type
                         (common-lisp:or network-path-list common-lisp:null)
                         :accessor %aws-security-finding-network-path :initform
                         common-lisp:nil)
                        (network :initarg :network :type
                         (common-lisp:or network common-lisp:null) :accessor
                         %aws-security-finding-network :initform
                         common-lisp:nil)
                        (malware :initarg :malware :type
                         (common-lisp:or malware-list common-lisp:null)
                         :accessor %aws-security-finding-malware :initform
                         common-lisp:nil)
                        (user-defined-fields :initarg :user-defined-fields
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor %aws-security-finding-user-defined-fields
                         :initform common-lisp:nil)
                        (product-fields :initarg :product-fields :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %aws-security-finding-product-fields :initform
                         common-lisp:nil)
                        (source-url :initarg :source-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-source-url :initform
                         common-lisp:nil)
                        (remediation :initarg :remediation :type
                         (common-lisp:or remediation common-lisp:null)
                         :accessor %aws-security-finding-remediation :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-description :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-title :initform
                         (common-lisp:error ":title is required"))
                        (criticality :initarg :criticality :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-security-finding-criticality :initform
                         common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-security-finding-confidence :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         %aws-security-finding-severity :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (last-observed-at :initarg :last-observed-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-last-observed-at
                         :initform common-lisp:nil)
                        (first-observed-at :initarg :first-observed-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-first-observed-at
                         :initform common-lisp:nil)
                        (types :initarg :types :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         %aws-security-finding-types :initform common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-aws-account-id
                         :initform
                         (common-lisp:error ":aws-account-id is required"))
                        (generator-id :initarg :generator-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-generator-id :initform
                         (common-lisp:error ":generator-id is required"))
                        (region :initarg :region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-region :initform
                         common-lisp:nil)
                        (company-name :initarg :company-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-company-name :initform
                         common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-product-name :initform
                         common-lisp:nil)
                        (product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-product-arn :initform
                         (common-lisp:error ":product-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-id :initform
                         (common-lisp:error ":id is required"))
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-schema-version
                         :initform
                         (common-lisp:error ":schema-version is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding 'make-aws-security-finding))
 (common-lisp:defun make-aws-security-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample finding-provider-fields action
                     patch-summary vulnerabilities note related-findings
                     record-state workflow workflow-state verification-state
                     compliance resources threat-intel-indicators threats
                     process network-path network malware user-defined-fields
                     product-fields source-url remediation description title
                     criticality confidence severity updated-at created-at
                     last-observed-at first-observed-at types aws-account-id
                     generator-id region company-name product-name product-arn
                     id schema-version)
   (common-lisp:apply #'common-lisp:make-instance 'aws-security-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-security-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-security-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generator-id))
      (common-lisp:list
       (common-lisp:cons "GeneratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "FirstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "Remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-fields))
      (common-lisp:list
       (common-lisp:cons "ProductFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware))
      (common-lisp:list
       (common-lisp:cons "Malware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network))
      (common-lisp:list
       (common-lisp:cons "Network"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-path))
      (common-lisp:list
       (common-lisp:cons "NetworkPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process))
      (common-lisp:list
       (common-lisp:cons "Process"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threats))
      (common-lisp:list
       (common-lisp:cons "Threats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicators))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-state))
      (common-lisp:list
       (common-lisp:cons "WorkflowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "Vulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-summary))
      (common-lisp:list
       (common-lisp:cons "PatchSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "Sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-security-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-security-finding-filters common-lisp:nil
                       ((compliance-associated-standards-id :initarg
                         :compliance-associated-standards-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-compliance-associated-standards-id
                         :initform common-lisp:nil)
                        (compliance-security-control-id :initarg
                         :compliance-security-control-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-compliance-security-control-id
                         :initform common-lisp:nil)
                        (sample :initarg :sample :type
                         (common-lisp:or boolean-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-sample
                         :initform common-lisp:nil)
                        (finding-provider-fields-types :initarg
                         :finding-provider-fields-types :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-types
                         :initform common-lisp:nil)
                        (finding-provider-fields-severity-original :initarg
                         :finding-provider-fields-severity-original :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-severity-original
                         :initform common-lisp:nil)
                        (finding-provider-fields-severity-label :initarg
                         :finding-provider-fields-severity-label :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-severity-label
                         :initform common-lisp:nil)
                        (finding-provider-fields-related-findings-product-arn
                         :initarg
                         :finding-provider-fields-related-findings-product-arn
                         :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-related-findings-product-arn
                         :initform common-lisp:nil)
                        (finding-provider-fields-related-findings-id :initarg
                         :finding-provider-fields-related-findings-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-related-findings-id
                         :initform common-lisp:nil)
                        (finding-provider-fields-criticality :initarg
                         :finding-provider-fields-criticality :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-criticality
                         :initform common-lisp:nil)
                        (finding-provider-fields-confidence :initarg
                         :finding-provider-fields-confidence :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-finding-provider-fields-confidence
                         :initform common-lisp:nil)
                        (keyword :initarg :keyword :type
                         (common-lisp:or keyword-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-keyword
                         :initform common-lisp:nil)
                        (note-updated-by :initarg :note-updated-by :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-note-updated-by
                         :initform common-lisp:nil)
                        (note-updated-at :initarg :note-updated-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-note-updated-at
                         :initform common-lisp:nil)
                        (note-text :initarg :note-text :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-note-text
                         :initform common-lisp:nil)
                        (related-findings-id :initarg :related-findings-id
                         :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-related-findings-id
                         :initform common-lisp:nil)
                        (related-findings-product-arn :initarg
                         :related-findings-product-arn :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-related-findings-product-arn
                         :initform common-lisp:nil)
                        (record-state :initarg :record-state :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-record-state
                         :initform common-lisp:nil)
                        (workflow-status :initarg :workflow-status :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-workflow-status
                         :initform common-lisp:nil)
                        (workflow-state :initarg :workflow-state :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-workflow-state
                         :initform common-lisp:nil)
                        (verification-state :initarg :verification-state :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-verification-state
                         :initform common-lisp:nil)
                        (compliance-status :initarg :compliance-status :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-compliance-status
                         :initform common-lisp:nil)
                        (resource-details-other :initarg
                         :resource-details-other :type
                         (common-lisp:or map-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-details-other
                         :initform common-lisp:nil)
                        (resource-container-launched-at :initarg
                         :resource-container-launched-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-container-launched-at
                         :initform common-lisp:nil)
                        (resource-container-image-name :initarg
                         :resource-container-image-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-container-image-name
                         :initform common-lisp:nil)
                        (resource-container-image-id :initarg
                         :resource-container-image-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-container-image-id
                         :initform common-lisp:nil)
                        (resource-container-name :initarg
                         :resource-container-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-container-name
                         :initform common-lisp:nil)
                        (resource-aws-iam-user-user-name :initarg
                         :resource-aws-iam-user-user-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-iam-user-user-name
                         :initform common-lisp:nil)
                        (resource-aws-iam-access-key-created-at :initarg
                         :resource-aws-iam-access-key-created-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-iam-access-key-created-at
                         :initform common-lisp:nil)
                        (resource-aws-iam-access-key-status :initarg
                         :resource-aws-iam-access-key-status :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-iam-access-key-status
                         :initform common-lisp:nil)
                        (resource-aws-iam-access-key-principal-name :initarg
                         :resource-aws-iam-access-key-principal-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-iam-access-key-principal-name
                         :initform common-lisp:nil)
                        (resource-aws-iam-access-key-user-name :initarg
                         :resource-aws-iam-access-key-user-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-iam-access-key-user-name
                         :initform common-lisp:nil)
                        (resource-aws-s3bucket-owner-name :initarg
                         :resource-aws-s3bucket-owner-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-s3bucket-owner-name
                         :initform common-lisp:nil)
                        (resource-aws-s3bucket-owner-id :initarg
                         :resource-aws-s3bucket-owner-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-s3bucket-owner-id
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-launched-at :initarg
                         :resource-aws-ec2instance-launched-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-launched-at
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-subnet-id :initarg
                         :resource-aws-ec2instance-subnet-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-subnet-id
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-vpc-id :initarg
                         :resource-aws-ec2instance-vpc-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-vpc-id
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-iam-instance-profile-arn
                         :initarg
                         :resource-aws-ec2instance-iam-instance-profile-arn
                         :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-iam-instance-profile-arn
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-key-name :initarg
                         :resource-aws-ec2instance-key-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-key-name
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-ip-v6addresses :initarg
                         :resource-aws-ec2instance-ip-v6addresses :type
                         (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-ip-v6addresses
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-ip-v4addresses :initarg
                         :resource-aws-ec2instance-ip-v4addresses :type
                         (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-ip-v4addresses
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-image-id :initarg
                         :resource-aws-ec2instance-image-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-image-id
                         :initform common-lisp:nil)
                        (resource-aws-ec2instance-type :initarg
                         :resource-aws-ec2instance-type :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-aws-ec2instance-type
                         :initform common-lisp:nil)
                        (resource-tags :initarg :resource-tags :type
                         (common-lisp:or map-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-resource-tags
                         :initform common-lisp:nil)
                        (resource-region :initarg :resource-region :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-region
                         :initform common-lisp:nil)
                        (resource-partition :initarg :resource-partition :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-resource-partition
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-resource-id
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-resource-type
                         :initform common-lisp:nil)
                        (threat-intel-indicator-source-url :initarg
                         :threat-intel-indicator-source-url :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-source-url
                         :initform common-lisp:nil)
                        (threat-intel-indicator-source :initarg
                         :threat-intel-indicator-source :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-source
                         :initform common-lisp:nil)
                        (threat-intel-indicator-last-observed-at :initarg
                         :threat-intel-indicator-last-observed-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-last-observed-at
                         :initform common-lisp:nil)
                        (threat-intel-indicator-category :initarg
                         :threat-intel-indicator-category :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-category
                         :initform common-lisp:nil)
                        (threat-intel-indicator-value :initarg
                         :threat-intel-indicator-value :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-value
                         :initform common-lisp:nil)
                        (threat-intel-indicator-type :initarg
                         :threat-intel-indicator-type :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-threat-intel-indicator-type
                         :initform common-lisp:nil)
                        (process-terminated-at :initarg :process-terminated-at
                         :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-process-terminated-at
                         :initform common-lisp:nil)
                        (process-launched-at :initarg :process-launched-at
                         :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-process-launched-at
                         :initform common-lisp:nil)
                        (process-parent-pid :initarg :process-parent-pid :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-process-parent-pid
                         :initform common-lisp:nil)
                        (process-pid :initarg :process-pid :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-process-pid
                         :initform common-lisp:nil)
                        (process-path :initarg :process-path :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-process-path
                         :initform common-lisp:nil)
                        (process-name :initarg :process-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-process-name
                         :initform common-lisp:nil)
                        (network-destination-domain :initarg
                         :network-destination-domain :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-destination-domain
                         :initform common-lisp:nil)
                        (network-destination-port :initarg
                         :network-destination-port :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-destination-port
                         :initform common-lisp:nil)
                        (network-destination-ip-v6 :initarg
                         :network-destination-ip-v6 :type
                         (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-destination-ip-v6
                         :initform common-lisp:nil)
                        (network-destination-ip-v4 :initarg
                         :network-destination-ip-v4 :type
                         (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-destination-ip-v4
                         :initform common-lisp:nil)
                        (network-source-mac :initarg :network-source-mac :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-source-mac
                         :initform common-lisp:nil)
                        (network-source-domain :initarg :network-source-domain
                         :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-source-domain
                         :initform common-lisp:nil)
                        (network-source-port :initarg :network-source-port
                         :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-source-port
                         :initform common-lisp:nil)
                        (network-source-ip-v6 :initarg :network-source-ip-v6
                         :type (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-source-ip-v6
                         :initform common-lisp:nil)
                        (network-source-ip-v4 :initarg :network-source-ip-v4
                         :type (common-lisp:or ip-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-source-ip-v4
                         :initform common-lisp:nil)
                        (network-protocol :initarg :network-protocol :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-protocol
                         :initform common-lisp:nil)
                        (network-direction :initarg :network-direction :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-network-direction
                         :initform common-lisp:nil)
                        (malware-state :initarg :malware-state :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-malware-state
                         :initform common-lisp:nil)
                        (malware-path :initarg :malware-path :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-malware-path
                         :initform common-lisp:nil)
                        (malware-type :initarg :malware-type :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-malware-type
                         :initform common-lisp:nil)
                        (malware-name :initarg :malware-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-malware-name
                         :initform common-lisp:nil)
                        (user-defined-fields :initarg :user-defined-fields
                         :type
                         (common-lisp:or map-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-user-defined-fields
                         :initform common-lisp:nil)
                        (company-name :initarg :company-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-company-name
                         :initform common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-product-name
                         :initform common-lisp:nil)
                        (product-fields :initarg :product-fields :type
                         (common-lisp:or map-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-product-fields
                         :initform common-lisp:nil)
                        (source-url :initarg :source-url :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-source-url
                         :initform common-lisp:nil)
                        (recommendation-text :initarg :recommendation-text
                         :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-recommendation-text
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-description
                         :initform common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-title
                         :initform common-lisp:nil)
                        (criticality :initarg :criticality :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-criticality
                         :initform common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-confidence
                         :initform common-lisp:nil)
                        (severity-label :initarg :severity-label :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-severity-label
                         :initform common-lisp:nil)
                        (severity-normalized :initarg :severity-normalized
                         :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-severity-normalized
                         :initform common-lisp:nil)
                        (severity-product :initarg :severity-product :type
                         (common-lisp:or number-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-severity-product
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-updated-at
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-created-at
                         :initform common-lisp:nil)
                        (last-observed-at :initarg :last-observed-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-last-observed-at
                         :initform common-lisp:nil)
                        (first-observed-at :initarg :first-observed-at :type
                         (common-lisp:or date-filter-list common-lisp:null)
                         :accessor
                         %aws-security-finding-filters-first-observed-at
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-type :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-region
                         :initform common-lisp:nil)
                        (generator-id :initarg :generator-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-generator-id
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-id :initform
                         common-lisp:nil)
                        (aws-account-id :initarg :aws-account-id :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-aws-account-id
                         :initform common-lisp:nil)
                        (product-arn :initarg :product-arn :type
                         (common-lisp:or string-filter-list common-lisp:null)
                         :accessor %aws-security-finding-filters-product-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding-filters
                    'make-aws-security-finding-filters))
 (common-lisp:defun make-aws-security-finding-filters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compliance-associated-standards-id
                     compliance-security-control-id sample
                     finding-provider-fields-types
                     finding-provider-fields-severity-original
                     finding-provider-fields-severity-label
                     finding-provider-fields-related-findings-product-arn
                     finding-provider-fields-related-findings-id
                     finding-provider-fields-criticality
                     finding-provider-fields-confidence keyword note-updated-by
                     note-updated-at note-text related-findings-id
                     related-findings-product-arn record-state workflow-status
                     workflow-state verification-state compliance-status
                     resource-details-other resource-container-launched-at
                     resource-container-image-name resource-container-image-id
                     resource-container-name resource-aws-iam-user-user-name
                     resource-aws-iam-access-key-created-at
                     resource-aws-iam-access-key-status
                     resource-aws-iam-access-key-principal-name
                     resource-aws-iam-access-key-user-name
                     resource-aws-s3bucket-owner-name
                     resource-aws-s3bucket-owner-id
                     resource-aws-ec2instance-launched-at
                     resource-aws-ec2instance-subnet-id
                     resource-aws-ec2instance-vpc-id
                     resource-aws-ec2instance-iam-instance-profile-arn
                     resource-aws-ec2instance-key-name
                     resource-aws-ec2instance-ip-v6addresses
                     resource-aws-ec2instance-ip-v4addresses
                     resource-aws-ec2instance-image-id
                     resource-aws-ec2instance-type resource-tags
                     resource-region resource-partition resource-id
                     resource-type threat-intel-indicator-source-url
                     threat-intel-indicator-source
                     threat-intel-indicator-last-observed-at
                     threat-intel-indicator-category
                     threat-intel-indicator-value threat-intel-indicator-type
                     process-terminated-at process-launched-at
                     process-parent-pid process-pid process-path process-name
                     network-destination-domain network-destination-port
                     network-destination-ip-v6 network-destination-ip-v4
                     network-source-mac network-source-domain
                     network-source-port network-source-ip-v6
                     network-source-ip-v4 network-protocol network-direction
                     malware-state malware-path malware-type malware-name
                     user-defined-fields company-name product-name
                     product-fields source-url recommendation-text description
                     title criticality confidence severity-label
                     severity-normalized severity-product updated-at created-at
                     last-observed-at first-observed-at type region
                     generator-id id aws-account-id product-arn)
   (common-lisp:apply #'common-lisp:make-instance 'aws-security-finding-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-id))
      (common-lisp:list
       (common-lisp:cons "AwsAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generator-id))
      (common-lisp:list
       (common-lisp:cons "GeneratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-observed-at))
      (common-lisp:list
       (common-lisp:cons "FirstObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-product))
      (common-lisp:list
       (common-lisp:cons "SeverityProduct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-normalized))
      (common-lisp:list
       (common-lisp:cons "SeverityNormalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-label))
      (common-lisp:list
       (common-lisp:cons "SeverityLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-text))
      (common-lisp:list
       (common-lisp:cons "RecommendationText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-fields))
      (common-lisp:list
       (common-lisp:cons "ProductFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-name))
      (common-lisp:list
       (common-lisp:cons "MalwareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-type))
      (common-lisp:list
       (common-lisp:cons "MalwareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-path))
      (common-lisp:list
       (common-lisp:cons "MalwarePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'malware-state))
      (common-lisp:list
       (common-lisp:cons "MalwareState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-direction))
      (common-lisp:list
       (common-lisp:cons "NetworkDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-protocol))
      (common-lisp:list
       (common-lisp:cons "NetworkProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-ip-v4))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-ip-v6))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source-port))
      (common-lisp:list
       (common-lisp:cons "NetworkSourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-source-domain))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source-mac))
      (common-lisp:list
       (common-lisp:cons "NetworkSourceMac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-ip-v4))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-ip-v6))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-port))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-destination-domain))
      (common-lisp:list
       (common-lisp:cons "NetworkDestinationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-name))
      (common-lisp:list
       (common-lisp:cons "ProcessName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-path))
      (common-lisp:list
       (common-lisp:cons "ProcessPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-pid))
      (common-lisp:list
       (common-lisp:cons "ProcessPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-parent-pid))
      (common-lisp:list
       (common-lisp:cons "ProcessParentPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-launched-at))
      (common-lisp:list
       (common-lisp:cons "ProcessLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'process-terminated-at))
      (common-lisp:list
       (common-lisp:cons "ProcessTerminatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-type))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-value))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-category))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-last-observed-at))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorLastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-source))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threat-intel-indicator-source-url))
      (common-lisp:list
       (common-lisp:cons "ThreatIntelIndicatorSourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-partition))
      (common-lisp:list
       (common-lisp:cons "ResourcePartition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-region))
      (common-lisp:list
       (common-lisp:cons "ResourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-type))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-image-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-ip-v4addresses))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIpV4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-ip-v6addresses))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIpV6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-key-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-iam-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceIamInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-vpc-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceVpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-subnet-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-ec2instance-launched-at))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsEc2InstanceLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-s3bucket-owner-id))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsS3BucketOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-s3bucket-owner-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsS3BucketOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-user-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-principal-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyPrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-status))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-access-key-created-at))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamAccessKeyCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-aws-iam-user-user-name))
      (common-lisp:list
       (common-lisp:cons "ResourceAwsIamUserUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-name))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-image-id))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-image-name))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-container-launched-at))
      (common-lisp:list
       (common-lisp:cons "ResourceContainerLaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-details-other))
      (common-lisp:list
       (common-lisp:cons "ResourceDetailsOther"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-status))
      (common-lisp:list
       (common-lisp:cons "ComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-state))
      (common-lisp:list
       (common-lisp:cons "WorkflowState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-status))
      (common-lisp:list
       (common-lisp:cons "WorkflowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-findings-product-arn))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingsProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings-id))
      (common-lisp:list
       (common-lisp:cons "RelatedFindingsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-text))
      (common-lisp:list
       (common-lisp:cons "NoteText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-updated-at))
      (common-lisp:list
       (common-lisp:cons "NoteUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note-updated-by))
      (common-lisp:list
       (common-lisp:cons "NoteUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-confidence))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-criticality))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsCriticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-related-findings-id))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsRelatedFindingsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-related-findings-product-arn))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsRelatedFindingsProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-severity-label))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsSeverityLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-severity-original))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsSeverityOriginal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-provider-fields-types))
      (common-lisp:list
       (common-lisp:cons "FindingProviderFieldsTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample))
      (common-lisp:list
       (common-lisp:cons "Sample"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-security-control-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceSecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-associated-standards-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceAssociatedStandardsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-security-finding-identifier common-lisp:nil
                       ((product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-identifier-product-arn
                         :initform
                         (common-lisp:error ":product-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-security-finding-identifier-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-security-finding-identifier
                    'make-aws-security-finding-identifier))
 (common-lisp:defun make-aws-security-finding-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-security-finding-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-security-finding-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-security-finding-identifier-list ()
   '(trivial-types:proper-list aws-security-finding-identifier))
 (common-lisp:defun |make-aws-security-finding-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-security-finding-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-security-finding-list ()
   '(trivial-types:proper-list aws-security-finding))
 (common-lisp:defun |make-aws-security-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-security-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-sns-topic-details common-lisp:nil
                       ((http-failure-feedback-role-arn :initarg
                         :http-failure-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-http-failure-feedback-role-arn
                         :initform common-lisp:nil)
                        (http-success-feedback-role-arn :initarg
                         :http-success-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-http-success-feedback-role-arn
                         :initform common-lisp:nil)
                        (firehose-failure-feedback-role-arn :initarg
                         :firehose-failure-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-firehose-failure-feedback-role-arn
                         :initform common-lisp:nil)
                        (firehose-success-feedback-role-arn :initarg
                         :firehose-success-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-firehose-success-feedback-role-arn
                         :initform common-lisp:nil)
                        (application-success-feedback-role-arn :initarg
                         :application-success-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-application-success-feedback-role-arn
                         :initform common-lisp:nil)
                        (sqs-failure-feedback-role-arn :initarg
                         :sqs-failure-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-sqs-failure-feedback-role-arn
                         :initform common-lisp:nil)
                        (sqs-success-feedback-role-arn :initarg
                         :sqs-success-feedback-role-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sns-topic-details-sqs-success-feedback-role-arn
                         :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sns-topic-details-owner :initform
                         common-lisp:nil)
                        (topic-name :initarg :topic-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sns-topic-details-topic-name :initform
                         common-lisp:nil)
                        (subscription :initarg :subscription :type
                         (common-lisp:or aws-sns-topic-subscription-list
                                         common-lisp:null)
                         :accessor %aws-sns-topic-details-subscription
                         :initform common-lisp:nil)
                        (kms-master-key-id :initarg :kms-master-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sns-topic-details-kms-master-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-sns-topic-details 'make-aws-sns-topic-details))
 (common-lisp:defun make-aws-sns-topic-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key http-failure-feedback-role-arn
                     http-success-feedback-role-arn
                     firehose-failure-feedback-role-arn
                     firehose-success-feedback-role-arn
                     application-success-feedback-role-arn
                     sqs-failure-feedback-role-arn
                     sqs-success-feedback-role-arn owner topic-name
                     subscription kms-master-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'aws-sns-topic-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription))
      (common-lisp:list
       (common-lisp:cons "Subscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "SqsSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "SqsFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firehose-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "FirehoseSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firehose-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "FirehoseFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-success-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "HttpSuccessFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-failure-feedback-role-arn))
      (common-lisp:list
       (common-lisp:cons "HttpFailureFeedbackRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-sns-topic-subscription common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sns-topic-subscription-protocol
                         :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sns-topic-subscription-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-sns-topic-subscription
                    'make-aws-sns-topic-subscription))
 (common-lisp:defun make-aws-sns-topic-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'aws-sns-topic-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sns-topic-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-sns-topic-subscription-list ()
   '(trivial-types:proper-list aws-sns-topic-subscription))
 (common-lisp:defun |make-aws-sns-topic-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-sns-topic-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-sqs-queue-details common-lisp:nil
                       ((dead-letter-target-arn :initarg
                         :dead-letter-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-sqs-queue-details-dead-letter-target-arn
                         :initform common-lisp:nil)
                        (queue-name :initarg :queue-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sqs-queue-details-queue-name :initform
                         common-lisp:nil)
                        (kms-master-key-id :initarg :kms-master-key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-sqs-queue-details-kms-master-key-id
                         :initform common-lisp:nil)
                        (kms-data-key-reuse-period-seconds :initarg
                         :kms-data-key-reuse-period-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-sqs-queue-details-kms-data-key-reuse-period-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-sqs-queue-details 'make-aws-sqs-queue-details))
 (common-lisp:defun make-aws-sqs-queue-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dead-letter-target-arn queue-name
                     kms-master-key-id kms-data-key-reuse-period-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'aws-sqs-queue-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-data-key-reuse-period-seconds))
      (common-lisp:list
       (common-lisp:cons "KmsDataKeyReusePeriodSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-master-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsMasterKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-name))
      (common-lisp:list
       (common-lisp:cons "QueueName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dead-letter-target-arn))
      (common-lisp:list
       (common-lisp:cons "DeadLetterTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-sqs-queue-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ssm-compliance-summary common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ssm-compliance-summary-patch-group
                         :initform common-lisp:nil)
                        (non-compliant-unspecified-count :initarg
                         :non-compliant-unspecified-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-unspecified-count
                         :initform common-lisp:nil)
                        (non-compliant-medium-count :initarg
                         :non-compliant-medium-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-medium-count
                         :initform common-lisp:nil)
                        (overall-severity :initarg :overall-severity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ssm-compliance-summary-overall-severity
                         :initform common-lisp:nil)
                        (patch-baseline-id :initarg :patch-baseline-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-ssm-compliance-summary-patch-baseline-id
                         :initform common-lisp:nil)
                        (compliance-type :initarg :compliance-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ssm-compliance-summary-compliance-type
                         :initform common-lisp:nil)
                        (compliant-low-count :initarg :compliant-low-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ssm-compliance-summary-compliant-low-count
                         :initform common-lisp:nil)
                        (non-compliant-high-count :initarg
                         :non-compliant-high-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-high-count
                         :initform common-lisp:nil)
                        (non-compliant-low-count :initarg
                         :non-compliant-low-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-low-count
                         :initform common-lisp:nil)
                        (compliant-unspecified-count :initarg
                         :compliant-unspecified-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-compliant-unspecified-count
                         :initform common-lisp:nil)
                        (non-compliant-informational-count :initarg
                         :non-compliant-informational-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-informational-count
                         :initform common-lisp:nil)
                        (compliant-informational-count :initarg
                         :compliant-informational-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-compliant-informational-count
                         :initform common-lisp:nil)
                        (non-compliant-critical-count :initarg
                         :non-compliant-critical-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-non-compliant-critical-count
                         :initform common-lisp:nil)
                        (execution-type :initarg :execution-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ssm-compliance-summary-execution-type
                         :initform common-lisp:nil)
                        (compliant-medium-count :initarg
                         :compliant-medium-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-compliant-medium-count
                         :initform common-lisp:nil)
                        (compliant-high-count :initarg :compliant-high-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %aws-ssm-compliance-summary-compliant-high-count
                         :initform common-lisp:nil)
                        (compliant-critical-count :initarg
                         :compliant-critical-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-ssm-compliance-summary-compliant-critical-count
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-ssm-compliance-summary-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ssm-compliance-summary
                    'make-aws-ssm-compliance-summary))
 (common-lisp:defun make-aws-ssm-compliance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group
                     non-compliant-unspecified-count non-compliant-medium-count
                     overall-severity patch-baseline-id compliance-type
                     compliant-low-count non-compliant-high-count
                     non-compliant-low-count compliant-unspecified-count
                     non-compliant-informational-count
                     compliant-informational-count non-compliant-critical-count
                     execution-type compliant-medium-count compliant-high-count
                     compliant-critical-count status)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ssm-compliance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-critical-count))
      (common-lisp:list
       (common-lisp:cons "CompliantCriticalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-high-count))
      (common-lisp:list
       (common-lisp:cons "CompliantHighCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-medium-count))
      (common-lisp:list
       (common-lisp:cons "CompliantMediumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-type))
      (common-lisp:list
       (common-lisp:cons "ExecutionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-critical-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantCriticalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-informational-count))
      (common-lisp:list
       (common-lisp:cons "CompliantInformationalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-informational-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantInformationalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-unspecified-count))
      (common-lisp:list
       (common-lisp:cons "CompliantUnspecifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-low-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantLowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-high-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantHighCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-low-count))
      (common-lisp:list
       (common-lisp:cons "CompliantLowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-baseline-id))
      (common-lisp:list
       (common-lisp:cons "PatchBaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overall-severity))
      (common-lisp:list
       (common-lisp:cons "OverallSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-medium-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantMediumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-unspecified-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantUnspecifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-compliance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ssm-patch common-lisp:nil
                       ((compliance-summary :initarg :compliance-summary :type
                         (common-lisp:or aws-ssm-compliance-summary
                                         common-lisp:null)
                         :accessor %aws-ssm-patch-compliance-summary :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aws-ssm-patch 'make-aws-ssm-patch))
 (common-lisp:defun make-aws-ssm-patch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compliance-summary)
   (common-lisp:apply #'common-lisp:make-instance 'aws-ssm-patch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-ssm-patch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-ssm-patch-compliance-details common-lisp:nil
                       ((patch :initarg :patch :type
                         (common-lisp:or aws-ssm-patch common-lisp:null)
                         :accessor %aws-ssm-patch-compliance-details-patch
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ssm-patch-compliance-details
                    'make-aws-ssm-patch-compliance-details))
 (common-lisp:defun make-aws-ssm-patch-compliance-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ssm-patch-compliance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch))
      (common-lisp:list
       (common-lisp:cons "Patch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ssm-patch-compliance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rate-based-rule-details common-lisp:nil
                       ((match-predicates :initarg :match-predicates :type
                         (common-lisp:or
                          aws-waf-rate-based-rule-match-predicate-list
                          common-lisp:null)
                         :accessor
                         %aws-waf-rate-based-rule-details-match-predicates
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rate-based-rule-details-rule-id
                         :initform common-lisp:nil)
                        (rate-limit :initarg :rate-limit :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-waf-rate-based-rule-details-rate-limit :initform
                         common-lisp:nil)
                        (rate-key :initarg :rate-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rate-based-rule-details-rate-key
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rate-based-rule-details-name
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rate-based-rule-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rate-based-rule-details
                    'make-aws-waf-rate-based-rule-details))
 (common-lisp:defun make-aws-waf-rate-based-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match-predicates rule-id rate-limit
                     rate-key name metric-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-rate-based-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-predicates))
      (common-lisp:list
       (common-lisp:cons "MatchPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rate-based-rule-match-predicate common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-rate-based-rule-match-predicate-type
                         :initform common-lisp:nil)
                        (negated :initarg :negated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-waf-rate-based-rule-match-predicate-negated
                         :initform common-lisp:nil)
                        (data-id :initarg :data-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-rate-based-rule-match-predicate-data-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rate-based-rule-match-predicate
                    'make-aws-waf-rate-based-rule-match-predicate))
 (common-lisp:defun make-aws-waf-rate-based-rule-match-predicate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type negated data-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-rate-based-rule-match-predicate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rate-based-rule-match-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rate-based-rule-match-predicate-list ()
   '(trivial-types:proper-list aws-waf-rate-based-rule-match-predicate))
 (common-lisp:defun |make-aws-waf-rate-based-rule-match-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rate-based-rule-match-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rate-based-rule-details common-lisp:nil
                       ((match-predicates :initarg :match-predicates :type
                         (common-lisp:or
                          aws-waf-regional-rate-based-rule-match-predicate-list
                          common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-details-match-predicates
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-details-rule-id
                         :initform common-lisp:nil)
                        (rate-limit :initarg :rate-limit :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-waf-regional-rate-based-rule-details-rate-limit
                         :initform common-lisp:nil)
                        (rate-key :initarg :rate-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-details-rate-key
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-details-name
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rate-based-rule-details
                    'make-aws-waf-regional-rate-based-rule-details))
 (common-lisp:defun make-aws-waf-regional-rate-based-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match-predicates rule-id rate-limit
                     rate-key name metric-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rate-based-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-predicates))
      (common-lisp:list
       (common-lisp:cons "MatchPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rate-based-rule-match-predicate
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-match-predicate-type
                         :initform common-lisp:nil)
                        (negated :initarg :negated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-waf-regional-rate-based-rule-match-predicate-negated
                         :initform common-lisp:nil)
                        (data-id :initarg :data-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rate-based-rule-match-predicate-data-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rate-based-rule-match-predicate
                    'make-aws-waf-regional-rate-based-rule-match-predicate))
 (common-lisp:defun make-aws-waf-regional-rate-based-rule-match-predicate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type negated data-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rate-based-rule-match-predicate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rate-based-rule-match-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rate-based-rule-match-predicate-list ()
   '(trivial-types:proper-list
     aws-waf-regional-rate-based-rule-match-predicate))
 (common-lisp:defun |make-aws-waf-regional-rate-based-rule-match-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rate-based-rule-match-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rule-details common-lisp:nil
                       ((rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-rule-details-rule-id
                         :initform common-lisp:nil)
                        (predicate-list :initarg :predicate-list :type
                         (common-lisp:or aws-waf-regional-rule-predicate-list
                                         common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-details-predicate-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-rule-details-name
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-rule-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-details
                    'make-aws-waf-regional-rule-details))
 (common-lisp:defun make-aws-waf-regional-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-id predicate-list name metric-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate-list))
      (common-lisp:list
       (common-lisp:cons "PredicateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rule-group-details common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or aws-waf-regional-rule-group-rules-list
                                         common-lisp:null)
                         :accessor %aws-waf-regional-rule-group-details-rules
                         :initform common-lisp:nil)
                        (rule-group-id :initarg :rule-group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-details-rule-group-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-rule-group-details-name
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-details
                    'make-aws-waf-regional-rule-group-details))
 (common-lisp:defun make-aws-waf-regional-rule-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules rule-group-id name metric-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rule-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rule-group-rules-action-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-rules-action-details-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-rules-action-details
                    'make-aws-waf-regional-rule-group-rules-action-details))
 (common-lisp:defun make-aws-waf-regional-rule-group-rules-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rule-group-rules-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rule-group-rules-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-rules-details-type
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-rules-details-rule-id
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-waf-regional-rule-group-rules-details-priority
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or
                          aws-waf-regional-rule-group-rules-action-details
                          common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-group-rules-details-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-group-rules-details
                    'make-aws-waf-regional-rule-group-rules-details))
 (common-lisp:defun make-aws-waf-regional-rule-group-rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type rule-id priority action)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rule-group-rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-group-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rule-group-rules-list ()
   '(trivial-types:proper-list aws-waf-regional-rule-group-rules-details))
 (common-lisp:defun |make-aws-waf-regional-rule-group-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rule-group-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-rule-predicate-list ()
   '(trivial-types:proper-list aws-waf-regional-rule-predicate-list-details))
 (common-lisp:defun |make-aws-waf-regional-rule-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-rule-predicate-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-rule-predicate-list-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-predicate-list-details-type
                         :initform common-lisp:nil)
                        (negated :initarg :negated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-waf-regional-rule-predicate-list-details-negated
                         :initform common-lisp:nil)
                        (data-id :initarg :data-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-rule-predicate-list-details-data-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-rule-predicate-list-details
                    'make-aws-waf-regional-rule-predicate-list-details))
 (common-lisp:defun make-aws-waf-regional-rule-predicate-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type negated data-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-rule-predicate-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-rule-predicate-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-web-acl-details common-lisp:nil
                       ((web-acl-id :initarg :web-acl-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-web-acl-details-web-acl-id
                         :initform common-lisp:nil)
                        (rules-list :initarg :rules-list :type
                         (common-lisp:or aws-waf-regional-web-acl-rules-list
                                         common-lisp:null)
                         :accessor %aws-waf-regional-web-acl-details-rules-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-regional-web-acl-details-name
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-details-metric-name
                         :initform common-lisp:nil)
                        (default-action :initarg :default-action :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-details-default-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-details
                    'make-aws-waf-regional-web-acl-details))
 (common-lisp:defun make-aws-waf-regional-web-acl-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-acl-id rules-list name metric-name
                     default-action)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-web-acl-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-list))
      (common-lisp:list
       (common-lisp:cons "RulesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-regional-web-acl-rules-list ()
   '(trivial-types:proper-list aws-waf-regional-web-acl-rules-list-details))
 (common-lisp:defun |make-aws-waf-regional-web-acl-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-regional-web-acl-rules-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-web-acl-rules-list-action-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-rules-list-action-details-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-rules-list-action-details
                    'make-aws-waf-regional-web-acl-rules-list-action-details))
 (common-lisp:defun make-aws-waf-regional-web-acl-rules-list-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-web-acl-rules-list-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-regional-web-acl-rules-list-details
                       common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-rules-list-details-type
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-rules-list-details-rule-id
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-waf-regional-web-acl-rules-list-details-priority
                         :initform common-lisp:nil)
                        (override-action :initarg :override-action :type
                         (common-lisp:or
                          aws-waf-regional-web-acl-rules-list-override-action-details
                          common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-rules-list-details-override-action
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or
                          aws-waf-regional-web-acl-rules-list-action-details
                          common-lisp:null)
                         :accessor
                         %aws-waf-regional-web-acl-rules-list-details-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-regional-web-acl-rules-list-details
                    'make-aws-waf-regional-web-acl-rules-list-details))
 (common-lisp:defun make-aws-waf-regional-web-acl-rules-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type rule-id priority override-action
                     action)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-web-acl-rules-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-waf-regional-web-acl-rules-list-override-action-details common-lisp:nil
  ((type :initarg :type :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %aws-waf-regional-web-acl-rules-list-override-action-details-type :initform
    common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-waf-regional-web-acl-rules-list-override-action-details
   'make-aws-waf-regional-web-acl-rules-list-override-action-details))
 (common-lisp:defun make-aws-waf-regional-web-acl-rules-list-override-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-regional-web-acl-rules-list-override-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-regional-web-acl-rules-list-override-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rule-details common-lisp:nil
                       ((rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-details-rule-id :initform
                         common-lisp:nil)
                        (predicate-list :initarg :predicate-list :type
                         (common-lisp:or aws-waf-rule-predicate-list
                                         common-lisp:null)
                         :accessor %aws-waf-rule-details-predicate-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-details-name :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-details-metric-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-details 'make-aws-waf-rule-details))
 (common-lisp:defun make-aws-waf-rule-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-id predicate-list name metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-waf-rule-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate-list))
      (common-lisp:list
       (common-lisp:cons "PredicateList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-waf-rule-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rule-group-details common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or aws-waf-rule-group-rules-list
                                         common-lisp:null)
                         :accessor %aws-waf-rule-group-details-rules :initform
                         common-lisp:nil)
                        (rule-group-id :initarg :rule-group-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-group-details-rule-group-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-group-details-name :initform
                         common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-group-details-metric-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-details
                    'make-aws-waf-rule-group-details))
 (common-lisp:defun make-aws-waf-rule-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules rule-group-id name metric-name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-waf-rule-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rule-group-rules-action-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-waf-rule-group-rules-action-details-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-rules-action-details
                    'make-aws-waf-rule-group-rules-action-details))
 (common-lisp:defun make-aws-waf-rule-group-rules-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-rule-group-rules-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rule-group-rules-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-group-rules-details-type
                         :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-group-rules-details-rule-id
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-waf-rule-group-rules-details-priority :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or
                          aws-waf-rule-group-rules-action-details
                          common-lisp:null)
                         :accessor %aws-waf-rule-group-rules-details-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-group-rules-details
                    'make-aws-waf-rule-group-rules-details))
 (common-lisp:defun make-aws-waf-rule-group-rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type rule-id priority action)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-rule-group-rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-group-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rule-group-rules-list ()
   '(trivial-types:proper-list aws-waf-rule-group-rules-details))
 (common-lisp:defun |make-aws-waf-rule-group-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rule-group-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aws-waf-rule-predicate-list ()
   '(trivial-types:proper-list aws-waf-rule-predicate-list-details))
 (common-lisp:defun |make-aws-waf-rule-predicate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-waf-rule-predicate-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-waf-rule-predicate-list-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-predicate-list-details-type
                         :initform common-lisp:nil)
                        (negated :initarg :negated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-waf-rule-predicate-list-details-negated :initform
                         common-lisp:nil)
                        (data-id :initarg :data-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-rule-predicate-list-details-data-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-rule-predicate-list-details
                    'make-aws-waf-rule-predicate-list-details))
 (common-lisp:defun make-aws-waf-rule-predicate-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type negated data-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-waf-rule-predicate-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-rule-predicate-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-web-acl-details common-lisp:nil
                       ((web-acl-id :initarg :web-acl-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-web-acl-details-web-acl-id
                         :initform common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or aws-waf-web-acl-rule-list
                                         common-lisp:null)
                         :accessor %aws-waf-web-acl-details-rules :initform
                         common-lisp:nil)
                        (default-action :initarg :default-action :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-web-acl-details-default-action
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-web-acl-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-web-acl-details 'make-aws-waf-web-acl-details))
 (common-lisp:defun make-aws-waf-web-acl-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-acl-id rules default-action name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-waf-web-acl-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-waf-web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-waf-web-acl-rule common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-web-acl-rule-type :initform
                         common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-waf-web-acl-rule-rule-id :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-waf-web-acl-rule-priority :initform
                         common-lisp:nil)
                        (override-action :initarg :override-action :type
                         (common-lisp:or waf-override-action common-lisp:null)
                         :accessor %aws-waf-web-acl-rule-override-action
                         :initform common-lisp:nil)
                        (excluded-rules :initarg :excluded-rules :type
                         (common-lisp:or waf-excluded-rule-list
                                         common-lisp:null)
                         :accessor %aws-waf-web-acl-rule-excluded-rules
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or waf-action common-lisp:null) :accessor
                         %aws-waf-web-acl-rule-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-waf-web-acl-rule 'make-aws-waf-web-acl-rule))
 (common-lisp:defun make-aws-waf-web-acl-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type rule-id priority override-action
                     excluded-rules action)
   (common-lisp:apply #'common-lisp:make-instance 'aws-waf-web-acl-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-rules))
      (common-lisp:list
       (common-lisp:cons "ExcludedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-waf-web-acl-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-waf-web-acl-rule-list ()
   '(trivial-types:proper-list aws-waf-web-acl-rule))
 (common-lisp:defun |make-aws-waf-web-acl-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-waf-web-acl-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2action-allow-details common-lisp:nil
                       ((custom-request-handling :initarg
                         :custom-request-handling :type
                         (common-lisp:or
                          aws-wafv2custom-request-handling-details
                          common-lisp:null)
                         :accessor
                         %aws-wafv2action-allow-details-custom-request-handling
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2action-allow-details
                    'make-aws-wafv2action-allow-details))
 (common-lisp:defun make-aws-wafv2action-allow-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-request-handling)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2action-allow-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-allow-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2action-block-details common-lisp:nil
                       ((custom-response :initarg :custom-response :type
                         (common-lisp:or aws-wafv2custom-response-details
                                         common-lisp:null)
                         :accessor
                         %aws-wafv2action-block-details-custom-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2action-block-details
                    'make-aws-wafv2action-block-details))
 (common-lisp:defun make-aws-wafv2action-block-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2action-block-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-response))
      (common-lisp:list
       (common-lisp:cons "CustomResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2action-block-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2custom-http-header common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2custom-http-header-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2custom-http-header-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-http-header
                    'make-aws-wafv2custom-http-header))
 (common-lisp:defun make-aws-wafv2custom-http-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-wafv2custom-http-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-http-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2custom-request-handling-details common-lisp:nil
                       ((insert-headers :initarg :insert-headers :type
                         (common-lisp:or aws-wafv2insert-headers-list
                                         common-lisp:null)
                         :accessor
                         %aws-wafv2custom-request-handling-details-insert-headers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-request-handling-details
                    'make-aws-wafv2custom-request-handling-details))
 (common-lisp:defun make-aws-wafv2custom-request-handling-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insert-headers)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2custom-request-handling-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insert-headers))
      (common-lisp:list
       (common-lisp:cons "InsertHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-request-handling-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2custom-response-details common-lisp:nil
                       ((response-headers :initarg :response-headers :type
                         (common-lisp:or aws-wafv2insert-headers-list
                                         common-lisp:null)
                         :accessor
                         %aws-wafv2custom-response-details-response-headers
                         :initform common-lisp:nil)
                        (response-code :initarg :response-code :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-wafv2custom-response-details-response-code
                         :initform common-lisp:nil)
                        (custom-response-body-key :initarg
                         :custom-response-body-key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-wafv2custom-response-details-custom-response-body-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2custom-response-details
                    'make-aws-wafv2custom-response-details))
 (common-lisp:defun make-aws-wafv2custom-response-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-headers response-code
                     custom-response-body-key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2custom-response-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-response-body-key))
      (common-lisp:list
       (common-lisp:cons "CustomResponseBodyKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-headers))
      (common-lisp:list
       (common-lisp:cons "ResponseHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2custom-response-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-wafv2insert-headers-list ()
   '(trivial-types:proper-list aws-wafv2custom-http-header))
 (common-lisp:defun |make-aws-wafv2insert-headers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-wafv2custom-http-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2rule-group-details common-lisp:nil
                       ((visibility-config :initarg :visibility-config :type
                         (common-lisp:or aws-wafv2visibility-config-details
                                         common-lisp:null)
                         :accessor
                         %aws-wafv2rule-group-details-visibility-config
                         :initform common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-scope :initform
                         common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or aws-wafv2rules-list common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-rules :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rule-group-details-description
                         :initform common-lisp:nil)
                        (capacity :initarg :capacity :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-wafv2rule-group-details-capacity :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rule-group-details
                    'make-aws-wafv2rule-group-details))
 (common-lisp:defun make-aws-wafv2rule-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility-config scope rules arn name id
                     description capacity)
   (common-lisp:apply #'common-lisp:make-instance 'aws-wafv2rule-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2rules-action-captcha-details common-lisp:nil
                       ((custom-request-handling :initarg
                         :custom-request-handling :type
                         (common-lisp:or
                          aws-wafv2custom-request-handling-details
                          common-lisp:null)
                         :accessor
                         %aws-wafv2rules-action-captcha-details-custom-request-handling
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-captcha-details
                    'make-aws-wafv2rules-action-captcha-details))
 (common-lisp:defun make-aws-wafv2rules-action-captcha-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-request-handling)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2rules-action-captcha-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-captcha-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2rules-action-count-details common-lisp:nil
                       ((custom-request-handling :initarg
                         :custom-request-handling :type
                         (common-lisp:or
                          aws-wafv2custom-request-handling-details
                          common-lisp:null)
                         :accessor
                         %aws-wafv2rules-action-count-details-custom-request-handling
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-count-details
                    'make-aws-wafv2rules-action-count-details))
 (common-lisp:defun make-aws-wafv2rules-action-count-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-request-handling)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2rules-action-count-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-request-handling))
      (common-lisp:list
       (common-lisp:cons "CustomRequestHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-count-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2rules-action-details common-lisp:nil
                       ((count :initarg :count :type
                         (common-lisp:or aws-wafv2rules-action-count-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-action-details-count
                         :initform common-lisp:nil)
                        (captcha :initarg :captcha :type
                         (common-lisp:or aws-wafv2rules-action-captcha-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-action-details-captcha
                         :initform common-lisp:nil)
                        (block :initarg :block :type
                         (common-lisp:or aws-wafv2action-block-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-action-details-block
                         :initform common-lisp:nil)
                        (allow :initarg :allow :type
                         (common-lisp:or aws-wafv2action-allow-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-action-details-allow
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-action-details
                    'make-aws-wafv2rules-action-details))
 (common-lisp:defun make-aws-wafv2rules-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count captcha block allow)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2rules-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha))
      (common-lisp:list
       (common-lisp:cons "Captcha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2rules-details common-lisp:nil
                       ((visibility-config :initarg :visibility-config :type
                         (common-lisp:or aws-wafv2visibility-config-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-details-visibility-config
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %aws-wafv2rules-details-priority :initform
                         common-lisp:nil)
                        (override-action :initarg :override-action :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rules-details-override-action
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2rules-details-name :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or aws-wafv2rules-action-details
                                         common-lisp:null)
                         :accessor %aws-wafv2rules-details-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2rules-details 'make-aws-wafv2rules-details))
 (common-lisp:defun make-aws-wafv2rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility-config priority
                     override-action name action)
   (common-lisp:apply #'common-lisp:make-instance 'aws-wafv2rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-wafv2rules-list ()
   '(trivial-types:proper-list aws-wafv2rules-details))
 (common-lisp:defun |make-aws-wafv2rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-wafv2rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2visibility-config-details common-lisp:nil
                       ((sampled-requests-enabled :initarg
                         :sampled-requests-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-wafv2visibility-config-details-sampled-requests-enabled
                         :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %aws-wafv2visibility-config-details-metric-name
                         :initform common-lisp:nil)
                        (cloud-watch-metrics-enabled :initarg
                         :cloud-watch-metrics-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-wafv2visibility-config-details-cloud-watch-metrics-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2visibility-config-details
                    'make-aws-wafv2visibility-config-details))
 (common-lisp:defun make-aws-wafv2visibility-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sampled-requests-enabled metric-name
                     cloud-watch-metrics-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2visibility-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampled-requests-enabled))
      (common-lisp:list
       (common-lisp:cons "SampledRequestsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2visibility-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2web-acl-action-details common-lisp:nil
                       ((block :initarg :block :type
                         (common-lisp:or aws-wafv2action-block-details
                                         common-lisp:null)
                         :accessor %aws-wafv2web-acl-action-details-block
                         :initform common-lisp:nil)
                        (allow :initarg :allow :type
                         (common-lisp:or aws-wafv2action-allow-details
                                         common-lisp:null)
                         :accessor %aws-wafv2web-acl-action-details-allow
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-action-details
                    'make-aws-wafv2web-acl-action-details))
 (common-lisp:defun make-aws-wafv2web-acl-action-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block allow)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2web-acl-action-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow))
      (common-lisp:list
       (common-lisp:cons "Allow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-action-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2web-acl-captcha-config-details common-lisp:nil
                       ((immunity-time-property :initarg
                         :immunity-time-property :type
                         (common-lisp:or
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details
                          common-lisp:null)
                         :accessor
                         %aws-wafv2web-acl-captcha-config-details-immunity-time-property
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-captcha-config-details
                    'make-aws-wafv2web-acl-captcha-config-details))
 (common-lisp:defun make-aws-wafv2web-acl-captcha-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key immunity-time-property)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2web-acl-captcha-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immunity-time-property))
      (common-lisp:list
       (common-lisp:cons "ImmunityTimeProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  aws-wafv2web-acl-captcha-config-immunity-time-property-details
  common-lisp:nil
  ((immunity-time :initarg :immunity-time :type
    (common-lisp:or long common-lisp:null) :accessor
    %aws-wafv2web-acl-captcha-config-immunity-time-property-details-immunity-time
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'aws-wafv2web-acl-captcha-config-immunity-time-property-details
   'make-aws-wafv2web-acl-captcha-config-immunity-time-property-details))
 (common-lisp:defun make-aws-wafv2web-acl-captcha-config-immunity-time-property-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key immunity-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-wafv2web-acl-captcha-config-immunity-time-property-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'immunity-time))
      (common-lisp:list
       (common-lisp:cons "ImmunityTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-captcha-config-immunity-time-property-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-wafv2web-acl-details common-lisp:nil
                       ((visibility-config :initarg :visibility-config :type
                         (common-lisp:or aws-wafv2visibility-config-details
                                         common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-visibility-config
                         :initform common-lisp:nil)
                        (rules :initarg :rules :type
                         (common-lisp:or aws-wafv2rules-list common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-rules :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-description
                         :initform common-lisp:nil)
                        (default-action :initarg :default-action :type
                         (common-lisp:or aws-wafv2web-acl-action-details
                                         common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-default-action
                         :initform common-lisp:nil)
                        (captcha-config :initarg :captcha-config :type
                         (common-lisp:or
                          aws-wafv2web-acl-captcha-config-details
                          common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-captcha-config
                         :initform common-lisp:nil)
                        (capacity :initarg :capacity :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %aws-wafv2web-acl-details-capacity :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-id :initform
                         common-lisp:nil)
                        (managedby-firewall-manager :initarg
                         :managedby-firewall-manager :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %aws-wafv2web-acl-details-managedby-firewall-manager
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-wafv2web-acl-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-wafv2web-acl-details 'make-aws-wafv2web-acl-details))
 (common-lisp:defun make-aws-wafv2web-acl-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility-config rules description
                     default-action captcha-config capacity id
                     managedby-firewall-manager arn name)
   (common-lisp:apply #'common-lisp:make-instance 'aws-wafv2web-acl-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'managedby-firewall-manager))
      (common-lisp:list
       (common-lisp:cons "ManagedbyFirewallManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'captcha-config))
      (common-lisp:list
       (common-lisp:cons "CaptchaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility-config))
      (common-lisp:list
       (common-lisp:cons "VisibilityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-wafv2web-acl-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-xray-encryption-config-details common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-xray-encryption-config-details-type
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-xray-encryption-config-details-status
                         :initform common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %aws-xray-encryption-config-details-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-xray-encryption-config-details
                    'make-aws-xray-encryption-config-details))
 (common-lisp:defun make-aws-xray-encryption-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type status key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-xray-encryption-config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-xray-encryption-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disable-standards-request common-lisp:nil
                       ((standards-subscription-arns :initarg
                         :standards-subscription-arns :type
                         (common-lisp:or standards-subscription-arns
                                         common-lisp:null)
                         :accessor
                         %batch-disable-standards-request-standards-subscription-arns
                         :initform
                         (common-lisp:error
                          ":standards-subscription-arns is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-disable-standards-request
                    'make-batch-disable-standards-request))
 (common-lisp:defun make-batch-disable-standards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-subscription-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disable-standards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disable-standards-response common-lisp:nil
                       ((standards-subscriptions :initarg
                         :standards-subscriptions :type
                         (common-lisp:or standards-subscriptions
                                         common-lisp:null)
                         :accessor
                         %batch-disable-standards-response-standards-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-disable-standards-response
                    'make-batch-disable-standards-response))
 (common-lisp:defun make-batch-disable-standards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disable-standards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disable-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-enable-standards-request common-lisp:nil
                       ((standards-subscription-requests :initarg
                         :standards-subscription-requests :type
                         (common-lisp:or standards-subscription-requests
                                         common-lisp:null)
                         :accessor
                         %batch-enable-standards-request-standards-subscription-requests
                         :initform
                         (common-lisp:error
                          ":standards-subscription-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-enable-standards-request
                    'make-batch-enable-standards-request))
 (common-lisp:defun make-batch-enable-standards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-subscription-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-enable-standards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-requests))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-enable-standards-response common-lisp:nil
                       ((standards-subscriptions :initarg
                         :standards-subscriptions :type
                         (common-lisp:or standards-subscriptions
                                         common-lisp:null)
                         :accessor
                         %batch-enable-standards-response-standards-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-enable-standards-response
                    'make-batch-enable-standards-response))
 (common-lisp:defun make-batch-enable-standards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-enable-standards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-enable-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-security-controls-request common-lisp:nil
                       ((security-control-ids :initarg :security-control-ids
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %batch-get-security-controls-request-security-control-ids
                         :initform
                         (common-lisp:error
                          ":security-control-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-security-controls-request
                    'make-batch-get-security-controls-request))
 (common-lisp:defun make-batch-get-security-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-control-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-security-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityControlIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-security-controls-response common-lisp:nil
                       ((unprocessed-ids :initarg :unprocessed-ids :type
                         (common-lisp:or unprocessed-security-controls
                                         common-lisp:null)
                         :accessor
                         %batch-get-security-controls-response-unprocessed-ids
                         :initform common-lisp:nil)
                        (security-controls :initarg :security-controls :type
                         (common-lisp:or security-controls common-lisp:null)
                         :accessor
                         %batch-get-security-controls-response-security-controls
                         :initform
                         (common-lisp:error
                          ":security-controls is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-security-controls-response
                    'make-batch-get-security-controls-response))
 (common-lisp:defun make-batch-get-security-controls-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-ids security-controls)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-security-controls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-controls))
      (common-lisp:list
       (common-lisp:cons "SecurityControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-security-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-standards-control-associations-request
                       common-lisp:nil
                       ((standards-control-association-ids :initarg
                         :standards-control-association-ids :type
                         (common-lisp:or standards-control-association-ids
                                         common-lisp:null)
                         :accessor
                         %batch-get-standards-control-associations-request-standards-control-association-ids
                         :initform
                         (common-lisp:error
                          ":standards-control-association-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-standards-control-associations-request
                    'make-batch-get-standards-control-associations-request))
 (common-lisp:defun make-batch-get-standards-control-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-control-association-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-standards-control-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-ids))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-standards-control-associations-response
                       common-lisp:nil
                       ((unprocessed-associations :initarg
                         :unprocessed-associations :type
                         (common-lisp:or
                          unprocessed-standards-control-associations
                          common-lisp:null)
                         :accessor
                         %batch-get-standards-control-associations-response-unprocessed-associations
                         :initform common-lisp:nil)
                        (standards-control-association-details :initarg
                         :standards-control-association-details :type
                         (common-lisp:or standards-control-association-details
                                         common-lisp:null)
                         :accessor
                         %batch-get-standards-control-associations-response-standards-control-association-details
                         :initform
                         (common-lisp:error
                          ":standards-control-association-details is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-standards-control-associations-response
                    'make-batch-get-standards-control-associations-response))
 (common-lisp:defun make-batch-get-standards-control-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-associations
                     standards-control-association-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-standards-control-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-details))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-associations))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-import-findings-request common-lisp:nil
                       ((findings :initarg :findings :type
                         (common-lisp:or
                          batch-import-findings-request-finding-list
                          common-lisp:null)
                         :accessor %batch-import-findings-request-findings
                         :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-import-findings-request
                    'make-batch-import-findings-request))
 (common-lisp:defun make-batch-import-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key findings)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-import-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "Findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-import-findings-request-finding-list ()
   '(trivial-types:proper-list aws-security-finding))
 (common-lisp:defun |make-batch-import-findings-request-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-security-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-import-findings-response common-lisp:nil
                       ((failed-findings :initarg :failed-findings :type
                         (common-lisp:or import-findings-error-list
                                         common-lisp:null)
                         :accessor
                         %batch-import-findings-response-failed-findings
                         :initform common-lisp:nil)
                        (success-count :initarg :success-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-import-findings-response-success-count
                         :initform
                         (common-lisp:error ":success-count is required"))
                        (failed-count :initarg :failed-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %batch-import-findings-response-failed-count :initform
                         (common-lisp:error ":failed-count is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-import-findings-response
                    'make-batch-import-findings-response))
 (common-lisp:defun make-batch-import-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-findings success-count
                     failed-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-import-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-count))
      (common-lisp:list
       (common-lisp:cons "SuccessCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-findings))
      (common-lisp:list
       (common-lisp:cons "FailedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-import-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-findings-request common-lisp:nil
                       ((related-findings :initarg :related-findings :type
                         (common-lisp:or related-finding-list common-lisp:null)
                         :accessor
                         %batch-update-findings-request-related-findings
                         :initform common-lisp:nil)
                        (workflow :initarg :workflow :type
                         (common-lisp:or workflow-update common-lisp:null)
                         :accessor %batch-update-findings-request-workflow
                         :initform common-lisp:nil)
                        (user-defined-fields :initarg :user-defined-fields
                         :type (common-lisp:or field-map common-lisp:null)
                         :accessor
                         %batch-update-findings-request-user-defined-fields
                         :initform common-lisp:nil)
                        (types :initarg :types :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         %batch-update-findings-request-types :initform
                         common-lisp:nil)
                        (criticality :initarg :criticality :type
                         (common-lisp:or ratio-scale common-lisp:null)
                         :accessor %batch-update-findings-request-criticality
                         :initform common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or ratio-scale common-lisp:null)
                         :accessor %batch-update-findings-request-confidence
                         :initform common-lisp:nil)
                        (verification-state :initarg :verification-state :type
                         (common-lisp:or verification-state common-lisp:null)
                         :accessor
                         %batch-update-findings-request-verification-state
                         :initform common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or severity-update common-lisp:null)
                         :accessor %batch-update-findings-request-severity
                         :initform common-lisp:nil)
                        (note :initarg :note :type
                         (common-lisp:or note-update common-lisp:null)
                         :accessor %batch-update-findings-request-note
                         :initform common-lisp:nil)
                        (finding-identifiers :initarg :finding-identifiers
                         :type
                         (common-lisp:or aws-security-finding-identifier-list
                                         common-lisp:null)
                         :accessor
                         %batch-update-findings-request-finding-identifiers
                         :initform
                         (common-lisp:error
                          ":finding-identifiers is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-request
                    'make-batch-update-findings-request))
 (common-lisp:defun make-batch-update-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key related-findings workflow
                     user-defined-fields types criticality confidence
                     verification-state severity note finding-identifiers)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-identifiers))
      (common-lisp:list
       (common-lisp:cons "FindingIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-state))
      (common-lisp:list
       (common-lisp:cons "VerificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-defined-fields))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-findings-response common-lisp:nil
                       ((unprocessed-findings :initarg :unprocessed-findings
                         :type
                         (common-lisp:or
                          batch-update-findings-unprocessed-findings-list
                          common-lisp:null)
                         :accessor
                         %batch-update-findings-response-unprocessed-findings
                         :initform
                         (common-lisp:error
                          ":unprocessed-findings is required"))
                        (processed-findings :initarg :processed-findings :type
                         (common-lisp:or aws-security-finding-identifier-list
                                         common-lisp:null)
                         :accessor
                         %batch-update-findings-response-processed-findings
                         :initform
                         (common-lisp:error
                          ":processed-findings is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-response
                    'make-batch-update-findings-response))
 (common-lisp:defun make-batch-update-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-findings processed-findings)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processed-findings))
      (common-lisp:list
       (common-lisp:cons "ProcessedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-findings))
      (common-lisp:list
       (common-lisp:cons "UnprocessedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-findings-unprocessed-finding
                       common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %batch-update-findings-unprocessed-finding-error-message
                         :initform
                         (common-lisp:error ":error-message is required"))
                        (error-code :initarg :error-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %batch-update-findings-unprocessed-finding-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))
                        (finding-identifier :initarg :finding-identifier :type
                         (common-lisp:or aws-security-finding-identifier
                                         common-lisp:null)
                         :accessor
                         %batch-update-findings-unprocessed-finding-finding-identifier
                         :initform
                         (common-lisp:error
                          ":finding-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-findings-unprocessed-finding
                    'make-batch-update-findings-unprocessed-finding))
 (common-lisp:defun make-batch-update-findings-unprocessed-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     finding-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-findings-unprocessed-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-identifier))
      (common-lisp:list
       (common-lisp:cons "FindingIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-findings-unprocessed-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-findings-unprocessed-findings-list ()
   '(trivial-types:proper-list batch-update-findings-unprocessed-finding))
 (common-lisp:defun |make-batch-update-findings-unprocessed-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-findings-unprocessed-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-update-standards-control-associations-request
                       common-lisp:nil
                       ((standards-control-association-updates :initarg
                         :standards-control-association-updates :type
                         (common-lisp:or standards-control-association-updates
                                         common-lisp:null)
                         :accessor
                         %batch-update-standards-control-associations-request-standards-control-association-updates
                         :initform
                         (common-lisp:error
                          ":standards-control-association-updates is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-standards-control-associations-request
                    'make-batch-update-standards-control-associations-request))
 (common-lisp:defun make-batch-update-standards-control-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-control-association-updates)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-standards-control-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-updates))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-standards-control-associations-response
                       common-lisp:nil
                       ((unprocessed-association-updates :initarg
                         :unprocessed-association-updates :type
                         (common-lisp:or
                          unprocessed-standards-control-association-updates
                          common-lisp:null)
                         :accessor
                         %batch-update-standards-control-associations-response-unprocessed-association-updates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-standards-control-associations-response
                    'make-batch-update-standards-control-associations-response))
 (common-lisp:defun make-batch-update-standards-control-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-association-updates)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-standards-control-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-association-updates))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAssociationUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass boolean-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %boolean-filter-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'boolean-filter 'make-boolean-filter))
 (common-lisp:defun make-boolean-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'boolean-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input boolean-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input boolean-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input boolean-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype boolean-filter-list ()
   '(trivial-types:proper-list boolean-filter))
 (common-lisp:defun |make-boolean-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boolean-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype category-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-category-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cell common-lisp:nil
                       ((cell-reference :initarg :cell-reference :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cell-cell-reference :initform
                         common-lisp:nil)
                        (column-name :initarg :column-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cell-column-name :initform common-lisp:nil)
                        (row :initarg :row :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %cell-row :initform common-lisp:nil)
                        (column :initarg :column :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %cell-column :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cell 'make-cell))
 (common-lisp:defun make-cell
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cell-reference column-name row column)
   (common-lisp:apply #'common-lisp:make-instance 'cell
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row))
      (common-lisp:list
       (common-lisp:cons "Row"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-reference))
      (common-lisp:list
       (common-lisp:cons "CellReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cells () '(trivial-types:proper-list cell))
 (common-lisp:defun |make-cells|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cell))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cidr-block-association common-lisp:nil
                       ((cidr-block-state :initarg :cidr-block-state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cidr-block-association-cidr-block-state
                         :initform common-lisp:nil)
                        (cidr-block :initarg :cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cidr-block-association-cidr-block :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cidr-block-association-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cidr-block-association 'make-cidr-block-association))
 (common-lisp:defun make-cidr-block-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-block-state cidr-block
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance 'cidr-block-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cidr-block-association-list ()
   '(trivial-types:proper-list cidr-block-association))
 (common-lisp:defun |make-cidr-block-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass city common-lisp:nil
                       ((city-name :initarg :city-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %city-city-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'city 'make-city))
 (common-lisp:defun make-city
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key city-name)
   (common-lisp:apply #'common-lisp:make-instance 'city
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input city))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city-name))
      (common-lisp:list
       (common-lisp:cons "CityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input city))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass classification-result common-lisp:nil
                       ((custom-data-identifiers :initarg
                         :custom-data-identifiers :type
                         (common-lisp:or custom-data-identifiers-result
                                         common-lisp:null)
                         :accessor
                         %classification-result-custom-data-identifiers
                         :initform common-lisp:nil)
                        (sensitive-data :initarg :sensitive-data :type
                         (common-lisp:or sensitive-data-result-list
                                         common-lisp:null)
                         :accessor %classification-result-sensitive-data
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or classification-status
                                         common-lisp:null)
                         :accessor %classification-result-status :initform
                         common-lisp:nil)
                        (additional-occurrences :initarg
                         :additional-occurrences :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %classification-result-additional-occurrences
                         :initform common-lisp:nil)
                        (size-classified :initarg :size-classified :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %classification-result-size-classified :initform
                         common-lisp:nil)
                        (mime-type :initarg :mime-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %classification-result-mime-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-result 'make-classification-result))
 (common-lisp:defun make-classification-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-data-identifiers sensitive-data
                     status additional-occurrences size-classified mime-type)
   (common-lisp:apply #'common-lisp:make-instance 'classification-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mime-type))
      (common-lisp:list
       (common-lisp:cons "MimeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-classified))
      (common-lisp:list
       (common-lisp:cons "SizeClassified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-occurrences))
      (common-lisp:list
       (common-lisp:cons "AdditionalOccurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive-data))
      (common-lisp:list
       (common-lisp:cons "SensitiveData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-data-identifiers))
      (common-lisp:list
       (common-lisp:cons "CustomDataIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass classification-status common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %classification-status-reason :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %classification-status-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'classification-status 'make-classification-status))
 (common-lisp:defun make-classification-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason code)
   (common-lisp:apply #'common-lisp:make-instance 'classification-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          classification-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compliance common-lisp:nil
                       ((associated-standards :initarg :associated-standards
                         :type
                         (common-lisp:or associated-standards-list
                                         common-lisp:null)
                         :accessor %compliance-associated-standards :initform
                         common-lisp:nil)
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %compliance-security-control-id :initform
                         common-lisp:nil)
                        (status-reasons :initarg :status-reasons :type
                         (common-lisp:or status-reasons-list common-lisp:null)
                         :accessor %compliance-status-reasons :initform
                         common-lisp:nil)
                        (related-requirements :initarg :related-requirements
                         :type
                         (common-lisp:or related-requirements-list
                                         common-lisp:null)
                         :accessor %compliance-related-requirements :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or compliance-status common-lisp:null)
                         :accessor %compliance-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compliance 'make-compliance))
 (common-lisp:defun make-compliance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key associated-standards security-control-id
                     status-reasons related-requirements status)
   (common-lisp:apply #'common-lisp:make-instance 'compliance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reasons))
      (common-lisp:list
       (common-lisp:cons "StatusReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-standards))
      (common-lisp:list
       (common-lisp:cons "AssociatedStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance))
   common-lisp:nil))
(common-lisp:deftype compliance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass container-details common-lisp:nil
                       ((privileged :initarg :privileged :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %container-details-privileged :initform
                         common-lisp:nil)
                        (volume-mounts :initarg :volume-mounts :type
                         (common-lisp:or volume-mount-list common-lisp:null)
                         :accessor %container-details-volume-mounts :initform
                         common-lisp:nil)
                        (launched-at :initarg :launched-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-details-launched-at :initform
                         common-lisp:nil)
                        (image-name :initarg :image-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-details-image-name :initform
                         common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-details-image-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-details-name :initform
                         common-lisp:nil)
                        (container-runtime :initarg :container-runtime :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %container-details-container-runtime
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-details 'make-container-details))
 (common-lisp:defun make-container-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key privileged volume-mounts launched-at
                     image-name image-id name container-runtime)
   (common-lisp:apply #'common-lisp:make-instance 'container-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-runtime))
      (common-lisp:list
       (common-lisp:cons "ContainerRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-mounts))
      (common-lisp:list
       (common-lisp:cons "VolumeMounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'privileged))
      (common-lisp:list
       (common-lisp:cons "Privileged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-details))
   common-lisp:nil))
(common-lisp:deftype control-finding-generator () 'common-lisp:string)
(common-lisp:deftype control-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass country common-lisp:nil
                       ((country-name :initarg :country-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %country-country-name :initform
                         common-lisp:nil)
                        (country-code :initarg :country-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %country-country-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'country 'make-country))
 (common-lisp:defun make-country
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key country-name country-code)
   (common-lisp:apply #'common-lisp:make-instance 'country
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input country))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-name))
      (common-lisp:list
       (common-lisp:cons "CountryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input country))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-action-target-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-action-target-request-id :initform
                         (common-lisp:error ":id is required"))
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-action-target-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-action-target-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-action-target-request
                    'make-create-action-target-request))
 (common-lisp:defun make-create-action-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-action-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-action-target-response common-lisp:nil
                       ((action-target-arn :initarg :action-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-action-target-response-action-target-arn
                         :initform
                         (common-lisp:error
                          ":action-target-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-action-target-response
                    'make-create-action-target-response))
 (common-lisp:defun make-create-action-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-action-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-finding-aggregator-request common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-finding-aggregator-request-regions
                         :initform common-lisp:nil)
                        (region-linking-mode :initarg :region-linking-mode
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-finding-aggregator-request-region-linking-mode
                         :initform
                         (common-lisp:error
                          ":region-linking-mode is required"))))
 (common-lisp:export
  (common-lisp:list 'create-finding-aggregator-request
                    'make-create-finding-aggregator-request))
 (common-lisp:defun make-create-finding-aggregator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions region-linking-mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-finding-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-finding-aggregator-response common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-finding-aggregator-response-regions
                         :initform common-lisp:nil)
                        (region-linking-mode :initarg :region-linking-mode
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-finding-aggregator-response-region-linking-mode
                         :initform common-lisp:nil)
                        (finding-aggregation-region :initarg
                         :finding-aggregation-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-finding-aggregator-response-finding-aggregation-region
                         :initform common-lisp:nil)
                        (finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %create-finding-aggregator-response-finding-aggregator-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-finding-aggregator-response
                    'make-create-finding-aggregator-response))
 (common-lisp:defun make-create-finding-aggregator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions region-linking-mode
                     finding-aggregation-region finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-finding-aggregator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-insight-request common-lisp:nil
                       ((group-by-attribute :initarg :group-by-attribute :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-insight-request-group-by-attribute
                         :initform
                         (common-lisp:error ":group-by-attribute is required"))
                        (filters :initarg :filters :type
                         (common-lisp:or aws-security-finding-filters
                                         common-lisp:null)
                         :accessor %create-insight-request-filters :initform
                         (common-lisp:error ":filters is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-insight-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-insight-request 'make-create-insight-request))
 (common-lisp:defun make-create-insight-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-by-attribute filters name)
   (common-lisp:apply #'common-lisp:make-instance 'create-insight-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-insight-response common-lisp:nil
                       ((insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-insight-response-insight-arn
                         :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-insight-response 'make-create-insight-response))
 (common-lisp:defun make-create-insight-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-insight-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-request common-lisp:nil
                       ((account-details :initarg :account-details :type
                         (common-lisp:or account-details-list common-lisp:null)
                         :accessor %create-members-request-account-details
                         :initform
                         (common-lisp:error ":account-details is required"))))
 (common-lisp:export
  (common-lisp:list 'create-members-request 'make-create-members-request))
 (common-lisp:defun make-create-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-details)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-details))
      (common-lisp:list
       (common-lisp:cons "AccountDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor
                         %create-members-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-members-response 'make-create-members-response))
 (common-lisp:defun make-create-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'create-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-members-response))
   common-lisp:nil))
(common-lisp:deftype cross-account-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass custom-data-identifiers-detections common-lisp:nil
                       ((occurrences :initarg :occurrences :type
                         (common-lisp:or occurrences common-lisp:null)
                         :accessor
                         %custom-data-identifiers-detections-occurrences
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %custom-data-identifiers-detections-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %custom-data-identifiers-detections-arn
                         :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %custom-data-identifiers-detections-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers-detections
                    'make-custom-data-identifiers-detections))
 (common-lisp:defun make-custom-data-identifiers-detections
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key occurrences name arn count)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-data-identifiers-detections
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "Occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-detections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-data-identifiers-detections-list ()
   '(trivial-types:proper-list custom-data-identifiers-detections))
 (common-lisp:defun |make-custom-data-identifiers-detections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-data-identifiers-detections))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-data-identifiers-result common-lisp:nil
                       ((total-count :initarg :total-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %custom-data-identifiers-result-total-count :initform
                         common-lisp:nil)
                        (detections :initarg :detections :type
                         (common-lisp:or
                          custom-data-identifiers-detections-list
                          common-lisp:null)
                         :accessor %custom-data-identifiers-result-detections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-data-identifiers-result
                    'make-custom-data-identifiers-result))
 (common-lisp:defun make-custom-data-identifiers-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-count detections)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-data-identifiers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "Detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-data-identifiers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cvss common-lisp:nil
                       ((adjustments :initarg :adjustments :type
                         (common-lisp:or adjustment-list common-lisp:null)
                         :accessor %cvss-adjustments :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-source :initform common-lisp:nil)
                        (base-vector :initarg :base-vector :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-base-vector :initform common-lisp:nil)
                        (base-score :initarg :base-score :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %cvss-base-score :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %cvss-version :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cvss 'make-cvss))
 (common-lisp:defun make-cvss
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key adjustments source base-vector base-score
                     version)
   (common-lisp:apply #'common-lisp:make-instance 'cvss
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cvss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cvss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-score))
      (common-lisp:list
       (common-lisp:cons "BaseScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-vector))
      (common-lisp:list
       (common-lisp:cons "BaseVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adjustments))
      (common-lisp:list
       (common-lisp:cons "Adjustments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cvss))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cvss-list () '(trivial-types:proper-list cvss))
 (common-lisp:defun |make-cvss-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cvss))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-classification-details common-lisp:nil
                       ((result :initarg :result :type
                         (common-lisp:or classification-result
                                         common-lisp:null)
                         :accessor %data-classification-details-result
                         :initform common-lisp:nil)
                        (detailed-results-location :initarg
                         :detailed-results-location :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %data-classification-details-detailed-results-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'data-classification-details
                    'make-data-classification-details))
 (common-lisp:defun make-data-classification-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result detailed-results-location)
   (common-lisp:apply #'common-lisp:make-instance 'data-classification-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detailed-results-location))
      (common-lisp:list
       (common-lisp:cons "DetailedResultsLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-classification-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-filter common-lisp:nil
                       ((date-range :initarg :date-range :type
                         (common-lisp:or date-range common-lisp:null) :accessor
                         %date-filter-date-range :initform common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %date-filter-end :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %date-filter-start :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'date-filter 'make-date-filter))
 (common-lisp:defun make-date-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-range end start)
   (common-lisp:apply #'common-lisp:make-instance 'date-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype date-filter-list ()
   '(trivial-types:proper-list date-filter))
 (common-lisp:defun |make-date-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass date-range common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or date-range-unit common-lisp:null)
                         :accessor %date-range-unit :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %date-range-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'date-range 'make-date-range))
 (common-lisp:defun make-date-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit value)
   (common-lisp:apply #'common-lisp:make-instance 'date-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-range))
   common-lisp:nil))
(common-lisp:deftype date-range-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decline-invitations-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %decline-invitations-request-account-ids
                         :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-request
                    'make-decline-invitations-request))
 (common-lisp:defun make-decline-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decline-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor
                         %decline-invitations-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decline-invitations-response
                    'make-decline-invitations-response))
 (common-lisp:defun make-decline-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'decline-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decline-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-action-target-request common-lisp:nil
                       ((action-target-arn :initarg :action-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %delete-action-target-request-action-target-arn
                         :initform
                         (common-lisp:error
                          ":action-target-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-action-target-request
                    'make-delete-action-target-request))
 (common-lisp:defun make-delete-action-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-target-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-action-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-action-target-response common-lisp:nil
                       ((action-target-arn :initarg :action-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %delete-action-target-response-action-target-arn
                         :initform
                         (common-lisp:error
                          ":action-target-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-action-target-response
                    'make-delete-action-target-response))
 (common-lisp:defun make-delete-action-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-action-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arn))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-finding-aggregator-request common-lisp:nil
                       ((finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %delete-finding-aggregator-request-finding-aggregator-arn
                         :initform
                         (common-lisp:error
                          ":finding-aggregator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-finding-aggregator-request
                    'make-delete-finding-aggregator-request))
 (common-lisp:defun make-delete-finding-aggregator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-finding-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-finding-aggregator-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-finding-aggregator-response
                    'make-delete-finding-aggregator-response))
 (common-lisp:defun make-delete-finding-aggregator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-finding-aggregator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-insight-request common-lisp:nil
                       ((insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-insight-request-insight-arn
                         :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-insight-request 'make-delete-insight-request))
 (common-lisp:defun make-delete-insight-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-insight-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-insight-response common-lisp:nil
                       ((insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-insight-response-insight-arn
                         :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-insight-response 'make-delete-insight-response))
 (common-lisp:defun make-delete-insight-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-insight-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %delete-invitations-request-account-ids
                         :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-request
                    'make-delete-invitations-request))
 (common-lisp:defun make-delete-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-invitations-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor
                         %delete-invitations-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-invitations-response
                    'make-delete-invitations-response))
 (common-lisp:defun make-delete-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'delete-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %delete-members-request-account-ids
                         :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-members-request 'make-delete-members-request))
 (common-lisp:defun make-delete-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor
                         %delete-members-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-members-response 'make-delete-members-response))
 (common-lisp:defun make-delete-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'delete-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-action-targets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-action-targets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-action-targets-request-next-token :initform
                         common-lisp:nil)
                        (action-target-arns :initarg :action-target-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %describe-action-targets-request-action-target-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-action-targets-request
                    'make-describe-action-targets-request))
 (common-lisp:defun make-describe-action-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     action-target-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-action-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-target-arns))
      (common-lisp:list
       (common-lisp:cons "ActionTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-action-targets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-action-targets-response-next-token :initform
                         common-lisp:nil)
                        (action-targets :initarg :action-targets :type
                         (common-lisp:or action-target-list common-lisp:null)
                         :accessor
                         %describe-action-targets-response-action-targets
                         :initform
                         (common-lisp:error ":action-targets is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-action-targets-response
                    'make-describe-action-targets-response))
 (common-lisp:defun make-describe-action-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token action-targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-action-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-targets))
      (common-lisp:list
       (common-lisp:cons "ActionTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-hub-request common-lisp:nil
                       ((hub-arn :initarg :hub-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %describe-hub-request-hub-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-request 'make-describe-hub-request))
 (common-lisp:defun make-describe-hub-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hub-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-hub-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-hub-response common-lisp:nil
                       ((control-finding-generator :initarg
                         :control-finding-generator :type
                         (common-lisp:or control-finding-generator
                                         common-lisp:null)
                         :accessor
                         %describe-hub-response-control-finding-generator
                         :initform common-lisp:nil)
                        (auto-enable-controls :initarg :auto-enable-controls
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %describe-hub-response-auto-enable-controls
                         :initform common-lisp:nil)
                        (subscribed-at :initarg :subscribed-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %describe-hub-response-subscribed-at
                         :initform common-lisp:nil)
                        (hub-arn :initarg :hub-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %describe-hub-response-hub-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-response 'make-describe-hub-response))
 (common-lisp:defun make-describe-hub-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-finding-generator
                     auto-enable-controls subscribed-at hub-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-hub-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-at))
      (common-lisp:list
       (common-lisp:cons "SubscribedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-controls))
      (common-lisp:list
       (common-lisp:cons "AutoEnableControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-request
                    'make-describe-organization-configuration-request))
 (common-lisp:defun make-describe-organization-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-configuration-response
                       common-lisp:nil
                       ((auto-enable-standards :initarg :auto-enable-standards
                         :type
                         (common-lisp:or auto-enable-standards
                                         common-lisp:null)
                         :accessor
                         %describe-organization-configuration-response-auto-enable-standards
                         :initform common-lisp:nil)
                        (member-account-limit-reached :initarg
                         :member-account-limit-reached :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-organization-configuration-response-member-account-limit-reached
                         :initform common-lisp:nil)
                        (auto-enable :initarg :auto-enable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-organization-configuration-response-auto-enable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-organization-configuration-response
                    'make-describe-organization-configuration-response))
 (common-lisp:defun make-describe-organization-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-enable-standards
                     member-account-limit-reached auto-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-limit-reached))
      (common-lisp:list
       (common-lisp:cons "MemberAccountLimitReached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-standards))
      (common-lisp:list
       (common-lisp:cons "AutoEnableStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-products-request common-lisp:nil
                       ((product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %describe-products-request-product-arn
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-products-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-products-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-products-request
                    'make-describe-products-request))
 (common-lisp:defun make-describe-products-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-arn max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-products-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-products-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-products-response-next-token :initform
                         common-lisp:nil)
                        (products :initarg :products :type
                         (common-lisp:or products-list common-lisp:null)
                         :accessor %describe-products-response-products
                         :initform
                         (common-lisp:error ":products is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-products-response
                    'make-describe-products-response))
 (common-lisp:defun make-describe-products-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token products)
   (common-lisp:apply #'common-lisp:make-instance 'describe-products-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'products))
      (common-lisp:list
       (common-lisp:cons "Products"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-products-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-standards-controls-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-standards-controls-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-standards-controls-request-next-token
                         :initform common-lisp:nil)
                        (standards-subscription-arn :initarg
                         :standards-subscription-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %describe-standards-controls-request-standards-subscription-arn
                         :initform
                         (common-lisp:error
                          ":standards-subscription-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-standards-controls-request
                    'make-describe-standards-controls-request))
 (common-lisp:defun make-describe-standards-controls-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     standards-subscription-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-standards-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-standards-controls-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-standards-controls-response-next-token
                         :initform common-lisp:nil)
                        (controls :initarg :controls :type
                         (common-lisp:or standards-controls common-lisp:null)
                         :accessor
                         %describe-standards-controls-response-controls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-controls-response
                    'make-describe-standards-controls-response))
 (common-lisp:defun make-describe-standards-controls-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token controls)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-standards-controls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "Controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-controls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-standards-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-standards-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-standards-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-request
                    'make-describe-standards-request))
 (common-lisp:defun make-describe-standards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-standards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-standards-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-standards-response-next-token :initform
                         common-lisp:nil)
                        (standards :initarg :standards :type
                         (common-lisp:or standards common-lisp:null) :accessor
                         %describe-standards-response-standards :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-standards-response
                    'make-describe-standards-response))
 (common-lisp:defun make-describe-standards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token standards)
   (common-lisp:apply #'common-lisp:make-instance 'describe-standards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards))
      (common-lisp:list
       (common-lisp:cons "Standards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-import-findings-for-product-request
                       common-lisp:nil
                       ((product-subscription-arn :initarg
                         :product-subscription-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %disable-import-findings-for-product-request-product-subscription-arn
                         :initform
                         (common-lisp:error
                          ":product-subscription-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-import-findings-for-product-request
                    'make-disable-import-findings-for-product-request))
 (common-lisp:defun make-disable-import-findings-for-product-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-subscription-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-import-findings-for-product-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-import-findings-for-product-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-import-findings-for-product-response
                    'make-disable-import-findings-for-product-response))
 (common-lisp:defun make-disable-import-findings-for-product-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-import-findings-for-product-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-import-findings-for-product-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %disable-organization-admin-account-request-admin-account-id
                         :initform
                         (common-lisp:error ":admin-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-request
                    'make-disable-organization-admin-account-request))
 (common-lisp:defun make-disable-organization-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-organization-admin-account-response
                    'make-disable-organization-admin-account-response))
 (common-lisp:defun make-disable-organization-admin-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-security-hub-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-security-hub-request
                    'make-disable-security-hub-request))
 (common-lisp:defun make-disable-security-hub-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-security-hub-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-security-hub-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-security-hub-response
                    'make-disable-security-hub-response))
 (common-lisp:defun make-disable-security-hub-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-security-hub-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-security-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-request
                    'make-disassociate-from-administrator-account-request))
 (common-lisp:defun make-disassociate-from-administrator-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-administrator-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-administrator-account-response
                    'make-disassociate-from-administrator-account-response))
 (common-lisp:defun make-disassociate-from-administrator-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-request
                    'make-disassociate-from-master-account-request))
 (common-lisp:defun make-disassociate-from-master-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-from-master-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-from-master-account-response
                    'make-disassociate-from-master-account-response))
 (common-lisp:defun make-disassociate-from-master-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-from-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-from-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-members-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %disassociate-members-request-account-ids
                         :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-members-request
                    'make-disassociate-members-request))
 (common-lisp:defun make-disassociate-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-members-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-members-response
                    'make-disassociate-members-response))
 (common-lisp:defun make-disassociate-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dns-request-action common-lisp:nil
                       ((blocked :initarg :blocked :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dns-request-action-blocked :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %dns-request-action-protocol :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %dns-request-action-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dns-request-action 'make-dns-request-action))
 (common-lisp:defun make-dns-request-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key blocked protocol domain)
   (common-lisp:apply #'common-lisp:make-instance 'dns-request-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dns-request-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dns-request-action))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass enable-import-findings-for-product-request
                       common-lisp:nil
                       ((product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %enable-import-findings-for-product-request-product-arn
                         :initform
                         (common-lisp:error ":product-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-import-findings-for-product-request
                    'make-enable-import-findings-for-product-request))
 (common-lisp:defun make-enable-import-findings-for-product-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-import-findings-for-product-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-import-findings-for-product-response
                       common-lisp:nil
                       ((product-subscription-arn :initarg
                         :product-subscription-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %enable-import-findings-for-product-response-product-subscription-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-import-findings-for-product-response
                    'make-enable-import-findings-for-product-response))
 (common-lisp:defun make-enable-import-findings-for-product-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-subscription-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-import-findings-for-product-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-import-findings-for-product-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-request
                       common-lisp:nil
                       ((admin-account-id :initarg :admin-account-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %enable-organization-admin-account-request-admin-account-id
                         :initform
                         (common-lisp:error ":admin-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-request
                    'make-enable-organization-admin-account-request))
 (common-lisp:defun make-enable-organization-admin-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key admin-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-account-id))
      (common-lisp:list
       (common-lisp:cons "AdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-organization-admin-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-organization-admin-account-response
                    'make-enable-organization-admin-account-response))
 (common-lisp:defun make-enable-organization-admin-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-organization-admin-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-organization-admin-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-security-hub-request common-lisp:nil
                       ((control-finding-generator :initarg
                         :control-finding-generator :type
                         (common-lisp:or control-finding-generator
                                         common-lisp:null)
                         :accessor
                         %enable-security-hub-request-control-finding-generator
                         :initform common-lisp:nil)
                        (enable-default-standards :initarg
                         :enable-default-standards :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %enable-security-hub-request-enable-default-standards
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %enable-security-hub-request-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-security-hub-request
                    'make-enable-security-hub-request))
 (common-lisp:defun make-enable-security-hub-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-finding-generator
                     enable-default-standards tags)
   (common-lisp:apply #'common-lisp:make-instance 'enable-security-hub-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-standards))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-security-hub-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-security-hub-response
                    'make-enable-security-hub-response))
 (common-lisp:defun make-enable-security-hub-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-security-hub-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-security-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-field-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype file-path-list ()
   '(trivial-types:proper-list file-paths))
 (common-lisp:defun |make-file-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-paths))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass file-paths common-lisp:nil
                       ((hash :initarg :hash :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %file-paths-hash :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %file-paths-resource-id :initform
                         common-lisp:nil)
                        (file-name :initarg :file-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %file-paths-file-name :initform
                         common-lisp:nil)
                        (file-path :initarg :file-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %file-paths-file-path :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'file-paths 'make-file-paths))
 (common-lisp:defun make-file-paths
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hash resource-id file-name file-path)
   (common-lisp:apply #'common-lisp:make-instance 'file-paths
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-paths))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-paths))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "FileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash))
      (common-lisp:list
       (common-lisp:cons "Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-paths))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-aggregator common-lisp:nil
                       ((finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %finding-aggregator-finding-aggregator-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-aggregator 'make-finding-aggregator))
 (common-lisp:defun make-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance 'finding-aggregator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-aggregator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-aggregator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-aggregator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-aggregator-list ()
   '(trivial-types:proper-list finding-aggregator))
 (common-lisp:defun |make-finding-aggregator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-aggregator))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding-provider-fields common-lisp:nil
                       ((types :initarg :types :type
                         (common-lisp:or type-list common-lisp:null) :accessor
                         %finding-provider-fields-types :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or finding-provider-severity
                                         common-lisp:null)
                         :accessor %finding-provider-fields-severity :initform
                         common-lisp:nil)
                        (related-findings :initarg :related-findings :type
                         (common-lisp:or related-finding-list common-lisp:null)
                         :accessor %finding-provider-fields-related-findings
                         :initform common-lisp:nil)
                        (criticality :initarg :criticality :type
                         (common-lisp:or ratio-scale common-lisp:null)
                         :accessor %finding-provider-fields-criticality
                         :initform common-lisp:nil)
                        (confidence :initarg :confidence :type
                         (common-lisp:or ratio-scale common-lisp:null)
                         :accessor %finding-provider-fields-confidence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-provider-fields 'make-finding-provider-fields))
 (common-lisp:defun make-finding-provider-fields
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key types severity related-findings
                     criticality confidence)
   (common-lisp:apply #'common-lisp:make-instance 'finding-provider-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "Confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'criticality))
      (common-lisp:list
       (common-lisp:cons "Criticality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-findings))
      (common-lisp:list
       (common-lisp:cons "RelatedFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-provider-severity common-lisp:nil
                       ((original :initarg :original :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %finding-provider-severity-original
                         :initform common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or severity-label common-lisp:null)
                         :accessor %finding-provider-severity-label :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-provider-severity
                    'make-finding-provider-severity))
 (common-lisp:defun make-finding-provider-severity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key original label)
   (common-lisp:apply #'common-lisp:make-instance 'finding-provider-severity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original))
      (common-lisp:list
       (common-lisp:cons "Original"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-provider-severity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-policy-details common-lisp:nil
                       ((stateless-rule-group-references :initarg
                         :stateless-rule-group-references :type
                         (common-lisp:or
                          firewall-policy-stateless-rule-group-references-list
                          common-lisp:null)
                         :accessor
                         %firewall-policy-details-stateless-rule-group-references
                         :initform common-lisp:nil)
                        (stateless-fragment-default-actions :initarg
                         :stateless-fragment-default-actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %firewall-policy-details-stateless-fragment-default-actions
                         :initform common-lisp:nil)
                        (stateless-default-actions :initarg
                         :stateless-default-actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %firewall-policy-details-stateless-default-actions
                         :initform common-lisp:nil)
                        (stateless-custom-actions :initarg
                         :stateless-custom-actions :type
                         (common-lisp:or
                          firewall-policy-stateless-custom-actions-list
                          common-lisp:null)
                         :accessor
                         %firewall-policy-details-stateless-custom-actions
                         :initform common-lisp:nil)
                        (stateful-rule-group-references :initarg
                         :stateful-rule-group-references :type
                         (common-lisp:or
                          firewall-policy-stateful-rule-group-references-list
                          common-lisp:null)
                         :accessor
                         %firewall-policy-details-stateful-rule-group-references
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-details 'make-firewall-policy-details))
 (common-lisp:defun make-firewall-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stateless-rule-group-references
                     stateless-fragment-default-actions
                     stateless-default-actions stateless-custom-actions
                     stateful-rule-group-references)
   (common-lisp:apply #'common-lisp:make-instance 'firewall-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateful-rule-group-references))
      (common-lisp:list
       (common-lisp:cons "StatefulRuleGroupReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-fragment-default-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessFragmentDefaultActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rule-group-references))
      (common-lisp:list
       (common-lisp:cons "StatelessRuleGroupReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass firewall-policy-stateful-rule-group-references-details
                       common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %firewall-policy-stateful-rule-group-references-details-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateful-rule-group-references-details
                    'make-firewall-policy-stateful-rule-group-references-details))
 (common-lisp:defun make-firewall-policy-stateful-rule-group-references-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-policy-stateful-rule-group-references-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateful-rule-group-references-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateful-rule-group-references-list ()
   '(trivial-types:proper-list
     firewall-policy-stateful-rule-group-references-details))
 (common-lisp:defun |make-firewall-policy-stateful-rule-group-references-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateful-rule-group-references-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firewall-policy-stateless-custom-actions-details
                       common-lisp:nil
                       ((action-name :initarg :action-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %firewall-policy-stateless-custom-actions-details-action-name
                         :initform common-lisp:nil)
                        (action-definition :initarg :action-definition :type
                         (common-lisp:or stateless-custom-action-definition
                                         common-lisp:null)
                         :accessor
                         %firewall-policy-stateless-custom-actions-details-action-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateless-custom-actions-details
                    'make-firewall-policy-stateless-custom-actions-details))
 (common-lisp:defun make-firewall-policy-stateless-custom-actions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-name action-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-policy-stateless-custom-actions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definition))
      (common-lisp:list
       (common-lisp:cons "ActionDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateless-custom-actions-list ()
   '(trivial-types:proper-list
     firewall-policy-stateless-custom-actions-details))
 (common-lisp:defun |make-firewall-policy-stateless-custom-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateless-custom-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass firewall-policy-stateless-rule-group-references-details
                       common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %firewall-policy-stateless-rule-group-references-details-resource-arn
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %firewall-policy-stateless-rule-group-references-details-priority
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'firewall-policy-stateless-rule-group-references-details
                    'make-firewall-policy-stateless-rule-group-references-details))
 (common-lisp:defun make-firewall-policy-stateless-rule-group-references-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn priority)
   (common-lisp:apply #'common-lisp:make-instance
                      'firewall-policy-stateless-rule-group-references-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-policy-stateless-rule-group-references-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-policy-stateless-rule-group-references-list ()
   '(trivial-types:proper-list
     firewall-policy-stateless-rule-group-references-details))
 (common-lisp:defun |make-firewall-policy-stateless-rule-group-references-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-policy-stateless-rule-group-references-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass geo-location common-lisp:nil
                       ((lat :initarg :lat :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %geo-location-lat :initform common-lisp:nil)
                        (lon :initarg :lon :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %geo-location-lon :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'geo-location 'make-geo-location))
 (common-lisp:defun make-geo-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lat lon)
   (common-lisp:apply #'common-lisp:make-instance 'geo-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lon))
      (common-lisp:list
       (common-lisp:cons "Lon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lat))
      (common-lisp:list
       (common-lisp:cons "Lat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-request
                    'make-get-administrator-account-request))
 (common-lisp:defun make-get-administrator-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-administrator-account-response common-lisp:nil
                       ((administrator :initarg :administrator :type
                         (common-lisp:or invitation common-lisp:null) :accessor
                         %get-administrator-account-response-administrator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-administrator-account-response
                    'make-get-administrator-account-response))
 (common-lisp:defun make-get-administrator-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key administrator)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-administrator-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator))
      (common-lisp:list
       (common-lisp:cons "Administrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-administrator-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-standards-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-enabled-standards-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-enabled-standards-request-next-token :initform
                         common-lisp:nil)
                        (standards-subscription-arns :initarg
                         :standards-subscription-arns :type
                         (common-lisp:or standards-subscription-arns
                                         common-lisp:null)
                         :accessor
                         %get-enabled-standards-request-standards-subscription-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-enabled-standards-request
                    'make-get-enabled-standards-request))
 (common-lisp:defun make-get-enabled-standards-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     standards-subscription-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-enabled-standards-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-enabled-standards-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-enabled-standards-response-next-token :initform
                         common-lisp:nil)
                        (standards-subscriptions :initarg
                         :standards-subscriptions :type
                         (common-lisp:or standards-subscriptions
                                         common-lisp:null)
                         :accessor
                         %get-enabled-standards-response-standards-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-enabled-standards-response
                    'make-get-enabled-standards-response))
 (common-lisp:defun make-get-enabled-standards-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token standards-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-enabled-standards-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscriptions))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-enabled-standards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-aggregator-request common-lisp:nil
                       ((finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-finding-aggregator-request-finding-aggregator-arn
                         :initform
                         (common-lisp:error
                          ":finding-aggregator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-finding-aggregator-request
                    'make-get-finding-aggregator-request))
 (common-lisp:defun make-get-finding-aggregator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-finding-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-aggregator-response common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-finding-aggregator-response-regions
                         :initform common-lisp:nil)
                        (region-linking-mode :initarg :region-linking-mode
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-finding-aggregator-response-region-linking-mode
                         :initform common-lisp:nil)
                        (finding-aggregation-region :initarg
                         :finding-aggregation-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-finding-aggregator-response-finding-aggregation-region
                         :initform common-lisp:nil)
                        (finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %get-finding-aggregator-response-finding-aggregator-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-finding-aggregator-response
                    'make-get-finding-aggregator-response))
 (common-lisp:defun make-get-finding-aggregator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions region-linking-mode
                     finding-aggregation-region finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-finding-aggregator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-findings-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-findings-request-next-token :initform
                         common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor %get-findings-request-sort-criteria
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or aws-security-finding-filters
                                         common-lisp:null)
                         :accessor %get-findings-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-request 'make-get-findings-request))
 (common-lisp:defun make-get-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token sort-criteria
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-findings-response-next-token :initform
                         common-lisp:nil)
                        (findings :initarg :findings :type
                         (common-lisp:or aws-security-finding-list
                                         common-lisp:null)
                         :accessor %get-findings-response-findings :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'get-findings-response 'make-get-findings-response))
 (common-lisp:defun make-get-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings)
   (common-lisp:apply #'common-lisp:make-instance 'get-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "Findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-results-request common-lisp:nil
                       ((insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %get-insight-results-request-insight-arn
                         :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-insight-results-request
                    'make-get-insight-results-request))
 (common-lisp:defun make-get-insight-results-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insight-results-response common-lisp:nil
                       ((insight-results :initarg :insight-results :type
                         (common-lisp:or insight-results common-lisp:null)
                         :accessor
                         %get-insight-results-response-insight-results
                         :initform
                         (common-lisp:error ":insight-results is required"))))
 (common-lisp:export
  (common-lisp:list 'get-insight-results-response
                    'make-get-insight-results-response))
 (common-lisp:defun make-get-insight-results-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key insight-results)
   (common-lisp:apply #'common-lisp:make-instance 'get-insight-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-results))
      (common-lisp:list
       (common-lisp:cons "InsightResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-insights-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-insights-request-next-token :initform
                         common-lisp:nil)
                        (insight-arns :initarg :insight-arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %get-insights-request-insight-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-insights-request 'make-get-insights-request))
 (common-lisp:defun make-get-insights-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token insight-arns)
   (common-lisp:apply #'common-lisp:make-instance 'get-insights-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-insights-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arns))
      (common-lisp:list
       (common-lisp:cons "InsightArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-insights-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-insights-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-insights-response-next-token :initform
                         common-lisp:nil)
                        (insights :initarg :insights :type
                         (common-lisp:or insight-list common-lisp:null)
                         :accessor %get-insights-response-insights :initform
                         (common-lisp:error ":insights is required"))))
 (common-lisp:export
  (common-lisp:list 'get-insights-response 'make-get-insights-response))
 (common-lisp:defun make-get-insights-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token insights)
   (common-lisp:apply #'common-lisp:make-instance 'get-insights-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "Insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insights-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-request
                    'make-get-invitations-count-request))
 (common-lisp:defun make-get-invitations-count-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-invitations-count-response common-lisp:nil
                       ((invitations-count :initarg :invitations-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-invitations-count-response-invitations-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-invitations-count-response
                    'make-get-invitations-count-response))
 (common-lisp:defun make-get-invitations-count-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invitations-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-invitations-count-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations-count))
      (common-lisp:list
       (common-lisp:cons "InvitationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-invitations-count-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-master-account-request
                    'make-get-master-account-request))
 (common-lisp:defun make-get-master-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-master-account-response common-lisp:nil
                       ((master :initarg :master :type
                         (common-lisp:or invitation common-lisp:null) :accessor
                         %get-master-account-response-master :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-master-account-response
                    'make-get-master-account-response))
 (common-lisp:defun make-get-master-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master)
   (common-lisp:apply #'common-lisp:make-instance 'get-master-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master))
      (common-lisp:list
       (common-lisp:cons "Master"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-master-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %get-members-request-account-ids :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'get-members-request 'make-get-members-request))
 (common-lisp:defun make-get-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor %get-members-response-unprocessed-accounts
                         :initform common-lisp:nil)
                        (members :initarg :members :type
                         (common-lisp:or member-list common-lisp:null)
                         :accessor %get-members-response-members :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-members-response 'make-get-members-response))
 (common-lisp:defun make-get-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts members)
   (common-lisp:apply #'common-lisp:make-instance 'get-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass icmp-type-code common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %icmp-type-code-type :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %icmp-type-code-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'icmp-type-code 'make-icmp-type-code))
 (common-lisp:defun make-icmp-type-code
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type code)
   (common-lisp:apply #'common-lisp:make-instance 'icmp-type-code
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icmp-type-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icmp-type-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-findings-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-findings-error-error-message
                         :initform
                         (common-lisp:error ":error-message is required"))
                        (error-code :initarg :error-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-findings-error-error-code :initform
                         (common-lisp:error ":error-code is required"))
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %import-findings-error-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-findings-error 'make-import-findings-error))
 (common-lisp:defun make-import-findings-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code id)
   (common-lisp:apply #'common-lisp:make-instance 'import-findings-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-findings-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-findings-error-list ()
   '(trivial-types:proper-list import-findings-error))
 (common-lisp:defun |make-import-findings-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-findings-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight common-lisp:nil
                       ((group-by-attribute :initarg :group-by-attribute :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %insight-group-by-attribute :initform
                         (common-lisp:error ":group-by-attribute is required"))
                        (filters :initarg :filters :type
                         (common-lisp:or aws-security-finding-filters
                                         common-lisp:null)
                         :accessor %insight-filters :initform
                         (common-lisp:error ":filters is required"))
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %insight-name :initform
                         (common-lisp:error ":name is required"))
                        (insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %insight-insight-arn :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export (common-lisp:list 'insight 'make-insight))
 (common-lisp:defun make-insight
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-by-attribute filters name
                     insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'insight
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-list () '(trivial-types:proper-list insight))
 (common-lisp:defun |make-insight-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-result-value common-lisp:nil
                       ((count :initarg :count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %insight-result-value-count :initform
                         (common-lisp:error ":count is required"))
                        (group-by-attribute-value :initarg
                         :group-by-attribute-value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %insight-result-value-group-by-attribute-value
                         :initform
                         (common-lisp:error
                          ":group-by-attribute-value is required"))))
 (common-lisp:export
  (common-lisp:list 'insight-result-value 'make-insight-result-value))
 (common-lisp:defun make-insight-result-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count group-by-attribute-value)
   (common-lisp:apply #'common-lisp:make-instance 'insight-result-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-result-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-result-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-by-attribute-value))
      (common-lisp:list
       (common-lisp:cons "GroupByAttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-result-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-result-value-list ()
   '(trivial-types:proper-list insight-result-value))
 (common-lisp:defun |make-insight-result-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-result-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass insight-results common-lisp:nil
                       ((result-values :initarg :result-values :type
                         (common-lisp:or insight-result-value-list
                                         common-lisp:null)
                         :accessor %insight-results-result-values :initform
                         (common-lisp:error ":result-values is required"))
                        (group-by-attribute :initarg :group-by-attribute :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %insight-results-group-by-attribute
                         :initform
                         (common-lisp:error ":group-by-attribute is required"))
                        (insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %insight-results-insight-arn :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export (common-lisp:list 'insight-results 'make-insight-results))
 (common-lisp:defun make-insight-results
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-values group-by-attribute
                     insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'insight-results
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-arn))
      (common-lisp:list
       (common-lisp:cons "InsightArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-values))
      (common-lisp:list
       (common-lisp:cons "ResultValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-results))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-list () '(trivial-types:proper-list integer))
 (common-lisp:defun |make-integer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integration-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype integration-type-list ()
   '(trivial-types:proper-list integration-type))
 (common-lisp:defun |make-integration-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message
                    'internal-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-access-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-access-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-access-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-access-exception 'invalid-access-exception-message
                    'invalid-access-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-input-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-code)))
(common-lisp:progn
 (common-lisp:defclass invitation common-lisp:nil
                       ((member-status :initarg :member-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %invitation-member-status :initform
                         common-lisp:nil)
                        (invited-at :initarg :invited-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %invitation-invited-at :initform common-lisp:nil)
                        (invitation-id :initarg :invitation-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %invitation-invitation-id :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %invitation-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'invitation 'make-invitation))
 (common-lisp:defun make-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-status invited-at invitation-id
                     account-id)
   (common-lisp:apply #'common-lisp:make-instance 'invitation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitation-id))
      (common-lisp:list
       (common-lisp:cons "InvitationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "MemberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype invitation-list ()
   '(trivial-types:proper-list invitation))
 (common-lisp:defun |make-invitation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list invitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass invite-members-request common-lisp:nil
                       ((account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor %invite-members-request-account-ids
                         :initform
                         (common-lisp:error ":account-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'invite-members-request 'make-invite-members-request))
 (common-lisp:defun make-invite-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance 'invite-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invite-members-response common-lisp:nil
                       ((unprocessed-accounts :initarg :unprocessed-accounts
                         :type (common-lisp:or result-list common-lisp:null)
                         :accessor
                         %invite-members-response-unprocessed-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invite-members-response 'make-invite-members-response))
 (common-lisp:defun make-invite-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'invite-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-accounts))
      (common-lisp:list
       (common-lisp:cons "UnprocessedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invite-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ip-filter common-lisp:nil
                       ((cidr :initarg :cidr :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ip-filter-cidr :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-filter 'make-ip-filter))
 (common-lisp:defun make-ip-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr)
   (common-lisp:apply #'common-lisp:make-instance 'ip-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-filter-list () '(trivial-types:proper-list ip-filter))
 (common-lisp:defun |make-ip-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ip-organization-details common-lisp:nil
                       ((org :initarg :org :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ip-organization-details-org :initform
                         common-lisp:nil)
                        (isp :initarg :isp :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ip-organization-details-isp :initform
                         common-lisp:nil)
                        (asn-org :initarg :asn-org :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ip-organization-details-asn-org :initform
                         common-lisp:nil)
                        (asn :initarg :asn :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %ip-organization-details-asn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ip-organization-details 'make-ip-organization-details))
 (common-lisp:defun make-ip-organization-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key org isp asn-org asn)
   (common-lisp:apply #'common-lisp:make-instance 'ip-organization-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "Asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn-org))
      (common-lisp:list
       (common-lisp:cons "AsnOrg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'isp))
      (common-lisp:list
       (common-lisp:cons "Isp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'org))
      (common-lisp:list
       (common-lisp:cons "Org"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ip-organization-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ipv6cidr-block-association common-lisp:nil
                       ((cidr-block-state :initarg :cidr-block-state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ipv6cidr-block-association-cidr-block-state
                         :initform common-lisp:nil)
                        (ipv6cidr-block :initarg :ipv6cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ipv6cidr-block-association-ipv6cidr-block
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %ipv6cidr-block-association-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ipv6cidr-block-association
                    'make-ipv6cidr-block-association))
 (common-lisp:defun make-ipv6cidr-block-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-block-state ipv6cidr-block
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance 'ipv6cidr-block-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block-state))
      (common-lisp:list
       (common-lisp:cons "CidrBlockState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ipv6cidr-block-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipv6cidr-block-association-list ()
   '(trivial-types:proper-list ipv6cidr-block-association))
 (common-lisp:defun |make-ipv6cidr-block-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ipv6cidr-block-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass keyword-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %keyword-filter-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'keyword-filter 'make-keyword-filter))
 (common-lisp:defun make-keyword-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'keyword-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input keyword-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input keyword-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-filter-list ()
   '(trivial-types:proper-list keyword-filter))
 (common-lisp:defun |make-keyword-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code)))
(common-lisp:progn
 (common-lisp:defclass list-enabled-products-for-import-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-enabled-products-for-import-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-enabled-products-for-import-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-enabled-products-for-import-request
                    'make-list-enabled-products-for-import-request))
 (common-lisp:defun make-list-enabled-products-for-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-enabled-products-for-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enabled-products-for-import-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-enabled-products-for-import-response-next-token
                         :initform common-lisp:nil)
                        (product-subscriptions :initarg :product-subscriptions
                         :type
                         (common-lisp:or product-subscription-arn-list
                                         common-lisp:null)
                         :accessor
                         %list-enabled-products-for-import-response-product-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-enabled-products-for-import-response
                    'make-list-enabled-products-for-import-response))
 (common-lisp:defun make-list-enabled-products-for-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token product-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-enabled-products-for-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscriptions))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enabled-products-for-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-finding-aggregators-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-finding-aggregators-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-finding-aggregators-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregators-request
                    'make-list-finding-aggregators-request))
 (common-lisp:defun make-list-finding-aggregators-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-finding-aggregators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-finding-aggregators-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-finding-aggregators-response-next-token
                         :initform common-lisp:nil)
                        (finding-aggregators :initarg :finding-aggregators
                         :type
                         (common-lisp:or finding-aggregator-list
                                         common-lisp:null)
                         :accessor
                         %list-finding-aggregators-response-finding-aggregators
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-finding-aggregators-response
                    'make-list-finding-aggregators-response))
 (common-lisp:defun make-list-finding-aggregators-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token finding-aggregators)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-finding-aggregators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-aggregators))
      (common-lisp:list
       (common-lisp:cons "FindingAggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-finding-aggregators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-invitations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or cross-account-max-results
                                         common-lisp:null)
                         :accessor %list-invitations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-request 'make-list-invitations-request))
 (common-lisp:defun make-list-invitations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-invitations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-invitations-response-next-token
                         :initform common-lisp:nil)
                        (invitations :initarg :invitations :type
                         (common-lisp:or invitation-list common-lisp:null)
                         :accessor %list-invitations-response-invitations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-invitations-response
                    'make-list-invitations-response))
 (common-lisp:defun make-list-invitations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token invitations)
   (common-lisp:apply #'common-lisp:make-instance 'list-invitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invitations))
      (common-lisp:list
       (common-lisp:cons "Invitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-invitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-members-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or cross-account-max-results
                                         common-lisp:null)
                         :accessor %list-members-request-max-results :initform
                         common-lisp:nil)
                        (only-associated :initarg :only-associated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-members-request-only-associated :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-members-request 'make-list-members-request))
 (common-lisp:defun make-list-members-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results only-associated)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %list-members-response-next-token :initform
                         common-lisp:nil)
                        (members :initarg :members :type
                         (common-lisp:or member-list common-lisp:null)
                         :accessor %list-members-response-members :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-members-response 'make-list-members-response))
 (common-lisp:defun make-list-members-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token members)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "Members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-members-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-organization-admin-accounts-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or admins-max-results common-lisp:null)
                         :accessor
                         %list-organization-admin-accounts-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-request
                    'make-list-organization-admin-accounts-request))
 (common-lisp:defun make-list-organization-admin-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-admin-accounts-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-organization-admin-accounts-response-next-token
                         :initform common-lisp:nil)
                        (admin-accounts :initarg :admin-accounts :type
                         (common-lisp:or admin-accounts common-lisp:null)
                         :accessor
                         %list-organization-admin-accounts-response-admin-accounts
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-organization-admin-accounts-response
                    'make-list-organization-admin-accounts-response))
 (common-lisp:defun make-list-organization-admin-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token admin-accounts)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-admin-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-accounts))
      (common-lisp:list
       (common-lisp:cons "AdminAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-admin-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-control-definitions-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-security-control-definitions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-security-control-definitions-request-next-token
                         :initform common-lisp:nil)
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-security-control-definitions-request-standards-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-security-control-definitions-request
                    'make-list-security-control-definitions-request))
 (common-lisp:defun make-list-security-control-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token standards-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-control-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-control-definitions-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-security-control-definitions-response-next-token
                         :initform common-lisp:nil)
                        (security-control-definitions :initarg
                         :security-control-definitions :type
                         (common-lisp:or security-control-definitions
                                         common-lisp:null)
                         :accessor
                         %list-security-control-definitions-response-security-control-definitions
                         :initform
                         (common-lisp:error
                          ":security-control-definitions is required"))))
 (common-lisp:export
  (common-lisp:list 'list-security-control-definitions-response
                    'make-list-security-control-definitions-response))
 (common-lisp:defun make-list-security-control-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token security-control-definitions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-control-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-definitions))
      (common-lisp:list
       (common-lisp:cons "SecurityControlDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-control-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-standards-control-associations-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-standards-control-associations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-standards-control-associations-request-next-token
                         :initform common-lisp:nil)
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %list-standards-control-associations-request-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-standards-control-associations-request
                    'make-list-standards-control-associations-request))
 (common-lisp:defun make-list-standards-control-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     security-control-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-standards-control-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-standards-control-associations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-standards-control-associations-response-next-token
                         :initform common-lisp:nil)
                        (standards-control-association-summaries :initarg
                         :standards-control-association-summaries :type
                         (common-lisp:or
                          standards-control-association-summaries
                          common-lisp:null)
                         :accessor
                         %list-standards-control-associations-response-standards-control-association-summaries
                         :initform
                         (common-lisp:error
                          ":standards-control-association-summaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-standards-control-associations-response
                    'make-list-standards-control-associations-response))
 (common-lisp:defun make-list-standards-control-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     standards-control-association-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-standards-control-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-summaries))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-standards-control-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-balancer-state common-lisp:nil
                       ((reason :initarg :reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %load-balancer-state-reason :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %load-balancer-state-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-state 'make-load-balancer-state))
 (common-lisp:defun make-load-balancer-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason code)
   (common-lisp:apply #'common-lisp:make-instance 'load-balancer-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer-state))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass malware common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or malware-state common-lisp:null)
                         :accessor %malware-state :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %malware-path :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or malware-type common-lisp:null)
                         :accessor %malware-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %malware-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'malware 'make-malware))
 (common-lisp:defun make-malware
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state path type name)
   (common-lisp:apply #'common-lisp:make-instance 'malware
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input malware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input malware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input malware))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype malware-list () '(trivial-types:proper-list malware))
 (common-lisp:defun |make-malware-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list malware))
   aws-sdk/generator/shape::members))
(common-lisp:deftype malware-state () 'common-lisp:string)
(common-lisp:deftype malware-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass map-filter common-lisp:nil
                       ((comparison :initarg :comparison :type
                         (common-lisp:or map-filter-comparison
                                         common-lisp:null)
                         :accessor %map-filter-comparison :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %map-filter-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %map-filter-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'map-filter 'make-map-filter))
 (common-lisp:defun make-map-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comparison value key)
   (common-lisp:apply #'common-lisp:make-instance 'map-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input map-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input map-filter))
   common-lisp:nil))
(common-lisp:deftype map-filter-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype map-filter-list ()
   '(trivial-types:proper-list map-filter))
 (common-lisp:defun |make-map-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list map-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass member common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %member-updated-at :initform common-lisp:nil)
                        (invited-at :initarg :invited-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %member-invited-at :initform common-lisp:nil)
                        (member-status :initarg :member-status :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %member-member-status :initform
                         common-lisp:nil)
                        (administrator-id :initarg :administrator-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %member-administrator-id :initform
                         common-lisp:nil)
                        (master-id :initarg :master-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %member-master-id :initform common-lisp:nil)
                        (email :initarg :email :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %member-email :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %member-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'member 'make-member))
 (common-lisp:defun make-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at invited-at member-status
                     administrator-id master-id email account-id)
   (common-lisp:apply #'common-lisp:make-instance 'member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-id))
      (common-lisp:list
       (common-lisp:cons "MasterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'administrator-id))
      (common-lisp:list
       (common-lisp:cons "AdministratorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "MemberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invited-at))
      (common-lisp:list
       (common-lisp:cons "InvitedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-list () '(trivial-types:proper-list member))
 (common-lisp:defun |make-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network common-lisp:nil
                       ((destination-domain :initarg :destination-domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-destination-domain :initform
                         common-lisp:nil)
                        (destination-port :initarg :destination-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %network-destination-port :initform common-lisp:nil)
                        (destination-ip-v6 :initarg :destination-ip-v6 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-destination-ip-v6 :initform
                         common-lisp:nil)
                        (destination-ip-v4 :initarg :destination-ip-v4 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-destination-ip-v4 :initform
                         common-lisp:nil)
                        (source-mac :initarg :source-mac :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-source-mac :initform
                         common-lisp:nil)
                        (source-domain :initarg :source-domain :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-source-domain :initform
                         common-lisp:nil)
                        (source-port :initarg :source-port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %network-source-port :initform common-lisp:nil)
                        (source-ip-v6 :initarg :source-ip-v6 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-source-ip-v6 :initform
                         common-lisp:nil)
                        (source-ip-v4 :initarg :source-ip-v4 :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-source-ip-v4 :initform
                         common-lisp:nil)
                        (open-port-range :initarg :open-port-range :type
                         (common-lisp:or port-range common-lisp:null) :accessor
                         %network-open-port-range :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-protocol :initform common-lisp:nil)
                        (direction :initarg :direction :type
                         (common-lisp:or network-direction common-lisp:null)
                         :accessor %network-direction :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network 'make-network))
 (common-lisp:defun make-network
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-domain destination-port
                     destination-ip-v6 destination-ip-v4 source-mac
                     source-domain source-port source-ip-v6 source-ip-v4
                     open-port-range protocol direction)
   (common-lisp:apply #'common-lisp:make-instance 'network
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-port-range))
      (common-lisp:list
       (common-lisp:cons "OpenPortRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-v4))
      (common-lisp:list
       (common-lisp:cons "SourceIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-v6))
      (common-lisp:list
       (common-lisp:cons "SourceIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-port))
      (common-lisp:list
       (common-lisp:cons "SourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain))
      (common-lisp:list
       (common-lisp:cons "SourceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-mac))
      (common-lisp:list
       (common-lisp:cons "SourceMac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip-v4))
      (common-lisp:list
       (common-lisp:cons "DestinationIpV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip-v6))
      (common-lisp:list
       (common-lisp:cons "DestinationIpV6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-domain))
      (common-lisp:list
       (common-lisp:cons "DestinationDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-connection-action common-lisp:nil
                       ((blocked :initarg :blocked :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %network-connection-action-blocked :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-connection-action-protocol
                         :initform common-lisp:nil)
                        (local-port-details :initarg :local-port-details :type
                         (common-lisp:or action-local-port-details
                                         common-lisp:null)
                         :accessor
                         %network-connection-action-local-port-details
                         :initform common-lisp:nil)
                        (remote-port-details :initarg :remote-port-details
                         :type
                         (common-lisp:or action-remote-port-details
                                         common-lisp:null)
                         :accessor
                         %network-connection-action-remote-port-details
                         :initform common-lisp:nil)
                        (remote-ip-details :initarg :remote-ip-details :type
                         (common-lisp:or action-remote-ip-details
                                         common-lisp:null)
                         :accessor %network-connection-action-remote-ip-details
                         :initform common-lisp:nil)
                        (connection-direction :initarg :connection-direction
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %network-connection-action-connection-direction
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-connection-action
                    'make-network-connection-action))
 (common-lisp:defun make-network-connection-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key blocked protocol local-port-details
                     remote-port-details remote-ip-details
                     connection-direction)
   (common-lisp:apply #'common-lisp:make-instance 'network-connection-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-direction))
      (common-lisp:list
       (common-lisp:cons "ConnectionDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-port-details))
      (common-lisp:list
       (common-lisp:cons "RemotePortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-connection-action))
   common-lisp:nil))
(common-lisp:deftype network-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-header common-lisp:nil
                       ((source :initarg :source :type
                         (common-lisp:or network-path-component-details
                                         common-lisp:null)
                         :accessor %network-header-source :initform
                         common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or network-path-component-details
                                         common-lisp:null)
                         :accessor %network-header-destination :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-header-protocol :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'network-header 'make-network-header))
 (common-lisp:defun make-network-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source destination protocol)
   (common-lisp:apply #'common-lisp:make-instance 'network-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-path-component common-lisp:nil
                       ((ingress :initarg :ingress :type
                         (common-lisp:or network-header common-lisp:null)
                         :accessor %network-path-component-ingress :initform
                         common-lisp:nil)
                        (egress :initarg :egress :type
                         (common-lisp:or network-header common-lisp:null)
                         :accessor %network-path-component-egress :initform
                         common-lisp:nil)
                        (component-type :initarg :component-type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-path-component-component-type
                         :initform common-lisp:nil)
                        (component-id :initarg :component-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %network-path-component-component-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-path-component 'make-network-path-component))
 (common-lisp:defun make-network-path-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingress egress component-type
                     component-id)
   (common-lisp:apply #'common-lisp:make-instance 'network-path-component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-id))
      (common-lisp:list
       (common-lisp:cons "ComponentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "ComponentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress))
      (common-lisp:list
       (common-lisp:cons "Egress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingress))
      (common-lisp:list
       (common-lisp:cons "Ingress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-path-component-details common-lisp:nil
                       ((port-ranges :initarg :port-ranges :type
                         (common-lisp:or port-range-list common-lisp:null)
                         :accessor %network-path-component-details-port-ranges
                         :initform common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %network-path-component-details-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-path-component-details
                    'make-network-path-component-details))
 (common-lisp:defun make-network-path-component-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-ranges address)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-path-component-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-ranges))
      (common-lisp:list
       (common-lisp:cons "PortRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-path-component-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-path-list ()
   '(trivial-types:proper-list network-path-component))
 (common-lisp:defun |make-network-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-path-component))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype non-empty-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-non-empty-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass note common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %note-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (updated-by :initarg :updated-by :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %note-updated-by :initform
                         (common-lisp:error ":updated-by is required"))
                        (text :initarg :text :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %note-text :initform
                         (common-lisp:error ":text is required"))))
 (common-lisp:export (common-lisp:list 'note 'make-note))
 (common-lisp:defun make-note
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at updated-by text)
   (common-lisp:apply #'common-lisp:make-instance 'note
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input note))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input note))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "UpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input note))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass note-update common-lisp:nil
                       ((updated-by :initarg :updated-by :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %note-update-updated-by :initform
                         (common-lisp:error ":updated-by is required"))
                        (text :initarg :text :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %note-update-text :initform
                         (common-lisp:error ":text is required"))))
 (common-lisp:export (common-lisp:list 'note-update 'make-note-update))
 (common-lisp:defun make-note-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-by text)
   (common-lisp:apply #'common-lisp:make-instance 'note-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input note-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input note-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-by))
      (common-lisp:list
       (common-lisp:cons "UpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input note-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass number-filter common-lisp:nil
                       ((eq :initarg :eq :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %number-filter-eq :initform common-lisp:nil)
                        (lte :initarg :lte :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %number-filter-lte :initform common-lisp:nil)
                        (gte :initarg :gte :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %number-filter-gte :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'number-filter 'make-number-filter))
 (common-lisp:defun make-number-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eq lte gte)
   (common-lisp:apply #'common-lisp:make-instance 'number-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input number-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gte))
      (common-lisp:list
       (common-lisp:cons "Gte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "Lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "Eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input number-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype number-filter-list ()
   '(trivial-types:proper-list number-filter))
 (common-lisp:defun |make-number-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list number-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass occurrences common-lisp:nil
                       ((cells :initarg :cells :type
                         (common-lisp:or cells common-lisp:null) :accessor
                         %occurrences-cells :initform common-lisp:nil)
                        (records :initarg :records :type
                         (common-lisp:or records common-lisp:null) :accessor
                         %occurrences-records :initform common-lisp:nil)
                        (pages :initarg :pages :type
                         (common-lisp:or pages common-lisp:null) :accessor
                         %occurrences-pages :initform common-lisp:nil)
                        (offset-ranges :initarg :offset-ranges :type
                         (common-lisp:or ranges common-lisp:null) :accessor
                         %occurrences-offset-ranges :initform common-lisp:nil)
                        (line-ranges :initarg :line-ranges :type
                         (common-lisp:or ranges common-lisp:null) :accessor
                         %occurrences-line-ranges :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'occurrences 'make-occurrences))
 (common-lisp:defun make-occurrences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cells records pages offset-ranges
                     line-ranges)
   (common-lisp:apply #'common-lisp:make-instance 'occurrences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input occurrences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-ranges))
      (common-lisp:list
       (common-lisp:cons "LineRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-ranges))
      (common-lisp:list
       (common-lisp:cons "OffsetRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pages))
      (common-lisp:list
       (common-lisp:cons "Pages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "Cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input occurrences))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass page common-lisp:nil
                       ((offset-range :initarg :offset-range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %page-offset-range :initform common-lisp:nil)
                        (line-range :initarg :line-range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %page-line-range :initform common-lisp:nil)
                        (page-number :initarg :page-number :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %page-page-number :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defun make-page
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offset-range line-range page-number)
   (common-lisp:apply #'common-lisp:make-instance 'page
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-range))
      (common-lisp:list
       (common-lisp:cons "LineRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-range))
      (common-lisp:list
       (common-lisp:cons "OffsetRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list page))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list page))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-summary common-lisp:nil
                       ((operation :initarg :operation :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %patch-summary-operation :initform
                         common-lisp:nil)
                        (reboot-option :initarg :reboot-option :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %patch-summary-reboot-option :initform
                         common-lisp:nil)
                        (operation-end-time :initarg :operation-end-time :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %patch-summary-operation-end-time :initform
                         common-lisp:nil)
                        (operation-start-time :initarg :operation-start-time
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %patch-summary-operation-start-time
                         :initform common-lisp:nil)
                        (installed-pending-reboot :initarg
                         :installed-pending-reboot :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %patch-summary-installed-pending-reboot :initform
                         common-lisp:nil)
                        (installed-rejected-count :initarg
                         :installed-rejected-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %patch-summary-installed-rejected-count :initform
                         common-lisp:nil)
                        (installed-other-count :initarg :installed-other-count
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %patch-summary-installed-other-count
                         :initform common-lisp:nil)
                        (failed-count :initarg :failed-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %patch-summary-failed-count :initform common-lisp:nil)
                        (missing-count :initarg :missing-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %patch-summary-missing-count :initform
                         common-lisp:nil)
                        (installed-count :initarg :installed-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %patch-summary-installed-count :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %patch-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'patch-summary 'make-patch-summary))
 (common-lisp:defun make-patch-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation reboot-option
                     operation-end-time operation-start-time
                     installed-pending-reboot installed-rejected-count
                     installed-other-count failed-count missing-count
                     installed-count id)
   (common-lisp:apply #'common-lisp:make-instance 'patch-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installed-count))
      (common-lisp:list
       (common-lisp:cons "InstalledCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-count))
      (common-lisp:list
       (common-lisp:cons "MissingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-other-count))
      (common-lisp:list
       (common-lisp:cons "InstalledOtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-rejected-count))
      (common-lisp:list
       (common-lisp:cons "InstalledRejectedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-pending-reboot))
      (common-lisp:list
       (common-lisp:cons "InstalledPendingReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-start-time))
      (common-lisp:list
       (common-lisp:cons "OperationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-end-time))
      (common-lisp:list
       (common-lisp:cons "OperationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-option))
      (common-lisp:list
       (common-lisp:cons "RebootOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-probe-action common-lisp:nil
                       ((blocked :initarg :blocked :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %port-probe-action-blocked :initform common-lisp:nil)
                        (port-probe-details :initarg :port-probe-details :type
                         (common-lisp:or port-probe-detail-list
                                         common-lisp:null)
                         :accessor %port-probe-action-port-probe-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'port-probe-action 'make-port-probe-action))
 (common-lisp:defun make-port-probe-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key blocked port-probe-details)
   (common-lisp:apply #'common-lisp:make-instance 'port-probe-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-probe-details))
      (common-lisp:list
       (common-lisp:cons "PortProbeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked))
      (common-lisp:list
       (common-lisp:cons "Blocked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-probe-detail common-lisp:nil
                       ((remote-ip-details :initarg :remote-ip-details :type
                         (common-lisp:or action-remote-ip-details
                                         common-lisp:null)
                         :accessor %port-probe-detail-remote-ip-details
                         :initform common-lisp:nil)
                        (local-ip-details :initarg :local-ip-details :type
                         (common-lisp:or action-local-ip-details
                                         common-lisp:null)
                         :accessor %port-probe-detail-local-ip-details
                         :initform common-lisp:nil)
                        (local-port-details :initarg :local-port-details :type
                         (common-lisp:or action-local-port-details
                                         common-lisp:null)
                         :accessor %port-probe-detail-local-port-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'port-probe-detail 'make-port-probe-detail))
 (common-lisp:defun make-port-probe-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remote-ip-details local-ip-details
                     local-port-details)
   (common-lisp:apply #'common-lisp:make-instance 'port-probe-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-probe-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-port-details))
      (common-lisp:list
       (common-lisp:cons "LocalPortDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-ip-details))
      (common-lisp:list
       (common-lisp:cons "LocalIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-ip-details))
      (common-lisp:list
       (common-lisp:cons "RemoteIpDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-probe-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-probe-detail-list ()
   '(trivial-types:proper-list port-probe-detail))
 (common-lisp:defun |make-port-probe-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-probe-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass port-range common-lisp:nil
                       ((end :initarg :end :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %port-range-end :initform common-lisp:nil)
                        (begin :initarg :begin :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %port-range-begin :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'port-range 'make-port-range))
 (common-lisp:defun make-port-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end begin)
   (common-lisp:apply #'common-lisp:make-instance 'port-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin))
      (common-lisp:list
       (common-lisp:cons "Begin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass port-range-from-to common-lisp:nil
                       ((to :initarg :to :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %port-range-from-to-to :initform common-lisp:nil)
                        (from :initarg :from :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %port-range-from-to-from :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'port-range-from-to 'make-port-range-from-to))
 (common-lisp:defun make-port-range-from-to
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to from)
   (common-lisp:apply #'common-lisp:make-instance 'port-range-from-to
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-range-from-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-range-from-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-range-from-to))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-range-list ()
   '(trivial-types:proper-list port-range))
 (common-lisp:defun |make-port-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass process-details common-lisp:nil
                       ((terminated-at :initarg :terminated-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %process-details-terminated-at :initform
                         common-lisp:nil)
                        (launched-at :initarg :launched-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %process-details-launched-at :initform
                         common-lisp:nil)
                        (parent-pid :initarg :parent-pid :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %process-details-parent-pid :initform common-lisp:nil)
                        (pid :initarg :pid :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %process-details-pid :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %process-details-path :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %process-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'process-details 'make-process-details))
 (common-lisp:defun make-process-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminated-at launched-at parent-pid pid
                     path name)
   (common-lisp:apply #'common-lisp:make-instance 'process-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input process-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-pid))
      (common-lisp:list
       (common-lisp:cons "ParentPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-at))
      (common-lisp:list
       (common-lisp:cons "LaunchedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminated-at))
      (common-lisp:list
       (common-lisp:cons "TerminatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input process-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass product common-lisp:nil
                       ((product-subscription-resource-policy :initarg
                         :product-subscription-resource-policy :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %product-product-subscription-resource-policy
                         :initform common-lisp:nil)
                        (activation-url :initarg :activation-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-activation-url :initform
                         common-lisp:nil)
                        (marketplace-url :initarg :marketplace-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-marketplace-url :initform
                         common-lisp:nil)
                        (integration-types :initarg :integration-types :type
                         (common-lisp:or integration-type-list
                                         common-lisp:null)
                         :accessor %product-integration-types :initform
                         common-lisp:nil)
                        (categories :initarg :categories :type
                         (common-lisp:or category-list common-lisp:null)
                         :accessor %product-categories :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-description :initform
                         common-lisp:nil)
                        (company-name :initarg :company-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-company-name :initform
                         common-lisp:nil)
                        (product-name :initarg :product-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-product-name :initform
                         common-lisp:nil)
                        (product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %product-product-arn :initform
                         (common-lisp:error ":product-arn is required"))))
 (common-lisp:export (common-lisp:list 'product 'make-product))
 (common-lisp:defun make-product
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product-subscription-resource-policy
                     activation-url marketplace-url integration-types
                     categories description company-name product-name
                     product-arn)
   (common-lisp:apply #'common-lisp:make-instance 'product
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input product))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input product))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company-name))
      (common-lisp:list
       (common-lisp:cons "CompanyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integration-types))
      (common-lisp:list
       (common-lisp:cons "IntegrationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketplace-url))
      (common-lisp:list
       (common-lisp:cons "MarketplaceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-url))
      (common-lisp:list
       (common-lisp:cons "ActivationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'product-subscription-resource-policy))
      (common-lisp:list
       (common-lisp:cons "ProductSubscriptionResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input product))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype product-subscription-arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-product-subscription-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype products-list () '(trivial-types:proper-list product))
 (common-lisp:defun |make-products-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list product))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass propagating-vgw-set-details common-lisp:nil
                       ((gateway-id :initarg :gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %propagating-vgw-set-details-gateway-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'propagating-vgw-set-details
                    'make-propagating-vgw-set-details))
 (common-lisp:defun make-propagating-vgw-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-id)
   (common-lisp:apply #'common-lisp:make-instance 'propagating-vgw-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          propagating-vgw-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype propagating-vgw-set-list ()
   '(trivial-types:proper-list propagating-vgw-set-details))
 (common-lisp:defun |make-propagating-vgw-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            propagating-vgw-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass range common-lisp:nil
                       ((start-column :initarg :start-column :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %range-start-column :initform common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %range-end :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %range-start :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defun make-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-column end start)
   (common-lisp:apply #'common-lisp:make-instance 'range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-column))
      (common-lisp:list
       (common-lisp:cons "StartColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ranges () '(trivial-types:proper-list range))
 (common-lisp:defun |make-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ratio-scale () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %recommendation-url :initform
                         common-lisp:nil)
                        (text :initarg :text :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %recommendation-text :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defun make-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url text)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((record-index :initarg :record-index :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %record-record-index :initform common-lisp:nil)
                        (json-path :initarg :json-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %record-json-path :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defun make-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-index json-path)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-index))
      (common-lisp:list
       (common-lisp:cons "RecordIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:deftype record-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun |make-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-availability-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-finding common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %related-finding-id :initform
                         (common-lisp:error ":id is required"))
                        (product-arn :initarg :product-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %related-finding-product-arn :initform
                         (common-lisp:error ":product-arn is required"))))
 (common-lisp:export (common-lisp:list 'related-finding 'make-related-finding))
 (common-lisp:defun make-related-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id product-arn)
   (common-lisp:apply #'common-lisp:make-instance 'related-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-arn))
      (common-lisp:list
       (common-lisp:cons "ProductArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-finding-list ()
   '(trivial-types:proper-list related-finding))
 (common-lisp:defun |make-related-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype related-requirements-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-related-requirements-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remediation common-lisp:nil
                       ((recommendation :initarg :recommendation :type
                         (common-lisp:or recommendation common-lisp:null)
                         :accessor %remediation-recommendation :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'remediation 'make-remediation))
 (common-lisp:defun make-remediation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendation)
   (common-lisp:apply #'common-lisp:make-instance 'remediation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remediation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "Recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remediation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor %resource-details :initform common-lisp:nil)
                        (data-classification :initarg :data-classification
                         :type
                         (common-lisp:or data-classification-details
                                         common-lisp:null)
                         :accessor %resource-data-classification :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %resource-tags :initform common-lisp:nil)
                        (resource-role :initarg :resource-role :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %resource-resource-role :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %resource-region :initform common-lisp:nil)
                        (partition :initarg :partition :type
                         (common-lisp:or partition common-lisp:null) :accessor
                         %resource-partition :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %resource-id :initform
                         (common-lisp:error ":id is required"))
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %resource-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defun make-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details data-classification tags
                     resource-role region partition id type)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-role))
      (common-lisp:list
       (common-lisp:cons "ResourceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-classification))
      (common-lisp:list
       (common-lisp:cons "DataClassification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-conflict-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message
                    'resource-conflict-exception-code)))
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((aws-ec2route-table :initarg :aws-ec2route-table :type
                         (common-lisp:or aws-ec2route-table-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2route-table
                         :initform common-lisp:nil)
                        (aws-wafv2rule-group :initarg :aws-wafv2rule-group
                         :type
                         (common-lisp:or aws-wafv2rule-group-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-wafv2rule-group
                         :initform common-lisp:nil)
                        (aws-wafv2web-acl :initarg :aws-wafv2web-acl :type
                         (common-lisp:or aws-wafv2web-acl-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-wafv2web-acl :initform
                         common-lisp:nil)
                        (aws-sage-maker-notebook-instance :initarg
                         :aws-sage-maker-notebook-instance :type
                         (common-lisp:or
                          aws-sage-maker-notebook-instance-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-sage-maker-notebook-instance
                         :initform common-lisp:nil)
                        (aws-ec2launch-template :initarg
                         :aws-ec2launch-template :type
                         (common-lisp:or aws-ec2launch-template-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2launch-template
                         :initform common-lisp:nil)
                        (aws-backup-recovery-point :initarg
                         :aws-backup-recovery-point :type
                         (common-lisp:or aws-backup-recovery-point-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-backup-recovery-point
                         :initform common-lisp:nil)
                        (aws-backup-backup-plan :initarg
                         :aws-backup-backup-plan :type
                         (common-lisp:or aws-backup-backup-plan-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-backup-backup-plan
                         :initform common-lisp:nil)
                        (aws-backup-backup-vault :initarg
                         :aws-backup-backup-vault :type
                         (common-lisp:or aws-backup-backup-vault-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-backup-backup-vault
                         :initform common-lisp:nil)
                        (aws-ecs-task :initarg :aws-ecs-task :type
                         (common-lisp:or aws-ecs-task-details common-lisp:null)
                         :accessor %resource-details-aws-ecs-task :initform
                         common-lisp:nil)
                        (aws-waf-rule-group :initarg :aws-waf-rule-group :type
                         (common-lisp:or aws-waf-rule-group-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-waf-rule-group
                         :initform common-lisp:nil)
                        (aws-waf-rule :initarg :aws-waf-rule :type
                         (common-lisp:or aws-waf-rule-details common-lisp:null)
                         :accessor %resource-details-aws-waf-rule :initform
                         common-lisp:nil)
                        (aws-waf-regional-web-acl :initarg
                         :aws-waf-regional-web-acl :type
                         (common-lisp:or aws-waf-regional-web-acl-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-waf-regional-web-acl
                         :initform common-lisp:nil)
                        (aws-waf-regional-rule :initarg :aws-waf-regional-rule
                         :type
                         (common-lisp:or aws-waf-regional-rule-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-waf-regional-rule
                         :initform common-lisp:nil)
                        (aws-waf-regional-rule-group :initarg
                         :aws-waf-regional-rule-group :type
                         (common-lisp:or aws-waf-regional-rule-group-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-waf-regional-rule-group
                         :initform common-lisp:nil)
                        (aws-ec2vpc-peering-connection :initarg
                         :aws-ec2vpc-peering-connection :type
                         (common-lisp:or aws-ec2vpc-peering-connection-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-ec2vpc-peering-connection
                         :initform common-lisp:nil)
                        (aws-cloud-watch-alarm :initarg :aws-cloud-watch-alarm
                         :type
                         (common-lisp:or aws-cloud-watch-alarm-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-cloud-watch-alarm
                         :initform common-lisp:nil)
                        (aws-cloud-formation-stack :initarg
                         :aws-cloud-formation-stack :type
                         (common-lisp:or aws-cloud-formation-stack-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-cloud-formation-stack
                         :initform common-lisp:nil)
                        (aws-efs-access-point :initarg :aws-efs-access-point
                         :type
                         (common-lisp:or aws-efs-access-point-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-efs-access-point
                         :initform common-lisp:nil)
                        (aws-ec2transit-gateway :initarg
                         :aws-ec2transit-gateway :type
                         (common-lisp:or aws-ec2transit-gateway-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2transit-gateway
                         :initform common-lisp:nil)
                        (aws-kinesis-stream :initarg :aws-kinesis-stream :type
                         (common-lisp:or aws-kinesis-stream-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-kinesis-stream
                         :initform common-lisp:nil)
                        (aws-rds-db-security-group :initarg
                         :aws-rds-db-security-group :type
                         (common-lisp:or aws-rds-db-security-group-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-rds-db-security-group
                         :initform common-lisp:nil)
                        (aws-network-firewall-rule-group :initarg
                         :aws-network-firewall-rule-group :type
                         (common-lisp:or
                          aws-network-firewall-rule-group-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-network-firewall-rule-group
                         :initform common-lisp:nil)
                        (aws-network-firewall-firewall :initarg
                         :aws-network-firewall-firewall :type
                         (common-lisp:or aws-network-firewall-firewall-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-network-firewall-firewall
                         :initform common-lisp:nil)
                        (aws-network-firewall-firewall-policy :initarg
                         :aws-network-firewall-firewall-policy :type
                         (common-lisp:or
                          aws-network-firewall-firewall-policy-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-network-firewall-firewall-policy
                         :initform common-lisp:nil)
                        (aws-eks-cluster :initarg :aws-eks-cluster :type
                         (common-lisp:or aws-eks-cluster-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-eks-cluster :initform
                         common-lisp:nil)
                        (aws-ecr-repository :initarg :aws-ecr-repository :type
                         (common-lisp:or aws-ecr-repository-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecr-repository
                         :initform common-lisp:nil)
                        (aws-waf-regional-rate-based-rule :initarg
                         :aws-waf-regional-rate-based-rule :type
                         (common-lisp:or
                          aws-waf-regional-rate-based-rule-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-waf-regional-rate-based-rule
                         :initform common-lisp:nil)
                        (aws-waf-rate-based-rule :initarg
                         :aws-waf-rate-based-rule :type
                         (common-lisp:or aws-waf-rate-based-rule-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-waf-rate-based-rule
                         :initform common-lisp:nil)
                        (aws-xray-encryption-config :initarg
                         :aws-xray-encryption-config :type
                         (common-lisp:or aws-xray-encryption-config-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-xray-encryption-config
                         :initform common-lisp:nil)
                        (aws-ec2vpc-endpoint-service :initarg
                         :aws-ec2vpc-endpoint-service :type
                         (common-lisp:or aws-ec2vpc-endpoint-service-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-ec2vpc-endpoint-service
                         :initform common-lisp:nil)
                        (aws-open-search-service-domain :initarg
                         :aws-open-search-service-domain :type
                         (common-lisp:or aws-open-search-service-domain-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-open-search-service-domain
                         :initform common-lisp:nil)
                        (aws-ecr-container-image :initarg
                         :aws-ecr-container-image :type
                         (common-lisp:or aws-ecr-container-image-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecr-container-image
                         :initform common-lisp:nil)
                        (aws-ec2vpn-connection :initarg :aws-ec2vpn-connection
                         :type
                         (common-lisp:or aws-ec2vpn-connection-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2vpn-connection
                         :initform common-lisp:nil)
                        (aws-auto-scaling-launch-configuration :initarg
                         :aws-auto-scaling-launch-configuration :type
                         (common-lisp:or
                          aws-auto-scaling-launch-configuration-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-auto-scaling-launch-configuration
                         :initform common-lisp:nil)
                        (aws-ecs-service :initarg :aws-ecs-service :type
                         (common-lisp:or aws-ecs-service-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecs-service :initform
                         common-lisp:nil)
                        (aws-rds-event-subscription :initarg
                         :aws-rds-event-subscription :type
                         (common-lisp:or aws-rds-event-subscription-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-rds-event-subscription
                         :initform common-lisp:nil)
                        (other :initarg :other :type
                         (common-lisp:or field-map common-lisp:null) :accessor
                         %resource-details-other :initform common-lisp:nil)
                        (container :initarg :container :type
                         (common-lisp:or container-details common-lisp:null)
                         :accessor %resource-details-container :initform
                         common-lisp:nil)
                        (aws-ecs-task-definition :initarg
                         :aws-ecs-task-definition :type
                         (common-lisp:or aws-ecs-task-definition-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecs-task-definition
                         :initform common-lisp:nil)
                        (aws-ecs-container :initarg :aws-ecs-container :type
                         (common-lisp:or aws-ecs-container-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecs-container
                         :initform common-lisp:nil)
                        (aws-ecs-cluster :initarg :aws-ecs-cluster :type
                         (common-lisp:or aws-ecs-cluster-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ecs-cluster :initform
                         common-lisp:nil)
                        (aws-rds-db-cluster :initarg :aws-rds-db-cluster :type
                         (common-lisp:or aws-rds-db-cluster-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-rds-db-cluster
                         :initform common-lisp:nil)
                        (aws-rds-db-cluster-snapshot :initarg
                         :aws-rds-db-cluster-snapshot :type
                         (common-lisp:or aws-rds-db-cluster-snapshot-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-rds-db-cluster-snapshot
                         :initform common-lisp:nil)
                        (aws-rds-db-snapshot :initarg :aws-rds-db-snapshot
                         :type
                         (common-lisp:or aws-rds-db-snapshot-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-rds-db-snapshot
                         :initform common-lisp:nil)
                        (aws-waf-web-acl :initarg :aws-waf-web-acl :type
                         (common-lisp:or aws-waf-web-acl-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-waf-web-acl :initform
                         common-lisp:nil)
                        (aws-sqs-queue :initarg :aws-sqs-queue :type
                         (common-lisp:or aws-sqs-queue-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-sqs-queue :initform
                         common-lisp:nil)
                        (aws-sns-topic :initarg :aws-sns-topic :type
                         (common-lisp:or aws-sns-topic-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-sns-topic :initform
                         common-lisp:nil)
                        (aws-rds-db-instance :initarg :aws-rds-db-instance
                         :type
                         (common-lisp:or aws-rds-db-instance-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-rds-db-instance
                         :initform common-lisp:nil)
                        (aws-lambda-layer-version :initarg
                         :aws-lambda-layer-version :type
                         (common-lisp:or aws-lambda-layer-version-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-lambda-layer-version
                         :initform common-lisp:nil)
                        (aws-lambda-function :initarg :aws-lambda-function
                         :type
                         (common-lisp:or aws-lambda-function-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-lambda-function
                         :initform common-lisp:nil)
                        (aws-kms-key :initarg :aws-kms-key :type
                         (common-lisp:or aws-kms-key-details common-lisp:null)
                         :accessor %resource-details-aws-kms-key :initform
                         common-lisp:nil)
                        (aws-iam-role :initarg :aws-iam-role :type
                         (common-lisp:or aws-iam-role-details common-lisp:null)
                         :accessor %resource-details-aws-iam-role :initform
                         common-lisp:nil)
                        (aws-iam-group :initarg :aws-iam-group :type
                         (common-lisp:or aws-iam-group-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-iam-group :initform
                         common-lisp:nil)
                        (aws-elb-load-balancer :initarg :aws-elb-load-balancer
                         :type
                         (common-lisp:or aws-elb-load-balancer-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-elb-load-balancer
                         :initform common-lisp:nil)
                        (aws-redshift-cluster :initarg :aws-redshift-cluster
                         :type
                         (common-lisp:or aws-redshift-cluster-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-redshift-cluster
                         :initform common-lisp:nil)
                        (aws-certificate-manager-certificate :initarg
                         :aws-certificate-manager-certificate :type
                         (common-lisp:or
                          aws-certificate-manager-certificate-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-certificate-manager-certificate
                         :initform common-lisp:nil)
                        (aws-ssm-patch-compliance :initarg
                         :aws-ssm-patch-compliance :type
                         (common-lisp:or aws-ssm-patch-compliance-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ssm-patch-compliance
                         :initform common-lisp:nil)
                        (aws-cloud-trail-trail :initarg :aws-cloud-trail-trail
                         :type
                         (common-lisp:or aws-cloud-trail-trail-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-cloud-trail-trail
                         :initform common-lisp:nil)
                        (aws-api-gateway-rest-api :initarg
                         :aws-api-gateway-rest-api :type
                         (common-lisp:or aws-api-gateway-rest-api-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-api-gateway-rest-api
                         :initform common-lisp:nil)
                        (aws-api-gateway-stage :initarg :aws-api-gateway-stage
                         :type
                         (common-lisp:or aws-api-gateway-stage-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-api-gateway-stage
                         :initform common-lisp:nil)
                        (aws-dynamo-db-table :initarg :aws-dynamo-db-table
                         :type
                         (common-lisp:or aws-dynamo-db-table-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-dynamo-db-table
                         :initform common-lisp:nil)
                        (aws-api-gateway-v2api :initarg :aws-api-gateway-v2api
                         :type
                         (common-lisp:or aws-api-gateway-v2api-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-api-gateway-v2api
                         :initform common-lisp:nil)
                        (aws-api-gateway-v2stage :initarg
                         :aws-api-gateway-v2stage :type
                         (common-lisp:or aws-api-gateway-v2stage-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-api-gateway-v2stage
                         :initform common-lisp:nil)
                        (aws-iam-policy :initarg :aws-iam-policy :type
                         (common-lisp:or aws-iam-policy-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-iam-policy :initform
                         common-lisp:nil)
                        (aws-iam-user :initarg :aws-iam-user :type
                         (common-lisp:or aws-iam-user-details common-lisp:null)
                         :accessor %resource-details-aws-iam-user :initform
                         common-lisp:nil)
                        (aws-iam-access-key :initarg :aws-iam-access-key :type
                         (common-lisp:or aws-iam-access-key-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-iam-access-key
                         :initform common-lisp:nil)
                        (aws-secrets-manager-secret :initarg
                         :aws-secrets-manager-secret :type
                         (common-lisp:or aws-secrets-manager-secret-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-secrets-manager-secret
                         :initform common-lisp:nil)
                        (aws-s3object :initarg :aws-s3object :type
                         (common-lisp:or aws-s3object-details common-lisp:null)
                         :accessor %resource-details-aws-s3object :initform
                         common-lisp:nil)
                        (aws-s3account-public-access-block :initarg
                         :aws-s3account-public-access-block :type
                         (common-lisp:or
                          aws-s3account-public-access-block-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-s3account-public-access-block
                         :initform common-lisp:nil)
                        (aws-s3bucket :initarg :aws-s3bucket :type
                         (common-lisp:or aws-s3bucket-details common-lisp:null)
                         :accessor %resource-details-aws-s3bucket :initform
                         common-lisp:nil)
                        (aws-elasticsearch-domain :initarg
                         :aws-elasticsearch-domain :type
                         (common-lisp:or aws-elasticsearch-domain-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-elasticsearch-domain
                         :initform common-lisp:nil)
                        (aws-elastic-beanstalk-environment :initarg
                         :aws-elastic-beanstalk-environment :type
                         (common-lisp:or
                          aws-elastic-beanstalk-environment-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-elastic-beanstalk-environment
                         :initform common-lisp:nil)
                        (aws-elbv2load-balancer :initarg
                         :aws-elbv2load-balancer :type
                         (common-lisp:or aws-elbv2load-balancer-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-elbv2load-balancer
                         :initform common-lisp:nil)
                        (aws-ec2network-acl :initarg :aws-ec2network-acl :type
                         (common-lisp:or aws-ec2network-acl-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2network-acl
                         :initform common-lisp:nil)
                        (aws-ec2subnet :initarg :aws-ec2subnet :type
                         (common-lisp:or aws-ec2subnet-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2subnet :initform
                         common-lisp:nil)
                        (aws-ec2eip :initarg :aws-ec2eip :type
                         (common-lisp:or aws-ec2eip-details common-lisp:null)
                         :accessor %resource-details-aws-ec2eip :initform
                         common-lisp:nil)
                        (aws-ec2vpc :initarg :aws-ec2vpc :type
                         (common-lisp:or aws-ec2vpc-details common-lisp:null)
                         :accessor %resource-details-aws-ec2vpc :initform
                         common-lisp:nil)
                        (aws-ec2volume :initarg :aws-ec2volume :type
                         (common-lisp:or aws-ec2volume-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2volume :initform
                         common-lisp:nil)
                        (aws-ec2security-group :initarg :aws-ec2security-group
                         :type
                         (common-lisp:or aws-ec2security-group-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2security-group
                         :initform common-lisp:nil)
                        (aws-ec2network-interface :initarg
                         :aws-ec2network-interface :type
                         (common-lisp:or aws-ec2network-interface-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2network-interface
                         :initform common-lisp:nil)
                        (aws-ec2instance :initarg :aws-ec2instance :type
                         (common-lisp:or aws-ec2instance-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-ec2instance :initform
                         common-lisp:nil)
                        (aws-cloud-front-distribution :initarg
                         :aws-cloud-front-distribution :type
                         (common-lisp:or aws-cloud-front-distribution-details
                                         common-lisp:null)
                         :accessor
                         %resource-details-aws-cloud-front-distribution
                         :initform common-lisp:nil)
                        (aws-code-build-project :initarg
                         :aws-code-build-project :type
                         (common-lisp:or aws-code-build-project-details
                                         common-lisp:null)
                         :accessor %resource-details-aws-code-build-project
                         :initform common-lisp:nil)
                        (aws-auto-scaling-auto-scaling-group :initarg
                         :aws-auto-scaling-auto-scaling-group :type
                         (common-lisp:or
                          aws-auto-scaling-auto-scaling-group-details
                          common-lisp:null)
                         :accessor
                         %resource-details-aws-auto-scaling-auto-scaling-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defun make-resource-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-ec2route-table aws-wafv2rule-group
                     aws-wafv2web-acl aws-sage-maker-notebook-instance
                     aws-ec2launch-template aws-backup-recovery-point
                     aws-backup-backup-plan aws-backup-backup-vault
                     aws-ecs-task aws-waf-rule-group aws-waf-rule
                     aws-waf-regional-web-acl aws-waf-regional-rule
                     aws-waf-regional-rule-group aws-ec2vpc-peering-connection
                     aws-cloud-watch-alarm aws-cloud-formation-stack
                     aws-efs-access-point aws-ec2transit-gateway
                     aws-kinesis-stream aws-rds-db-security-group
                     aws-network-firewall-rule-group
                     aws-network-firewall-firewall
                     aws-network-firewall-firewall-policy aws-eks-cluster
                     aws-ecr-repository aws-waf-regional-rate-based-rule
                     aws-waf-rate-based-rule aws-xray-encryption-config
                     aws-ec2vpc-endpoint-service aws-open-search-service-domain
                     aws-ecr-container-image aws-ec2vpn-connection
                     aws-auto-scaling-launch-configuration aws-ecs-service
                     aws-rds-event-subscription other container
                     aws-ecs-task-definition aws-ecs-container aws-ecs-cluster
                     aws-rds-db-cluster aws-rds-db-cluster-snapshot
                     aws-rds-db-snapshot aws-waf-web-acl aws-sqs-queue
                     aws-sns-topic aws-rds-db-instance aws-lambda-layer-version
                     aws-lambda-function aws-kms-key aws-iam-role aws-iam-group
                     aws-elb-load-balancer aws-redshift-cluster
                     aws-certificate-manager-certificate
                     aws-ssm-patch-compliance aws-cloud-trail-trail
                     aws-api-gateway-rest-api aws-api-gateway-stage
                     aws-dynamo-db-table aws-api-gateway-v2api
                     aws-api-gateway-v2stage aws-iam-policy aws-iam-user
                     aws-iam-access-key aws-secrets-manager-secret aws-s3object
                     aws-s3account-public-access-block aws-s3bucket
                     aws-elasticsearch-domain aws-elastic-beanstalk-environment
                     aws-elbv2load-balancer aws-ec2network-acl aws-ec2subnet
                     aws-ec2eip aws-ec2vpc aws-ec2volume aws-ec2security-group
                     aws-ec2network-interface aws-ec2instance
                     aws-cloud-front-distribution aws-code-build-project
                     aws-auto-scaling-auto-scaling-group)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-auto-scaling-auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "AwsAutoScalingAutoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-code-build-project))
      (common-lisp:list
       (common-lisp:cons "AwsCodeBuildProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-front-distribution))
      (common-lisp:list
       (common-lisp:cons "AwsCloudFrontDistribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2instance))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2network-interface))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkInterface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2security-group))
      (common-lisp:list
       (common-lisp:cons "AwsEc2SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2volume))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Volume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2vpc))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2eip))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Eip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2subnet))
      (common-lisp:list
       (common-lisp:cons "AwsEc2Subnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2network-acl))
      (common-lisp:list
       (common-lisp:cons "AwsEc2NetworkAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elbv2load-balancer))
      (common-lisp:list
       (common-lisp:cons "AwsElbv2LoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elastic-beanstalk-environment))
      (common-lisp:list
       (common-lisp:cons "AwsElasticBeanstalkEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elasticsearch-domain))
      (common-lisp:list
       (common-lisp:cons "AwsElasticsearchDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-s3bucket))
      (common-lisp:list
       (common-lisp:cons "AwsS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-s3account-public-access-block))
      (common-lisp:list
       (common-lisp:cons "AwsS3AccountPublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-s3object))
      (common-lisp:list
       (common-lisp:cons "AwsS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secrets-manager-secret))
      (common-lisp:list
       (common-lisp:cons "AwsSecretsManagerSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-access-key))
      (common-lisp:list
       (common-lisp:cons "AwsIamAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-user))
      (common-lisp:list
       (common-lisp:cons "AwsIamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-policy))
      (common-lisp:list
       (common-lisp:cons "AwsIamPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-v2stage))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayV2Stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-v2api))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayV2Api"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-dynamo-db-table))
      (common-lisp:list
       (common-lisp:cons "AwsDynamoDbTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-stage))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-api-gateway-rest-api))
      (common-lisp:list
       (common-lisp:cons "AwsApiGatewayRestApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-trail-trail))
      (common-lisp:list
       (common-lisp:cons "AwsCloudTrailTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ssm-patch-compliance))
      (common-lisp:list
       (common-lisp:cons "AwsSsmPatchCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-certificate-manager-certificate))
      (common-lisp:list
       (common-lisp:cons "AwsCertificateManagerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-redshift-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsRedshiftCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-elb-load-balancer))
      (common-lisp:list
       (common-lisp:cons "AwsElbLoadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-group))
      (common-lisp:list
       (common-lisp:cons "AwsIamGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-iam-role))
      (common-lisp:list
       (common-lisp:cons "AwsIamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-lambda-function))
      (common-lisp:list
       (common-lisp:cons "AwsLambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-lambda-layer-version))
      (common-lisp:list
       (common-lisp:cons "AwsLambdaLayerVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-instance))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-sns-topic))
      (common-lisp:list
       (common-lisp:cons "AwsSnsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-sqs-queue))
      (common-lisp:list
       (common-lisp:cons "AwsSqsQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafWebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-snapshot))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-db-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-rds-db-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsEcsCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-container))
      (common-lisp:list
       (common-lisp:cons "AwsEcsContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecs-task-definition))
      (common-lisp:list
       (common-lisp:cons "AwsEcsTaskDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other))
      (common-lisp:list
       (common-lisp:cons "Other"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-event-subscription))
      (common-lisp:list
       (common-lisp:cons "AwsRdsEventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-service))
      (common-lisp:list
       (common-lisp:cons "AwsEcsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-auto-scaling-launch-configuration))
      (common-lisp:list
       (common-lisp:cons "AwsAutoScalingLaunchConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpn-connection))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpnConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ecr-container-image))
      (common-lisp:list
       (common-lisp:cons "AwsEcrContainerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-open-search-service-domain))
      (common-lisp:list
       (common-lisp:cons "AwsOpenSearchServiceDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpc-endpoint-service))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpcEndpointService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-xray-encryption-config))
      (common-lisp:list
       (common-lisp:cons "AwsXrayEncryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-rate-based-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRateBasedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rate-based-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRateBasedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecr-repository))
      (common-lisp:list
       (common-lisp:cons "AwsEcrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-eks-cluster))
      (common-lisp:list
       (common-lisp:cons "AwsEksCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-firewall-policy))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallFirewallPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-firewall))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallFirewall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-network-firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsNetworkFirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-rds-db-security-group))
      (common-lisp:list
       (common-lisp:cons "AwsRdsDbSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kinesis-stream))
      (common-lisp:list
       (common-lisp:cons "AwsKinesisStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2transit-gateway))
      (common-lisp:list
       (common-lisp:cons "AwsEc2TransitGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-efs-access-point))
      (common-lisp:list
       (common-lisp:cons "AwsEfsAccessPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-formation-stack))
      (common-lisp:list
       (common-lisp:cons "AwsCloudFormationStack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cloud-watch-alarm))
      (common-lisp:list
       (common-lisp:cons "AwsCloudWatchAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2vpc-peering-connection))
      (common-lisp:list
       (common-lisp:cons "AwsEc2VpcPeeringConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-waf-regional-web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafRegionalWebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-rule))
      (common-lisp:list
       (common-lisp:cons "AwsWafRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-waf-rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ecs-task))
      (common-lisp:list
       (common-lisp:cons "AwsEcsTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-backup-vault))
      (common-lisp:list
       (common-lisp:cons "AwsBackupBackupVault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-backup-plan))
      (common-lisp:list
       (common-lisp:cons "AwsBackupBackupPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ec2launch-template))
      (common-lisp:list
       (common-lisp:cons "AwsEc2LaunchTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-sage-maker-notebook-instance))
      (common-lisp:list
       (common-lisp:cons "AwsSageMakerNotebookInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-wafv2web-acl))
      (common-lisp:list
       (common-lisp:cons "AwsWafv2WebAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-wafv2rule-group))
      (common-lisp:list
       (common-lisp:cons "AwsWafv2RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-ec2route-table))
      (common-lisp:list
       (common-lisp:cons "AwsEc2RouteTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (securityhub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code)))
(common-lisp:progn
 (common-lisp:defclass result common-lisp:nil
                       ((processing-result :initarg :processing-result :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %result-processing-result :initform
                         common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %result-account-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'result 'make-result))
 (common-lisp:defun make-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processing-result account-id)
   (common-lisp:apply #'common-lisp:make-instance 'result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-result))
      (common-lisp:list
       (common-lisp:cons "ProcessingResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-list () '(trivial-types:proper-list result))
 (common-lisp:defun |make-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass route-set-details common-lisp:nil
                       ((vpc-peering-connection-id :initarg
                         :vpc-peering-connection-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-vpc-peering-connection-id
                         :initform common-lisp:nil)
                        (transit-gateway-id :initarg :transit-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-transit-gateway-id
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-state :initform
                         common-lisp:nil)
                        (origin :initarg :origin :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-origin :initform
                         common-lisp:nil)
                        (network-interface-id :initarg :network-interface-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-network-interface-id
                         :initform common-lisp:nil)
                        (nat-gateway-id :initarg :nat-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-nat-gateway-id :initform
                         common-lisp:nil)
                        (local-gateway-id :initarg :local-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-local-gateway-id
                         :initform common-lisp:nil)
                        (instance-owner-id :initarg :instance-owner-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-instance-owner-id
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-instance-id :initform
                         common-lisp:nil)
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-gateway-id :initform
                         common-lisp:nil)
                        (egress-only-internet-gateway-id :initarg
                         :egress-only-internet-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %route-set-details-egress-only-internet-gateway-id
                         :initform common-lisp:nil)
                        (destination-prefix-list-id :initarg
                         :destination-prefix-list-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %route-set-details-destination-prefix-list-id
                         :initform common-lisp:nil)
                        (destination-ipv6cidr-block :initarg
                         :destination-ipv6cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %route-set-details-destination-ipv6cidr-block
                         :initform common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-destination-cidr-block
                         :initform common-lisp:nil)
                        (core-network-arn :initarg :core-network-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-core-network-arn
                         :initform common-lisp:nil)
                        (carrier-gateway-id :initarg :carrier-gateway-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %route-set-details-carrier-gateway-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'route-set-details 'make-route-set-details))
 (common-lisp:defun make-route-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-peering-connection-id
                     transit-gateway-id state origin network-interface-id
                     nat-gateway-id local-gateway-id instance-owner-id
                     instance-id gateway-id egress-only-internet-gateway-id
                     destination-prefix-list-id destination-ipv6cidr-block
                     destination-cidr-block core-network-arn
                     carrier-gateway-id)
   (common-lisp:apply #'common-lisp:make-instance 'route-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'carrier-gateway-id))
      (common-lisp:list
       (common-lisp:cons "CarrierGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationIpv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "DestinationPrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-only-internet-gateway-id))
      (common-lisp:list
       (common-lisp:cons "EgressOnlyInternetGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-owner-id))
      (common-lisp:list
       (common-lisp:cons "InstanceOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-gateway-id))
      (common-lisp:list
       (common-lisp:cons "LocalGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nat-gateway-id))
      (common-lisp:list
       (common-lisp:cons "NatGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-peering-connection-id))
      (common-lisp:list
       (common-lisp:cons "VpcPeeringConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-set-list ()
   '(trivial-types:proper-list route-set-details))
 (common-lisp:defun |make-route-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-group-details common-lisp:nil
                       ((rules-source :initarg :rules-source :type
                         (common-lisp:or rule-group-source common-lisp:null)
                         :accessor %rule-group-details-rules-source :initform
                         common-lisp:nil)
                        (rule-variables :initarg :rule-variables :type
                         (common-lisp:or rule-group-variables common-lisp:null)
                         :accessor %rule-group-details-rule-variables :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-details 'make-rule-group-details))
 (common-lisp:defun make-rule-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules-source rule-variables)
   (common-lisp:apply #'common-lisp:make-instance 'rule-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-variables))
      (common-lisp:list
       (common-lisp:cons "RuleVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-source))
      (common-lisp:list
       (common-lisp:cons "RulesSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source common-lisp:nil
                       ((stateless-rules-and-custom-actions :initarg
                         :stateless-rules-and-custom-actions :type
                         (common-lisp:or
                          rule-group-source-stateless-rules-and-custom-actions-details
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rules-and-custom-actions
                         :initform common-lisp:nil)
                        (stateful-rules :initarg :stateful-rules :type
                         (common-lisp:or rule-group-source-stateful-rules-list
                                         common-lisp:null)
                         :accessor %rule-group-source-stateful-rules :initform
                         common-lisp:nil)
                        (rules-string :initarg :rules-string :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %rule-group-source-rules-string :initform
                         common-lisp:nil)
                        (rules-source-list :initarg :rules-source-list :type
                         (common-lisp:or rule-group-source-list-details
                                         common-lisp:null)
                         :accessor %rule-group-source-rules-source-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source 'make-rule-group-source))
 (common-lisp:defun make-rule-group-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stateless-rules-and-custom-actions
                     stateful-rules rules-string rules-source-list)
   (common-lisp:apply #'common-lisp:make-instance 'rule-group-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-source-list))
      (common-lisp:list
       (common-lisp:cons "RulesSourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-string))
      (common-lisp:list
       (common-lisp:cons "RulesString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stateful-rules))
      (common-lisp:list
       (common-lisp:cons "StatefulRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stateless-rules-and-custom-actions))
      (common-lisp:list
       (common-lisp:cons "StatelessRulesAndCustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-custom-actions-details common-lisp:nil
                       ((action-name :initarg :action-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-custom-actions-details-action-name
                         :initform common-lisp:nil)
                        (action-definition :initarg :action-definition :type
                         (common-lisp:or stateless-custom-action-definition
                                         common-lisp:null)
                         :accessor
                         %rule-group-source-custom-actions-details-action-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-custom-actions-details
                    'make-rule-group-source-custom-actions-details))
 (common-lisp:defun make-rule-group-source-custom-actions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-name action-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-custom-actions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-definition))
      (common-lisp:list
       (common-lisp:cons "ActionDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-custom-actions-list ()
   '(trivial-types:proper-list rule-group-source-custom-actions-details))
 (common-lisp:defun |make-rule-group-source-custom-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-custom-actions-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-list-details common-lisp:nil
                       ((targets :initarg :targets :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %rule-group-source-list-details-targets
                         :initform common-lisp:nil)
                        (target-types :initarg :target-types :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor %rule-group-source-list-details-target-types
                         :initform common-lisp:nil)
                        (generated-rules-type :initarg :generated-rules-type
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-list-details-generated-rules-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-list-details
                    'make-rule-group-source-list-details))
 (common-lisp:defun make-rule-group-source-list-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key targets target-types
                     generated-rules-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-rules-type))
      (common-lisp:list
       (common-lisp:cons "GeneratedRulesType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-types))
      (common-lisp:list
       (common-lisp:cons "TargetTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-list-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateful-rules-details common-lisp:nil
                       ((rule-options :initarg :rule-options :type
                         (common-lisp:or
                          rule-group-source-stateful-rules-options-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-details-rule-options
                         :initform common-lisp:nil)
                        (header :initarg :header :type
                         (common-lisp:or
                          rule-group-source-stateful-rules-header-details
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-details-header
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-details-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-details
                    'make-rule-group-source-stateful-rules-details))
 (common-lisp:defun make-rule-group-source-stateful-rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-options header action)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateful-rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-options))
      (common-lisp:list
       (common-lisp:cons "RuleOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateful-rules-header-details
                       common-lisp:nil
                       ((source-port :initarg :source-port :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-source-port
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-source
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-protocol
                         :initform common-lisp:nil)
                        (direction :initarg :direction :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-direction
                         :initform common-lisp:nil)
                        (destination-port :initarg :destination-port :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-destination-port
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-header-details-destination
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-header-details
                    'make-rule-group-source-stateful-rules-header-details))
 (common-lisp:defun make-rule-group-source-stateful-rules-header-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-port source protocol direction
                     destination-port destination)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateful-rules-header-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-port))
      (common-lisp:list
       (common-lisp:cons "SourcePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-header-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-list ()
   '(trivial-types:proper-list rule-group-source-stateful-rules-details))
 (common-lisp:defun |make-rule-group-source-stateful-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateful-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateful-rules-options-details
                       common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or
                          rule-group-source-stateful-rules-rule-options-settings-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-options-details-settings
                         :initform common-lisp:nil)
                        (keyword :initarg :keyword :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %rule-group-source-stateful-rules-options-details-keyword
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateful-rules-options-details
                    'make-rule-group-source-stateful-rules-options-details))
 (common-lisp:defun make-rule-group-source-stateful-rules-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings keyword)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateful-rules-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keyword))
      (common-lisp:list
       (common-lisp:cons "Keyword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateful-rules-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-options-list ()
   '(trivial-types:proper-list
     rule-group-source-stateful-rules-options-details))
 (common-lisp:defun |make-rule-group-source-stateful-rules-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateful-rules-options-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateful-rules-rule-options-settings-list
                      ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-rule-group-source-stateful-rules-rule-options-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateless-rule-definition
                       common-lisp:nil
                       ((match-attributes :initarg :match-attributes :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-definition-match-attributes
                         :initform common-lisp:nil)
                        (actions :initarg :actions :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-definition-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-definition
                    'make-rule-group-source-stateless-rule-definition))
 (common-lisp:defun make-rule-group-source-stateless-rule-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match-attributes actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-attributes))
      (common-lisp:list
       (common-lisp:cons "MatchAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateless-rule-match-attributes
                       common-lisp:nil
                       ((tcp-flags :initarg :tcp-flags :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-tcp-flags-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-tcp-flags
                         :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-sources-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-sources
                         :initform common-lisp:nil)
                        (source-ports :initarg :source-ports :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-source-ports-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-source-ports
                         :initform common-lisp:nil)
                        (protocols :initarg :protocols :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-protocols-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-protocols
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-destinations-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-destinations
                         :initform common-lisp:nil)
                        (destination-ports :initarg :destination-ports :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-match-attributes-destination-ports-list
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rule-match-attributes-destination-ports
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-match-attributes
                    'make-rule-group-source-stateless-rule-match-attributes))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp-flags sources source-ports protocols
                     destinations destination-ports)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ports))
      (common-lisp:list
       (common-lisp:cons "DestinationPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ports))
      (common-lisp:list
       (common-lisp:cons "SourcePorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-flags))
      (common-lisp:list
       (common-lisp:cons "TcpFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rule-match-attributes-destination-ports
  common-lisp:nil
  ((to-port :initarg :to-port :type (common-lisp:or integer common-lisp:null)
    :accessor
    %rule-group-source-stateless-rule-match-attributes-destination-ports-to-port
    :initform common-lisp:nil)
   (from-port :initarg :from-port :type
    (common-lisp:or integer common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-destination-ports-from-port
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-destination-ports
   'make-rule-group-source-stateless-rule-match-attributes-destination-ports))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes-destination-ports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to-port from-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes-destination-ports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destination-ports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-destination-ports-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-destination-ports))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-destination-ports-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-destination-ports))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rule-match-attributes-destinations
  common-lisp:nil
  ((address-definition :initarg :address-definition :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-destinations-address-definition
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-destinations
   'make-rule-group-source-stateless-rule-match-attributes-destinations))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key address-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes-destinations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-definition))
      (common-lisp:list
       (common-lisp:cons "AddressDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-destinations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-destinations-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-destinations))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-destinations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-destinations))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-protocols-list
                      ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-protocols-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rule-match-attributes-source-ports
  common-lisp:nil
  ((to-port :initarg :to-port :type (common-lisp:or integer common-lisp:null)
    :accessor
    %rule-group-source-stateless-rule-match-attributes-source-ports-to-port
    :initform common-lisp:nil)
   (from-port :initarg :from-port :type
    (common-lisp:or integer common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-source-ports-from-port
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-source-ports
   'make-rule-group-source-stateless-rule-match-attributes-source-ports))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes-source-ports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key to-port from-port)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes-source-ports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "FromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "ToPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-source-ports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-source-ports-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-source-ports))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-source-ports-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-source-ports))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rule-match-attributes-sources common-lisp:nil
  ((address-definition :initarg :address-definition :type
    (common-lisp:or non-empty-string common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-sources-address-definition
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rule-match-attributes-sources
                    'make-rule-group-source-stateless-rule-match-attributes-sources))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes-sources
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key address-definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes-sources
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-definition))
      (common-lisp:list
       (common-lisp:cons "AddressDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-sources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-sources-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-sources))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-sources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-sources))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rule-match-attributes-tcp-flags common-lisp:nil
  ((masks :initarg :masks :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-tcp-flags-masks
    :initform common-lisp:nil)
   (flags :initarg :flags :type
    (common-lisp:or non-empty-string-list common-lisp:null) :accessor
    %rule-group-source-stateless-rule-match-attributes-tcp-flags-flags
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rule-match-attributes-tcp-flags
   'make-rule-group-source-stateless-rule-match-attributes-tcp-flags))
 (common-lisp:defun make-rule-group-source-stateless-rule-match-attributes-tcp-flags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key masks flags)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rule-match-attributes-tcp-flags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flags))
      (common-lisp:list
       (common-lisp:cons "Flags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'masks))
      (common-lisp:list
       (common-lisp:cons "Masks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rule-match-attributes-tcp-flags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rule-match-attributes-tcp-flags-list
                      ()
   '(trivial-types:proper-list
     rule-group-source-stateless-rule-match-attributes-tcp-flags))
 (common-lisp:defun |make-rule-group-source-stateless-rule-match-attributes-tcp-flags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rule-match-attributes-tcp-flags))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass
  rule-group-source-stateless-rules-and-custom-actions-details common-lisp:nil
  ((stateless-rules :initarg :stateless-rules :type
    (common-lisp:or rule-group-source-stateless-rules-list common-lisp:null)
    :accessor
    %rule-group-source-stateless-rules-and-custom-actions-details-stateless-rules
    :initform common-lisp:nil)
   (custom-actions :initarg :custom-actions :type
    (common-lisp:or rule-group-source-custom-actions-list common-lisp:null)
    :accessor
    %rule-group-source-stateless-rules-and-custom-actions-details-custom-actions
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'rule-group-source-stateless-rules-and-custom-actions-details
   'make-rule-group-source-stateless-rules-and-custom-actions-details))
 (common-lisp:defun make-rule-group-source-stateless-rules-and-custom-actions-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stateless-rules custom-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rules-and-custom-actions-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-actions))
      (common-lisp:list
       (common-lisp:cons "CustomActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stateless-rules))
      (common-lisp:list
       (common-lisp:cons "StatelessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-and-custom-actions-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-source-stateless-rules-details
                       common-lisp:nil
                       ((rule-definition :initarg :rule-definition :type
                         (common-lisp:or
                          rule-group-source-stateless-rule-definition
                          common-lisp:null)
                         :accessor
                         %rule-group-source-stateless-rules-details-rule-definition
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %rule-group-source-stateless-rules-details-priority
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-source-stateless-rules-details
                    'make-rule-group-source-stateless-rules-details))
 (common-lisp:defun make-rule-group-source-stateless-rules-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-definition priority)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-source-stateless-rules-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-definition))
      (common-lisp:list
       (common-lisp:cons "RuleDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-source-stateless-rules-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-source-stateless-rules-list ()
   '(trivial-types:proper-list rule-group-source-stateless-rules-details))
 (common-lisp:defun |make-rule-group-source-stateless-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rule-group-source-stateless-rules-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule-group-variables common-lisp:nil
                       ((port-sets :initarg :port-sets :type
                         (common-lisp:or rule-group-variables-port-sets-details
                                         common-lisp:null)
                         :accessor %rule-group-variables-port-sets :initform
                         common-lisp:nil)
                        (ip-sets :initarg :ip-sets :type
                         (common-lisp:or rule-group-variables-ip-sets-details
                                         common-lisp:null)
                         :accessor %rule-group-variables-ip-sets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables 'make-rule-group-variables))
 (common-lisp:defun make-rule-group-variables
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-sets ip-sets)
   (common-lisp:apply #'common-lisp:make-instance 'rule-group-variables
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-variables))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-variables))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-sets))
      (common-lisp:list
       (common-lisp:cons "IpSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-sets))
      (common-lisp:list
       (common-lisp:cons "PortSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-variables))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-variables-ip-sets-details common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %rule-group-variables-ip-sets-details-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables-ip-sets-details
                    'make-rule-group-variables-ip-sets-details))
 (common-lisp:defun make-rule-group-variables-ip-sets-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-variables-ip-sets-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-ip-sets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rule-group-variables-port-sets-details common-lisp:nil
                       ((definition :initarg :definition :type
                         (common-lisp:or non-empty-string-list
                                         common-lisp:null)
                         :accessor
                         %rule-group-variables-port-sets-details-definition
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rule-group-variables-port-sets-details
                    'make-rule-group-variables-port-sets-details))
 (common-lisp:defun make-rule-group-variables-port-sets-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key definition)
   (common-lisp:apply #'common-lisp:make-instance
                      'rule-group-variables-port-sets-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-group-variables-port-sets-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-control common-lisp:nil
                       ((security-control-status :initarg
                         :security-control-status :type
                         (common-lisp:or control-status common-lisp:null)
                         :accessor %security-control-security-control-status
                         :initform
                         (common-lisp:error
                          ":security-control-status is required"))
                        (severity-rating :initarg :severity-rating :type
                         (common-lisp:or severity-rating common-lisp:null)
                         :accessor %security-control-severity-rating :initform
                         (common-lisp:error ":severity-rating is required"))
                        (remediation-url :initarg :remediation-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-remediation-url :initform
                         (common-lisp:error ":remediation-url is required"))
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-description :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-title :initform
                         (common-lisp:error ":title is required"))
                        (security-control-arn :initarg :security-control-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-security-control-arn
                         :initform
                         (common-lisp:error
                          ":security-control-arn is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'security-control 'make-security-control))
 (common-lisp:defun make-security-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-control-status severity-rating
                     remediation-url description title security-control-arn
                     security-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'security-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-status))
      (common-lisp:list
       (common-lisp:cons "SecurityControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-control-definition common-lisp:nil
                       ((current-region-availability :initarg
                         :current-region-availability :type
                         (common-lisp:or region-availability-status
                                         common-lisp:null)
                         :accessor
                         %security-control-definition-current-region-availability
                         :initform
                         (common-lisp:error
                          ":current-region-availability is required"))
                        (severity-rating :initarg :severity-rating :type
                         (common-lisp:or severity-rating common-lisp:null)
                         :accessor %security-control-definition-severity-rating
                         :initform
                         (common-lisp:error ":severity-rating is required"))
                        (remediation-url :initarg :remediation-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-definition-remediation-url
                         :initform
                         (common-lisp:error ":remediation-url is required"))
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-definition-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %security-control-definition-title :initform
                         (common-lisp:error ":title is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %security-control-definition-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'security-control-definition
                    'make-security-control-definition))
 (common-lisp:defun make-security-control-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-region-availability
                     severity-rating remediation-url description title
                     security-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'security-control-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-region-availability))
      (common-lisp:list
       (common-lisp:cons "CurrentRegionAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-control-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-control-definitions ()
   '(trivial-types:proper-list security-control-definition))
 (common-lisp:defun |make-security-control-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            security-control-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-controls ()
   '(trivial-types:proper-list security-control))
 (common-lisp:defun |make-security-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sensitive-data-detections common-lisp:nil
                       ((occurrences :initarg :occurrences :type
                         (common-lisp:or occurrences common-lisp:null)
                         :accessor %sensitive-data-detections-occurrences
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %sensitive-data-detections-type :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %sensitive-data-detections-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-detections
                    'make-sensitive-data-detections))
 (common-lisp:defun make-sensitive-data-detections
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key occurrences type count)
   (common-lisp:apply #'common-lisp:make-instance 'sensitive-data-detections
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'occurrences))
      (common-lisp:list
       (common-lisp:cons "Occurrences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-detections))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data-detections-list ()
   '(trivial-types:proper-list sensitive-data-detections))
 (common-lisp:defun |make-sensitive-data-detections-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sensitive-data-detections))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sensitive-data-result common-lisp:nil
                       ((total-count :initarg :total-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %sensitive-data-result-total-count :initform
                         common-lisp:nil)
                        (detections :initarg :detections :type
                         (common-lisp:or sensitive-data-detections-list
                                         common-lisp:null)
                         :accessor %sensitive-data-result-detections :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %sensitive-data-result-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sensitive-data-result 'make-sensitive-data-result))
 (common-lisp:defun make-sensitive-data-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-count detections category)
   (common-lisp:apply #'common-lisp:make-instance 'sensitive-data-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detections))
      (common-lisp:list
       (common-lisp:cons "Detections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensitive-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sensitive-data-result-list ()
   '(trivial-types:proper-list sensitive-data-result))
 (common-lisp:defun |make-sensitive-data-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sensitive-data-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass severity common-lisp:nil
                       ((original :initarg :original :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %severity-original :initform
                         common-lisp:nil)
                        (normalized :initarg :normalized :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %severity-normalized :initform common-lisp:nil)
                        (label :initarg :label :type
                         (common-lisp:or severity-label common-lisp:null)
                         :accessor %severity-label :initform common-lisp:nil)
                        (product :initarg :product :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %severity-product :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'severity 'make-severity))
 (common-lisp:defun make-severity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key original normalized label product)
   (common-lisp:apply #'common-lisp:make-instance 'severity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normalized))
      (common-lisp:list
       (common-lisp:cons "Normalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original))
      (common-lisp:list
       (common-lisp:cons "Original"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity))
   common-lisp:nil))
(common-lisp:deftype severity-label () 'common-lisp:string)
(common-lisp:deftype severity-rating () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass severity-update common-lisp:nil
                       ((label :initarg :label :type
                         (common-lisp:or severity-label common-lisp:null)
                         :accessor %severity-update-label :initform
                         common-lisp:nil)
                        (product :initarg :product :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %severity-update-product :initform common-lisp:nil)
                        (normalized :initarg :normalized :type
                         (common-lisp:or ratio-scale common-lisp:null)
                         :accessor %severity-update-normalized :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'severity-update 'make-severity-update))
 (common-lisp:defun make-severity-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key label product normalized)
   (common-lisp:apply #'common-lisp:make-instance 'severity-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normalized))
      (common-lisp:list
       (common-lisp:cons "Normalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-update))
   common-lisp:nil))
(common-lisp:deftype size-bytes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass software-package common-lisp:nil
                       ((source-layer-arn :initarg :source-layer-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-source-layer-arn :initform
                         common-lisp:nil)
                        (source-layer-hash :initarg :source-layer-hash :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-source-layer-hash
                         :initform common-lisp:nil)
                        (remediation :initarg :remediation :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-remediation :initform
                         common-lisp:nil)
                        (fixed-in-version :initarg :fixed-in-version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-fixed-in-version :initform
                         common-lisp:nil)
                        (file-path :initarg :file-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-file-path :initform
                         common-lisp:nil)
                        (package-manager :initarg :package-manager :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-package-manager :initform
                         common-lisp:nil)
                        (architecture :initarg :architecture :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-architecture :initform
                         common-lisp:nil)
                        (release :initarg :release :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-release :initform
                         common-lisp:nil)
                        (epoch :initarg :epoch :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-epoch :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %software-package-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'software-package 'make-software-package))
 (common-lisp:defun make-software-package
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-layer-arn source-layer-hash
                     remediation fixed-in-version file-path package-manager
                     architecture release epoch version name)
   (common-lisp:apply #'common-lisp:make-instance 'software-package
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input software-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input software-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "Epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "Release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-manager))
      (common-lisp:list
       (common-lisp:cons "PackageManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-in-version))
      (common-lisp:list
       (common-lisp:cons "FixedInVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "Remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-hash))
      (common-lisp:list
       (common-lisp:cons "SourceLayerHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-layer-arn))
      (common-lisp:list
       (common-lisp:cons "SourceLayerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input software-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype software-package-list ()
   '(trivial-types:proper-list software-package))
 (common-lisp:defun |make-software-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list software-package))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sort-criteria ()
   '(trivial-types:proper-list sort-criterion))
 (common-lisp:defun |make-sort-criteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sort-criterion common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %sort-criterion-sort-order :initform common-lisp:nil)
                        (field :initarg :field :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %sort-criterion-field :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sort-criterion 'make-sort-criterion))
 (common-lisp:defun make-sort-criterion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order field)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criterion))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass standard common-lisp:nil
                       ((standards-managed-by :initarg :standards-managed-by
                         :type
                         (common-lisp:or standards-managed-by common-lisp:null)
                         :accessor %standard-standards-managed-by :initform
                         common-lisp:nil)
                        (enabled-by-default :initarg :enabled-by-default :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %standard-enabled-by-default :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standard-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standard-name :initform common-lisp:nil)
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standard-standards-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'standard 'make-standard))
 (common-lisp:defun make-standard
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-managed-by enabled-by-default
                     description name standards-arn)
   (common-lisp:apply #'common-lisp:make-instance 'standard
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled-by-default))
      (common-lisp:list
       (common-lisp:cons "EnabledByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-managed-by))
      (common-lisp:list
       (common-lisp:cons "StandardsManagedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards () '(trivial-types:proper-list standard))
 (common-lisp:defun |make-standards|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standards-control common-lisp:nil
                       ((related-requirements :initarg :related-requirements
                         :type
                         (common-lisp:or related-requirements-list
                                         common-lisp:null)
                         :accessor %standards-control-related-requirements
                         :initform common-lisp:nil)
                        (severity-rating :initarg :severity-rating :type
                         (common-lisp:or severity-rating common-lisp:null)
                         :accessor %standards-control-severity-rating :initform
                         common-lisp:nil)
                        (remediation-url :initarg :remediation-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-remediation-url :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-description :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-title :initform
                         common-lisp:nil)
                        (control-id :initarg :control-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-control-id :initform
                         common-lisp:nil)
                        (control-status-updated-at :initarg
                         :control-status-updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %standards-control-control-status-updated-at :initform
                         common-lisp:nil)
                        (disabled-reason :initarg :disabled-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-disabled-reason :initform
                         common-lisp:nil)
                        (control-status :initarg :control-status :type
                         (common-lisp:or control-status common-lisp:null)
                         :accessor %standards-control-control-status :initform
                         common-lisp:nil)
                        (standards-control-arn :initarg :standards-control-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-control-standards-control-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'standards-control 'make-standards-control))
 (common-lisp:defun make-standards-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key related-requirements severity-rating
                     remediation-url description title control-id
                     control-status-updated-at disabled-reason control-status
                     standards-control-arn)
   (common-lisp:apply #'common-lisp:make-instance 'standards-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standards-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standards-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "ControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "DisabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-status-updated-at))
      (common-lisp:list
       (common-lisp:cons "ControlStatusUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-id))
      (common-lisp:list
       (common-lisp:cons "ControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation-url))
      (common-lisp:list
       (common-lisp:cons "RemediationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-rating))
      (common-lisp:list
       (common-lisp:cons "SeverityRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standards-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-arn-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-standards-control-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standards-control-association-detail common-lisp:nil
                       ((standards-control-arns :initarg
                         :standards-control-arns :type
                         (common-lisp:or standards-control-arn-list
                                         common-lisp:null)
                         :accessor
                         %standards-control-association-detail-standards-control-arns
                         :initform common-lisp:nil)
                        (standards-control-description :initarg
                         :standards-control-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-standards-control-description
                         :initform common-lisp:nil)
                        (standards-control-title :initarg
                         :standards-control-title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-standards-control-title
                         :initform common-lisp:nil)
                        (updated-reason :initarg :updated-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-updated-reason
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %standards-control-association-detail-updated-at
                         :initform common-lisp:nil)
                        (related-requirements :initarg :related-requirements
                         :type
                         (common-lisp:or related-requirements-list
                                         common-lisp:null)
                         :accessor
                         %standards-control-association-detail-related-requirements
                         :initform common-lisp:nil)
                        (association-status :initarg :association-status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         %standards-control-association-detail-association-status
                         :initform
                         (common-lisp:error ":association-status is required"))
                        (security-control-arn :initarg :security-control-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-security-control-arn
                         :initform
                         (common-lisp:error
                          ":security-control-arn is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-detail-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-detail
                    'make-standards-control-association-detail))
 (common-lisp:defun make-standards-control-association-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-control-arns
                     standards-control-description standards-control-title
                     updated-reason updated-at related-requirements
                     association-status security-control-arn
                     security-control-id standards-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'standards-control-association-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-title))
      (common-lisp:list
       (common-lisp:cons "StandardsControlTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-description))
      (common-lisp:list
       (common-lisp:cons "StandardsControlDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-arns))
      (common-lisp:list
       (common-lisp:cons "StandardsControlArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-details ()
   '(trivial-types:proper-list standards-control-association-detail))
 (common-lisp:defun |make-standards-control-association-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standards-control-association-id common-lisp:nil
                       ((standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-id-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-id-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-id
                    'make-standards-control-association-id))
 (common-lisp:defun make-standards-control-association-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-arn security-control-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'standards-control-association-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-ids ()
   '(trivial-types:proper-list standards-control-association-id))
 (common-lisp:defun |make-standards-control-association-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-summaries ()
   '(trivial-types:proper-list standards-control-association-summary))
 (common-lisp:defun |make-standards-control-association-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standards-control-association-summary common-lisp:nil
                       ((standards-control-description :initarg
                         :standards-control-description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-standards-control-description
                         :initform common-lisp:nil)
                        (standards-control-title :initarg
                         :standards-control-title :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-standards-control-title
                         :initform common-lisp:nil)
                        (updated-reason :initarg :updated-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-updated-reason
                         :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %standards-control-association-summary-updated-at
                         :initform common-lisp:nil)
                        (related-requirements :initarg :related-requirements
                         :type
                         (common-lisp:or related-requirements-list
                                         common-lisp:null)
                         :accessor
                         %standards-control-association-summary-related-requirements
                         :initform common-lisp:nil)
                        (association-status :initarg :association-status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         %standards-control-association-summary-association-status
                         :initform
                         (common-lisp:error ":association-status is required"))
                        (security-control-arn :initarg :security-control-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-security-control-arn
                         :initform
                         (common-lisp:error
                          ":security-control-arn is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-summary-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-summary
                    'make-standards-control-association-summary))
 (common-lisp:defun make-standards-control-association-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-control-description
                     standards-control-title updated-reason updated-at
                     related-requirements association-status
                     security-control-arn security-control-id standards-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'standards-control-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-control-arn))
      (common-lisp:list
       (common-lisp:cons "SecurityControlArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-requirements))
      (common-lisp:list
       (common-lisp:cons "RelatedRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-title))
      (common-lisp:list
       (common-lisp:cons "StandardsControlTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-description))
      (common-lisp:list
       (common-lisp:cons "StandardsControlDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass standards-control-association-update common-lisp:nil
                       ((updated-reason :initarg :updated-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-update-updated-reason
                         :initform common-lisp:nil)
                        (association-status :initarg :association-status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         %standards-control-association-update-association-status
                         :initform
                         (common-lisp:error ":association-status is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-update-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-control-association-update-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-control-association-update
                    'make-standards-control-association-update))
 (common-lisp:defun make-standards-control-association-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-reason association-status
                     security-control-id standards-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'standards-control-association-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-reason))
      (common-lisp:list
       (common-lisp:cons "UpdatedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-control-association-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-control-association-updates ()
   '(trivial-types:proper-list standards-control-association-update))
 (common-lisp:defun |make-standards-control-association-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-control-association-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-controls ()
   '(trivial-types:proper-list standards-control))
 (common-lisp:defun |make-standards-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standards-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-input-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-standards-input-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass standards-managed-by common-lisp:nil
                       ((product :initarg :product :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-managed-by-product :initform
                         common-lisp:nil)
                        (company :initarg :company :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-managed-by-company :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'standards-managed-by 'make-standards-managed-by))
 (common-lisp:defun make-standards-managed-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product company)
   (common-lisp:apply #'common-lisp:make-instance 'standards-managed-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standards-managed-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standards-managed-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'company))
      (common-lisp:list
       (common-lisp:cons "Company"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standards-managed-by))
   common-lisp:nil))
(common-lisp:deftype standards-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass standards-status-reason common-lisp:nil
                       ((status-reason-code :initarg :status-reason-code :type
                         (common-lisp:or status-reason-code common-lisp:null)
                         :accessor %standards-status-reason-status-reason-code
                         :initform
                         (common-lisp:error
                          ":status-reason-code is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-status-reason 'make-standards-status-reason))
 (common-lisp:defun make-standards-status-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason-code)
   (common-lisp:apply #'common-lisp:make-instance 'standards-status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason-code))
      (common-lisp:list
       (common-lisp:cons "StatusReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-status-reason))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass standards-subscription common-lisp:nil
                       ((standards-status-reason :initarg
                         :standards-status-reason :type
                         (common-lisp:or standards-status-reason
                                         common-lisp:null)
                         :accessor
                         %standards-subscription-standards-status-reason
                         :initform common-lisp:nil)
                        (standards-status :initarg :standards-status :type
                         (common-lisp:or standards-status common-lisp:null)
                         :accessor %standards-subscription-standards-status
                         :initform
                         (common-lisp:error ":standards-status is required"))
                        (standards-input :initarg :standards-input :type
                         (common-lisp:or standards-input-parameter-map
                                         common-lisp:null)
                         :accessor %standards-subscription-standards-input
                         :initform
                         (common-lisp:error ":standards-input is required"))
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %standards-subscription-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))
                        (standards-subscription-arn :initarg
                         :standards-subscription-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-subscription-standards-subscription-arn
                         :initform
                         (common-lisp:error
                          ":standards-subscription-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-subscription 'make-standards-subscription))
 (common-lisp:defun make-standards-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-status-reason standards-status
                     standards-input standards-arn standards-subscription-arn)
   (common-lisp:apply #'common-lisp:make-instance 'standards-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-input))
      (common-lisp:list
       (common-lisp:cons "StandardsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-status))
      (common-lisp:list
       (common-lisp:cons "StandardsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-status-reason))
      (common-lisp:list
       (common-lisp:cons "StandardsStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-subscription-arns ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-standards-subscription-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standards-subscription-request common-lisp:nil
                       ((standards-input :initarg :standards-input :type
                         (common-lisp:or standards-input-parameter-map
                                         common-lisp:null)
                         :accessor
                         %standards-subscription-request-standards-input
                         :initform common-lisp:nil)
                        (standards-arn :initarg :standards-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %standards-subscription-request-standards-arn
                         :initform
                         (common-lisp:error ":standards-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'standards-subscription-request
                    'make-standards-subscription-request))
 (common-lisp:defun make-standards-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standards-input standards-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'standards-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-arn))
      (common-lisp:list
       (common-lisp:cons "StandardsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standards-input))
      (common-lisp:list
       (common-lisp:cons "StandardsInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standards-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype standards-subscription-requests ()
   '(trivial-types:proper-list standards-subscription-request))
 (common-lisp:defun |make-standards-subscription-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            standards-subscription-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype standards-subscriptions ()
   '(trivial-types:proper-list standards-subscription))
 (common-lisp:defun |make-standards-subscriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standards-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stateless-custom-action-definition common-lisp:nil
                       ((publish-metric-action :initarg :publish-metric-action
                         :type
                         (common-lisp:or stateless-custom-publish-metric-action
                                         common-lisp:null)
                         :accessor
                         %stateless-custom-action-definition-publish-metric-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-action-definition
                    'make-stateless-custom-action-definition))
 (common-lisp:defun make-stateless-custom-action-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publish-metric-action)
   (common-lisp:apply #'common-lisp:make-instance
                      'stateless-custom-action-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'publish-metric-action))
      (common-lisp:list
       (common-lisp:cons "PublishMetricAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-action-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stateless-custom-publish-metric-action common-lisp:nil
                       ((dimensions :initarg :dimensions :type
                         (common-lisp:or
                          stateless-custom-publish-metric-action-dimensions-list
                          common-lisp:null)
                         :accessor
                         %stateless-custom-publish-metric-action-dimensions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-publish-metric-action
                    'make-stateless-custom-publish-metric-action))
 (common-lisp:defun make-stateless-custom-publish-metric-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dimensions)
   (common-lisp:apply #'common-lisp:make-instance
                      'stateless-custom-publish-metric-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stateless-custom-publish-metric-action-dimension
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %stateless-custom-publish-metric-action-dimension-value
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stateless-custom-publish-metric-action-dimension
                    'make-stateless-custom-publish-metric-action-dimension))
 (common-lisp:defun make-stateless-custom-publish-metric-action-dimension
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance
                      'stateless-custom-publish-metric-action-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stateless-custom-publish-metric-action-dimension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stateless-custom-publish-metric-action-dimensions-list ()
   '(trivial-types:proper-list
     stateless-custom-publish-metric-action-dimension))
 (common-lisp:defun |make-stateless-custom-publish-metric-action-dimensions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stateless-custom-publish-metric-action-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass status-reason common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %status-reason-description :initform
                         common-lisp:nil)
                        (reason-code :initarg :reason-code :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %status-reason-reason-code :initform
                         (common-lisp:error ":reason-code is required"))))
 (common-lisp:export (common-lisp:list 'status-reason 'make-status-reason))
 (common-lisp:defun make-status-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description reason-code)
   (common-lisp:apply #'common-lisp:make-instance 'status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "ReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-reason))
   common-lisp:nil))
(common-lisp:deftype status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype status-reasons-list ()
   '(trivial-types:proper-list status-reason))
 (common-lisp:defun |make-status-reasons-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list status-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass string-filter common-lisp:nil
                       ((comparison :initarg :comparison :type
                         (common-lisp:or string-filter-comparison
                                         common-lisp:null)
                         :accessor %string-filter-comparison :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %string-filter-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'string-filter 'make-string-filter))
 (common-lisp:defun make-string-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comparison value)
   (common-lisp:apply #'common-lisp:make-instance 'string-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison))
      (common-lisp:list
       (common-lisp:cons "Comparison"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input string-filter))
   common-lisp:nil))
(common-lisp:deftype string-filter-comparison () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-filter-list ()
   '(trivial-types:proper-list string-filter))
 (common-lisp:defun |make-string-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass threat common-lisp:nil
                       ((file-paths :initarg :file-paths :type
                         (common-lisp:or file-path-list common-lisp:null)
                         :accessor %threat-file-paths :initform
                         common-lisp:nil)
                        (item-count :initarg :item-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %threat-item-count :initform common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-severity :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'threat 'make-threat))
 (common-lisp:defun make-threat
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-paths item-count severity name)
   (common-lisp:apply #'common-lisp:make-instance 'threat
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input threat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input threat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-count))
      (common-lisp:list
       (common-lisp:cons "ItemCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-paths))
      (common-lisp:list
       (common-lisp:cons "FilePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input threat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass threat-intel-indicator common-lisp:nil
                       ((source-url :initarg :source-url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-intel-indicator-source-url :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-intel-indicator-source :initform
                         common-lisp:nil)
                        (last-observed-at :initarg :last-observed-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-intel-indicator-last-observed-at
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or threat-intel-indicator-category
                                         common-lisp:null)
                         :accessor %threat-intel-indicator-category :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %threat-intel-indicator-value :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or threat-intel-indicator-type
                                         common-lisp:null)
                         :accessor %threat-intel-indicator-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'threat-intel-indicator 'make-threat-intel-indicator))
 (common-lisp:defun make-threat-intel-indicator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-url source last-observed-at
                     category value type)
   (common-lisp:apply #'common-lisp:make-instance 'threat-intel-indicator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-observed-at))
      (common-lisp:list
       (common-lisp:cons "LastObservedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          threat-intel-indicator))
   common-lisp:nil))
(common-lisp:deftype threat-intel-indicator-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype threat-intel-indicator-list ()
   '(trivial-types:proper-list threat-intel-indicator))
 (common-lisp:defun |make-threat-intel-indicator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list threat-intel-indicator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype threat-intel-indicator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype threat-list () '(trivial-types:proper-list threat))
 (common-lisp:defun |make-threat-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list threat))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype unprocessed-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unprocessed-security-control common-lisp:nil
                       ((error-reason :initarg :error-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %unprocessed-security-control-error-reason
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or unprocessed-error-code
                                         common-lisp:null)
                         :accessor %unprocessed-security-control-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))
                        (security-control-id :initarg :security-control-id
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %unprocessed-security-control-security-control-id
                         :initform
                         (common-lisp:error
                          ":security-control-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unprocessed-security-control
                    'make-unprocessed-security-control))
 (common-lisp:defun make-unprocessed-security-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-reason error-code
                     security-control-id)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-security-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-control-id))
      (common-lisp:list
       (common-lisp:cons "SecurityControlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-security-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-security-controls ()
   '(trivial-types:proper-list unprocessed-security-control))
 (common-lisp:defun |make-unprocessed-security-controls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-security-control))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unprocessed-standards-control-association
                       common-lisp:nil
                       ((error-reason :initarg :error-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-error-reason
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or unprocessed-error-code
                                         common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))
                        (standards-control-association-id :initarg
                         :standards-control-association-id :type
                         (common-lisp:or standards-control-association-id
                                         common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-standards-control-association-id
                         :initform
                         (common-lisp:error
                          ":standards-control-association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unprocessed-standards-control-association
                    'make-unprocessed-standards-control-association))
 (common-lisp:defun make-unprocessed-standards-control-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-reason error-code
                     standards-control-association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-standards-control-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-id))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unprocessed-standards-control-association-update
                       common-lisp:nil
                       ((error-reason :initarg :error-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-update-error-reason
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or unprocessed-error-code
                                         common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-update-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))
                        (standards-control-association-update :initarg
                         :standards-control-association-update :type
                         (common-lisp:or standards-control-association-update
                                         common-lisp:null)
                         :accessor
                         %unprocessed-standards-control-association-update-standards-control-association-update
                         :initform
                         (common-lisp:error
                          ":standards-control-association-update is required"))))
 (common-lisp:export
  (common-lisp:list 'unprocessed-standards-control-association-update
                    'make-unprocessed-standards-control-association-update))
 (common-lisp:defun make-unprocessed-standards-control-association-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-reason error-code
                     standards-control-association-update)
   (common-lisp:apply #'common-lisp:make-instance
                      'unprocessed-standards-control-association-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standards-control-association-update))
      (common-lisp:list
       (common-lisp:cons "StandardsControlAssociationUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-reason))
      (common-lisp:list
       (common-lisp:cons "ErrorReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-standards-control-association-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-standards-control-association-updates ()
   '(trivial-types:proper-list
     unprocessed-standards-control-association-update))
 (common-lisp:defun |make-unprocessed-standards-control-association-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-standards-control-association-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype unprocessed-standards-control-associations ()
   '(trivial-types:proper-list unprocessed-standards-control-association))
 (common-lisp:defun |make-unprocessed-standards-control-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            unprocessed-standards-control-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-action-target-request common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-action-target-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-action-target-request-name :initform
                         common-lisp:nil)
                        (action-target-arn :initarg :action-target-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-action-target-request-action-target-arn
                         :initform
                         (common-lisp:error
                          ":action-target-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-action-target-request
                    'make-update-action-target-request))
 (common-lisp:defun make-update-action-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name action-target-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-action-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-action-target-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-action-target-response
                    'make-update-action-target-response))
 (common-lisp:defun make-update-action-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-action-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-finding-aggregator-request common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-finding-aggregator-request-regions
                         :initform common-lisp:nil)
                        (region-linking-mode :initarg :region-linking-mode
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-finding-aggregator-request-region-linking-mode
                         :initform
                         (common-lisp:error
                          ":region-linking-mode is required"))
                        (finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-finding-aggregator-request-finding-aggregator-arn
                         :initform
                         (common-lisp:error
                          ":finding-aggregator-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-finding-aggregator-request
                    'make-update-finding-aggregator-request))
 (common-lisp:defun make-update-finding-aggregator-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions region-linking-mode
                     finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-finding-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-finding-aggregator-response common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-finding-aggregator-response-regions
                         :initform common-lisp:nil)
                        (region-linking-mode :initarg :region-linking-mode
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-finding-aggregator-response-region-linking-mode
                         :initform common-lisp:nil)
                        (finding-aggregation-region :initarg
                         :finding-aggregation-region :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-finding-aggregator-response-finding-aggregation-region
                         :initform common-lisp:nil)
                        (finding-aggregator-arn :initarg
                         :finding-aggregator-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-finding-aggregator-response-finding-aggregator-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-finding-aggregator-response
                    'make-update-finding-aggregator-response))
 (common-lisp:defun make-update-finding-aggregator-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions region-linking-mode
                     finding-aggregation-region finding-aggregator-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-finding-aggregator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "FindingAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-aggregation-region))
      (common-lisp:list
       (common-lisp:cons "FindingAggregationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-linking-mode))
      (common-lisp:list
       (common-lisp:cons "RegionLinkingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-finding-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-request common-lisp:nil
                       ((record-state :initarg :record-state :type
                         (common-lisp:or record-state common-lisp:null)
                         :accessor %update-findings-request-record-state
                         :initform common-lisp:nil)
                        (note :initarg :note :type
                         (common-lisp:or note-update common-lisp:null)
                         :accessor %update-findings-request-note :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or aws-security-finding-filters
                                         common-lisp:null)
                         :accessor %update-findings-request-filters :initform
                         (common-lisp:error ":filters is required"))))
 (common-lisp:export
  (common-lisp:list 'update-findings-request 'make-update-findings-request))
 (common-lisp:defun make-update-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key record-state note filters)
   (common-lisp:apply #'common-lisp:make-instance 'update-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'note))
      (common-lisp:list
       (common-lisp:cons "Note"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-state))
      (common-lisp:list
       (common-lisp:cons "RecordState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-findings-response 'make-update-findings-response))
 (common-lisp:defun make-update-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-insight-request common-lisp:nil
                       ((group-by-attribute :initarg :group-by-attribute :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-insight-request-group-by-attribute
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or aws-security-finding-filters
                                         common-lisp:null)
                         :accessor %update-insight-request-filters :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-insight-request-name :initform
                         common-lisp:nil)
                        (insight-arn :initarg :insight-arn :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %update-insight-request-insight-arn
                         :initform
                         (common-lisp:error ":insight-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-insight-request 'make-update-insight-request))
 (common-lisp:defun make-update-insight-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-by-attribute filters name
                     insight-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-insight-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-attribute))
      (common-lisp:list
       (common-lisp:cons "GroupByAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-insight-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-insight-response 'make-update-insight-response))
 (common-lisp:defun make-update-insight-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-insight-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-insight-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-request
                       common-lisp:nil
                       ((auto-enable-standards :initarg :auto-enable-standards
                         :type
                         (common-lisp:or auto-enable-standards
                                         common-lisp:null)
                         :accessor
                         %update-organization-configuration-request-auto-enable-standards
                         :initform common-lisp:nil)
                        (auto-enable :initarg :auto-enable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-organization-configuration-request-auto-enable
                         :initform
                         (common-lisp:error ":auto-enable is required"))))
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-request
                    'make-update-organization-configuration-request))
 (common-lisp:defun make-update-organization-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-enable-standards auto-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enable))
      (common-lisp:list
       (common-lisp:cons "AutoEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-standards))
      (common-lisp:list
       (common-lisp:cons "AutoEnableStandards"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-organization-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-organization-configuration-response
                    'make-update-organization-configuration-response))
 (common-lisp:defun make-update-organization-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-hub-configuration-request
                       common-lisp:nil
                       ((control-finding-generator :initarg
                         :control-finding-generator :type
                         (common-lisp:or control-finding-generator
                                         common-lisp:null)
                         :accessor
                         %update-security-hub-configuration-request-control-finding-generator
                         :initform common-lisp:nil)
                        (auto-enable-controls :initarg :auto-enable-controls
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %update-security-hub-configuration-request-auto-enable-controls
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-security-hub-configuration-request
                    'make-update-security-hub-configuration-request))
 (common-lisp:defun make-update-security-hub-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key control-finding-generator
                     auto-enable-controls)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-security-hub-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-controls))
      (common-lisp:list
       (common-lisp:cons "AutoEnableControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-finding-generator))
      (common-lisp:list
       (common-lisp:cons "ControlFindingGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-security-hub-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-security-hub-configuration-response
                    'make-update-security-hub-configuration-response))
 (common-lisp:defun make-update-security-hub-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-security-hub-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-security-hub-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-standards-control-request common-lisp:nil
                       ((disabled-reason :initarg :disabled-reason :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-standards-control-request-disabled-reason
                         :initform common-lisp:nil)
                        (control-status :initarg :control-status :type
                         (common-lisp:or control-status common-lisp:null)
                         :accessor
                         %update-standards-control-request-control-status
                         :initform common-lisp:nil)
                        (standards-control-arn :initarg :standards-control-arn
                         :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %update-standards-control-request-standards-control-arn
                         :initform
                         (common-lisp:error
                          ":standards-control-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-standards-control-request
                    'make-update-standards-control-request))
 (common-lisp:defun make-update-standards-control-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disabled-reason control-status
                     standards-control-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-standards-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control-status))
      (common-lisp:list
       (common-lisp:cons "ControlStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled-reason))
      (common-lisp:list
       (common-lisp:cons "DisabledReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-standards-control-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-standards-control-response
                    'make-update-standards-control-response))
 (common-lisp:defun make-update-standards-control-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-standards-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-standards-control-response))
   common-lisp:nil))
(common-lisp:deftype verification-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass volume-mount common-lisp:nil
                       ((mount-path :initarg :mount-path :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %volume-mount-mount-path :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %volume-mount-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'volume-mount 'make-volume-mount))
 (common-lisp:defun make-volume-mount
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mount-path name)
   (common-lisp:apply #'common-lisp:make-instance 'volume-mount
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-mount))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-path))
      (common-lisp:list
       (common-lisp:cons "MountPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-mount))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-mount-list ()
   '(trivial-types:proper-list volume-mount))
 (common-lisp:defun |make-volume-mount-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-mount))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-info-cidr-block-set-details common-lisp:nil
                       ((cidr-block :initarg :cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vpc-info-cidr-block-set-details-cidr-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-cidr-block-set-details
                    'make-vpc-info-cidr-block-set-details))
 (common-lisp:defun make-vpc-info-cidr-block-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr-block)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-info-cidr-block-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-cidr-block-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-info-cidr-block-set-list ()
   '(trivial-types:proper-list vpc-info-cidr-block-set-details))
 (common-lisp:defun |make-vpc-info-cidr-block-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-info-cidr-block-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-info-ipv6cidr-block-set-details common-lisp:nil
                       ((ipv6cidr-block :initarg :ipv6cidr-block :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %vpc-info-ipv6cidr-block-set-details-ipv6cidr-block
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-ipv6cidr-block-set-details
                    'make-vpc-info-ipv6cidr-block-set-details))
 (common-lisp:defun make-vpc-info-ipv6cidr-block-set-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv6cidr-block)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-info-ipv6cidr-block-set-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidr-block))
      (common-lisp:list
       (common-lisp:cons "Ipv6CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-ipv6cidr-block-set-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-info-ipv6cidr-block-set-list ()
   '(trivial-types:proper-list vpc-info-ipv6cidr-block-set-details))
 (common-lisp:defun |make-vpc-info-ipv6cidr-block-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-info-ipv6cidr-block-set-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-info-peering-options-details common-lisp:nil
                       ((allow-egress-from-local-vpc-to-remote-classic-link
                         :initarg
                         :allow-egress-from-local-vpc-to-remote-classic-link
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %vpc-info-peering-options-details-allow-egress-from-local-vpc-to-remote-classic-link
                         :initform common-lisp:nil)
                        (allow-egress-from-local-classic-link-to-remote-vpc
                         :initarg
                         :allow-egress-from-local-classic-link-to-remote-vpc
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %vpc-info-peering-options-details-allow-egress-from-local-classic-link-to-remote-vpc
                         :initform common-lisp:nil)
                        (allow-dns-resolution-from-remote-vpc :initarg
                         :allow-dns-resolution-from-remote-vpc :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %vpc-info-peering-options-details-allow-dns-resolution-from-remote-vpc
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-info-peering-options-details
                    'make-vpc-info-peering-options-details))
 (common-lisp:defun make-vpc-info-peering-options-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     allow-egress-from-local-vpc-to-remote-classic-link
                     allow-egress-from-local-classic-link-to-remote-vpc
                     allow-dns-resolution-from-remote-vpc)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-info-peering-options-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-dns-resolution-from-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowDnsResolutionFromRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-classic-link-to-remote-vpc))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalClassicLinkToRemoteVpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-egress-from-local-vpc-to-remote-classic-link))
      (common-lisp:list
       (common-lisp:cons "AllowEgressFromLocalVpcToRemoteClassicLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-info-peering-options-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vulnerability common-lisp:nil
                       ((fix-available :initarg :fix-available :type
                         (common-lisp:or vulnerability-fix-available
                                         common-lisp:null)
                         :accessor %vulnerability-fix-available :initform
                         common-lisp:nil)
                        (reference-urls :initarg :reference-urls :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vulnerability-reference-urls :initform
                         common-lisp:nil)
                        (vendor :initarg :vendor :type
                         (common-lisp:or vulnerability-vendor common-lisp:null)
                         :accessor %vulnerability-vendor :initform
                         common-lisp:nil)
                        (related-vulnerabilities :initarg
                         :related-vulnerabilities :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vulnerability-related-vulnerabilities
                         :initform common-lisp:nil)
                        (cvss :initarg :cvss :type
                         (common-lisp:or cvss-list common-lisp:null) :accessor
                         %vulnerability-cvss :initform common-lisp:nil)
                        (vulnerable-packages :initarg :vulnerable-packages
                         :type
                         (common-lisp:or software-package-list
                                         common-lisp:null)
                         :accessor %vulnerability-vulnerable-packages :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'vulnerability 'make-vulnerability))
 (common-lisp:defun make-vulnerability
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fix-available reference-urls vendor
                     related-vulnerabilities cvss vulnerable-packages id)
   (common-lisp:apply #'common-lisp:make-instance 'vulnerability
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vulnerable-packages))
      (common-lisp:list
       (common-lisp:cons "VulnerablePackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cvss))
      (common-lisp:list
       (common-lisp:cons "Cvss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-vulnerabilities))
      (common-lisp:list
       (common-lisp:cons "RelatedVulnerabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "ReferenceUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fix-available))
      (common-lisp:list
       (common-lisp:cons "FixAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerability))
   common-lisp:nil))
(common-lisp:deftype vulnerability-fix-available () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vulnerability-list ()
   '(trivial-types:proper-list vulnerability))
 (common-lisp:defun |make-vulnerability-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vulnerability))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vulnerability-vendor common-lisp:nil
                       ((vendor-updated-at :initarg :vendor-updated-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-vendor-vendor-updated-at
                         :initform common-lisp:nil)
                        (vendor-created-at :initarg :vendor-created-at :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-vendor-vendor-created-at
                         :initform common-lisp:nil)
                        (vendor-severity :initarg :vendor-severity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-vendor-vendor-severity
                         :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-vendor-url :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %vulnerability-vendor-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'vulnerability-vendor 'make-vulnerability-vendor))
 (common-lisp:defun make-vulnerability-vendor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vendor-updated-at vendor-created-at
                     vendor-severity url name)
   (common-lisp:apply #'common-lisp:make-instance 'vulnerability-vendor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-severity))
      (common-lisp:list
       (common-lisp:cons "VendorSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-created-at))
      (common-lisp:list
       (common-lisp:cons "VendorCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-updated-at))
      (common-lisp:list
       (common-lisp:cons "VendorUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vulnerability-vendor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waf-action common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %waf-action-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'waf-action 'make-waf-action))
 (common-lisp:defun make-waf-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'waf-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass waf-excluded-rule common-lisp:nil
                       ((rule-id :initarg :rule-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %waf-excluded-rule-rule-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waf-excluded-rule 'make-waf-excluded-rule))
 (common-lisp:defun make-waf-excluded-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'waf-excluded-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-excluded-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype waf-excluded-rule-list ()
   '(trivial-types:proper-list waf-excluded-rule))
 (common-lisp:defun |make-waf-excluded-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list waf-excluded-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass waf-override-action common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %waf-override-action-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'waf-override-action 'make-waf-override-action))
 (common-lisp:defun make-waf-override-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'waf-override-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-override-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or workflow-status common-lisp:null)
                         :accessor %workflow-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'workflow 'make-workflow))
 (common-lisp:defun make-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'workflow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow))
   common-lisp:nil))
(common-lisp:deftype workflow-state () 'common-lisp:string)
(common-lisp:deftype workflow-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-update common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or workflow-status common-lisp:null)
                         :accessor %workflow-update-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'workflow-update 'make-workflow-update))
 (common-lisp:defun make-workflow-update
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-update
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-administrator-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key administrator-id invitation-id)
   (common-lisp:declare (common-lisp:ignorable administrator-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-administrator-invitation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/administrator"
                                                        "AcceptAdministratorInvitation"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-administrator-invitation))
(common-lisp:progn
 (common-lisp:defun accept-invitation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key master-id invitation-id)
   (common-lisp:declare (common-lisp:ignorable master-id invitation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-invitation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/master"
                                                        "AcceptInvitation"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-invitation))
(common-lisp:progn
 (common-lisp:defun batch-disable-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arns)
   (common-lisp:declare (common-lisp:ignorable standards-subscription-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-disable-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/deregister"
                                                        "BatchDisableStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disable-standards))
(common-lisp:progn
 (common-lisp:defun batch-enable-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-requests)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-enable-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/register"
                                                        "BatchEnableStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-enable-standards))
(common-lisp:progn
 (common-lisp:defun batch-get-security-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-control-ids)
   (common-lisp:declare (common-lisp:ignorable security-control-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-security-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/securityControls/batchGet"
                                                        "BatchGetSecurityControls"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-security-controls))
(common-lisp:progn
 (common-lisp:defun batch-get-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-association-ids)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-association-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/associations/batchGet"
                                                        "BatchGetStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun batch-import-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key findings)
   (common-lisp:declare (common-lisp:ignorable findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-import-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings/import"
                                                        "BatchImportFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-import-findings))
(common-lisp:progn
 (common-lisp:defun batch-update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-identifiers note severity
                     verification-state confidence criticality types
                     user-defined-fields workflow related-findings)
   (common-lisp:declare
    (common-lisp:ignorable finding-identifiers note severity verification-state
     confidence criticality types user-defined-fields workflow
     related-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findings/batchupdate"
                                                        "BatchUpdateFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-findings))
(common-lisp:progn
 (common-lisp:defun batch-update-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-association-updates)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-association-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-update-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/associations"
                                                        "BatchUpdateStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun create-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description id)
   (common-lisp:declare (common-lisp:ignorable name description id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/actionTargets"
                                                        "CreateActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-action-target))
(common-lisp:progn
 (common-lisp:defun create-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region-linking-mode regions)
   (common-lisp:declare (common-lisp:ignorable region-linking-mode regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findingAggregator/create"
                                                        "CreateFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun create-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name filters group-by-attribute)
   (common-lisp:declare
    (common-lisp:ignorable name filters group-by-attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/insights"
                                                        "CreateInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-insight))
(common-lisp:progn
 (common-lisp:defun create-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-details)
   (common-lisp:declare (common-lisp:ignorable account-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members"
                                                        "CreateMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-members))
(common-lisp:progn
 (common-lisp:defun decline-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decline-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/decline"
                                                        "DeclineInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decline-invitations))
(common-lisp:progn
 (common-lisp:defun delete-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arn)
   (common-lisp:declare (common-lisp:ignorable action-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actionTargets/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'action-target-arn)))
                                                        "DeleteActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-action-target))
(common-lisp:progn
 (common-lisp:defun delete-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:declare (common-lisp:ignorable finding-aggregator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingAggregator/delete/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'finding-aggregator-arn)))
                                                        "DeleteFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun delete-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn)
   (common-lisp:declare (common-lisp:ignorable insight-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "DeleteInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-insight))
(common-lisp:progn
 (common-lisp:defun delete-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/invitations/delete"
                                                        "DeleteInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-invitations))
(common-lisp:progn
 (common-lisp:defun delete-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/delete"
                                                        "DeleteMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-members))
(common-lisp:progn
 (common-lisp:defun describe-action-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arns next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable action-target-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-action-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/actionTargets/get"
                                                        "DescribeActionTargets"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-action-targets))
(common-lisp:progn
 (common-lisp:defun describe-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-arn)
   (common-lisp:declare (common-lisp:ignorable hub-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/accounts"
                                                        "DescribeHub"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hub))
(common-lisp:progn
 (common-lisp:defun describe-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/organization/configuration" :protocol
                                :rest-json :operation
                                "DescribeOrganizationConfiguration" :params
                                `(("Action"
                                   ,@"DescribeOrganizationConfiguration")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-organization-configuration))
(common-lisp:progn
 (common-lisp:defun describe-products
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results product-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results product-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-products-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/products"
                                                        "DescribeProducts"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-products))
(common-lisp:progn
 (common-lisp:defun describe-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/standards"
                                                        "DescribeStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-standards))
(common-lisp:progn
 (common-lisp:defun describe-standards-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-standards-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/standards/controls/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'standards-subscription-arn)))
                                                        "DescribeStandardsControls"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-standards-controls))
(common-lisp:progn
 (common-lisp:defun disable-import-findings-for-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-subscription-arn)
   (common-lisp:declare (common-lisp:ignorable product-subscription-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-import-findings-for-product-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/productSubscriptions/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'product-subscription-arn)))
                                                        "DisableImportFindingsForProduct"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-import-findings-for-product))
(common-lisp:progn
 (common-lisp:defun disable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/admin/disable"
                                                        "DisableOrganizationAdminAccount"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun disable-security-hub ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "DELETE" :path
                                "/accounts" :protocol :rest-json :operation
                                "DisableSecurityHub" :params
                                `(("Action" ,@"DisableSecurityHub")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-security-hub))
(common-lisp:progn
 (common-lisp:defun disassociate-from-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "POST" :path
                                "/administrator/disassociate" :protocol
                                :rest-json :operation
                                "DisassociateFromAdministratorAccount" :params
                                `(("Action"
                                   ,@"DisassociateFromAdministratorAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-administrator-account))
(common-lisp:progn
 (common-lisp:defun disassociate-from-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "POST" :path
                                "/master/disassociate" :protocol :rest-json
                                :operation "DisassociateFromMasterAccount"
                                :params
                                `(("Action" ,@"DisassociateFromMasterAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disassociate-from-master-account))
(common-lisp:progn
 (common-lisp:defun disassociate-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/disassociate"
                                                        "DisassociateMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-members))
(common-lisp:progn
 (common-lisp:defun enable-import-findings-for-product
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key product-arn)
   (common-lisp:declare (common-lisp:ignorable product-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-import-findings-for-product-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/productSubscriptions"
                                                        "EnableImportFindingsForProduct"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-import-findings-for-product))
(common-lisp:progn
 (common-lisp:defun enable-organization-admin-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-account-id)
   (common-lisp:declare (common-lisp:ignorable admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-organization-admin-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/admin/enable"
                                                        "EnableOrganizationAdminAccount"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-organization-admin-account))
(common-lisp:progn
 (common-lisp:defun enable-security-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags enable-default-standards
                     control-finding-generator)
   (common-lisp:declare
    (common-lisp:ignorable tags enable-default-standards
     control-finding-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-security-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/accounts"
                                                        "EnableSecurityHub"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-security-hub))
(common-lisp:progn
 (common-lisp:defun get-administrator-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/administrator" :protocol :rest-json
                                :operation "GetAdministratorAccount" :params
                                `(("Action" ,@"GetAdministratorAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-administrator-account))
(common-lisp:progn
 (common-lisp:defun get-enabled-standards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-subscription-arns next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-subscription-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-enabled-standards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/standards/get"
                                                        "GetEnabledStandards"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-enabled-standards))
(common-lisp:progn
 (common-lisp:defun get-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn)
   (common-lisp:declare (common-lisp:ignorable finding-aggregator-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-aggregator-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingAggregator/get/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'finding-aggregator-arn)))
                                                        "GetFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun get-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters sort-criteria next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters sort-criteria next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/findings"
                                                        "GetFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings))
(common-lisp:progn
 (common-lisp:defun get-insight-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn)
   (common-lisp:declare (common-lisp:ignorable insight-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/results/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "GetInsightResults"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insight-results))
(common-lisp:progn
 (common-lisp:defun get-insights
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arns next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable insight-arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insights-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/insights/get"
                                                        "GetInsights"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insights))
(common-lisp:progn
 (common-lisp:defun get-invitations-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/invitations/count" :protocol :rest-json
                                :operation "GetInvitationsCount" :params
                                `(("Action" ,@"GetInvitationsCount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-invitations-count))
(common-lisp:progn
 (common-lisp:defun get-master-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securityhub-request :method "GET" :path
                                "/master" :protocol :rest-json :operation
                                "GetMasterAccount" :params
                                `(("Action" ,@"GetMasterAccount")
                                  ("Version" ,@"2018-10-26"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-master-account))
(common-lisp:progn
 (common-lisp:defun get-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/get"
                                                        "GetMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-members))
(common-lisp:progn
 (common-lisp:defun invite-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-ids)
   (common-lisp:declare (common-lisp:ignorable account-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invite-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/members/invite"
                                                        "InviteMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'invite-members))
(common-lisp:progn
 (common-lisp:defun list-enabled-products-for-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-enabled-products-for-import-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/productSubscriptions"
                                                        "ListEnabledProductsForImport"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-enabled-products-for-import))
(common-lisp:progn
 (common-lisp:defun list-finding-aggregators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-finding-aggregators-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/findingAggregator/list"
                                                        "ListFindingAggregators"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-finding-aggregators))
(common-lisp:progn
 (common-lisp:defun list-invitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-invitations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/invitations"
                                                        "ListInvitations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-invitations))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key only-associated max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable only-associated max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/members"
                                                        "ListMembers"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-organization-admin-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-admin-accounts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/organization/admin"
                                                        "ListOrganizationAdminAccounts"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-organization-admin-accounts))
(common-lisp:progn
 (common-lisp:defun list-security-control-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable standards-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-security-control-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/securityControls/definitions"
                                                        "ListSecurityControlDefinitions"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-control-definitions))
(common-lisp:progn
 (common-lisp:defun list-standards-control-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-control-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable security-control-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-standards-control-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/associations"
                                                        "ListStandardsControlAssociations"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-standards-control-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-action-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-target-arn name description)
   (common-lisp:declare
    (common-lisp:ignorable action-target-arn name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-action-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/actionTargets/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'action-target-arn)))
                                                        "UpdateActionTarget"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-action-target))
(common-lisp:progn
 (common-lisp:defun update-finding-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-aggregator-arn
                     region-linking-mode regions)
   (common-lisp:declare
    (common-lisp:ignorable finding-aggregator-arn region-linking-mode regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-finding-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findingAggregator/update"
                                                        "UpdateFindingAggregator"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-finding-aggregator))
(common-lisp:progn
 (common-lisp:defun update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters note record-state)
   (common-lisp:declare (common-lisp:ignorable filters note record-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/findings"
                                                        "UpdateFindings"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings))
(common-lisp:progn
 (common-lisp:defun update-insight
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key insight-arn name filters
                     group-by-attribute)
   (common-lisp:declare
    (common-lisp:ignorable insight-arn name filters group-by-attribute))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-insight-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/insights/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'insight-arn)))
                                                        "UpdateInsight"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-insight))
(common-lisp:progn
 (common-lisp:defun update-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable auto-enable-standards)
   (common-lisp:declare
    (common-lisp:ignorable auto-enable auto-enable-standards))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/organization/configuration"
                                                        "UpdateOrganizationConfiguration"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-organization-configuration))
(common-lisp:progn
 (common-lisp:defun update-security-hub-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable-controls
                     control-finding-generator)
   (common-lisp:declare
    (common-lisp:ignorable auto-enable-controls control-finding-generator))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-security-hub-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/accounts"
                                                        "UpdateSecurityHubConfiguration"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-security-hub-configuration))
(common-lisp:progn
 (common-lisp:defun update-standards-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key standards-control-arn control-status
                     disabled-reason)
   (common-lisp:declare
    (common-lisp:ignorable standards-control-arn control-status
     disabled-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-standards-control-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securityhub-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/standards/control/~A"
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'standards-control-arn)))
                                                        "UpdateStandardsControl"
                                                        "2018-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-standards-control))
