;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cleanrooms/api
  (:use)
  (:nicknames #:aws/cleanrooms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cleanrooms/api)
(common-lisp:progn
 (common-lisp:defclass cleanrooms-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cleanrooms"))
 (common-lisp:export 'cleanrooms-request))
(common-lisp:progn
 (common-lisp:define-condition cleanrooms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cleanrooms-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregate-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregate-column-"))
   (column-names (common-lisp:error ":columnnames is required") :type
    (common-lisp:or aggregate-column-column-names-list common-lisp:null))
   (function (common-lisp:error ":function is required") :type
    (common-lisp:or aggregate-function-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregate-column 'make-aggregate-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "columnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-column-column-names-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-aggregate-column-column-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregate-function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-constraint (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-constraint-"))
   (column-name (common-lisp:error ":columnname is required") :type
    (common-lisp:or analysis-rule-column-name common-lisp:null))
   (minimum (common-lisp:error ":minimum is required") :type
    (common-lisp:or aggregation-constraint-minimum-integer common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or aggregation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-constraint 'make-aggregation-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   common-lisp:nil))
(common-lisp:deftype aggregation-constraint-minimum-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype aggregation-constraints ()
   '(trivial-types:proper-list aggregation-constraint))
 (common-lisp:defun |make-aggregation-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-column-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-allowed-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-rule-"))
   (collaboration-id (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or analysis-rule-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or analysis-rule-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'analysis-rule 'make-analysis-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-rule-aggregation (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-rule-aggregation-"))
   (aggregate-columns (common-lisp:error ":aggregatecolumns is required") :type
    (common-lisp:or analysis-rule-aggregation-aggregate-columns-list
                    common-lisp:null))
   (join-columns (common-lisp:error ":joincolumns is required") :type
    (common-lisp:or analysis-rule-column-list common-lisp:null))
   (join-required common-lisp:nil :type
    (common-lisp:or join-required-option common-lisp:null))
   (dimension-columns (common-lisp:error ":dimensioncolumns is required") :type
    (common-lisp:or analysis-rule-column-list common-lisp:null))
   (scalar-functions (common-lisp:error ":scalarfunctions is required") :type
    (common-lisp:or scalar-functions-list common-lisp:null))
   (output-constraints (common-lisp:error ":outputconstraints is required")
    :type (common-lisp:or aggregation-constraints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-aggregation
                    'make-analysis-rule-aggregation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-columns))
      (common-lisp:list
       (common-lisp:cons "aggregateColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-required))
      (common-lisp:list
       (common-lisp:cons "joinRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-columns))
      (common-lisp:list
       (common-lisp:cons "dimensionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-functions))
      (common-lisp:list
       (common-lisp:cons "scalarFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-constraints))
      (common-lisp:list
       (common-lisp:cons "outputConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-aggregation-aggregate-columns-list ()
   '(trivial-types:proper-list aggregate-column))
 (common-lisp:defun |make-analysis-rule-aggregation-aggregate-columns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-column-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-analysis-rule-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-rule-column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-rule-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-rule-list-"))
   (join-columns (common-lisp:error ":joincolumns is required") :type
    (common-lisp:or analysis-rule-list-join-columns-list common-lisp:null))
   (list-columns (common-lisp:error ":listcolumns is required") :type
    (common-lisp:or analysis-rule-column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-list 'make-analysis-rule-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-columns))
      (common-lisp:list
       (common-lisp:cons "listColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-list-join-columns-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-analysis-rule-list-join-columns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-rule-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-rule-policy-"))
   (v1 common-lisp:nil :type
    (common-lisp:or analysis-rule-policy-v1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy 'make-analysis-rule-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analysis-rule-policy-v1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-analysis-rule-policy-v1-"))
   (list common-lisp:nil :type
    (common-lisp:or analysis-rule-list common-lisp:null))
   (aggregation common-lisp:nil :type
    (common-lisp:or analysis-rule-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy-v1 'make-analysis-rule-policy-v1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-rule-type-list ()
   '(trivial-types:proper-list analysis-rule-type))
 (common-lisp:defun |make-analysis-rule-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-schema-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-schema-error-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-error 'make-batch-get-schema-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-schema-error-list ()
   '(trivial-types:proper-list batch-get-schema-error))
 (common-lisp:defun |make-batch-get-schema-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-get-schema-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-schema-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (names (common-lisp:error ":names is required") :type
    (common-lisp:or table-alias-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-input 'make-batch-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-schema-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-schema-output-"))
   (schemas (common-lisp:error ":schemas is required") :type
    (common-lisp:or schema-list common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-get-schema-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-output 'make-batch-get-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (collaboration (:copier common-lisp:nil)
      (:conc-name "struct-shape-collaboration-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or collaboration-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or collaboration-description common-lisp:null))
   (creator-account-id (common-lisp:error ":creatoraccountid is required")
    :type (common-lisp:or account-id common-lisp:null))
   (creator-display-name (common-lisp:error ":creatordisplayname is required")
    :type (common-lisp:or display-name common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (member-status (common-lisp:error ":memberstatus is required") :type
    (common-lisp:or member-status common-lisp:null))
   (membership-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (membership-arn common-lisp:nil :type
    (common-lisp:or membership-arn common-lisp:null))
   (data-encryption-metadata common-lisp:nil :type
    (common-lisp:or data-encryption-metadata common-lisp:null))
   (query-log-status (common-lisp:error ":querylogstatus is required") :type
    (common-lisp:or collaboration-query-log-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'collaboration 'make-collaboration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collaboration))
   common-lisp:nil))
(common-lisp:deftype collaboration-arn () 'common-lisp:string)
(common-lisp:deftype collaboration-description () 'common-lisp:string)
(common-lisp:deftype collaboration-identifier () 'common-lisp:string)
(common-lisp:deftype collaboration-name () 'common-lisp:string)
(common-lisp:deftype collaboration-query-log-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (collaboration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-collaboration-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or collaboration-name common-lisp:null))
   (creator-account-id (common-lisp:error ":creatoraccountid is required")
    :type (common-lisp:or account-id common-lisp:null))
   (creator-display-name (common-lisp:error ":creatordisplayname is required")
    :type (common-lisp:or display-name common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (member-status (common-lisp:error ":memberstatus is required") :type
    (common-lisp:or member-status common-lisp:null))
   (membership-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (membership-arn common-lisp:nil :type
    (common-lisp:or membership-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'collaboration-summary 'make-collaboration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-summary-list ()
   '(trivial-types:proper-list collaboration-summary))
 (common-lisp:defun |make-collaboration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collaboration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column (:copier common-lisp:nil) (:conc-name "struct-shape-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or column-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or column-type-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or configured-table-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or display-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null))
   (table-reference (common-lisp:error ":tablereference is required") :type
    (common-lisp:or table-reference common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (analysis-rule-types (common-lisp:error ":analysisruletypes is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type-list common-lisp:null))
   (analysis-method (common-lisp:error ":analysismethod is required") :type
    (common-lisp:or analysis-method common-lisp:null))
   (allowed-columns (common-lisp:error ":allowedcolumns is required") :type
    (common-lisp:or allowed-column-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table 'make-configured-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configured-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-analysis-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-analysis-rule-"))
   (configured-table-id (common-lisp:error ":configuredtableid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (configured-table-arn (common-lisp:error ":configuredtablearn is required")
    :type (common-lisp:or configured-table-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or configured-table-analysis-rule-policy common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or configured-table-analysis-rule-type common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule
                    'make-configured-table-analysis-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-analysis-rule-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-analysis-rule-policy-"))
   (v1 common-lisp:nil :type
    (common-lisp:or configured-table-analysis-rule-policy-v1
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy
                    'make-configured-table-analysis-rule-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-analysis-rule-policy-v1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-analysis-rule-policy-v1-"))
   (list common-lisp:nil :type
    (common-lisp:or analysis-rule-list common-lisp:null))
   (aggregation common-lisp:nil :type
    (common-lisp:or analysis-rule-aggregation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy-v1
                    'make-configured-table-analysis-rule-policy-v1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype configured-table-analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configured-table-analysis-rule-type-list ()
   '(trivial-types:proper-list configured-table-analysis-rule-type))
 (common-lisp:defun |make-configured-table-analysis-rule-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-association-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or configured-table-association-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (configured-table-id (common-lisp:error ":configuredtableid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (configured-table-arn (common-lisp:error ":configuredtablearn is required")
    :type (common-lisp:or configured-table-arn common-lisp:null))
   (membership-id (common-lisp:error ":membershipid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (membership-arn (common-lisp:error ":membershiparn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-association
                    'make-configured-table-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   common-lisp:nil))
(common-lisp:deftype configured-table-association-arn () 'common-lisp:string)
(common-lisp:deftype configured-table-association-identifier ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-association-summary-"))
   (configured-table-id (common-lisp:error ":configuredtableid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (membership-id (common-lisp:error ":membershipid is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (membership-arn (common-lisp:error ":membershiparn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or configured-table-association-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-association-summary
                    'make-configured-table-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-association-summary-list ()
   '(trivial-types:proper-list configured-table-association-summary))
 (common-lisp:defun |make-configured-table-association-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configured-table-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-configured-table-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or configured-table-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or display-name common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (analysis-rule-types (common-lisp:error ":analysisruletypes is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type-list common-lisp:null))
   (analysis-method (common-lisp:error ":analysismethod is required") :type
    (common-lisp:or analysis-method common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configured-table-summary 'make-configured-table-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-summary-list ()
   '(trivial-types:proper-list configured-table-summary))
 (common-lisp:defun |make-configured-table-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type
                    'conflict-exception-reason)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-collaboration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-collaboration-input-"))
   (members (common-lisp:error ":members is required") :type
    (common-lisp:or member-list common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or collaboration-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or collaboration-description common-lisp:null))
   (creator-member-abilities
    (common-lisp:error ":creatormemberabilities is required") :type
    (common-lisp:or member-abilities common-lisp:null))
   (creator-display-name (common-lisp:error ":creatordisplayname is required")
    :type (common-lisp:or display-name common-lisp:null))
   (data-encryption-metadata common-lisp:nil :type
    (common-lisp:or data-encryption-metadata common-lisp:null))
   (query-log-status (common-lisp:error ":querylogstatus is required") :type
    (common-lisp:or collaboration-query-log-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-input
                    'make-create-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-member-abilities))
      (common-lisp:list
       (common-lisp:cons "creatorMemberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-collaboration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-collaboration-output-"))
   (collaboration (common-lisp:error ":collaboration is required") :type
    (common-lisp:or collaboration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-output
                    'make-create-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-analysis-rule-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configured-table-analysis-rule-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (analysis-rule-type (common-lisp:error ":analysisruletype is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type common-lisp:null))
   (analysis-rule-policy (common-lisp:error ":analysisrulepolicy is required")
    :type
    (common-lisp:or configured-table-analysis-rule-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-input
                    'make-create-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-type))
      (common-lisp:list
       (common-lisp:cons "analysisRuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-analysis-rule-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-configured-table-analysis-rule-output-"))
   (analysis-rule (common-lisp:error ":analysisrule is required") :type
    (common-lisp:or configured-table-analysis-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-output
                    'make-create-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-association-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configured-table-association-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-input
                    'make-create-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-identifier))
      (common-lisp:list
       (common-lisp:cons "configuredTableIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-association-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configured-table-association-output-"))
   (configured-table-association
    (common-lisp:error ":configuredtableassociation is required") :type
    (common-lisp:or configured-table-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-output
                    'make-create-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configured-table-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or display-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null))
   (table-reference (common-lisp:error ":tablereference is required") :type
    (common-lisp:or table-reference common-lisp:null))
   (allowed-columns (common-lisp:error ":allowedcolumns is required") :type
    (common-lisp:or allowed-column-list common-lisp:null))
   (analysis-method (common-lisp:error ":analysismethod is required") :type
    (common-lisp:or analysis-method common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-input
                    'make-create-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-configured-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-configured-table-output-"))
   (configured-table (common-lisp:error ":configuredtable is required") :type
    (common-lisp:or configured-table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-output
                    'make-create-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-membership-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (query-log-status (common-lisp:error ":querylogstatus is required") :type
    (common-lisp:or membership-query-log-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-membership-input 'make-create-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-identifier))
      (common-lisp:list
       (common-lisp:cons "collaborationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-membership-output-"))
   (membership (common-lisp:error ":membership is required") :type
    (common-lisp:or membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-membership-output 'make-create-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-encryption-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-encryption-metadata-"))
   (allow-cleartext (common-lisp:error ":allowcleartext is required") :type
    (common-lisp:or boolean common-lisp:null))
   (allow-duplicates (common-lisp:error ":allowduplicates is required") :type
    (common-lisp:or boolean common-lisp:null))
   (allow-joins-on-columns-with-different-names
    (common-lisp:error ":allowjoinsoncolumnswithdifferentnames is required")
    :type (common-lisp:or boolean common-lisp:null))
   (preserve-nulls (common-lisp:error ":preservenulls is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-encryption-metadata 'make-data-encryption-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cleartext))
      (common-lisp:list
       (common-lisp:cons "allowCleartext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-duplicates))
      (common-lisp:list
       (common-lisp:cons "allowDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-joins-on-columns-with-different-names))
      (common-lisp:list
       (common-lisp:cons "allowJoinsOnColumnsWithDifferentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preserve-nulls))
      (common-lisp:list
       (common-lisp:cons "preserveNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-collaboration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-collaboration-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-input
                    'make-delete-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-collaboration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-collaboration-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-output
                    'make-delete-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-analysis-rule-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configured-table-analysis-rule-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (analysis-rule-type (common-lisp:error ":analysisruletype is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-input
                    'make-delete-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-analysis-rule-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-configured-table-analysis-rule-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-output
                    'make-delete-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-association-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configured-table-association-input-"))
   (configured-table-association-identifier
    (common-lisp:error ":configuredtableassociationidentifier is required")
    :type
    (common-lisp:or configured-table-association-identifier common-lisp:null))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-input
                    'make-delete-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-association-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configured-table-association-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-output
                    'make-delete-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configured-table-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-input
                    'make-delete-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-configured-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-configured-table-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-output
                    'make-delete-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-member-input 'make-delete-member-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-member-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-member-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-member-output 'make-delete-member-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-membership-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-membership-input 'make-delete-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-membership-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-membership-output 'make-delete-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype filterable-member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-collaboration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-collaboration-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-input 'make-get-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-collaboration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-collaboration-output-"))
   (collaboration (common-lisp:error ":collaboration is required") :type
    (common-lisp:or collaboration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-output 'make-get-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-analysis-rule-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-analysis-rule-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (analysis-rule-type (common-lisp:error ":analysisruletype is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-input
                    'make-get-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-analysis-rule-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-analysis-rule-output-"))
   (analysis-rule (common-lisp:error ":analysisrule is required") :type
    (common-lisp:or configured-table-analysis-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-output
                    'make-get-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-association-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-association-input-"))
   (configured-table-association-identifier
    (common-lisp:error ":configuredtableassociationidentifier is required")
    :type
    (common-lisp:or configured-table-association-identifier common-lisp:null))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-input
                    'make-get-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-association-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-association-output-"))
   (configured-table-association
    (common-lisp:error ":configuredtableassociation is required") :type
    (common-lisp:or configured-table-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-output
                    'make-get-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-input
                    'make-get-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-configured-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-configured-table-output-"))
   (configured-table (common-lisp:error ":configuredtable is required") :type
    (common-lisp:or configured-table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-output
                    'make-get-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-membership-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-membership-input 'make-get-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-membership-output-"))
   (membership (common-lisp:error ":membership is required") :type
    (common-lisp:or membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-membership-output 'make-get-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protected-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protected-query-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (protected-query-identifier
    (common-lisp:error ":protectedqueryidentifier is required") :type
    (common-lisp:or protected-query-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-input
                    'make-get-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-protected-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-protected-query-output-"))
   (protected-query (common-lisp:error ":protectedquery is required") :type
    (common-lisp:or protected-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-output
                    'make-get-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-analysis-rule-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-analysis-rule-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or analysis-rule-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-input
                    'make-get-schema-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-analysis-rule-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-analysis-rule-output-"))
   (analysis-rule (common-lisp:error ":analysisrule is required") :type
    (common-lisp:or analysis-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-output
                    'make-get-schema-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-output-"))
   (schema (common-lisp:error ":schema is required") :type
    (common-lisp:or schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-output 'make-get-schema-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-output))
   common-lisp:nil))
(common-lisp:deftype glue-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glue-table-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-table-reference-"))
   (table-name (common-lisp:error ":tablename is required") :type
    (common-lisp:or glue-resource-name common-lisp:null))
   (database-name (common-lisp:error ":databasename is required") :type
    (common-lisp:or glue-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-table-reference 'make-glue-table-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-table-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype join-required-option () 'common-lisp:string)
(common-lisp:deftype key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-collaborations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-collaborations-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (member-status common-lisp:nil :type
    (common-lisp:or filterable-member-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-input
                    'make-list-collaborations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-collaborations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-collaborations-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (collaboration-list (common-lisp:error ":collaborationlist is required")
    :type (common-lisp:or collaboration-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-output
                    'make-list-collaborations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-list))
      (common-lisp:list
       (common-lisp:cons "collaborationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configured-table-associations-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configured-table-associations-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-input
                    'make-list-configured-table-associations-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configured-table-associations-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configured-table-associations-output-"))
   (configured-table-association-summaries
    (common-lisp:error ":configuredtableassociationsummaries is required")
    :type
    (common-lisp:or configured-table-association-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-output
                    'make-list-configured-table-associations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configured-tables-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configured-tables-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-input
                    'make-list-configured-tables-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configured-tables-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configured-tables-output-"))
   (configured-table-summaries
    (common-lisp:error ":configuredtablesummaries is required") :type
    (common-lisp:or configured-table-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-output
                    'make-list-configured-tables-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-input 'make-list-members-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-members-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-members-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (member-summaries (common-lisp:error ":membersummaries is required") :type
    (common-lisp:or member-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-members-output 'make-list-members-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-summaries))
      (common-lisp:list
       (common-lisp:cons "memberSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-memberships-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-memberships-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or membership-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-memberships-input 'make-list-memberships-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-memberships-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-memberships-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (membership-summaries (common-lisp:error ":membershipsummaries is required")
    :type (common-lisp:or membership-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-memberships-output 'make-list-memberships-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'membership-summaries))
      (common-lisp:list
       (common-lisp:cons "membershipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-protected-queries-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-protected-queries-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or protected-query-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-input
                    'make-list-protected-queries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-protected-queries-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-protected-queries-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (protected-queries (common-lisp:error ":protectedqueries is required") :type
    (common-lisp:or protected-query-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-output
                    'make-list-protected-queries-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-queries))
      (common-lisp:list
       (common-lisp:cons "protectedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (schema-type common-lisp:nil :type
    (common-lisp:or schema-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-input 'make-list-schemas-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-output-"))
   (schema-summaries (common-lisp:error ":schemasummaries is required") :type
    (common-lisp:or schema-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-output 'make-list-schemas-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-summaries))
      (common-lisp:list
       (common-lisp:cons "schemaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype member-abilities ()
   '(trivial-types:proper-list member-ability))
 (common-lisp:defun |make-member-abilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-ability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-ability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype member-list ()
   '(trivial-types:proper-list member-specification))
 (common-lisp:defun |make-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (member-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-specification-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (member-abilities (common-lisp:error ":memberabilities is required") :type
    (common-lisp:or member-abilities common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or display-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-specification 'make-member-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-specification))
   common-lisp:nil))
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (member-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-summary-"))
   (account-id (common-lisp:error ":accountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or member-status common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or display-name common-lisp:null))
   (abilities (common-lisp:error ":abilities is required") :type
    (common-lisp:or member-abilities common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (membership-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (membership-arn common-lisp:nil :type
    (common-lisp:or membership-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'member-summary 'make-member-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abilities))
      (common-lisp:list
       (common-lisp:cons "abilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-summary-list ()
   '(trivial-types:proper-list member-summary))
 (common-lisp:defun |make-member-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-membership-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (collaboration-arn (common-lisp:error ":collaborationarn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (collaboration-id (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (collaboration-creator-account-id
    (common-lisp:error ":collaborationcreatoraccountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (collaboration-creator-display-name
    (common-lisp:error ":collaborationcreatordisplayname is required") :type
    (common-lisp:or display-name common-lisp:null))
   (collaboration-name (common-lisp:error ":collaborationname is required")
    :type (common-lisp:or collaboration-name common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or membership-status common-lisp:null))
   (member-abilities (common-lisp:error ":memberabilities is required") :type
    (common-lisp:or member-abilities common-lisp:null))
   (query-log-status (common-lisp:error ":querylogstatus is required") :type
    (common-lisp:or membership-query-log-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'membership 'make-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership))
   common-lisp:nil))
(common-lisp:deftype membership-arn () 'common-lisp:string)
(common-lisp:deftype membership-identifier () 'common-lisp:string)
(common-lisp:deftype membership-query-log-status () 'common-lisp:string)
(common-lisp:deftype membership-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (membership-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-membership-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (collaboration-arn (common-lisp:error ":collaborationarn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (collaboration-id (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (collaboration-creator-account-id
    (common-lisp:error ":collaborationcreatoraccountid is required") :type
    (common-lisp:or account-id common-lisp:null))
   (collaboration-creator-display-name
    (common-lisp:error ":collaborationcreatordisplayname is required") :type
    (common-lisp:or display-name common-lisp:null))
   (collaboration-name (common-lisp:error ":collaborationname is required")
    :type (common-lisp:or collaboration-name common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or membership-status common-lisp:null))
   (member-abilities (common-lisp:error ":memberabilities is required") :type
    (common-lisp:or member-abilities common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'membership-summary 'make-membership-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype membership-summary-list ()
   '(trivial-types:proper-list membership-summary))
 (common-lisp:defun |make-membership-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list membership-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (membership-id (common-lisp:error ":membershipid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (membership-arn (common-lisp:error ":membershiparn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (sql-parameters (common-lisp:error ":sqlparameters is required") :type
    (common-lisp:or protected-query-sqlparameters common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or protected-query-status common-lisp:null))
   (result-configuration (common-lisp:error ":resultconfiguration is required")
    :type
    (common-lisp:or protected-query-result-configuration common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or protected-query-statistics common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or protected-query-result common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or protected-query-error common-lisp:null)))
 (common-lisp:export (common-lisp:list 'protected-query 'make-protected-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-error-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-error 'make-protected-query-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   common-lisp:nil))
(common-lisp:deftype protected-query-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-output-"))
   (s3 common-lisp:nil :type
    (common-lisp:or protected-query-s3output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-output 'make-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-output-configuration-"))
   (s3 common-lisp:nil :type
    (common-lisp:or protected-query-s3output-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-output-configuration
                    'make-protected-query-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-result-"))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or protected-query-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-result 'make-protected-query-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-result-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-result-configuration-"))
   (output-configuration (common-lisp:error ":outputconfiguration is required")
    :type
    (common-lisp:or protected-query-output-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-result-configuration
                    'make-protected-query-result-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-s3output (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-s3output-"))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output 'make-protected-query-s3output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-s3output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-s3output-configuration-"))
   (result-format (common-lisp:error ":resultformat is required") :type
    (common-lisp:or result-format common-lisp:null))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or protected-query-s3output-configuration-bucket-string
                    common-lisp:null))
   (key-prefix common-lisp:nil :type
    (common-lisp:or key-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output-configuration
                    'make-protected-query-s3output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-format))
      (common-lisp:list
       (common-lisp:cons "resultFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   common-lisp:nil))
(common-lisp:deftype protected-query-s3output-configuration-bucket-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-sqlparameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-sqlparameters-"))
   (query-string (common-lisp:error ":querystring is required") :type
    (common-lisp:or protected-query-sqlparameters-query-string-string
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-sqlparameters
                    'make-protected-query-sqlparameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   common-lisp:nil))
(common-lisp:deftype protected-query-sqlparameters-query-string-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-statistics-"))
   (total-duration-in-millis common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-statistics
                    'make-protected-query-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-duration-in-millis))
      (common-lisp:list
       (common-lisp:cons "totalDurationInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   common-lisp:nil))
(common-lisp:deftype protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protected-query-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-protected-query-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (membership-id (common-lisp:error ":membershipid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (membership-arn (common-lisp:error ":membershiparn is required") :type
    (common-lisp:or membership-arn common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or protected-query-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protected-query-summary 'make-protected-query-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-query-summary-list ()
   '(trivial-types:proper-list protected-query-summary))
 (common-lisp:defun |make-protected-query-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-query-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protected-query-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result-format () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype scalar-functions () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scalar-functions-list ()
   '(trivial-types:proper-list scalar-functions))
 (common-lisp:defun |make-scalar-functions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scalar-functions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (schema (:copier common-lisp:nil) (:conc-name "struct-shape-schema-"))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or column-list common-lisp:null))
   (partition-keys (common-lisp:error ":partitionkeys is required") :type
    (common-lisp:or column-list common-lisp:null))
   (analysis-rule-types (common-lisp:error ":analysisruletypes is required")
    :type (common-lisp:or analysis-rule-type-list common-lisp:null))
   (analysis-method common-lisp:nil :type
    (common-lisp:or analysis-method common-lisp:null))
   (creator-account-id (common-lisp:error ":creatoraccountid is required")
    :type (common-lisp:or account-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (collaboration-id (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (collaboration-arn (common-lisp:error ":collaborationarn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or table-description common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or schema-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema 'make-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "partitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-list () '(trivial-types:proper-list schema))
 (common-lisp:defun |make-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or table-alias common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or schema-type common-lisp:null))
   (creator-account-id (common-lisp:error ":creatoraccountid is required")
    :type (common-lisp:or account-id common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (collaboration-id (common-lisp:error ":collaborationid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (collaboration-arn (common-lisp:error ":collaborationarn is required") :type
    (common-lisp:or collaboration-arn common-lisp:null))
   (analysis-rule-types (common-lisp:error ":analysisruletypes is required")
    :type (common-lisp:or analysis-rule-type-list common-lisp:null))
   (analysis-method common-lisp:nil :type
    (common-lisp:or analysis-method common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema-summary 'make-schema-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-summary-list ()
   '(trivial-types:proper-list schema-summary))
 (common-lisp:defun |make-schema-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-name :initarg :quota-name :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-name)
      (quota-value :initarg :quota-value :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-value)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-name
                    'service-quota-exceeded-exception-quota-value)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-protected-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-protected-query-input-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or protected-query-type common-lisp:null))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (sql-parameters (common-lisp:error ":sqlparameters is required") :type
    (common-lisp:or protected-query-sqlparameters common-lisp:null))
   (result-configuration (common-lisp:error ":resultconfiguration is required")
    :type
    (common-lisp:or protected-query-result-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-input
                    'make-start-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-protected-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-protected-query-output-"))
   (protected-query (common-lisp:error ":protectedquery is required") :type
    (common-lisp:or protected-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-output
                    'make-start-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype table-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-alias-list ()
   '(trivial-types:proper-list table-alias))
 (common-lisp:defun |make-table-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-reference-"))
   (glue common-lisp:nil :type
    (common-lisp:or glue-table-reference common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-reference 'make-table-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue))
      (common-lisp:list
       (common-lisp:cons "glue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-reference))
   common-lisp:nil))
(common-lisp:deftype target-protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-collaboration-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-collaboration-input-"))
   (collaboration-identifier
    (common-lisp:error ":collaborationidentifier is required") :type
    (common-lisp:or collaboration-identifier common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or collaboration-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or collaboration-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-input
                    'make-update-collaboration-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-collaboration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-collaboration-output-"))
   (collaboration (common-lisp:error ":collaboration is required") :type
    (common-lisp:or collaboration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-output
                    'make-update-collaboration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-analysis-rule-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configured-table-analysis-rule-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (analysis-rule-type (common-lisp:error ":analysisruletype is required")
    :type
    (common-lisp:or configured-table-analysis-rule-type common-lisp:null))
   (analysis-rule-policy (common-lisp:error ":analysisrulepolicy is required")
    :type
    (common-lisp:or configured-table-analysis-rule-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-input
                    'make-update-configured-table-analysis-rule-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-analysis-rule-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-configured-table-analysis-rule-output-"))
   (analysis-rule (common-lisp:error ":analysisrule is required") :type
    (common-lisp:or configured-table-analysis-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-output
                    'make-update-configured-table-analysis-rule-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-association-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configured-table-association-input-"))
   (configured-table-association-identifier
    (common-lisp:error ":configuredtableassociationidentifier is required")
    :type
    (common-lisp:or configured-table-association-identifier common-lisp:null))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-input
                    'make-update-configured-table-association-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-association-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configured-table-association-output-"))
   (configured-table-association
    (common-lisp:error ":configuredtableassociation is required") :type
    (common-lisp:or configured-table-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-output
                    'make-update-configured-table-association-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configured-table-input-"))
   (configured-table-identifier
    (common-lisp:error ":configuredtableidentifier is required") :type
    (common-lisp:or configured-table-identifier common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or display-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or table-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-input
                    'make-update-configured-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-configured-table-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-configured-table-output-"))
   (configured-table (common-lisp:error ":configuredtable is required") :type
    (common-lisp:or configured-table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-output
                    'make-update-configured-table-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-membership-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-membership-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (query-log-status common-lisp:nil :type
    (common-lisp:or membership-query-log-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-membership-input 'make-update-membership-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-membership-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-membership-output-"))
   (membership (common-lisp:error ":membership is required") :type
    (common-lisp:or membership common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-membership-output 'make-update-membership-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-protected-query-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-protected-query-input-"))
   (membership-identifier
    (common-lisp:error ":membershipidentifier is required") :type
    (common-lisp:or membership-identifier common-lisp:null))
   (protected-query-identifier
    (common-lisp:error ":protectedqueryidentifier is required") :type
    (common-lisp:or protected-query-identifier common-lisp:null))
   (target-status (common-lisp:error ":targetstatus is required") :type
    (common-lisp:or target-protected-query-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-input
                    'make-update-protected-query-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-protected-query-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-protected-query-output-"))
   (protected-query (common-lisp:error ":protectedquery is required") :type
    (common-lisp:or protected-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-output
                    'make-update-protected-query-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cleanrooms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier names)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/batch-schema"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "BatchGetSchema"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-schema))
(common-lisp:progn
 (common-lisp:defun create-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key members name description
                     creator-member-abilities creator-display-name
                     data-encryption-metadata query-log-status)
   (common-lisp:declare
    (common-lisp:ignorable members name description creator-member-abilities
     creator-display-name data-encryption-metadata query-log-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/collaborations"
                                                        "CreateCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-collaboration))
(common-lisp:progn
 (common-lisp:defun create-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description table-reference
                     allowed-columns analysis-method)
   (common-lisp:declare
    (common-lisp:ignorable name description table-reference allowed-columns
     analysis-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/configuredTables"
                                                        "CreateConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table))
(common-lisp:progn
 (common-lisp:defun create-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "CreateConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun create-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description membership-identifier
                     configured-table-identifier role-arn)
   (common-lisp:declare
    (common-lisp:ignorable name description membership-identifier
     configured-table-identifier role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreateConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table-association))
(common-lisp:progn
 (common-lisp:defun create-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier
                     query-log-status)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier query-log-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/memberships"
                                                        "CreateMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-membership))
(common-lisp:progn
 (common-lisp:defun delete-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "DeleteCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-collaboration))
(common-lisp:progn
 (common-lisp:defun delete-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "DeleteConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "DeleteConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "DeleteConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table-association))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier account-id)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/member/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'account-id))))
                                                        "DeleteMember"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun delete-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "DeleteMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-membership))
(common-lisp:progn
 (common-lisp:defun get-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "GetCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-collaboration))
(common-lisp:progn
 (common-lisp:defun get-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "GetConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table))
(common-lisp:progn
 (common-lisp:defun get-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "GetConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun get-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "GetConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table-association))
(common-lisp:progn
 (common-lisp:defun get-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "GetMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-membership))
(common-lisp:progn
 (common-lisp:defun get-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "GetProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protected-query))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSchema"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun get-schema-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name type)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-analysis-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type))))
                                                        "GetSchemaAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-analysis-rule))
(common-lisp:progn
 (common-lisp:defun list-collaborations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results member-status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results member-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collaborations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/collaborations"
                                                        "ListCollaborations"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-collaborations))
(common-lisp:progn
 (common-lisp:defun list-configured-table-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configured-table-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListConfiguredTableAssociations"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configured-table-associations))
(common-lisp:progn
 (common-lisp:defun list-configured-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configured-tables-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/configuredTables"
                                                        "ListConfiguredTables"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configured-tables))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListMembers"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-memberships-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/memberships"
                                                        "ListMemberships"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-memberships))
(common-lisp:progn
 (common-lisp:defun list-protected-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protected-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListProtectedQueries"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-protected-queries))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier schema-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier schema-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListSchemas"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun start-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type membership-identifier sql-parameters
                     result-configuration)
   (common-lisp:declare
    (common-lisp:ignorable type membership-identifier sql-parameters
     result-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "StartProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-protected-query))
(common-lisp:progn
 (common-lisp:defun update-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "UpdateCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-collaboration))
(common-lisp:progn
 (common-lisp:defun update-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "UpdateConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table))
(common-lisp:progn
 (common-lisp:defun update-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "UpdateConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun update-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier description role-arn)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier description role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "UpdateConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table-association))
(common-lisp:progn
 (common-lisp:defun update-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier query-log-status)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier query-log-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "UpdateMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-membership))
(common-lisp:progn
 (common-lisp:defun update-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier target-status)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier
     target-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "UpdateProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-protected-query))
