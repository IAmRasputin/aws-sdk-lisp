;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cleanrooms/api
  (:use)
  (:nicknames #:aws/cleanrooms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cleanrooms/api)
(common-lisp:progn
 (common-lisp:defclass cleanrooms-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cleanrooms" :protocol
                        :rest-json))
 (common-lisp:export 'cleanrooms-request))
(common-lisp:progn
 (common-lisp:define-condition cleanrooms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cleanrooms-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregate-column common-lisp:nil
                       ((function :initarg :|function| :type
                         (common-lisp:or aggregate-function-name
                                         common-lisp:null)
                         :accessor %aggregate-column-function :initform
                         (common-lisp:error ":function is required"))
                        (column-names :initarg :|columnNames| :type
                         (common-lisp:or aggregate-column-column-names-list
                                         common-lisp:null)
                         :accessor %aggregate-column-column-names :initform
                         (common-lisp:error ":columnnames is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregate-column 'make-aggregate-column))
 (common-lisp:defun make-aggregate-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function column-names)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "columnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-column-column-names-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-aggregate-column-column-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregate-function-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregation-constraint common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or aggregation-type common-lisp:null)
                         :accessor %aggregation-constraint-type :initform
                         (common-lisp:error ":type is required"))
                        (minimum :initarg :|minimum| :type
                         (common-lisp:or aggregation-constraint-minimum-integer
                                         common-lisp:null)
                         :accessor %aggregation-constraint-minimum :initform
                         (common-lisp:error ":minimum is required"))
                        (column-name :initarg :|columnName| :type
                         (common-lisp:or analysis-rule-column-name
                                         common-lisp:null)
                         :accessor %aggregation-constraint-column-name
                         :initform
                         (common-lisp:error ":columnname is required"))))
 (common-lisp:export
  (common-lisp:list 'aggregation-constraint 'make-aggregation-constraint))
 (common-lisp:defun make-aggregation-constraint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type minimum column-name)
   (common-lisp:apply #'common-lisp:make-instance 'aggregation-constraint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-constraint))
   common-lisp:nil))
(common-lisp:deftype aggregation-constraint-minimum-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype aggregation-constraints ()
   '(trivial-types:proper-list aggregation-constraint))
 (common-lisp:defun |make-aggregation-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregation-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-column-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-allowed-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-rule common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or analysis-rule-policy common-lisp:null)
                         :accessor %analysis-rule-policy :initform
                         (common-lisp:error ":policy is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-rule-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analysis-rule-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %analysis-rule-name :initform
                         (common-lisp:error ":name is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or analysis-rule-type common-lisp:null)
                         :accessor %analysis-rule-type :initform
                         (common-lisp:error ":type is required"))
                        (collaboration-id :initarg :|collaborationId| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor %analysis-rule-collaboration-id :initform
                         (common-lisp:error ":collaborationid is required"))))
 (common-lisp:export (common-lisp:list 'analysis-rule 'make-analysis-rule))
 (common-lisp:defun make-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy update-time create-time name type
                     collaboration-id)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-aggregation common-lisp:nil
                       ((output-constraints :initarg :|outputConstraints| :type
                         (common-lisp:or aggregation-constraints
                                         common-lisp:null)
                         :accessor
                         %analysis-rule-aggregation-output-constraints
                         :initform
                         (common-lisp:error ":outputconstraints is required"))
                        (scalar-functions :initarg :|scalarFunctions| :type
                         (common-lisp:or scalar-functions-list
                                         common-lisp:null)
                         :accessor %analysis-rule-aggregation-scalar-functions
                         :initform
                         (common-lisp:error ":scalarfunctions is required"))
                        (dimension-columns :initarg :|dimensionColumns| :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor %analysis-rule-aggregation-dimension-columns
                         :initform
                         (common-lisp:error ":dimensioncolumns is required"))
                        (join-required :initarg :|joinRequired| :type
                         (common-lisp:or join-required-option common-lisp:null)
                         :accessor %analysis-rule-aggregation-join-required
                         :initform common-lisp:nil)
                        (join-columns :initarg :|joinColumns| :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor %analysis-rule-aggregation-join-columns
                         :initform
                         (common-lisp:error ":joincolumns is required"))
                        (aggregate-columns :initarg :|aggregateColumns| :type
                         (common-lisp:or
                          analysis-rule-aggregation-aggregate-columns-list
                          common-lisp:null)
                         :accessor %analysis-rule-aggregation-aggregate-columns
                         :initform
                         (common-lisp:error ":aggregatecolumns is required"))))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-aggregation
                    'make-analysis-rule-aggregation))
 (common-lisp:defun make-analysis-rule-aggregation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-constraints scalar-functions
                     dimension-columns join-required join-columns
                     aggregate-columns)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-aggregation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-columns))
      (common-lisp:list
       (common-lisp:cons "aggregateColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-required))
      (common-lisp:list
       (common-lisp:cons "joinRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-columns))
      (common-lisp:list
       (common-lisp:cons "dimensionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalar-functions))
      (common-lisp:list
       (common-lisp:cons "scalarFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-constraints))
      (common-lisp:list
       (common-lisp:cons "outputConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-aggregation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-aggregation-aggregate-columns-list ()
   '(trivial-types:proper-list aggregate-column))
 (common-lisp:defun |make-analysis-rule-aggregation-aggregate-columns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-column-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-analysis-rule-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analysis-rule-column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analysis-rule-list common-lisp:nil
                       ((list-columns :initarg :|listColumns| :type
                         (common-lisp:or analysis-rule-column-list
                                         common-lisp:null)
                         :accessor %analysis-rule-list-list-columns :initform
                         (common-lisp:error ":listcolumns is required"))
                        (join-columns :initarg :|joinColumns| :type
                         (common-lisp:or analysis-rule-list-join-columns-list
                                         common-lisp:null)
                         :accessor %analysis-rule-list-join-columns :initform
                         (common-lisp:error ":joincolumns is required"))))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-list 'make-analysis-rule-list))
 (common-lisp:defun make-analysis-rule-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-columns join-columns)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-columns))
      (common-lisp:list
       (common-lisp:cons "joinColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-columns))
      (common-lisp:list
       (common-lisp:cons "listColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analysis-rule-list-join-columns-list ()
   '(trivial-types:proper-list analysis-rule-column-name))
 (common-lisp:defun |make-analysis-rule-list-join-columns-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analysis-rule-column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-policy common-lisp:nil
                       ((v1 :initarg :|v1| :type
                         (common-lisp:or analysis-rule-policy-v1
                                         common-lisp:null)
                         :accessor %analysis-rule-policy-v1 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy 'make-analysis-rule-policy))
 (common-lisp:defun make-analysis-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key v1)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analysis-rule-policy-v1 common-lisp:nil
                       ((aggregation :initarg :|aggregation| :type
                         (common-lisp:or analysis-rule-aggregation
                                         common-lisp:null)
                         :accessor %analysis-rule-policy-v1-aggregation
                         :initform common-lisp:nil)
                        (list :initarg :|list| :type
                         (common-lisp:or analysis-rule-list common-lisp:null)
                         :accessor %analysis-rule-policy-v1-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'analysis-rule-policy-v1 'make-analysis-rule-policy-v1))
 (common-lisp:defun make-analysis-rule-policy-v1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregation list)
   (common-lisp:apply #'common-lisp:make-instance 'analysis-rule-policy-v1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-rule-type-list ()
   '(trivial-types:proper-list analysis-rule-type))
 (common-lisp:defun |make-analysis-rule-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-get-schema-error-message :initform
                         (common-lisp:error ":message is required"))
                        (code :initarg :|code| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-get-schema-error-code :initform
                         (common-lisp:error ":code is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %batch-get-schema-error-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-error 'make-batch-get-schema-error))
 (common-lisp:defun make-batch-get-schema-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code name)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-schema-error-list ()
   '(trivial-types:proper-list batch-get-schema-error))
 (common-lisp:defun |make-batch-get-schema-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-get-schema-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-input common-lisp:nil
                       ((names :initarg :|names| :type
                         (common-lisp:or table-alias-list common-lisp:null)
                         :accessor %batch-get-schema-input-names :initform
                         (common-lisp:error ":names is required"))
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %batch-get-schema-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-input 'make-batch-get-schema-input))
 (common-lisp:defun make-batch-get-schema-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key names collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-schema-output common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or batch-get-schema-error-list
                                         common-lisp:null)
                         :accessor %batch-get-schema-output-errors :initform
                         (common-lisp:error ":errors is required"))
                        (schemas :initarg :|schemas| :type
                         (common-lisp:or schema-list common-lisp:null)
                         :accessor %batch-get-schema-output-schemas :initform
                         (common-lisp:error ":schemas is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-schema-output 'make-batch-get-schema-output))
 (common-lisp:defun make-batch-get-schema-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors schemas)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-schema-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-schema-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype cleanrooms-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration common-lisp:nil
                       ((query-log-status :initarg :|queryLogStatus| :type
                         (common-lisp:or collaboration-query-log-status
                                         common-lisp:null)
                         :accessor %collaboration-query-log-status :initform
                         (common-lisp:error ":querylogstatus is required"))
                        (data-encryption-metadata :initarg
                         :|dataEncryptionMetadata| :type
                         (common-lisp:or data-encryption-metadata
                                         common-lisp:null)
                         :accessor %collaboration-data-encryption-metadata
                         :initform common-lisp:nil)
                        (membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %collaboration-membership-arn :initform
                         common-lisp:nil)
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %collaboration-membership-id :initform
                         common-lisp:nil)
                        (member-status :initarg :|memberStatus| :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor %collaboration-member-status :initform
                         (common-lisp:error ":memberstatus is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %collaboration-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %collaboration-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (creator-display-name :initarg :|creatorDisplayName|
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor %collaboration-creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required"))
                        (creator-account-id :initarg :|creatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %collaboration-creator-account-id :initform
                         (common-lisp:error ":creatoraccountid is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor %collaboration-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %collaboration-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %collaboration-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %collaboration-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'collaboration 'make-collaboration))
 (common-lisp:defun make-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-log-status data-encryption-metadata
                     membership-arn membership-id member-status update-time
                     create-time creator-display-name creator-account-id
                     description name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'collaboration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collaboration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collaboration))
   common-lisp:nil))
(common-lisp:deftype collaboration-arn () 'common-lisp:string)
(common-lisp:deftype collaboration-description () 'common-lisp:string)
(common-lisp:deftype collaboration-identifier () 'common-lisp:string)
(common-lisp:deftype collaboration-name () 'common-lisp:string)
(common-lisp:deftype collaboration-query-log-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collaboration-summary common-lisp:nil
                       ((membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %collaboration-summary-membership-arn
                         :initform common-lisp:nil)
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %collaboration-summary-membership-id :initform
                         common-lisp:nil)
                        (member-status :initarg :|memberStatus| :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor %collaboration-summary-member-status
                         :initform
                         (common-lisp:error ":memberstatus is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %collaboration-summary-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %collaboration-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (creator-display-name :initarg :|creatorDisplayName|
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor %collaboration-summary-creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required"))
                        (creator-account-id :initarg :|creatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %collaboration-summary-creator-account-id :initform
                         (common-lisp:error ":creatoraccountid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %collaboration-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %collaboration-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %collaboration-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'collaboration-summary 'make-collaboration-summary))
 (common-lisp:defun make-collaboration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-arn membership-id
                     member-status update-time create-time creator-display-name
                     creator-account-id name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'collaboration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-status))
      (common-lisp:list
       (common-lisp:cons "memberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collaboration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collaboration-summary-list ()
   '(trivial-types:proper-list collaboration-summary))
 (common-lisp:defun |make-collaboration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collaboration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor %column-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %column-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defun make-column
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table common-lisp:nil
                       ((allowed-columns :initarg :|allowedColumns| :type
                         (common-lisp:or allowed-column-list common-lisp:null)
                         :accessor %configured-table-allowed-columns :initform
                         (common-lisp:error ":allowedcolumns is required"))
                        (analysis-method :initarg :|analysisMethod| :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor %configured-table-analysis-method :initform
                         (common-lisp:error ":analysismethod is required"))
                        (analysis-rule-types :initarg :|analysisRuleTypes|
                         :type
                         (common-lisp:or
                          configured-table-analysis-rule-type-list
                          common-lisp:null)
                         :accessor %configured-table-analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (table-reference :initarg :|tableReference| :type
                         (common-lisp:or table-reference common-lisp:null)
                         :accessor %configured-table-table-reference :initform
                         (common-lisp:error ":tablereference is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor %configured-table-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %configured-table-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor %configured-table-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'configured-table 'make-configured-table))
 (common-lisp:defun make-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-columns analysis-method
                     analysis-rule-types update-time create-time
                     table-reference description name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configured-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configured-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-analysis-rule-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-analysis-rule-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor %configured-table-analysis-rule-type
                         :initform (common-lisp:error ":type is required"))
                        (policy :initarg :|policy| :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor %configured-table-analysis-rule-policy
                         :initform (common-lisp:error ":policy is required"))
                        (configured-table-arn :initarg :|configuredTableArn|
                         :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor
                         %configured-table-analysis-rule-configured-table-arn
                         :initform
                         (common-lisp:error ":configuredtablearn is required"))
                        (configured-table-id :initarg :|configuredTableId|
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-analysis-rule-configured-table-id
                         :initform
                         (common-lisp:error
                          ":configuredtableid is required"))))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule
                    'make-configured-table-analysis-rule))
 (common-lisp:defun make-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time create-time type policy
                     configured-table-arn configured-table-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule-policy common-lisp:nil
                       ((v1 :initarg :|v1| :type
                         (common-lisp:or
                          configured-table-analysis-rule-policy-v1
                          common-lisp:null)
                         :accessor %configured-table-analysis-rule-policy-v1
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy
                    'make-configured-table-analysis-rule-policy))
 (common-lisp:defun make-configured-table-analysis-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key v1)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configured-table-analysis-rule-policy-v1 common-lisp:nil
                       ((aggregation :initarg :|aggregation| :type
                         (common-lisp:or analysis-rule-aggregation
                                         common-lisp:null)
                         :accessor
                         %configured-table-analysis-rule-policy-v1-aggregation
                         :initform common-lisp:nil)
                        (list :initarg :|list| :type
                         (common-lisp:or analysis-rule-list common-lisp:null)
                         :accessor
                         %configured-table-analysis-rule-policy-v1-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configured-table-analysis-rule-policy-v1
                    'make-configured-table-analysis-rule-policy-v1))
 (common-lisp:defun make-configured-table-analysis-rule-policy-v1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregation list)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-analysis-rule-policy-v1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list))
      (common-lisp:list
       (common-lisp:cons "list"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation))
      (common-lisp:list
       (common-lisp:cons "aggregation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-analysis-rule-policy-v1))
   common-lisp:nil))
(common-lisp:deftype configured-table-analysis-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configured-table-analysis-rule-type-list ()
   '(trivial-types:proper-list configured-table-analysis-rule-type))
 (common-lisp:defun |make-configured-table-analysis-rule-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-analysis-rule-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-association common-lisp:nil
                       ((update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-association-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-association-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor %configured-table-association-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %configured-table-association-name :initform
                         (common-lisp:error ":name is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %configured-table-association-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %configured-table-association-membership-arn
                         :initform
                         (common-lisp:error ":membershiparn is required"))
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-association-membership-id :initform
                         (common-lisp:error ":membershipid is required"))
                        (configured-table-arn :initarg :|configuredTableArn|
                         :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor
                         %configured-table-association-configured-table-arn
                         :initform
                         (common-lisp:error ":configuredtablearn is required"))
                        (configured-table-id :initarg :|configuredTableId|
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-association-configured-table-id
                         :initform
                         (common-lisp:error ":configuredtableid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-association-id :initform
                         (common-lisp:error ":id is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or configured-table-association-arn
                                         common-lisp:null)
                         :accessor %configured-table-association-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'configured-table-association
                    'make-configured-table-association))
 (common-lisp:defun make-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time create-time description name
                     role-arn membership-arn membership-id configured-table-arn
                     configured-table-id id arn)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-arn))
      (common-lisp:list
       (common-lisp:cons "configuredTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association))
   common-lisp:nil))
(common-lisp:deftype configured-table-association-arn () 'common-lisp:string)
(common-lisp:deftype configured-table-association-identifier ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-association-summary common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or configured-table-association-arn
                                         common-lisp:null)
                         :accessor %configured-table-association-summary-arn
                         :initform (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-association-summary-id :initform
                         (common-lisp:error ":id is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-association-summary-update-time
                         :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-association-summary-create-time
                         :initform
                         (common-lisp:error ":createtime is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %configured-table-association-summary-name
                         :initform (common-lisp:error ":name is required"))
                        (membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor
                         %configured-table-association-summary-membership-arn
                         :initform
                         (common-lisp:error ":membershiparn is required"))
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %configured-table-association-summary-membership-id
                         :initform
                         (common-lisp:error ":membershipid is required"))
                        (configured-table-id :initarg :|configuredTableId|
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         %configured-table-association-summary-configured-table-id
                         :initform
                         (common-lisp:error
                          ":configuredtableid is required"))))
 (common-lisp:export
  (common-lisp:list 'configured-table-association-summary
                    'make-configured-table-association-summary))
 (common-lisp:defun make-configured-table-association-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id update-time create-time name
                     membership-arn membership-id configured-table-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'configured-table-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table-id))
      (common-lisp:list
       (common-lisp:cons "configuredTableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-association-summary-list ()
   '(trivial-types:proper-list configured-table-association-summary))
 (common-lisp:defun |make-configured-table-association-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configured-table-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configured-table-summary common-lisp:nil
                       ((analysis-method :initarg :|analysisMethod| :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor %configured-table-summary-analysis-method
                         :initform
                         (common-lisp:error ":analysismethod is required"))
                        (analysis-rule-types :initarg :|analysisRuleTypes|
                         :type
                         (common-lisp:or
                          configured-table-analysis-rule-type-list
                          common-lisp:null)
                         :accessor
                         %configured-table-summary-analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-summary-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %configured-table-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %configured-table-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or configured-table-arn common-lisp:null)
                         :accessor %configured-table-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor %configured-table-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'configured-table-summary 'make-configured-table-summary))
 (common-lisp:defun make-configured-table-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-method analysis-rule-types
                     update-time create-time name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'configured-table-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configured-table-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configured-table-summary-list ()
   '(trivial-types:proper-list configured-table-summary))
 (common-lisp:defun |make-configured-table-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configured-table-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type
                    'conflict-exception-reason)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-collaboration-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-collaboration-input-tags :initform
                         common-lisp:nil)
                        (query-log-status :initarg :|queryLogStatus| :type
                         (common-lisp:or collaboration-query-log-status
                                         common-lisp:null)
                         :accessor %create-collaboration-input-query-log-status
                         :initform
                         (common-lisp:error ":querylogstatus is required"))
                        (data-encryption-metadata :initarg
                         :|dataEncryptionMetadata| :type
                         (common-lisp:or data-encryption-metadata
                                         common-lisp:null)
                         :accessor
                         %create-collaboration-input-data-encryption-metadata
                         :initform common-lisp:nil)
                        (creator-display-name :initarg :|creatorDisplayName|
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         %create-collaboration-input-creator-display-name
                         :initform
                         (common-lisp:error ":creatordisplayname is required"))
                        (creator-member-abilities :initarg
                         :|creatorMemberAbilities| :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor
                         %create-collaboration-input-creator-member-abilities
                         :initform
                         (common-lisp:error
                          ":creatormemberabilities is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor %create-collaboration-input-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %create-collaboration-input-name :initform
                         (common-lisp:error ":name is required"))
                        (members :initarg :|members| :type
                         (common-lisp:or member-list common-lisp:null)
                         :accessor %create-collaboration-input-members
                         :initform
                         (common-lisp:error ":members is required"))))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-input
                    'make-create-collaboration-input))
 (common-lisp:defun make-create-collaboration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags query-log-status
                     data-encryption-metadata creator-display-name
                     creator-member-abilities description name members)
   (common-lisp:apply #'common-lisp:make-instance 'create-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'members))
      (common-lisp:list
       (common-lisp:cons "members"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-member-abilities))
      (common-lisp:list
       (common-lisp:cons "creatorMemberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creator-display-name))
      (common-lisp:list
       (common-lisp:cons "creatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-encryption-metadata))
      (common-lisp:list
       (common-lisp:cons "dataEncryptionMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-collaboration-output common-lisp:nil
                       ((collaboration :initarg :|collaboration| :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor %create-collaboration-output-collaboration
                         :initform
                         (common-lisp:error ":collaboration is required"))))
 (common-lisp:export
  (common-lisp:list 'create-collaboration-output
                    'make-create-collaboration-output))
 (common-lisp:defun make-create-collaboration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration)
   (common-lisp:apply #'common-lisp:make-instance 'create-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((analysis-rule-policy :initarg :|analysisRulePolicy|
                         :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-analysis-rule-input-analysis-rule-policy
                         :initform
                         (common-lisp:error ":analysisrulepolicy is required"))
                        (analysis-rule-type :initarg :|analysisRuleType| :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-analysis-rule-input-analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required"))
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-analysis-rule-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-input
                    'make-create-configured-table-analysis-rule-input))
 (common-lisp:defun make-create-configured-table-analysis-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule-policy analysis-rule-type
                     configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-type))
      (common-lisp:list
       (common-lisp:cons "analysisRuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :|analysisRule| :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-analysis-rule-output-analysis-rule
                         :initform
                         (common-lisp:error ":analysisrule is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-analysis-rule-output
                    'make-create-configured-table-analysis-rule-output))
 (common-lisp:defun make-create-configured-table-analysis-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-association-input
                       common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-configured-table-association-input-tags
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-configured-table-association-input-role-arn
                         :initform (common-lisp:error ":rolearn is required"))
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-association-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-association-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         %create-configured-table-association-input-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor
                         %create-configured-table-association-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-input
                    'make-create-configured-table-association-input))
 (common-lisp:defun make-create-configured-table-association-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags role-arn configured-table-identifier
                     membership-identifier description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-identifier))
      (common-lisp:list
       (common-lisp:cons "configuredTableIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-association-output
                       common-lisp:nil
                       ((configured-table-association :initarg
                         :|configuredTableAssociation| :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         %create-configured-table-association-output-configured-table-association
                         :initform
                         (common-lisp:error
                          ":configuredtableassociation is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-association-output
                    'make-create-configured-table-association-output))
 (common-lisp:defun make-create-configured-table-association-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-configured-table-input-tags :initform
                         common-lisp:nil)
                        (analysis-method :initarg :|analysisMethod| :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor
                         %create-configured-table-input-analysis-method
                         :initform
                         (common-lisp:error ":analysismethod is required"))
                        (allowed-columns :initarg :|allowedColumns| :type
                         (common-lisp:or allowed-column-list common-lisp:null)
                         :accessor
                         %create-configured-table-input-allowed-columns
                         :initform
                         (common-lisp:error ":allowedcolumns is required"))
                        (table-reference :initarg :|tableReference| :type
                         (common-lisp:or table-reference common-lisp:null)
                         :accessor
                         %create-configured-table-input-table-reference
                         :initform
                         (common-lisp:error ":tablereference is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor %create-configured-table-input-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-configured-table-input-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-input
                    'make-create-configured-table-input))
 (common-lisp:defun make-create-configured-table-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags analysis-method allowed-columns
                     table-reference description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-reference))
      (common-lisp:list
       (common-lisp:cons "tableReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-columns))
      (common-lisp:list
       (common-lisp:cons "allowedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-configured-table-output common-lisp:nil
                       ((configured-table :initarg :|configuredTable| :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         %create-configured-table-output-configured-table
                         :initform
                         (common-lisp:error ":configuredtable is required"))))
 (common-lisp:export
  (common-lisp:list 'create-configured-table-output
                    'make-create-configured-table-output))
 (common-lisp:defun make-create-configured-table-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-membership-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-membership-input-tags :initform
                         common-lisp:nil)
                        (query-log-status :initarg :|queryLogStatus| :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor %create-membership-input-query-log-status
                         :initform
                         (common-lisp:error ":querylogstatus is required"))
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %create-membership-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'create-membership-input 'make-create-membership-input))
 (common-lisp:defun make-create-membership-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags query-log-status
                     collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'create-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-identifier))
      (common-lisp:list
       (common-lisp:cons "collaborationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-membership-output common-lisp:nil
                       ((membership :initarg :|membership| :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         %create-membership-output-membership :initform
                         (common-lisp:error ":membership is required"))))
 (common-lisp:export
  (common-lisp:list 'create-membership-output 'make-create-membership-output))
 (common-lisp:defun make-create-membership-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership)
   (common-lisp:apply #'common-lisp:make-instance 'create-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-encryption-metadata common-lisp:nil
                       ((preserve-nulls :initarg :|preserveNulls| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-encryption-metadata-preserve-nulls :initform
                         (common-lisp:error ":preservenulls is required"))
                        (allow-joins-on-columns-with-different-names :initarg
                         :|allowJoinsOnColumnsWithDifferentNames| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-encryption-metadata-allow-joins-on-columns-with-different-names
                         :initform
                         (common-lisp:error
                          ":allowjoinsoncolumnswithdifferentnames is required"))
                        (allow-duplicates :initarg :|allowDuplicates| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-encryption-metadata-allow-duplicates :initform
                         (common-lisp:error ":allowduplicates is required"))
                        (allow-cleartext :initarg :|allowCleartext| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-encryption-metadata-allow-cleartext :initform
                         (common-lisp:error ":allowcleartext is required"))))
 (common-lisp:export
  (common-lisp:list 'data-encryption-metadata 'make-data-encryption-metadata))
 (common-lisp:defun make-data-encryption-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preserve-nulls
                     allow-joins-on-columns-with-different-names
                     allow-duplicates allow-cleartext)
   (common-lisp:apply #'common-lisp:make-instance 'data-encryption-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cleartext))
      (common-lisp:list
       (common-lisp:cons "allowCleartext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-duplicates))
      (common-lisp:list
       (common-lisp:cons "allowDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-joins-on-columns-with-different-names))
      (common-lisp:list
       (common-lisp:cons "allowJoinsOnColumnsWithDifferentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preserve-nulls))
      (common-lisp:list
       (common-lisp:cons "preserveNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-encryption-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collaboration-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-collaboration-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-input
                    'make-delete-collaboration-input))
 (common-lisp:defun make-delete-collaboration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collaboration-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-collaboration-output
                    'make-delete-collaboration-output))
 (common-lisp:defun make-delete-collaboration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((analysis-rule-type :initarg :|analysisRuleType| :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         %delete-configured-table-analysis-rule-input-analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required"))
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-configured-table-analysis-rule-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-input
                    'make-delete-configured-table-analysis-rule-input))
 (common-lisp:defun make-delete-configured-table-analysis-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule-type
                     configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-analysis-rule-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-analysis-rule-output
                    'make-delete-configured-table-analysis-rule-output))
 (common-lisp:defun make-delete-configured-table-analysis-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-association-input
                       common-lisp:nil
                       ((membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-configured-table-association-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))
                        (configured-table-association-identifier :initarg
                         :|configuredTableAssociationIdentifier| :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         %delete-configured-table-association-input-configured-table-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-input
                    'make-delete-configured-table-association-input))
 (common-lisp:defun make-delete-configured-table-association-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-identifier
                     configured-table-association-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-association-output
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-association-output
                    'make-delete-configured-table-association-output))
 (common-lisp:defun make-delete-configured-table-association-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-configured-table-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-input
                    'make-delete-configured-table-input))
 (common-lisp:defun make-delete-configured-table-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configured-table-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-configured-table-output
                    'make-delete-configured-table-output))
 (common-lisp:defun make-delete-configured-table-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-input common-lisp:nil
                       ((account-id :initarg :|accountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-member-input-account-id :initform
                         (common-lisp:error ":accountid is required"))
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-member-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-member-input 'make-delete-member-input))
 (common-lisp:defun make-delete-member-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-member-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-member-output 'make-delete-member-output))
 (common-lisp:defun make-delete-member-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-member-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-member-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-member-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-membership-input common-lisp:nil
                       ((membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-membership-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-membership-input 'make-delete-membership-input))
 (common-lisp:defun make-delete-membership-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-membership-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-membership-output 'make-delete-membership-output))
 (common-lisp:defun make-delete-membership-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-membership-output))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype filterable-member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-collaboration-input common-lisp:nil
                       ((collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %get-collaboration-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-input 'make-get-collaboration-input))
 (common-lisp:defun make-get-collaboration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-collaboration-output common-lisp:nil
                       ((collaboration :initarg :|collaboration| :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor %get-collaboration-output-collaboration
                         :initform
                         (common-lisp:error ":collaboration is required"))))
 (common-lisp:export
  (common-lisp:list 'get-collaboration-output 'make-get-collaboration-output))
 (common-lisp:defun make-get-collaboration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration)
   (common-lisp:apply #'common-lisp:make-instance 'get-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-analysis-rule-input common-lisp:nil
                       ((analysis-rule-type :initarg :|analysisRuleType| :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-analysis-rule-input-analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required"))
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-analysis-rule-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-input
                    'make-get-configured-table-analysis-rule-input))
 (common-lisp:defun make-get-configured-table-analysis-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule-type
                     configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :|analysisRule| :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-analysis-rule-output-analysis-rule
                         :initform
                         (common-lisp:error ":analysisrule is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-analysis-rule-output
                    'make-get-configured-table-analysis-rule-output))
 (common-lisp:defun make-get-configured-table-analysis-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-association-input common-lisp:nil
                       ((membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-association-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))
                        (configured-table-association-identifier :initarg
                         :|configuredTableAssociationIdentifier| :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         %get-configured-table-association-input-configured-table-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-input
                    'make-get-configured-table-association-input))
 (common-lisp:defun make-get-configured-table-association-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-identifier
                     configured-table-association-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-association-output common-lisp:nil
                       ((configured-table-association :initarg
                         :|configuredTableAssociation| :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-association-output-configured-table-association
                         :initform
                         (common-lisp:error
                          ":configuredtableassociation is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-association-output
                    'make-get-configured-table-association-output))
 (common-lisp:defun make-get-configured-table-association-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-input common-lisp:nil
                       ((configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %get-configured-table-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-input
                    'make-get-configured-table-input))
 (common-lisp:defun make-get-configured-table-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-configured-table-output common-lisp:nil
                       ((configured-table :initarg :|configuredTable| :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         %get-configured-table-output-configured-table
                         :initform
                         (common-lisp:error ":configuredtable is required"))))
 (common-lisp:export
  (common-lisp:list 'get-configured-table-output
                    'make-get-configured-table-output))
 (common-lisp:defun make-get-configured-table-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table)
   (common-lisp:apply #'common-lisp:make-instance 'get-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-membership-input common-lisp:nil
                       ((membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor %get-membership-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-membership-input 'make-get-membership-input))
 (common-lisp:defun make-get-membership-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-membership-output common-lisp:nil
                       ((membership :initarg :|membership| :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         %get-membership-output-membership :initform
                         (common-lisp:error ":membership is required"))))
 (common-lisp:export
  (common-lisp:list 'get-membership-output 'make-get-membership-output))
 (common-lisp:defun make-get-membership-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership)
   (common-lisp:apply #'common-lisp:make-instance 'get-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protected-query-input common-lisp:nil
                       ((protected-query-identifier :initarg
                         :|protectedQueryIdentifier| :type
                         (common-lisp:or protected-query-identifier
                                         common-lisp:null)
                         :accessor
                         %get-protected-query-input-protected-query-identifier
                         :initform
                         (common-lisp:error
                          ":protectedqueryidentifier is required"))
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %get-protected-query-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-input
                    'make-get-protected-query-input))
 (common-lisp:defun make-get-protected-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-query-identifier
                     membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-protected-query-output common-lisp:nil
                       ((protected-query :initarg :|protectedQuery| :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor %get-protected-query-output-protected-query
                         :initform
                         (common-lisp:error ":protectedquery is required"))))
 (common-lisp:export
  (common-lisp:list 'get-protected-query-output
                    'make-get-protected-query-output))
 (common-lisp:defun make-get-protected-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-query)
   (common-lisp:apply #'common-lisp:make-instance 'get-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-analysis-rule-input common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or analysis-rule-type common-lisp:null)
                         :accessor %get-schema-analysis-rule-input-type
                         :initform (common-lisp:error ":type is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %get-schema-analysis-rule-input-name
                         :initform (common-lisp:error ":name is required"))
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %get-schema-analysis-rule-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-input
                    'make-get-schema-analysis-rule-input))
 (common-lisp:defun make-get-schema-analysis-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-analysis-rule-output common-lisp:nil
                       ((analysis-rule :initarg :|analysisRule| :type
                         (common-lisp:or analysis-rule common-lisp:null)
                         :accessor
                         %get-schema-analysis-rule-output-analysis-rule
                         :initform
                         (common-lisp:error ":analysisrule is required"))))
 (common-lisp:export
  (common-lisp:list 'get-schema-analysis-rule-output
                    'make-get-schema-analysis-rule-output))
 (common-lisp:defun make-get-schema-analysis-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-input common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %get-schema-input-name :initform
                         (common-lisp:error ":name is required"))
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor %get-schema-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defun make-get-schema-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-output common-lisp:nil
                       ((schema :initarg :|schema| :type
                         (common-lisp:or schema common-lisp:null) :accessor
                         %get-schema-output-schema :initform
                         (common-lisp:error ":schema is required"))))
 (common-lisp:export
  (common-lisp:list 'get-schema-output 'make-get-schema-output))
 (common-lisp:defun make-get-schema-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schema)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-output))
   common-lisp:nil))
(common-lisp:deftype glue-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glue-table-reference common-lisp:nil
                       ((database-name :initarg :|databaseName| :type
                         (common-lisp:or glue-resource-name common-lisp:null)
                         :accessor %glue-table-reference-database-name
                         :initform
                         (common-lisp:error ":databasename is required"))
                        (table-name :initarg :|tableName| :type
                         (common-lisp:or glue-resource-name common-lisp:null)
                         :accessor %glue-table-reference-table-name :initform
                         (common-lisp:error ":tablename is required"))))
 (common-lisp:export
  (common-lisp:list 'glue-table-reference 'make-glue-table-reference))
 (common-lisp:defun make-glue-table-reference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key database-name table-name)
   (common-lisp:apply #'common-lisp:make-instance 'glue-table-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-table-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype join-required-option () 'common-lisp:string)
(common-lisp:deftype key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-collaborations-input common-lisp:nil
                       ((member-status :initarg :|memberStatus| :type
                         (common-lisp:or filterable-member-status
                                         common-lisp:null)
                         :accessor %list-collaborations-input-member-status
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-collaborations-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-collaborations-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-input
                    'make-list-collaborations-input))
 (common-lisp:defun make-list-collaborations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-status max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-collaborations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-collaborations-output common-lisp:nil
                       ((collaboration-list :initarg :|collaborationList| :type
                         (common-lisp:or collaboration-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-collaborations-output-collaboration-list
                         :initform
                         (common-lisp:error ":collaborationlist is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-collaborations-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-collaborations-output
                    'make-list-collaborations-output))
 (common-lisp:defun make-list-collaborations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-collaborations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-list))
      (common-lisp:list
       (common-lisp:cons "collaborationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-collaborations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-table-associations-input common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-configured-table-associations-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-configured-table-associations-input-next-token
                         :initform common-lisp:nil)
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %list-configured-table-associations-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-input
                    'make-list-configured-table-associations-input))
 (common-lisp:defun make-list-configured-table-associations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-table-associations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-table-associations-output
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-configured-table-associations-output-next-token
                         :initform common-lisp:nil)
                        (configured-table-association-summaries :initarg
                         :|configuredTableAssociationSummaries| :type
                         (common-lisp:or
                          configured-table-association-summary-list
                          common-lisp:null)
                         :accessor
                         %list-configured-table-associations-output-configured-table-association-summaries
                         :initform
                         (common-lisp:error
                          ":configuredtableassociationsummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-configured-table-associations-output
                    'make-list-configured-table-associations-output))
 (common-lisp:defun make-list-configured-table-associations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     configured-table-association-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-table-associations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-table-associations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-tables-input common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-configured-tables-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-configured-tables-input-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-input
                    'make-list-configured-tables-input))
 (common-lisp:defun make-list-configured-tables-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-configured-tables-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configured-tables-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-configured-tables-output-next-token
                         :initform common-lisp:nil)
                        (configured-table-summaries :initarg
                         :|configuredTableSummaries| :type
                         (common-lisp:or configured-table-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-configured-tables-output-configured-table-summaries
                         :initform
                         (common-lisp:error
                          ":configuredtablesummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-configured-tables-output
                    'make-list-configured-tables-output))
 (common-lisp:defun make-list-configured-tables-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token configured-table-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configured-tables-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-summaries))
      (common-lisp:list
       (common-lisp:cons "configuredTableSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configured-tables-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-input common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-members-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-members-input-next-token :initform
                         common-lisp:nil)
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor %list-members-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'list-members-input 'make-list-members-input))
 (common-lisp:defun make-list-members-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-members-output common-lisp:nil
                       ((member-summaries :initarg :|memberSummaries| :type
                         (common-lisp:or member-summary-list common-lisp:null)
                         :accessor %list-members-output-member-summaries
                         :initform
                         (common-lisp:error ":membersummaries is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-members-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-members-output 'make-list-members-output))
 (common-lisp:defun make-list-members-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-members-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-members-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-summaries))
      (common-lisp:list
       (common-lisp:cons "memberSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-members-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-memberships-input common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor %list-memberships-input-status :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-memberships-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-memberships-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-memberships-input 'make-list-memberships-input))
 (common-lisp:defun make-list-memberships-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-memberships-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-memberships-output common-lisp:nil
                       ((membership-summaries :initarg :|membershipSummaries|
                         :type
                         (common-lisp:or membership-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-memberships-output-membership-summaries
                         :initform
                         (common-lisp:error
                          ":membershipsummaries is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-memberships-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-memberships-output 'make-list-memberships-output))
 (common-lisp:defun make-list-memberships-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-memberships-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'membership-summaries))
      (common-lisp:list
       (common-lisp:cons "membershipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-memberships-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protected-queries-input common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-protected-queries-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-protected-queries-input-next-token
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor %list-protected-queries-input-status
                         :initform common-lisp:nil)
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %list-protected-queries-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-input
                    'make-list-protected-queries-input))
 (common-lisp:defun make-list-protected-queries-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token status
                     membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'list-protected-queries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-protected-queries-output common-lisp:nil
                       ((protected-queries :initarg :|protectedQueries| :type
                         (common-lisp:or protected-query-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-protected-queries-output-protected-queries
                         :initform
                         (common-lisp:error ":protectedqueries is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-protected-queries-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-protected-queries-output
                    'make-list-protected-queries-output))
 (common-lisp:defun make-list-protected-queries-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-queries next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-protected-queries-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-queries))
      (common-lisp:list
       (common-lisp:cons "protectedQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-protected-queries-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-input common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-schemas-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-schemas-input-next-token :initform
                         common-lisp:nil)
                        (schema-type :initarg :|schemaType| :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor %list-schemas-input-schema-type :initform
                         common-lisp:nil)
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor %list-schemas-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'list-schemas-input 'make-list-schemas-input))
 (common-lisp:defun make-list-schemas-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token schema-type
                     collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-schemas-output-next-token :initform
                         common-lisp:nil)
                        (schema-summaries :initarg :|schemaSummaries| :type
                         (common-lisp:or schema-summary-list common-lisp:null)
                         :accessor %list-schemas-output-schema-summaries
                         :initform
                         (common-lisp:error ":schemasummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-schemas-output 'make-list-schemas-output))
 (common-lisp:defun make-list-schemas-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token schema-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-summaries))
      (common-lisp:list
       (common-lisp:cons "schemaSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor %list-tags-for-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype member-abilities ()
   '(trivial-types:proper-list member-ability))
 (common-lisp:defun |make-member-abilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-ability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype member-ability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype member-list ()
   '(trivial-types:proper-list member-specification))
 (common-lisp:defun |make-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass member-specification common-lisp:nil
                       ((display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %member-specification-display-name :initform
                         (common-lisp:error ":displayname is required"))
                        (member-abilities :initarg :|memberAbilities| :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor %member-specification-member-abilities
                         :initform
                         (common-lisp:error ":memberabilities is required"))
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %member-specification-account-id :initform
                         (common-lisp:error ":accountid is required"))))
 (common-lisp:export
  (common-lisp:list 'member-specification 'make-member-specification))
 (common-lisp:defun make-member-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name member-abilities account-id)
   (common-lisp:apply #'common-lisp:make-instance 'member-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-specification))
   common-lisp:nil))
(common-lisp:deftype member-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass member-summary common-lisp:nil
                       ((membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %member-summary-membership-arn :initform
                         common-lisp:nil)
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %member-summary-membership-id :initform
                         common-lisp:nil)
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %member-summary-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %member-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (abilities :initarg :|abilities| :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor %member-summary-abilities :initform
                         (common-lisp:error ":abilities is required"))
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %member-summary-display-name :initform
                         (common-lisp:error ":displayname is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or member-status common-lisp:null)
                         :accessor %member-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (account-id :initarg :|accountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %member-summary-account-id :initform
                         (common-lisp:error ":accountid is required"))))
 (common-lisp:export (common-lisp:list 'member-summary 'make-member-summary))
 (common-lisp:defun make-member-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership-arn membership-id update-time
                     create-time abilities display-name status account-id)
   (common-lisp:apply #'common-lisp:make-instance 'member-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abilities))
      (common-lisp:list
       (common-lisp:cons "abilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-summary-list ()
   '(trivial-types:proper-list member-summary))
 (common-lisp:defun |make-member-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass membership common-lisp:nil
                       ((query-log-status :initarg :|queryLogStatus| :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor %membership-query-log-status :initform
                         (common-lisp:error ":querylogstatus is required"))
                        (member-abilities :initarg :|memberAbilities| :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor %membership-member-abilities :initform
                         (common-lisp:error ":memberabilities is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor %membership-status :initform
                         (common-lisp:error ":status is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %membership-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %membership-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (collaboration-name :initarg :|collaborationName| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %membership-collaboration-name :initform
                         (common-lisp:error ":collaborationname is required"))
                        (collaboration-creator-display-name :initarg
                         :|collaborationCreatorDisplayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         %membership-collaboration-creator-display-name
                         :initform
                         (common-lisp:error
                          ":collaborationcreatordisplayname is required"))
                        (collaboration-creator-account-id :initarg
                         :|collaborationCreatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %membership-collaboration-creator-account-id :initform
                         (common-lisp:error
                          ":collaborationcreatoraccountid is required"))
                        (collaboration-id :initarg :|collaborationId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %membership-collaboration-id :initform
                         (common-lisp:error ":collaborationid is required"))
                        (collaboration-arn :initarg :|collaborationArn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %membership-collaboration-arn :initform
                         (common-lisp:error ":collaborationarn is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %membership-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %membership-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'membership 'make-membership))
 (common-lisp:defun make-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-log-status member-abilities status
                     update-time create-time collaboration-name
                     collaboration-creator-display-name
                     collaboration-creator-account-id collaboration-id
                     collaboration-arn arn id)
   (common-lisp:apply #'common-lisp:make-instance 'membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership))
   common-lisp:nil))
(common-lisp:deftype membership-arn () 'common-lisp:string)
(common-lisp:deftype membership-identifier () 'common-lisp:string)
(common-lisp:deftype membership-query-log-status () 'common-lisp:string)
(common-lisp:deftype membership-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass membership-summary common-lisp:nil
                       ((member-abilities :initarg :|memberAbilities| :type
                         (common-lisp:or member-abilities common-lisp:null)
                         :accessor %membership-summary-member-abilities
                         :initform
                         (common-lisp:error ":memberabilities is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or membership-status common-lisp:null)
                         :accessor %membership-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %membership-summary-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %membership-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (collaboration-name :initarg :|collaborationName| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %membership-summary-collaboration-name
                         :initform
                         (common-lisp:error ":collaborationname is required"))
                        (collaboration-creator-display-name :initarg
                         :|collaborationCreatorDisplayName| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         %membership-summary-collaboration-creator-display-name
                         :initform
                         (common-lisp:error
                          ":collaborationcreatordisplayname is required"))
                        (collaboration-creator-account-id :initarg
                         :|collaborationCreatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %membership-summary-collaboration-creator-account-id
                         :initform
                         (common-lisp:error
                          ":collaborationcreatoraccountid is required"))
                        (collaboration-id :initarg :|collaborationId| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor %membership-summary-collaboration-id
                         :initform
                         (common-lisp:error ":collaborationid is required"))
                        (collaboration-arn :initarg :|collaborationArn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %membership-summary-collaboration-arn
                         :initform
                         (common-lisp:error ":collaborationarn is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %membership-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %membership-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'membership-summary 'make-membership-summary))
 (common-lisp:defun make-membership-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key member-abilities status update-time
                     create-time collaboration-name
                     collaboration-creator-display-name
                     collaboration-creator-account-id collaboration-id
                     collaboration-arn arn id)
   (common-lisp:apply #'common-lisp:make-instance 'membership-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input membership-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-account-id))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collaboration-creator-display-name))
      (common-lisp:list
       (common-lisp:cons "collaborationCreatorDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-name))
      (common-lisp:list
       (common-lisp:cons "collaborationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-abilities))
      (common-lisp:list
       (common-lisp:cons "memberAbilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input membership-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype membership-summary-list ()
   '(trivial-types:proper-list membership-summary))
 (common-lisp:defun |make-membership-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list membership-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query common-lisp:nil
                       ((error :initarg :|error| :type
                         (common-lisp:or protected-query-error
                                         common-lisp:null)
                         :accessor %protected-query-error :initform
                         common-lisp:nil)
                        (result :initarg :|result| :type
                         (common-lisp:or protected-query-result
                                         common-lisp:null)
                         :accessor %protected-query-result :initform
                         common-lisp:nil)
                        (statistics :initarg :|statistics| :type
                         (common-lisp:or protected-query-statistics
                                         common-lisp:null)
                         :accessor %protected-query-statistics :initform
                         common-lisp:nil)
                        (result-configuration :initarg :|resultConfiguration|
                         :type
                         (common-lisp:or protected-query-result-configuration
                                         common-lisp:null)
                         :accessor %protected-query-result-configuration
                         :initform
                         (common-lisp:error
                          ":resultconfiguration is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor %protected-query-status :initform
                         (common-lisp:error ":status is required"))
                        (sql-parameters :initarg :|sqlParameters| :type
                         (common-lisp:or protected-query-sqlparameters
                                         common-lisp:null)
                         :accessor %protected-query-sql-parameters :initform
                         (common-lisp:error ":sqlparameters is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %protected-query-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %protected-query-membership-arn :initform
                         (common-lisp:error ":membershiparn is required"))
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %protected-query-membership-id :initform
                         (common-lisp:error ":membershipid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %protected-query-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'protected-query 'make-protected-query))
 (common-lisp:defun make-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error result statistics
                     result-configuration status sql-parameters create-time
                     membership-arn membership-id id)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protected-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protected-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-error common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %protected-query-error-code :initform
                         (common-lisp:error ":code is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %protected-query-error-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-error 'make-protected-query-error))
 (common-lisp:defun make-protected-query-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code message)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-error))
   common-lisp:nil))
(common-lisp:deftype protected-query-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-output common-lisp:nil
                       ((s3 :initarg :|s3| :type
                         (common-lisp:or protected-query-s3output
                                         common-lisp:null)
                         :accessor %protected-query-output-s3 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protected-query-output 'make-protected-query-output))
 (common-lisp:defun make-protected-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-output-configuration common-lisp:nil
                       ((s3 :initarg :|s3| :type
                         (common-lisp:or protected-query-s3output-configuration
                                         common-lisp:null)
                         :accessor %protected-query-output-configuration-s3
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protected-query-output-configuration
                    'make-protected-query-output-configuration))
 (common-lisp:defun make-protected-query-output-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-result common-lisp:nil
                       ((output :initarg :|output| :type
                         (common-lisp:or protected-query-output
                                         common-lisp:null)
                         :accessor %protected-query-result-output :initform
                         (common-lisp:error ":output is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-result 'make-protected-query-result))
 (common-lisp:defun make-protected-query-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-result-configuration common-lisp:nil
                       ((output-configuration :initarg :|outputConfiguration|
                         :type
                         (common-lisp:or protected-query-output-configuration
                                         common-lisp:null)
                         :accessor
                         %protected-query-result-configuration-output-configuration
                         :initform
                         (common-lisp:error
                          ":outputconfiguration is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-result-configuration
                    'make-protected-query-result-configuration))
 (common-lisp:defun make-protected-query-result-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-result-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-configuration))
      (common-lisp:list
       (common-lisp:cons "outputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-result-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-s3output common-lisp:nil
                       ((location :initarg :|location| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %protected-query-s3output-location :initform
                         (common-lisp:error ":location is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output 'make-protected-query-s3output))
 (common-lisp:defun make-protected-query-s3output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key location)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-s3output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass protected-query-s3output-configuration common-lisp:nil
                       ((key-prefix :initarg :|keyPrefix| :type
                         (common-lisp:or key-prefix common-lisp:null) :accessor
                         %protected-query-s3output-configuration-key-prefix
                         :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or
                          protected-query-s3output-configuration-bucket-string
                          common-lisp:null)
                         :accessor
                         %protected-query-s3output-configuration-bucket
                         :initform (common-lisp:error ":bucket is required"))
                        (result-format :initarg :|resultFormat| :type
                         (common-lisp:or result-format common-lisp:null)
                         :accessor
                         %protected-query-s3output-configuration-result-format
                         :initform
                         (common-lisp:error ":resultformat is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-s3output-configuration
                    'make-protected-query-s3output-configuration))
 (common-lisp:defun make-protected-query-s3output-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-prefix bucket result-format)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-s3output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-format))
      (common-lisp:list
       (common-lisp:cons "resultFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix))
      (common-lisp:list
       (common-lisp:cons "keyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-s3output-configuration))
   common-lisp:nil))
(common-lisp:deftype protected-query-s3output-configuration-bucket-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-sqlparameters common-lisp:nil
                       ((query-string :initarg :|queryString| :type
                         (common-lisp:or
                          protected-query-sqlparameters-query-string-string
                          common-lisp:null)
                         :accessor %protected-query-sqlparameters-query-string
                         :initform
                         (common-lisp:error ":querystring is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-sqlparameters
                    'make-protected-query-sqlparameters))
 (common-lisp:defun make-protected-query-sqlparameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-string)
   (common-lisp:apply #'common-lisp:make-instance
                      'protected-query-sqlparameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "queryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-sqlparameters))
   common-lisp:nil))
(common-lisp:deftype protected-query-sqlparameters-query-string-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-statistics common-lisp:nil
                       ((total-duration-in-millis :initarg
                         :|totalDurationInMillis| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %protected-query-statistics-total-duration-in-millis
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protected-query-statistics
                    'make-protected-query-statistics))
 (common-lisp:defun make-protected-query-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-duration-in-millis)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-duration-in-millis))
      (common-lisp:list
       (common-lisp:cons "totalDurationInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-statistics))
   common-lisp:nil))
(common-lisp:deftype protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protected-query-summary common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or protected-query-status
                                         common-lisp:null)
                         :accessor %protected-query-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %protected-query-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (membership-arn :initarg :|membershipArn| :type
                         (common-lisp:or membership-arn common-lisp:null)
                         :accessor %protected-query-summary-membership-arn
                         :initform
                         (common-lisp:error ":membershiparn is required"))
                        (membership-id :initarg :|membershipId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %protected-query-summary-membership-id :initform
                         (common-lisp:error ":membershipid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %protected-query-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'protected-query-summary 'make-protected-query-summary))
 (common-lisp:defun make-protected-query-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status create-time membership-arn
                     membership-id id)
   (common-lisp:apply #'common-lisp:make-instance 'protected-query-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-id))
      (common-lisp:list
       (common-lisp:cons "membershipId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-arn))
      (common-lisp:list
       (common-lisp:cons "membershipArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          protected-query-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protected-query-summary-list ()
   '(trivial-types:proper-list protected-query-summary))
 (common-lisp:defun |make-protected-query-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protected-query-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protected-query-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result-format () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype scalar-functions () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scalar-functions-list ()
   '(trivial-types:proper-list scalar-functions))
 (common-lisp:defun |make-scalar-functions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scalar-functions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor %schema-type :initform
                         (common-lisp:error ":type is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %schema-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %schema-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor %schema-description :initform
                         (common-lisp:error ":description is required"))
                        (collaboration-arn :initarg :|collaborationArn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %schema-collaboration-arn :initform
                         (common-lisp:error ":collaborationarn is required"))
                        (collaboration-id :initarg :|collaborationId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %schema-collaboration-id :initform
                         (common-lisp:error ":collaborationid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %schema-name :initform
                         (common-lisp:error ":name is required"))
                        (creator-account-id :initarg :|creatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %schema-creator-account-id :initform
                         (common-lisp:error ":creatoraccountid is required"))
                        (analysis-method :initarg :|analysisMethod| :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor %schema-analysis-method :initform
                         common-lisp:nil)
                        (analysis-rule-types :initarg :|analysisRuleTypes|
                         :type
                         (common-lisp:or analysis-rule-type-list
                                         common-lisp:null)
                         :accessor %schema-analysis-rule-types :initform
                         (common-lisp:error ":analysisruletypes is required"))
                        (partition-keys :initarg :|partitionKeys| :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor %schema-partition-keys :initform
                         (common-lisp:error ":partitionkeys is required"))
                        (columns :initarg :|columns| :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor %schema-columns :initform
                         (common-lisp:error ":columns is required"))))
 (common-lisp:export (common-lisp:list 'schema 'make-schema))
 (common-lisp:defun make-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type update-time create-time description
                     collaboration-arn collaboration-id name creator-account-id
                     analysis-method analysis-rule-types partition-keys
                     columns)
   (common-lisp:apply #'common-lisp:make-instance 'schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "partitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-list () '(trivial-types:proper-list schema))
 (common-lisp:defun |make-schema-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema-summary common-lisp:nil
                       ((analysis-method :initarg :|analysisMethod| :type
                         (common-lisp:or analysis-method common-lisp:null)
                         :accessor %schema-summary-analysis-method :initform
                         common-lisp:nil)
                        (analysis-rule-types :initarg :|analysisRuleTypes|
                         :type
                         (common-lisp:or analysis-rule-type-list
                                         common-lisp:null)
                         :accessor %schema-summary-analysis-rule-types
                         :initform
                         (common-lisp:error ":analysisruletypes is required"))
                        (collaboration-arn :initarg :|collaborationArn| :type
                         (common-lisp:or collaboration-arn common-lisp:null)
                         :accessor %schema-summary-collaboration-arn :initform
                         (common-lisp:error ":collaborationarn is required"))
                        (collaboration-id :initarg :|collaborationId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %schema-summary-collaboration-id :initform
                         (common-lisp:error ":collaborationid is required"))
                        (update-time :initarg :|updateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %schema-summary-update-time :initform
                         (common-lisp:error ":updatetime is required"))
                        (create-time :initarg :|createTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %schema-summary-create-time :initform
                         (common-lisp:error ":createtime is required"))
                        (creator-account-id :initarg :|creatorAccountId| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %schema-summary-creator-account-id :initform
                         (common-lisp:error ":creatoraccountid is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or schema-type common-lisp:null)
                         :accessor %schema-summary-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or table-alias common-lisp:null)
                         :accessor %schema-summary-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'schema-summary 'make-schema-summary))
 (common-lisp:defun make-schema-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-method analysis-rule-types
                     collaboration-arn collaboration-id update-time create-time
                     creator-account-id type name)
   (common-lisp:apply #'common-lisp:make-instance 'schema-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-account-id))
      (common-lisp:list
       (common-lisp:cons "creatorAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-id))
      (common-lisp:list
       (common-lisp:cons "collaborationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration-arn))
      (common-lisp:list
       (common-lisp:cons "collaborationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule-types))
      (common-lisp:list
       (common-lisp:cons "analysisRuleTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-method))
      (common-lisp:list
       (common-lisp:cons "analysisMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-summary-list ()
   '(trivial-types:proper-list schema-summary))
 (common-lisp:defun |make-schema-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-name :initarg :|quotaName| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-name)
      (quota-value :initarg :|quotaValue| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-value)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-name
                    'service-quota-exceeded-exception-quota-value)))
(common-lisp:progn
 (common-lisp:defclass start-protected-query-input common-lisp:nil
                       ((result-configuration :initarg :|resultConfiguration|
                         :type
                         (common-lisp:or protected-query-result-configuration
                                         common-lisp:null)
                         :accessor
                         %start-protected-query-input-result-configuration
                         :initform
                         (common-lisp:error
                          ":resultconfiguration is required"))
                        (sql-parameters :initarg :|sqlParameters| :type
                         (common-lisp:or protected-query-sqlparameters
                                         common-lisp:null)
                         :accessor %start-protected-query-input-sql-parameters
                         :initform
                         (common-lisp:error ":sqlparameters is required"))
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %start-protected-query-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or protected-query-type common-lisp:null)
                         :accessor %start-protected-query-input-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-input
                    'make-start-protected-query-input))
 (common-lisp:defun make-start-protected-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result-configuration sql-parameters
                     membership-identifier type)
   (common-lisp:apply #'common-lisp:make-instance 'start-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-parameters))
      (common-lisp:list
       (common-lisp:cons "sqlParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-configuration))
      (common-lisp:list
       (common-lisp:cons "resultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-protected-query-output common-lisp:nil
                       ((protected-query :initarg :|protectedQuery| :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor
                         %start-protected-query-output-protected-query
                         :initform
                         (common-lisp:error ":protectedquery is required"))))
 (common-lisp:export
  (common-lisp:list 'start-protected-query-output
                    'make-start-protected-query-output))
 (common-lisp:defun make-start-protected-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-query)
   (common-lisp:apply #'common-lisp:make-instance 'start-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-protected-query-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype table-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-alias-list ()
   '(trivial-types:proper-list table-alias))
 (common-lisp:defun |make-table-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-reference common-lisp:nil
                       ((glue :initarg :|glue| :type
                         (common-lisp:or glue-table-reference common-lisp:null)
                         :accessor %table-reference-glue :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'table-reference 'make-table-reference))
 (common-lisp:defun make-table-reference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key glue)
   (common-lisp:apply #'common-lisp:make-instance 'table-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue))
      (common-lisp:list
       (common-lisp:cons "glue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-reference))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-protected-query-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or cleanrooms-arn common-lisp:null)
                         :accessor %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-collaboration-input common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or collaboration-description
                                         common-lisp:null)
                         :accessor %update-collaboration-input-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or collaboration-name common-lisp:null)
                         :accessor %update-collaboration-input-name :initform
                         common-lisp:nil)
                        (collaboration-identifier :initarg
                         :|collaborationIdentifier| :type
                         (common-lisp:or collaboration-identifier
                                         common-lisp:null)
                         :accessor
                         %update-collaboration-input-collaboration-identifier
                         :initform
                         (common-lisp:error
                          ":collaborationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-input
                    'make-update-collaboration-input))
 (common-lisp:defun make-update-collaboration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name
                     collaboration-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'update-collaboration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-collaboration-output common-lisp:nil
                       ((collaboration :initarg :|collaboration| :type
                         (common-lisp:or collaboration common-lisp:null)
                         :accessor %update-collaboration-output-collaboration
                         :initform
                         (common-lisp:error ":collaboration is required"))))
 (common-lisp:export
  (common-lisp:list 'update-collaboration-output
                    'make-update-collaboration-output))
 (common-lisp:defun make-update-collaboration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key collaboration)
   (common-lisp:apply #'common-lisp:make-instance 'update-collaboration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collaboration))
      (common-lisp:list
       (common-lisp:cons "collaboration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-collaboration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-analysis-rule-input
                       common-lisp:nil
                       ((analysis-rule-policy :initarg :|analysisRulePolicy|
                         :type
                         (common-lisp:or configured-table-analysis-rule-policy
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-analysis-rule-input-analysis-rule-policy
                         :initform
                         (common-lisp:error ":analysisrulepolicy is required"))
                        (analysis-rule-type :initarg :|analysisRuleType| :type
                         (common-lisp:or configured-table-analysis-rule-type
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-analysis-rule-input-analysis-rule-type
                         :initform
                         (common-lisp:error ":analysisruletype is required"))
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-analysis-rule-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-input
                    'make-update-configured-table-analysis-rule-input))
 (common-lisp:defun make-update-configured-table-analysis-rule-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule-policy analysis-rule-type
                     configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-analysis-rule-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analysis-rule-policy))
      (common-lisp:list
       (common-lisp:cons "analysisRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-analysis-rule-output
                       common-lisp:nil
                       ((analysis-rule :initarg :|analysisRule| :type
                         (common-lisp:or configured-table-analysis-rule
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-analysis-rule-output-analysis-rule
                         :initform
                         (common-lisp:error ":analysisrule is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-analysis-rule-output
                    'make-update-configured-table-analysis-rule-output))
 (common-lisp:defun make-update-configured-table-analysis-rule-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-rule)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-analysis-rule-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-rule))
      (common-lisp:list
       (common-lisp:cons "analysisRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-analysis-rule-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-association-input
                       common-lisp:nil
                       ((role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-configured-table-association-input-role-arn
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor
                         %update-configured-table-association-input-description
                         :initform common-lisp:nil)
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-association-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))
                        (configured-table-association-identifier :initarg
                         :|configuredTableAssociationIdentifier| :type
                         (common-lisp:or
                          configured-table-association-identifier
                          common-lisp:null)
                         :accessor
                         %update-configured-table-association-input-configured-table-association-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableassociationidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-input
                    'make-update-configured-table-association-input))
 (common-lisp:defun make-update-configured-table-association-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn description
                     membership-identifier
                     configured-table-association-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-association-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-association-output
                       common-lisp:nil
                       ((configured-table-association :initarg
                         :|configuredTableAssociation| :type
                         (common-lisp:or configured-table-association
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-association-output-configured-table-association
                         :initform
                         (common-lisp:error
                          ":configuredtableassociation is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-association-output
                    'make-update-configured-table-association-output))
 (common-lisp:defun make-update-configured-table-association-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-association-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configured-table-association))
      (common-lisp:list
       (common-lisp:cons "configuredTableAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-association-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-input common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or table-description common-lisp:null)
                         :accessor %update-configured-table-input-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %update-configured-table-input-name
                         :initform common-lisp:nil)
                        (configured-table-identifier :initarg
                         :|configuredTableIdentifier| :type
                         (common-lisp:or configured-table-identifier
                                         common-lisp:null)
                         :accessor
                         %update-configured-table-input-configured-table-identifier
                         :initform
                         (common-lisp:error
                          ":configuredtableidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-input
                    'make-update-configured-table-input))
 (common-lisp:defun make-update-configured-table-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name
                     configured-table-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-configured-table-output common-lisp:nil
                       ((configured-table :initarg :|configuredTable| :type
                         (common-lisp:or configured-table common-lisp:null)
                         :accessor
                         %update-configured-table-output-configured-table
                         :initform
                         (common-lisp:error ":configuredtable is required"))))
 (common-lisp:export
  (common-lisp:list 'update-configured-table-output
                    'make-update-configured-table-output))
 (common-lisp:defun make-update-configured-table-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configured-table)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-configured-table-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-table))
      (common-lisp:list
       (common-lisp:cons "configuredTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-configured-table-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-membership-input common-lisp:nil
                       ((query-log-status :initarg :|queryLogStatus| :type
                         (common-lisp:or membership-query-log-status
                                         common-lisp:null)
                         :accessor %update-membership-input-query-log-status
                         :initform common-lisp:nil)
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %update-membership-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-membership-input 'make-update-membership-input))
 (common-lisp:defun make-update-membership-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-log-status membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'update-membership-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-log-status))
      (common-lisp:list
       (common-lisp:cons "queryLogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-membership-output common-lisp:nil
                       ((membership :initarg :|membership| :type
                         (common-lisp:or membership common-lisp:null) :accessor
                         %update-membership-output-membership :initform
                         (common-lisp:error ":membership is required"))))
 (common-lisp:export
  (common-lisp:list 'update-membership-output 'make-update-membership-output))
 (common-lisp:defun make-update-membership-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key membership)
   (common-lisp:apply #'common-lisp:make-instance 'update-membership-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership))
      (common-lisp:list
       (common-lisp:cons "membership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-membership-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-protected-query-input common-lisp:nil
                       ((target-status :initarg :|targetStatus| :type
                         (common-lisp:or target-protected-query-status
                                         common-lisp:null)
                         :accessor %update-protected-query-input-target-status
                         :initform
                         (common-lisp:error ":targetstatus is required"))
                        (protected-query-identifier :initarg
                         :|protectedQueryIdentifier| :type
                         (common-lisp:or protected-query-identifier
                                         common-lisp:null)
                         :accessor
                         %update-protected-query-input-protected-query-identifier
                         :initform
                         (common-lisp:error
                          ":protectedqueryidentifier is required"))
                        (membership-identifier :initarg :|membershipIdentifier|
                         :type
                         (common-lisp:or membership-identifier
                                         common-lisp:null)
                         :accessor
                         %update-protected-query-input-membership-identifier
                         :initform
                         (common-lisp:error
                          ":membershipidentifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-input
                    'make-update-protected-query-input))
 (common-lisp:defun make-update-protected-query-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status protected-query-identifier
                     membership-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'update-protected-query-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-protected-query-output common-lisp:nil
                       ((protected-query :initarg :|protectedQuery| :type
                         (common-lisp:or protected-query common-lisp:null)
                         :accessor
                         %update-protected-query-output-protected-query
                         :initform
                         (common-lisp:error ":protectedquery is required"))))
 (common-lisp:export
  (common-lisp:list 'update-protected-query-output
                    'make-update-protected-query-output))
 (common-lisp:defun make-update-protected-query-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protected-query)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-protected-query-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protected-query))
      (common-lisp:list
       (common-lisp:cons "protectedQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-protected-query-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cleanrooms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier names)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/batch-schema"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "BatchGetSchema"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-schema))
(common-lisp:progn
 (common-lisp:defun create-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key members name description
                     creator-member-abilities creator-display-name
                     data-encryption-metadata query-log-status tags)
   (common-lisp:declare
    (common-lisp:ignorable members name description creator-member-abilities
     creator-display-name data-encryption-metadata query-log-status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/collaborations"
                                                        "CreateCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-collaboration))
(common-lisp:progn
 (common-lisp:defun create-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description table-reference
                     allowed-columns analysis-method tags)
   (common-lisp:declare
    (common-lisp:ignorable name description table-reference allowed-columns
     analysis-method tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/configuredTables"
                                                        "CreateConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table))
(common-lisp:progn
 (common-lisp:defun create-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "CreateConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun create-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description membership-identifier
                     configured-table-identifier role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable name description membership-identifier
     configured-table-identifier role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "CreateConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-configured-table-association))
(common-lisp:progn
 (common-lisp:defun create-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier query-log-status
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier query-log-status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/memberships"
                                                        "CreateMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-membership))
(common-lisp:progn
 (common-lisp:defun delete-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "DeleteCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-collaboration))
(common-lisp:progn
 (common-lisp:defun delete-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "DeleteConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "DeleteConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun delete-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "DeleteConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-configured-table-association))
(common-lisp:progn
 (common-lisp:defun delete-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier account-id)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-member-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/member/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'account-id))))
                                                        "DeleteMember"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-member))
(common-lisp:progn
 (common-lisp:defun delete-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "DeleteMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-membership))
(common-lisp:progn
 (common-lisp:defun get-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "GetCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-collaboration))
(common-lisp:progn
 (common-lisp:defun get-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier)
   (common-lisp:declare (common-lisp:ignorable configured-table-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "GetConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table))
(common-lisp:progn
 (common-lisp:defun get-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "GetConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun get-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "GetConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-configured-table-association))
(common-lisp:progn
 (common-lisp:defun get-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier)
   (common-lisp:declare (common-lisp:ignorable membership-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "GetMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-membership))
(common-lisp:progn
 (common-lisp:defun get-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "GetProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-protected-query))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name)
   (common-lisp:declare (common-lisp:ignorable collaboration-identifier name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSchema"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun get-schema-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name type)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-analysis-rule-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'type))))
                                                        "GetSchemaAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-analysis-rule))
(common-lisp:progn
 (common-lisp:defun list-collaborations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results member-status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results member-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collaborations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/collaborations"
                                                        "ListCollaborations"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-collaborations))
(common-lisp:progn
 (common-lisp:defun list-configured-table-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configured-table-associations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListConfiguredTableAssociations"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configured-table-associations))
(common-lisp:progn
 (common-lisp:defun list-configured-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configured-tables-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/configuredTables"
                                                        "ListConfiguredTables"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configured-tables))
(common-lisp:progn
 (common-lisp:defun list-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-members-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/members"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListMembers"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-members))
(common-lisp:progn
 (common-lisp:defun list-memberships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status)
   (common-lisp:declare (common-lisp:ignorable next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-memberships-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/memberships"
                                                        "ListMemberships"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-memberships))
(common-lisp:progn
 (common-lisp:defun list-protected-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier status next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier status next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-protected-queries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "ListProtectedQueries"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-protected-queries))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier schema-type
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier schema-type next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A/schemas"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "ListSchemas"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type membership-identifier sql-parameters
                     result-configuration)
   (common-lisp:declare
    (common-lisp:ignorable type membership-identifier sql-parameters
     result-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "StartProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-protected-query))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-collaboration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collaboration-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable collaboration-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-collaboration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/collaborations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'collaboration-identifier))))
                                                        "UpdateCollaboration"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-collaboration))
(common-lisp:progn
 (common-lisp:defun update-configured-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier name
                     description)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-configured-table-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))))
                                                        "UpdateConfiguredTable"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table))
(common-lisp:progn
 (common-lisp:defun update-configured-table-analysis-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-identifier
                     analysis-rule-type analysis-rule-policy)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-identifier analysis-rule-type
     analysis-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-analysis-rule-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/configuredTables/~A/analysisRule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analysis-rule-type))))
                                                        "UpdateConfiguredTableAnalysisRule"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table-analysis-rule))
(common-lisp:progn
 (common-lisp:defun update-configured-table-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configured-table-association-identifier
                     membership-identifier description role-arn)
   (common-lisp:declare
    (common-lisp:ignorable configured-table-association-identifier
     membership-identifier description role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-configured-table-association-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/configuredTableAssociations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configured-table-association-identifier))))
                                                        "UpdateConfiguredTableAssociation"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-configured-table-association))
(common-lisp:progn
 (common-lisp:defun update-membership
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier query-log-status)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier query-log-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-membership-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))))
                                                        "UpdateMembership"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-membership))
(common-lisp:progn
 (common-lisp:defun update-protected-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key membership-identifier
                     protected-query-identifier target-status)
   (common-lisp:declare
    (common-lisp:ignorable membership-identifier protected-query-identifier
     target-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-protected-query-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cleanrooms-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/memberships/~A/protectedQueries/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'membership-identifier))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'protected-query-identifier))))
                                                        "UpdateProtectedQuery"
                                                        "2022-02-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-protected-query))
