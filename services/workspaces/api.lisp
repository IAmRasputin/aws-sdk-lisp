;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/workspaces/api
  (:use)
  (:nicknames #:aws/workspaces)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/workspaces/api)
(common-lisp:progn
 (common-lisp:defclass workspaces-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "workspaces" :protocol
                        :json))
 (common-lisp:export 'workspaces-request))
(common-lisp:progn
 (common-lisp:define-condition workspaces-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'workspaces-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InvalidParameterValuesException" . invalid-parameter-values-exception)
    ("InvalidResourceStateException" . invalid-resource-state-exception)
    ("OperationInProgressException" . operation-in-progress-exception)
    ("OperationNotSupportedException" . operation-not-supported-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceAssociatedException" . resource-associated-exception)
    ("ResourceCreationFailedException" . resource-creation-failed-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("UnsupportedNetworkConfigurationException"
     . unsupported-network-configuration-exception)
    ("UnsupportedWorkspaceConfigurationException"
     . unsupported-workspace-configuration-exception)
    ("WorkspacesDefaultRoleNotFoundException"
     . workspaces-default-role-not-found-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-modification common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %account-modification-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or workspace-error-code common-lisp:null)
                         :accessor %account-modification-error-code :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %account-modification-start-time :initform
                         common-lisp:nil)
                        (dedicated-tenancy-management-cidr-range :initarg
                         :dedicated-tenancy-management-cidr-range :type
                         (common-lisp:or
                          dedicated-tenancy-management-cidr-range
                          common-lisp:null)
                         :accessor
                         %account-modification-dedicated-tenancy-management-cidr-range
                         :initform common-lisp:nil)
                        (dedicated-tenancy-support :initarg
                         :dedicated-tenancy-support :type
                         (common-lisp:or dedicated-tenancy-support-result-enum
                                         common-lisp:null)
                         :accessor
                         %account-modification-dedicated-tenancy-support
                         :initform common-lisp:nil)
                        (modification-state :initarg :modification-state :type
                         (common-lisp:or
                          dedicated-tenancy-modification-state-enum
                          common-lisp:null)
                         :accessor %account-modification-modification-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-modification 'make-account-modification))
 (common-lisp:defun make-account-modification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code start-time
                     dedicated-tenancy-management-cidr-range
                     dedicated-tenancy-support modification-state)
   (common-lisp:apply #'common-lisp:make-instance 'account-modification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-modification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-modification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-state))
      (common-lisp:list
       (common-lisp:cons "ModificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-support))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancySupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-management-cidr-range))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancyManagementCidrRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-modification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-modification-list ()
   '(trivial-types:proper-list account-modification))
 (common-lisp:defun |make-account-modification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-modification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype add-in-name () 'common-lisp:string)
(common-lisp:deftype add-in-url () 'common-lisp:string)
(common-lisp:deftype alias () 'common-lisp:string)
(common-lisp:deftype amazon-uuid () 'common-lisp:string)
(common-lisp:deftype application () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-list ()
   '(trivial-types:proper-list application))
 (common-lisp:defun |make-application-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-connection-alias-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %associate-connection-alias-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor %associate-connection-alias-request-alias-id
                         :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-connection-alias-request
                    'make-associate-connection-alias-request))
 (common-lisp:defun make-associate-connection-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-connection-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-connection-alias-result common-lisp:nil
                       ((connection-identifier :initarg :connection-identifier
                         :type
                         (common-lisp:or connection-identifier
                                         common-lisp:null)
                         :accessor
                         %associate-connection-alias-result-connection-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-connection-alias-result
                    'make-associate-connection-alias-result))
 (common-lisp:defun make-associate-connection-alias-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-connection-alias-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-identifier))
      (common-lisp:list
       (common-lisp:cons "ConnectionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connection-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-ip-groups-request common-lisp:nil
                       ((group-ids :initarg :group-ids :type
                         (common-lisp:or ip-group-id-list common-lisp:null)
                         :accessor %associate-ip-groups-request-group-ids
                         :initform
                         (common-lisp:error ":group-ids is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %associate-ip-groups-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-ip-groups-request
                    'make-associate-ip-groups-request))
 (common-lisp:defun make-associate-ip-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-ids directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'associate-ip-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-ip-groups-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-ip-groups-result
                    'make-associate-ip-groups-result))
 (common-lisp:defun make-associate-ip-groups-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'associate-ip-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ip-groups-result))
   common-lisp:nil))
(common-lisp:deftype association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass authorize-ip-rules-request common-lisp:nil
                       ((user-rules :initarg :user-rules :type
                         (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor %authorize-ip-rules-request-user-rules
                         :initform
                         (common-lisp:error ":user-rules is required"))
                        (group-id :initarg :group-id :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %authorize-ip-rules-request-group-id
                         :initform
                         (common-lisp:error ":group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'authorize-ip-rules-request
                    'make-authorize-ip-rules-request))
 (common-lisp:defun make-authorize-ip-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-rules group-id)
   (common-lisp:apply #'common-lisp:make-instance 'authorize-ip-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-rules))
      (common-lisp:list
       (common-lisp:cons "UserRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-ip-rules-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'authorize-ip-rules-result
                    'make-authorize-ip-rules-result))
 (common-lisp:defun make-authorize-ip-rules-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'authorize-ip-rules-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-ip-rules-result))
   common-lisp:nil))
(common-lisp:deftype aws-account () 'common-lisp:string)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:deftype bundle-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bundle-id-list () '(trivial-types:proper-list bundle-id))
 (common-lisp:defun |make-bundle-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype bundle-list ()
   '(trivial-types:proper-list workspace-bundle))
 (common-lisp:defun |make-bundle-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bundle-owner () 'common-lisp:string)
(common-lisp:deftype bundle-type () 'common-lisp:string)
(common-lisp:deftype certificate-authority-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-based-auth-properties common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :type
                         (common-lisp:or certificate-authority-arn
                                         common-lisp:null)
                         :accessor
                         %certificate-based-auth-properties-certificate-authority-arn
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or certificate-based-auth-status-enum
                                         common-lisp:null)
                         :accessor %certificate-based-auth-properties-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-based-auth-properties
                    'make-certificate-based-auth-properties))
 (common-lisp:defun make-certificate-based-auth-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-authority-arn status)
   (common-lisp:apply #'common-lisp:make-instance
                      'certificate-based-auth-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   common-lisp:nil))
(common-lisp:deftype certificate-based-auth-status-enum () 'common-lisp:string)
(common-lisp:deftype client-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype client-device-type-list ()
   '(trivial-types:proper-list client-device-type))
 (common-lisp:defun |make-client-device-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list client-device-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-email () 'common-lisp:string)
(common-lisp:deftype client-locale () 'common-lisp:string)
(common-lisp:deftype client-login-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass client-properties common-lisp:nil
                       ((log-upload-enabled :initarg :log-upload-enabled :type
                         (common-lisp:or log-upload-enum common-lisp:null)
                         :accessor %client-properties-log-upload-enabled
                         :initform common-lisp:nil)
                        (reconnect-enabled :initarg :reconnect-enabled :type
                         (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor %client-properties-reconnect-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-properties 'make-client-properties))
 (common-lisp:defun make-client-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-upload-enabled reconnect-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'client-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reconnect-enabled))
      (common-lisp:list
       (common-lisp:cons "ReconnectEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-upload-enabled))
      (common-lisp:list
       (common-lisp:cons "LogUploadEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype client-properties-list ()
   '(trivial-types:proper-list client-properties-result))
 (common-lisp:defun |make-client-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            client-properties-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass client-properties-result common-lisp:nil
                       ((client-properties :initarg :client-properties :type
                         (common-lisp:or client-properties common-lisp:null)
                         :accessor %client-properties-result-client-properties
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %client-properties-result-resource-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-properties-result 'make-client-properties-result))
 (common-lisp:defun make-client-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-properties resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'client-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-properties-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-properties))
      (common-lisp:list
       (common-lisp:cons "ClientProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-properties-result))
   common-lisp:nil))
(common-lisp:deftype client-url () 'common-lisp:string)
(common-lisp:deftype compute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-type common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %compute-type-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compute-type 'make-compute-type))
 (common-lisp:defun make-compute-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'compute-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-type))
   common-lisp:nil))
(common-lisp:deftype computer-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connect-client-add-in common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or add-in-url common-lisp:null) :accessor
                         %connect-client-add-in-url :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or add-in-name common-lisp:null)
                         :accessor %connect-client-add-in-name :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %connect-client-add-in-resource-id :initform
                         common-lisp:nil)
                        (add-in-id :initarg :add-in-id :type
                         (common-lisp:or amazon-uuid common-lisp:null)
                         :accessor %connect-client-add-in-add-in-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connect-client-add-in 'make-connect-client-add-in))
 (common-lisp:defun make-connect-client-add-in
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name resource-id add-in-id)
   (common-lisp:apply #'common-lisp:make-instance 'connect-client-add-in
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-client-add-in))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-client-add-in))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-in-id))
      (common-lisp:list
       (common-lisp:cons "AddInId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-client-add-in))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connect-client-add-in-list ()
   '(trivial-types:proper-list connect-client-add-in))
 (common-lisp:defun |make-connect-client-add-in-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connect-client-add-in))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connection-alias common-lisp:nil
                       ((associations :initarg :associations :type
                         (common-lisp:or connection-alias-association-list
                                         common-lisp:null)
                         :accessor %connection-alias-associations :initform
                         common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor %connection-alias-owner-account-id :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or connection-alias-state
                                         common-lisp:null)
                         :accessor %connection-alias-state :initform
                         common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor %connection-alias-alias-id :initform
                         common-lisp:nil)
                        (connection-string :initarg :connection-string :type
                         (common-lisp:or connection-string common-lisp:null)
                         :accessor %connection-alias-connection-string
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-alias 'make-connection-alias))
 (common-lisp:defun make-connection-alias
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key associations owner-account-id state
                     alias-id connection-string)
   (common-lisp:apply #'common-lisp:make-instance 'connection-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-string))
      (common-lisp:list
       (common-lisp:cons "ConnectionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-alias-association common-lisp:nil
                       ((connection-identifier :initarg :connection-identifier
                         :type
                         (common-lisp:or connection-identifier
                                         common-lisp:null)
                         :accessor
                         %connection-alias-association-connection-identifier
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %connection-alias-association-resource-id
                         :initform common-lisp:nil)
                        (associated-account-id :initarg :associated-account-id
                         :type (common-lisp:or aws-account common-lisp:null)
                         :accessor
                         %connection-alias-association-associated-account-id
                         :initform common-lisp:nil)
                        (association-status :initarg :association-status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         %connection-alias-association-association-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-alias-association
                    'make-connection-alias-association))
 (common-lisp:defun make-connection-alias-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-identifier resource-id
                     associated-account-id association-status)
   (common-lisp:apply #'common-lisp:make-instance 'connection-alias-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-account-id))
      (common-lisp:list
       (common-lisp:cons "AssociatedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-identifier))
      (common-lisp:list
       (common-lisp:cons "ConnectionIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-alias-association-list ()
   '(trivial-types:proper-list connection-alias-association))
 (common-lisp:defun |make-connection-alias-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connection-alias-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-alias-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-alias-id-list ()
   '(trivial-types:proper-list connection-alias-id))
 (common-lisp:defun |make-connection-alias-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-alias-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connection-alias-list ()
   '(trivial-types:proper-list connection-alias))
 (common-lisp:defun |make-connection-alias-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-alias))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connection-alias-permission common-lisp:nil
                       ((allow-association :initarg :allow-association :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %connection-alias-permission-allow-association
                         :initform
                         (common-lisp:error ":allow-association is required"))
                        (shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor
                         %connection-alias-permission-shared-account-id
                         :initform
                         (common-lisp:error
                          ":shared-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'connection-alias-permission
                    'make-connection-alias-permission))
 (common-lisp:defun make-connection-alias-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-association shared-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'connection-alias-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-association))
      (common-lisp:list
       (common-lisp:cons "AllowAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-alias-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-alias-permissions ()
   '(trivial-types:proper-list connection-alias-permission))
 (common-lisp:defun |make-connection-alias-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connection-alias-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-alias-state () 'common-lisp:string)
(common-lisp:deftype connection-identifier () 'common-lisp:string)
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:deftype connection-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass copy-workspace-image-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %copy-workspace-image-request-tags :initform
                         common-lisp:nil)
                        (source-region :initarg :source-region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %copy-workspace-image-request-source-region :initform
                         (common-lisp:error ":source-region is required"))
                        (source-image-id :initarg :source-image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %copy-workspace-image-request-source-image-id
                         :initform
                         (common-lisp:error ":source-image-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor %copy-workspace-image-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %copy-workspace-image-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-workspace-image-request
                    'make-copy-workspace-image-request))
 (common-lisp:defun make-copy-workspace-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags source-region source-image-id
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'copy-workspace-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-id))
      (common-lisp:list
       (common-lisp:cons "SourceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-workspace-image-result common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %copy-workspace-image-result-image-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-workspace-image-result
                    'make-copy-workspace-image-result))
 (common-lisp:defun make-copy-workspace-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id)
   (common-lisp:apply #'common-lisp:make-instance 'copy-workspace-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-workspace-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connect-client-add-in-request common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or add-in-url common-lisp:null) :accessor
                         %create-connect-client-add-in-request-url :initform
                         (common-lisp:error ":url is required"))
                        (name :initarg :name :type
                         (common-lisp:or add-in-name common-lisp:null)
                         :accessor %create-connect-client-add-in-request-name
                         :initform (common-lisp:error ":name is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %create-connect-client-add-in-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connect-client-add-in-request
                    'make-create-connect-client-add-in-request))
 (common-lisp:defun make-create-connect-client-add-in-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connect-client-add-in-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connect-client-add-in-result common-lisp:nil
                       ((add-in-id :initarg :add-in-id :type
                         (common-lisp:or amazon-uuid common-lisp:null)
                         :accessor
                         %create-connect-client-add-in-result-add-in-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connect-client-add-in-result
                    'make-create-connect-client-add-in-result))
 (common-lisp:defun make-create-connect-client-add-in-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key add-in-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connect-client-add-in-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-in-id))
      (common-lisp:list
       (common-lisp:cons "AddInId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-client-add-in-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-alias-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-connection-alias-request-tags :initform
                         common-lisp:nil)
                        (connection-string :initarg :connection-string :type
                         (common-lisp:or connection-string common-lisp:null)
                         :accessor
                         %create-connection-alias-request-connection-string
                         :initform
                         (common-lisp:error
                          ":connection-string is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-alias-request
                    'make-create-connection-alias-request))
 (common-lisp:defun make-create-connection-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags connection-string)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-string))
      (common-lisp:list
       (common-lisp:cons "ConnectionString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-alias-result common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor %create-connection-alias-result-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connection-alias-result
                    'make-create-connection-alias-result))
 (common-lisp:defun make-create-connection-alias-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connection-alias-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ip-group-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-ip-group-request-tags :initform
                         common-lisp:nil)
                        (user-rules :initarg :user-rules :type
                         (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor %create-ip-group-request-user-rules
                         :initform common-lisp:nil)
                        (group-desc :initarg :group-desc :type
                         (common-lisp:or ip-group-desc common-lisp:null)
                         :accessor %create-ip-group-request-group-desc
                         :initform common-lisp:nil)
                        (group-name :initarg :group-name :type
                         (common-lisp:or ip-group-name common-lisp:null)
                         :accessor %create-ip-group-request-group-name
                         :initform
                         (common-lisp:error ":group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-ip-group-request 'make-create-ip-group-request))
 (common-lisp:defun make-create-ip-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags user-rules group-desc group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-ip-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-desc))
      (common-lisp:list
       (common-lisp:cons "GroupDesc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-rules))
      (common-lisp:list
       (common-lisp:cons "UserRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ip-group-result common-lisp:nil
                       ((group-id :initarg :group-id :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %create-ip-group-result-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ip-group-result 'make-create-ip-group-result))
 (common-lisp:defun make-create-ip-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-ip-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ip-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-standby-workspaces-request common-lisp:nil
                       ((standby-workspaces :initarg :standby-workspaces :type
                         (common-lisp:or standby-workspaces-list
                                         common-lisp:null)
                         :accessor
                         %create-standby-workspaces-request-standby-workspaces
                         :initform
                         (common-lisp:error ":standby-workspaces is required"))
                        (primary-region :initarg :primary-region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %create-standby-workspaces-request-primary-region
                         :initform
                         (common-lisp:error ":primary-region is required"))))
 (common-lisp:export
  (common-lisp:list 'create-standby-workspaces-request
                    'make-create-standby-workspaces-request))
 (common-lisp:defun make-create-standby-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standby-workspaces primary-region)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-standby-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standby-workspaces))
      (common-lisp:list
       (common-lisp:cons "StandbyWorkspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-standby-workspaces-result common-lisp:nil
                       ((pending-standby-requests :initarg
                         :pending-standby-requests :type
                         (common-lisp:or
                          pending-create-standby-workspaces-request-list
                          common-lisp:null)
                         :accessor
                         %create-standby-workspaces-result-pending-standby-requests
                         :initform common-lisp:nil)
                        (failed-standby-requests :initarg
                         :failed-standby-requests :type
                         (common-lisp:or
                          failed-create-standby-workspaces-request-list
                          common-lisp:null)
                         :accessor
                         %create-standby-workspaces-result-failed-standby-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-standby-workspaces-result
                    'make-create-standby-workspaces-result))
 (common-lisp:defun make-create-standby-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-standby-requests
                     failed-standby-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-standby-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-standby-requests))
      (common-lisp:list
       (common-lisp:cons "FailedStandbyRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-standby-requests))
      (common-lisp:list
       (common-lisp:cons "PendingStandbyRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-standby-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-tags-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %create-tags-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defun make-create-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-tags-result 'make-create-tags-result))
 (common-lisp:defun make-create-tags-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-updated-workspace-image-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-updated-workspace-image-request-tags :initform
                         common-lisp:nil)
                        (source-image-id :initarg :source-image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %create-updated-workspace-image-request-source-image-id
                         :initform
                         (common-lisp:error ":source-image-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor
                         %create-updated-workspace-image-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %create-updated-workspace-image-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-updated-workspace-image-request
                    'make-create-updated-workspace-image-request))
 (common-lisp:defun make-create-updated-workspace-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags source-image-id description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-updated-workspace-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-id))
      (common-lisp:list
       (common-lisp:cons "SourceImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-updated-workspace-image-result common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %create-updated-workspace-image-result-image-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-updated-workspace-image-result
                    'make-create-updated-workspace-image-result))
 (common-lisp:defun make-create-updated-workspace-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-updated-workspace-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-workspace-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-bundle-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-workspace-bundle-request-tags :initform
                         common-lisp:nil)
                        (root-storage :initarg :root-storage :type
                         (common-lisp:or root-storage common-lisp:null)
                         :accessor
                         %create-workspace-bundle-request-root-storage
                         :initform common-lisp:nil)
                        (user-storage :initarg :user-storage :type
                         (common-lisp:or user-storage common-lisp:null)
                         :accessor
                         %create-workspace-bundle-request-user-storage
                         :initform
                         (common-lisp:error ":user-storage is required"))
                        (compute-type :initarg :compute-type :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor
                         %create-workspace-bundle-request-compute-type
                         :initform
                         (common-lisp:error ":compute-type is required"))
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %create-workspace-bundle-request-image-id
                         :initform (common-lisp:error ":image-id is required"))
                        (bundle-description :initarg :bundle-description :type
                         (common-lisp:or workspace-bundle-description
                                         common-lisp:null)
                         :accessor
                         %create-workspace-bundle-request-bundle-description
                         :initform
                         (common-lisp:error ":bundle-description is required"))
                        (bundle-name :initarg :bundle-name :type
                         (common-lisp:or workspace-bundle-name
                                         common-lisp:null)
                         :accessor %create-workspace-bundle-request-bundle-name
                         :initform
                         (common-lisp:error ":bundle-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workspace-bundle-request
                    'make-create-workspace-bundle-request))
 (common-lisp:defun make-create-workspace-bundle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags root-storage user-storage
                     compute-type image-id bundle-description bundle-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-name))
      (common-lisp:list
       (common-lisp:cons "BundleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-description))
      (common-lisp:list
       (common-lisp:cons "BundleDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-storage))
      (common-lisp:list
       (common-lisp:cons "UserStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-storage))
      (common-lisp:list
       (common-lisp:cons "RootStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-bundle-result common-lisp:nil
                       ((workspace-bundle :initarg :workspace-bundle :type
                         (common-lisp:or workspace-bundle common-lisp:null)
                         :accessor
                         %create-workspace-bundle-result-workspace-bundle
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workspace-bundle-result
                    'make-create-workspace-bundle-result))
 (common-lisp:defun make-create-workspace-bundle-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-bundle)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-bundle))
      (common-lisp:list
       (common-lisp:cons "WorkspaceBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-image-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-workspace-image-request-tags :initform
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %create-workspace-image-request-workspace-id
                         :initform
                         (common-lisp:error ":workspace-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor %create-workspace-image-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %create-workspace-image-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workspace-image-request
                    'make-create-workspace-image-request))
 (common-lisp:defun make-create-workspace-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags workspace-id description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-image-result common-lisp:nil
                       ((owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor
                         %create-workspace-image-result-owner-account-id
                         :initform common-lisp:nil)
                        (created :initarg :created :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-workspace-image-result-created :initform
                         common-lisp:nil)
                        (required-tenancy :initarg :required-tenancy :type
                         (common-lisp:or workspace-image-required-tenancy
                                         common-lisp:null)
                         :accessor
                         %create-workspace-image-result-required-tenancy
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-image-state
                                         common-lisp:null)
                         :accessor %create-workspace-image-result-state
                         :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %create-workspace-image-result-operating-system
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor %create-workspace-image-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %create-workspace-image-result-name
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %create-workspace-image-result-image-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workspace-image-result
                    'make-create-workspace-image-result))
 (common-lisp:defun make-create-workspace-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner-account-id created required-tenancy
                     state operating-system description name image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workspace-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-tenancy))
      (common-lisp:list
       (common-lisp:cons "RequiredTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspaces-request common-lisp:nil
                       ((workspaces :initarg :workspaces :type
                         (common-lisp:or workspace-request-list
                                         common-lisp:null)
                         :accessor %create-workspaces-request-workspaces
                         :initform
                         (common-lisp:error ":workspaces is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workspaces-request
                    'make-create-workspaces-request))
 (common-lisp:defun make-create-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspaces)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "Workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspaces-result common-lisp:nil
                       ((pending-requests :initarg :pending-requests :type
                         (common-lisp:or workspace-list common-lisp:null)
                         :accessor %create-workspaces-result-pending-requests
                         :initform common-lisp:nil)
                        (failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-create-workspace-requests
                                         common-lisp:null)
                         :accessor %create-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workspaces-result 'make-create-workspaces-result))
 (common-lisp:defun make-create-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-requests failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-requests))
      (common-lisp:list
       (common-lisp:cons "PendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dedicated-tenancy-cidr-range-list ()
   '(trivial-types:proper-list dedicated-tenancy-management-cidr-range))
 (common-lisp:defun |make-dedicated-tenancy-cidr-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dedicated-tenancy-management-cidr-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dedicated-tenancy-management-cidr-range ()
  'common-lisp:string)
(common-lisp:deftype dedicated-tenancy-modification-state-enum ()
  'common-lisp:string)
(common-lisp:deftype dedicated-tenancy-support-enum () 'common-lisp:string)
(common-lisp:deftype dedicated-tenancy-support-result-enum ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass default-client-branding-attributes common-lisp:nil
                       ((login-message :initarg :login-message :type
                         (common-lisp:or login-message common-lisp:null)
                         :accessor
                         %default-client-branding-attributes-login-message
                         :initform common-lisp:nil)
                        (forgot-password-link :initarg :forgot-password-link
                         :type (common-lisp:or client-url common-lisp:null)
                         :accessor
                         %default-client-branding-attributes-forgot-password-link
                         :initform common-lisp:nil)
                        (support-link :initarg :support-link :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %default-client-branding-attributes-support-link
                         :initform common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or client-email common-lisp:null)
                         :accessor
                         %default-client-branding-attributes-support-email
                         :initform common-lisp:nil)
                        (logo-url :initarg :logo-url :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %default-client-branding-attributes-logo-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-client-branding-attributes
                    'make-default-client-branding-attributes))
 (common-lisp:defun make-default-client-branding-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-message forgot-password-link
                     support-link support-email logo-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-client-branding-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-client-branding-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-client-branding-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo-url))
      (common-lisp:list
       (common-lisp:cons "LogoUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-link))
      (common-lisp:list
       (common-lisp:cons "SupportLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forgot-password-link))
      (common-lisp:list
       (common-lisp:cons "ForgotPasswordLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-message))
      (common-lisp:list
       (common-lisp:cons "LoginMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-client-branding-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass default-import-client-branding-attributes
                       common-lisp:nil
                       ((login-message :initarg :login-message :type
                         (common-lisp:or login-message common-lisp:null)
                         :accessor
                         %default-import-client-branding-attributes-login-message
                         :initform common-lisp:nil)
                        (forgot-password-link :initarg :forgot-password-link
                         :type (common-lisp:or client-url common-lisp:null)
                         :accessor
                         %default-import-client-branding-attributes-forgot-password-link
                         :initform common-lisp:nil)
                        (support-link :initarg :support-link :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %default-import-client-branding-attributes-support-link
                         :initform common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or client-email common-lisp:null)
                         :accessor
                         %default-import-client-branding-attributes-support-email
                         :initform common-lisp:nil)
                        (logo :initarg :logo :type
                         (common-lisp:or default-logo common-lisp:null)
                         :accessor
                         %default-import-client-branding-attributes-logo
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-import-client-branding-attributes
                    'make-default-import-client-branding-attributes))
 (common-lisp:defun make-default-import-client-branding-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-message forgot-password-link
                     support-link support-email logo)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-import-client-branding-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-import-client-branding-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-import-client-branding-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "Logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-link))
      (common-lisp:list
       (common-lisp:cons "SupportLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forgot-password-link))
      (common-lisp:list
       (common-lisp:cons "ForgotPasswordLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-message))
      (common-lisp:list
       (common-lisp:cons "LoginMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-import-client-branding-attributes))
   common-lisp:nil))
(common-lisp:deftype default-logo ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype default-ou () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass default-workspace-creation-properties common-lisp:nil
                       ((enable-maintenance-mode :initarg
                         :enable-maintenance-mode :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %default-workspace-creation-properties-enable-maintenance-mode
                         :initform common-lisp:nil)
                        (user-enabled-as-local-administrator :initarg
                         :user-enabled-as-local-administrator :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %default-workspace-creation-properties-user-enabled-as-local-administrator
                         :initform common-lisp:nil)
                        (custom-security-group-id :initarg
                         :custom-security-group-id :type
                         (common-lisp:or security-group-id common-lisp:null)
                         :accessor
                         %default-workspace-creation-properties-custom-security-group-id
                         :initform common-lisp:nil)
                        (default-ou :initarg :default-ou :type
                         (common-lisp:or default-ou common-lisp:null) :accessor
                         %default-workspace-creation-properties-default-ou
                         :initform common-lisp:nil)
                        (enable-internet-access :initarg
                         :enable-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %default-workspace-creation-properties-enable-internet-access
                         :initform common-lisp:nil)
                        (enable-work-docs :initarg :enable-work-docs :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %default-workspace-creation-properties-enable-work-docs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'default-workspace-creation-properties
                    'make-default-workspace-creation-properties))
 (common-lisp:defun make-default-workspace-creation-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-maintenance-mode
                     user-enabled-as-local-administrator
                     custom-security-group-id default-ou enable-internet-access
                     enable-work-docs)
   (common-lisp:apply #'common-lisp:make-instance
                      'default-workspace-creation-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-work-docs))
      (common-lisp:list
       (common-lisp:cons "EnableWorkDocs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ou))
      (common-lisp:list
       (common-lisp:cons "DefaultOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-id))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-enabled-as-local-administrator))
      (common-lisp:list
       (common-lisp:cons "UserEnabledAsLocalAdministrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-maintenance-mode))
      (common-lisp:list
       (common-lisp:cons "EnableMaintenanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-workspace-creation-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deletable-certificate-based-auth-properties-list ()
   '(trivial-types:proper-list deletable-certificate-based-auth-property))
 (common-lisp:defun |make-deletable-certificate-based-auth-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deletable-certificate-based-auth-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deletable-certificate-based-auth-property ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deletable-saml-properties-list ()
   '(trivial-types:proper-list deletable-saml-property))
 (common-lisp:defun |make-deletable-saml-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deletable-saml-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deletable-saml-property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-client-branding-request common-lisp:nil
                       ((platforms :initarg :platforms :type
                         (common-lisp:or client-device-type-list
                                         common-lisp:null)
                         :accessor %delete-client-branding-request-platforms
                         :initform
                         (common-lisp:error ":platforms is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %delete-client-branding-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-client-branding-request
                    'make-delete-client-branding-request))
 (common-lisp:defun make-delete-client-branding-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platforms resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-client-branding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platforms))
      (common-lisp:list
       (common-lisp:cons "Platforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-client-branding-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-client-branding-result
                    'make-delete-client-branding-result))
 (common-lisp:defun make-delete-client-branding-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-client-branding-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-client-branding-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connect-client-add-in-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %delete-connect-client-add-in-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (add-in-id :initarg :add-in-id :type
                         (common-lisp:or amazon-uuid common-lisp:null)
                         :accessor
                         %delete-connect-client-add-in-request-add-in-id
                         :initform
                         (common-lisp:error ":add-in-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connect-client-add-in-request
                    'make-delete-connect-client-add-in-request))
 (common-lisp:defun make-delete-connect-client-add-in-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id add-in-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-connect-client-add-in-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-in-id))
      (common-lisp:list
       (common-lisp:cons "AddInId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connect-client-add-in-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-connect-client-add-in-result
                    'make-delete-connect-client-add-in-result))
 (common-lisp:defun make-delete-connect-client-add-in-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-connect-client-add-in-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-client-add-in-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-alias-request common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor %delete-connection-alias-request-alias-id
                         :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connection-alias-request
                    'make-delete-connection-alias-request))
 (common-lisp:defun make-delete-connection-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-connection-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-alias-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-connection-alias-result
                    'make-delete-connection-alias-result))
 (common-lisp:defun make-delete-connection-alias-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-connection-alias-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ip-group-request common-lisp:nil
                       ((group-id :initarg :group-id :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %delete-ip-group-request-group-id :initform
                         (common-lisp:error ":group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-ip-group-request 'make-delete-ip-group-request))
 (common-lisp:defun make-delete-ip-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ip-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ip-group-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-ip-group-result 'make-delete-ip-group-result))
 (common-lisp:defun make-delete-ip-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ip-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ip-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %delete-tags-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %delete-tags-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defun make-delete-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-tags-result 'make-delete-tags-result))
 (common-lisp:defun make-delete-tags-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-bundle-request common-lisp:nil
                       ((bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %delete-workspace-bundle-request-bundle-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-bundle-request
                    'make-delete-workspace-bundle-request))
 (common-lisp:defun make-delete-workspace-bundle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bundle-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-bundle-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-workspace-bundle-result
                    'make-delete-workspace-bundle-result))
 (common-lisp:defun make-delete-workspace-bundle-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-image-request common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %delete-workspace-image-request-image-id
                         :initform
                         (common-lisp:error ":image-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-image-request
                    'make-delete-workspace-image-request))
 (common-lisp:defun make-delete-workspace-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-image-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-workspace-image-result
                    'make-delete-workspace-image-result))
 (common-lisp:defun make-delete-workspace-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workspace-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-workspace-directory-request common-lisp:nil
                       ((directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %deregister-workspace-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-workspace-directory-request
                    'make-deregister-workspace-directory-request))
 (common-lisp:defun make-deregister-workspace-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-workspace-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-workspace-directory-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-workspace-directory-result
                    'make-deregister-workspace-directory-result))
 (common-lisp:defun make-deregister-workspace-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-workspace-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-workspace-directory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-modifications-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-account-modifications-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-modifications-request
                    'make-describe-account-modifications-request))
 (common-lisp:defun make-describe-account-modifications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-modifications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-modifications-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-account-modifications-result-next-token
                         :initform common-lisp:nil)
                        (account-modifications :initarg :account-modifications
                         :type
                         (common-lisp:or account-modification-list
                                         common-lisp:null)
                         :accessor
                         %describe-account-modifications-result-account-modifications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-modifications-result
                    'make-describe-account-modifications-result))
 (common-lisp:defun make-describe-account-modifications-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-modifications)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-modifications-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-modifications))
      (common-lisp:list
       (common-lisp:cons "AccountModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-modifications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'describe-account-request 'make-describe-account-request))
 (common-lisp:defun make-describe-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'describe-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-result common-lisp:nil
                       ((dedicated-tenancy-management-cidr-range :initarg
                         :dedicated-tenancy-management-cidr-range :type
                         (common-lisp:or
                          dedicated-tenancy-management-cidr-range
                          common-lisp:null)
                         :accessor
                         %describe-account-result-dedicated-tenancy-management-cidr-range
                         :initform common-lisp:nil)
                        (dedicated-tenancy-support :initarg
                         :dedicated-tenancy-support :type
                         (common-lisp:or dedicated-tenancy-support-result-enum
                                         common-lisp:null)
                         :accessor
                         %describe-account-result-dedicated-tenancy-support
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-result 'make-describe-account-result))
 (common-lisp:defun make-describe-account-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dedicated-tenancy-management-cidr-range
                     dedicated-tenancy-support)
   (common-lisp:apply #'common-lisp:make-instance 'describe-account-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-support))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancySupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-management-cidr-range))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancyManagementCidrRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-branding-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-client-branding-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-client-branding-request
                    'make-describe-client-branding-request))
 (common-lisp:defun make-describe-client-branding-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-branding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-branding-result common-lisp:nil
                       ((device-type-web :initarg :device-type-web :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-web
                         :initform common-lisp:nil)
                        (device-type-linux :initarg :device-type-linux :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-linux
                         :initform common-lisp:nil)
                        (device-type-ios :initarg :device-type-ios :type
                         (common-lisp:or ios-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-ios
                         :initform common-lisp:nil)
                        (device-type-android :initarg :device-type-android
                         :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-android
                         :initform common-lisp:nil)
                        (device-type-osx :initarg :device-type-osx :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-osx
                         :initform common-lisp:nil)
                        (device-type-windows :initarg :device-type-windows
                         :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %describe-client-branding-result-device-type-windows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-client-branding-result
                    'make-describe-client-branding-result))
 (common-lisp:defun make-describe-client-branding-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type-web device-type-linux
                     device-type-ios device-type-android device-type-osx
                     device-type-windows)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-branding-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-windows))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-osx))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeOsx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-android))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeAndroid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-ios))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeIos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-linux))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeLinux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-web))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWeb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-branding-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-properties-request common-lisp:nil
                       ((resource-ids :initarg :resource-ids :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor
                         %describe-client-properties-request-resource-ids
                         :initform
                         (common-lisp:error ":resource-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-client-properties-request
                    'make-describe-client-properties-request))
 (common-lisp:defun make-describe-client-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-client-properties-result common-lisp:nil
                       ((client-properties-list :initarg
                         :client-properties-list :type
                         (common-lisp:or client-properties-list
                                         common-lisp:null)
                         :accessor
                         %describe-client-properties-result-client-properties-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-client-properties-result
                    'make-describe-client-properties-result))
 (common-lisp:defun make-describe-client-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-properties-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-client-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-properties-list))
      (common-lisp:list
       (common-lisp:cons "ClientPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-client-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connect-client-add-ins-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-connect-client-add-ins-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connect-client-add-ins-request-next-token
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %describe-connect-client-add-ins-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-connect-client-add-ins-request
                    'make-describe-connect-client-add-ins-request))
 (common-lisp:defun make-describe-connect-client-add-ins-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connect-client-add-ins-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connect-client-add-ins-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connect-client-add-ins-result-next-token
                         :initform common-lisp:nil)
                        (add-ins :initarg :add-ins :type
                         (common-lisp:or connect-client-add-in-list
                                         common-lisp:null)
                         :accessor
                         %describe-connect-client-add-ins-result-add-ins
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-connect-client-add-ins-result
                    'make-describe-connect-client-add-ins-result))
 (common-lisp:defun make-describe-connect-client-add-ins-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token add-ins)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connect-client-add-ins-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ins))
      (common-lisp:list
       (common-lisp:cons "AddIns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connect-client-add-ins-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-alias-permissions-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-connection-alias-permissions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connection-alias-permissions-request-next-token
                         :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor
                         %describe-connection-alias-permissions-request-alias-id
                         :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-connection-alias-permissions-request
                    'make-describe-connection-alias-permissions-request))
 (common-lisp:defun make-describe-connection-alias-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-alias-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-alias-permissions-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connection-alias-permissions-result-next-token
                         :initform common-lisp:nil)
                        (connection-alias-permissions :initarg
                         :connection-alias-permissions :type
                         (common-lisp:or connection-alias-permissions
                                         common-lisp:null)
                         :accessor
                         %describe-connection-alias-permissions-result-connection-alias-permissions
                         :initform common-lisp:nil)
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor
                         %describe-connection-alias-permissions-result-alias-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-alias-permissions-result
                    'make-describe-connection-alias-permissions-result))
 (common-lisp:defun make-describe-connection-alias-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connection-alias-permissions
                     alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-alias-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-alias-permissions))
      (common-lisp:list
       (common-lisp:cons "ConnectionAliasPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-alias-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-aliases-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connection-aliases-request-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-connection-aliases-request-limit :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %describe-connection-aliases-request-resource-id
                         :initform common-lisp:nil)
                        (alias-ids :initarg :alias-ids :type
                         (common-lisp:or connection-alias-id-list
                                         common-lisp:null)
                         :accessor
                         %describe-connection-aliases-request-alias-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-aliases-request
                    'make-describe-connection-aliases-request))
 (common-lisp:defun make-describe-connection-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit resource-id alias-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-ids))
      (common-lisp:list
       (common-lisp:cons "AliasIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connection-aliases-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-connection-aliases-result-next-token
                         :initform common-lisp:nil)
                        (connection-aliases :initarg :connection-aliases :type
                         (common-lisp:or connection-alias-list
                                         common-lisp:null)
                         :accessor
                         %describe-connection-aliases-result-connection-aliases
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-aliases-result
                    'make-describe-connection-aliases-result))
 (common-lisp:defun make-describe-connection-aliases-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connection-aliases)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connection-aliases-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-aliases))
      (common-lisp:list
       (common-lisp:cons "ConnectionAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connection-aliases-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ip-groups-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-ip-groups-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %describe-ip-groups-request-next-token
                         :initform common-lisp:nil)
                        (group-ids :initarg :group-ids :type
                         (common-lisp:or ip-group-id-list common-lisp:null)
                         :accessor %describe-ip-groups-request-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ip-groups-request
                    'make-describe-ip-groups-request))
 (common-lisp:defun make-describe-ip-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token group-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ip-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ip-groups-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %describe-ip-groups-result-next-token
                         :initform common-lisp:nil)
                        (result :initarg :result :type
                         (common-lisp:or workspaces-ip-groups-list
                                         common-lisp:null)
                         :accessor %describe-ip-groups-result-result :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ip-groups-result
                    'make-describe-ip-groups-result))
 (common-lisp:defun make-describe-ip-groups-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token result)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ip-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ip-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %describe-tags-request-resource-id :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defun make-describe-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-result common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %describe-tags-result-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-result 'make-describe-tags-result))
 (common-lisp:defun make-describe-tags-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-bundles-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-bundles-request-next-token
                         :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or bundle-owner common-lisp:null)
                         :accessor %describe-workspace-bundles-request-owner
                         :initform common-lisp:nil)
                        (bundle-ids :initarg :bundle-ids :type
                         (common-lisp:or bundle-id-list common-lisp:null)
                         :accessor
                         %describe-workspace-bundles-request-bundle-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-bundles-request
                    'make-describe-workspace-bundles-request))
 (common-lisp:defun make-describe-workspace-bundles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token owner bundle-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-ids))
      (common-lisp:list
       (common-lisp:cons "BundleIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-bundles-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-bundles-result-next-token
                         :initform common-lisp:nil)
                        (bundles :initarg :bundles :type
                         (common-lisp:or bundle-list common-lisp:null)
                         :accessor %describe-workspace-bundles-result-bundles
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-bundles-result
                    'make-describe-workspace-bundles-result))
 (common-lisp:defun make-describe-workspace-bundles-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bundles)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "Bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-directories-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-directories-request-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-workspace-directories-request-limit
                         :initform common-lisp:nil)
                        (directory-ids :initarg :directory-ids :type
                         (common-lisp:or directory-id-list common-lisp:null)
                         :accessor
                         %describe-workspace-directories-request-directory-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-directories-request
                    'make-describe-workspace-directories-request))
 (common-lisp:defun make-describe-workspace-directories-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit directory-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-directories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-ids))
      (common-lisp:list
       (common-lisp:cons "DirectoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-directories-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-directories-result-next-token
                         :initform common-lisp:nil)
                        (directories :initarg :directories :type
                         (common-lisp:or directory-list common-lisp:null)
                         :accessor
                         %describe-workspace-directories-result-directories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-directories-result
                    'make-describe-workspace-directories-result))
 (common-lisp:defun make-describe-workspace-directories-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token directories)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-directories-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directories))
      (common-lisp:list
       (common-lisp:cons "Directories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-directories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-image-permissions-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-workspace-image-permissions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-image-permissions-request-next-token
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %describe-workspace-image-permissions-request-image-id
                         :initform
                         (common-lisp:error ":image-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-image-permissions-request
                    'make-describe-workspace-image-permissions-request))
 (common-lisp:defun make-describe-workspace-image-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-image-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-image-permissions-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-image-permissions-result-next-token
                         :initform common-lisp:nil)
                        (image-permissions :initarg :image-permissions :type
                         (common-lisp:or image-permissions common-lisp:null)
                         :accessor
                         %describe-workspace-image-permissions-result-image-permissions
                         :initform common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %describe-workspace-image-permissions-result-image-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-image-permissions-result
                    'make-describe-workspace-image-permissions-result))
 (common-lisp:defun make-describe-workspace-image-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-permissions image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-image-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-permissions))
      (common-lisp:list
       (common-lisp:cons "ImagePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-image-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-images-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-workspace-images-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspace-images-request-next-token
                         :initform common-lisp:nil)
                        (image-type :initarg :image-type :type
                         (common-lisp:or image-type common-lisp:null) :accessor
                         %describe-workspace-images-request-image-type
                         :initform common-lisp:nil)
                        (image-ids :initarg :image-ids :type
                         (common-lisp:or workspace-image-id-list
                                         common-lisp:null)
                         :accessor %describe-workspace-images-request-image-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-images-request
                    'make-describe-workspace-images-request))
 (common-lisp:defun make-describe-workspace-images-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token image-type
                     image-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-ids))
      (common-lisp:list
       (common-lisp:cons "ImageIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-type))
      (common-lisp:list
       (common-lisp:cons "ImageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-images-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %describe-workspace-images-result-next-token
                         :initform common-lisp:nil)
                        (images :initarg :images :type
                         (common-lisp:or workspace-image-list common-lisp:null)
                         :accessor %describe-workspace-images-result-images
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-images-result
                    'make-describe-workspace-images-result))
 (common-lisp:defun make-describe-workspace-images-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token images)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-images-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "Images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-snapshots-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %describe-workspace-snapshots-request-workspace-id
                         :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-snapshots-request
                    'make-describe-workspace-snapshots-request))
 (common-lisp:defun make-describe-workspace-snapshots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-snapshots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspace-snapshots-result common-lisp:nil
                       ((restore-snapshots :initarg :restore-snapshots :type
                         (common-lisp:or snapshot-list common-lisp:null)
                         :accessor
                         %describe-workspace-snapshots-result-restore-snapshots
                         :initform common-lisp:nil)
                        (rebuild-snapshots :initarg :rebuild-snapshots :type
                         (common-lisp:or snapshot-list common-lisp:null)
                         :accessor
                         %describe-workspace-snapshots-result-rebuild-snapshots
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspace-snapshots-result
                    'make-describe-workspace-snapshots-result))
 (common-lisp:defun make-describe-workspace-snapshots-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restore-snapshots rebuild-snapshots)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspace-snapshots-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rebuild-snapshots))
      (common-lisp:list
       (common-lisp:cons "RebuildSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-snapshots))
      (common-lisp:list
       (common-lisp:cons "RestoreSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspace-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspaces-connection-status-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspaces-connection-status-request-next-token
                         :initform common-lisp:nil)
                        (workspace-ids :initarg :workspace-ids :type
                         (common-lisp:or workspace-id-list common-lisp:null)
                         :accessor
                         %describe-workspaces-connection-status-request-workspace-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-connection-status-request
                    'make-describe-workspaces-connection-status-request))
 (common-lisp:defun make-describe-workspaces-connection-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token workspace-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspaces-connection-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-ids))
      (common-lisp:list
       (common-lisp:cons "WorkspaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspaces-connection-status-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %describe-workspaces-connection-status-result-next-token
                         :initform common-lisp:nil)
                        (workspaces-connection-status :initarg
                         :workspaces-connection-status :type
                         (common-lisp:or workspace-connection-status-list
                                         common-lisp:null)
                         :accessor
                         %describe-workspaces-connection-status-result-workspaces-connection-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-connection-status-result
                    'make-describe-workspaces-connection-status-result))
 (common-lisp:defun make-describe-workspaces-connection-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token workspaces-connection-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-workspaces-connection-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspaces-connection-status))
      (common-lisp:list
       (common-lisp:cons "WorkspacesConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-connection-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspaces-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %describe-workspaces-request-next-token
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         %describe-workspaces-request-limit :initform
                         common-lisp:nil)
                        (bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %describe-workspaces-request-bundle-id :initform
                         common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %describe-workspaces-request-user-name :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %describe-workspaces-request-directory-id
                         :initform common-lisp:nil)
                        (workspace-ids :initarg :workspace-ids :type
                         (common-lisp:or workspace-id-list common-lisp:null)
                         :accessor %describe-workspaces-request-workspace-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-request
                    'make-describe-workspaces-request))
 (common-lisp:defun make-describe-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit bundle-id user-name
                     directory-id workspace-ids)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-ids))
      (common-lisp:list
       (common-lisp:cons "WorkspaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workspaces-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %describe-workspaces-result-next-token
                         :initform common-lisp:nil)
                        (workspaces :initarg :workspaces :type
                         (common-lisp:or workspace-list common-lisp:null)
                         :accessor %describe-workspaces-result-workspaces
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-workspaces-result
                    'make-describe-workspaces-result))
 (common-lisp:defun make-describe-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token workspaces)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspaces))
      (common-lisp:list
       (common-lisp:cons "Workspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-id-list ()
   '(trivial-types:proper-list directory-id))
 (common-lisp:defun |make-directory-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype directory-list ()
   '(trivial-types:proper-list workspace-directory))
 (common-lisp:defun |make-directory-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-directory))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-connection-alias-request common-lisp:nil
                       ((alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor
                         %disassociate-connection-alias-request-alias-id
                         :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-connection-alias-request
                    'make-disassociate-connection-alias-request))
 (common-lisp:defun make-disassociate-connection-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connection-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-connection-alias-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-connection-alias-result
                    'make-disassociate-connection-alias-result))
 (common-lisp:defun make-disassociate-connection-alias-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connection-alias-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connection-alias-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-ip-groups-request common-lisp:nil
                       ((group-ids :initarg :group-ids :type
                         (common-lisp:or ip-group-id-list common-lisp:null)
                         :accessor %disassociate-ip-groups-request-group-ids
                         :initform
                         (common-lisp:error ":group-ids is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %disassociate-ip-groups-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-ip-groups-request
                    'make-disassociate-ip-groups-request))
 (common-lisp:defun make-disassociate-ip-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-ids directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ip-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-ids))
      (common-lisp:list
       (common-lisp:cons "GroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-ip-groups-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-ip-groups-result
                    'make-disassociate-ip-groups-result))
 (common-lisp:defun make-disassociate-ip-groups-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ip-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ip-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dns-ip-addresses ()
   '(trivial-types:proper-list ip-address))
 (common-lisp:defun |make-dns-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ec2image-id () 'common-lisp:string)
(common-lisp:deftype error-type () 'common-lisp:string)
(common-lisp:deftype exception-error-code () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failed-create-standby-workspaces-request common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %failed-create-standby-workspaces-request-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or workspace-error-code common-lisp:null)
                         :accessor
                         %failed-create-standby-workspaces-request-error-code
                         :initform common-lisp:nil)
                        (standby-workspace-request :initarg
                         :standby-workspace-request :type
                         (common-lisp:or standby-workspace common-lisp:null)
                         :accessor
                         %failed-create-standby-workspaces-request-standby-workspace-request
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-create-standby-workspaces-request
                    'make-failed-create-standby-workspaces-request))
 (common-lisp:defun make-failed-create-standby-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     standby-workspace-request)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-create-standby-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-standby-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-standby-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standby-workspace-request))
      (common-lisp:list
       (common-lisp:cons "StandbyWorkspaceRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-standby-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-create-standby-workspaces-request-list ()
   '(trivial-types:proper-list failed-create-standby-workspaces-request))
 (common-lisp:defun |make-failed-create-standby-workspaces-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-create-standby-workspaces-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-create-workspace-request common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %failed-create-workspace-request-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         %failed-create-workspace-request-error-code :initform
                         common-lisp:nil)
                        (workspace-request :initarg :workspace-request :type
                         (common-lisp:or workspace-request common-lisp:null)
                         :accessor
                         %failed-create-workspace-request-workspace-request
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-create-workspace-request
                    'make-failed-create-workspace-request))
 (common-lisp:defun make-failed-create-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     workspace-request)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-create-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-request))
      (common-lisp:list
       (common-lisp:cons "WorkspaceRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-create-workspace-requests ()
   '(trivial-types:proper-list failed-create-workspace-request))
 (common-lisp:defun |make-failed-create-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-create-workspace-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-reboot-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-reboot-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-rebuild-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-rebuild-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-start-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-start-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-stop-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-stop-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype failed-terminate-workspace-requests ()
   '(trivial-types:proper-list failed-workspace-change-request))
 (common-lisp:defun |make-failed-terminate-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-workspace-change-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-workspace-change-request common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %failed-workspace-change-request-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         %failed-workspace-change-request-error-code :initform
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %failed-workspace-change-request-workspace-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-workspace-change-request
                    'make-failed-workspace-change-request))
 (common-lisp:defun make-failed-workspace-change-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-workspace-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-workspace-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-permission common-lisp:nil
                       ((shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor %image-permission-shared-account-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-permission 'make-image-permission))
 (common-lisp:defun make-image-permission
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'image-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-permissions ()
   '(trivial-types:proper-list image-permission))
 (common-lisp:defun |make-image-permissions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-client-branding-request common-lisp:nil
                       ((device-type-web :initarg :device-type-web :type
                         (common-lisp:or
                          default-import-client-branding-attributes
                          common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-web
                         :initform common-lisp:nil)
                        (device-type-linux :initarg :device-type-linux :type
                         (common-lisp:or
                          default-import-client-branding-attributes
                          common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-linux
                         :initform common-lisp:nil)
                        (device-type-ios :initarg :device-type-ios :type
                         (common-lisp:or ios-import-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-ios
                         :initform common-lisp:nil)
                        (device-type-android :initarg :device-type-android
                         :type
                         (common-lisp:or
                          default-import-client-branding-attributes
                          common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-android
                         :initform common-lisp:nil)
                        (device-type-osx :initarg :device-type-osx :type
                         (common-lisp:or
                          default-import-client-branding-attributes
                          common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-osx
                         :initform common-lisp:nil)
                        (device-type-windows :initarg :device-type-windows
                         :type
                         (common-lisp:or
                          default-import-client-branding-attributes
                          common-lisp:null)
                         :accessor
                         %import-client-branding-request-device-type-windows
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %import-client-branding-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-client-branding-request
                    'make-import-client-branding-request))
 (common-lisp:defun make-import-client-branding-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type-web device-type-linux
                     device-type-ios device-type-android device-type-osx
                     device-type-windows resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-client-branding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-windows))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-osx))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeOsx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-android))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeAndroid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-ios))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeIos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-linux))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeLinux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-web))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWeb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-client-branding-result common-lisp:nil
                       ((device-type-web :initarg :device-type-web :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-web
                         :initform common-lisp:nil)
                        (device-type-linux :initarg :device-type-linux :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-linux
                         :initform common-lisp:nil)
                        (device-type-ios :initarg :device-type-ios :type
                         (common-lisp:or ios-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-ios
                         :initform common-lisp:nil)
                        (device-type-android :initarg :device-type-android
                         :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-android
                         :initform common-lisp:nil)
                        (device-type-osx :initarg :device-type-osx :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-osx
                         :initform common-lisp:nil)
                        (device-type-windows :initarg :device-type-windows
                         :type
                         (common-lisp:or default-client-branding-attributes
                                         common-lisp:null)
                         :accessor
                         %import-client-branding-result-device-type-windows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-client-branding-result
                    'make-import-client-branding-result))
 (common-lisp:defun make-import-client-branding-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type-web device-type-linux
                     device-type-ios device-type-android device-type-osx
                     device-type-windows)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-client-branding-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-windows))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-osx))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeOsx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-android))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeAndroid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-ios))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeIos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-linux))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeLinux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-web))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWeb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-client-branding-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-workspace-image-request common-lisp:nil
                       ((applications :initarg :applications :type
                         (common-lisp:or application-list common-lisp:null)
                         :accessor %import-workspace-image-request-applications
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %import-workspace-image-request-tags :initform
                         common-lisp:nil)
                        (image-description :initarg :image-description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor
                         %import-workspace-image-request-image-description
                         :initform
                         (common-lisp:error ":image-description is required"))
                        (image-name :initarg :image-name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %import-workspace-image-request-image-name
                         :initform
                         (common-lisp:error ":image-name is required"))
                        (ingestion-process :initarg :ingestion-process :type
                         (common-lisp:or workspace-image-ingestion-process
                                         common-lisp:null)
                         :accessor
                         %import-workspace-image-request-ingestion-process
                         :initform
                         (common-lisp:error ":ingestion-process is required"))
                        (ec2image-id :initarg :ec2image-id :type
                         (common-lisp:or ec2image-id common-lisp:null)
                         :accessor %import-workspace-image-request-ec2image-id
                         :initform
                         (common-lisp:error ":ec2image-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-workspace-image-request
                    'make-import-workspace-image-request))
 (common-lisp:defun make-import-workspace-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applications tags image-description
                     image-name ingestion-process ec2image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-workspace-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2image-id))
      (common-lisp:list
       (common-lisp:cons "Ec2ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-process))
      (common-lisp:list
       (common-lisp:cons "IngestionProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-description))
      (common-lisp:list
       (common-lisp:cons "ImageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-workspace-image-result common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %import-workspace-image-result-image-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-workspace-image-result
                    'make-import-workspace-image-result))
 (common-lisp:defun make-import-workspace-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-workspace-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-workspace-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-values-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-values-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-values-exception
                    'invalid-parameter-values-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-resource-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-exception
                    'invalid-resource-state-exception-message)))
(common-lisp:deftype ios2xlogo ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype ios3xlogo ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass ios-client-branding-attributes common-lisp:nil
                       ((login-message :initarg :login-message :type
                         (common-lisp:or login-message common-lisp:null)
                         :accessor
                         %ios-client-branding-attributes-login-message
                         :initform common-lisp:nil)
                        (forgot-password-link :initarg :forgot-password-link
                         :type (common-lisp:or client-url common-lisp:null)
                         :accessor
                         %ios-client-branding-attributes-forgot-password-link
                         :initform common-lisp:nil)
                        (support-link :initarg :support-link :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %ios-client-branding-attributes-support-link :initform
                         common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or client-email common-lisp:null)
                         :accessor
                         %ios-client-branding-attributes-support-email
                         :initform common-lisp:nil)
                        (logo3x-url :initarg :logo3x-url :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %ios-client-branding-attributes-logo3x-url :initform
                         common-lisp:nil)
                        (logo2x-url :initarg :logo2x-url :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %ios-client-branding-attributes-logo2x-url :initform
                         common-lisp:nil)
                        (logo-url :initarg :logo-url :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %ios-client-branding-attributes-logo-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ios-client-branding-attributes
                    'make-ios-client-branding-attributes))
 (common-lisp:defun make-ios-client-branding-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-message forgot-password-link
                     support-link support-email logo3x-url logo2x-url logo-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'ios-client-branding-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ios-client-branding-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ios-client-branding-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo-url))
      (common-lisp:list
       (common-lisp:cons "LogoUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo2x-url))
      (common-lisp:list
       (common-lisp:cons "Logo2xUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo3x-url))
      (common-lisp:list
       (common-lisp:cons "Logo3xUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-link))
      (common-lisp:list
       (common-lisp:cons "SupportLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forgot-password-link))
      (common-lisp:list
       (common-lisp:cons "ForgotPasswordLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-message))
      (common-lisp:list
       (common-lisp:cons "LoginMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ios-client-branding-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ios-import-client-branding-attributes common-lisp:nil
                       ((login-message :initarg :login-message :type
                         (common-lisp:or login-message common-lisp:null)
                         :accessor
                         %ios-import-client-branding-attributes-login-message
                         :initform common-lisp:nil)
                        (forgot-password-link :initarg :forgot-password-link
                         :type (common-lisp:or client-url common-lisp:null)
                         :accessor
                         %ios-import-client-branding-attributes-forgot-password-link
                         :initform common-lisp:nil)
                        (support-link :initarg :support-link :type
                         (common-lisp:or client-url common-lisp:null) :accessor
                         %ios-import-client-branding-attributes-support-link
                         :initform common-lisp:nil)
                        (support-email :initarg :support-email :type
                         (common-lisp:or client-email common-lisp:null)
                         :accessor
                         %ios-import-client-branding-attributes-support-email
                         :initform common-lisp:nil)
                        (logo3x :initarg :logo3x :type
                         (common-lisp:or ios3xlogo common-lisp:null) :accessor
                         %ios-import-client-branding-attributes-logo3x
                         :initform common-lisp:nil)
                        (logo2x :initarg :logo2x :type
                         (common-lisp:or ios2xlogo common-lisp:null) :accessor
                         %ios-import-client-branding-attributes-logo2x
                         :initform common-lisp:nil)
                        (logo :initarg :logo :type
                         (common-lisp:or ios-logo common-lisp:null) :accessor
                         %ios-import-client-branding-attributes-logo :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ios-import-client-branding-attributes
                    'make-ios-import-client-branding-attributes))
 (common-lisp:defun make-ios-import-client-branding-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-message forgot-password-link
                     support-link support-email logo3x logo2x logo)
   (common-lisp:apply #'common-lisp:make-instance
                      'ios-import-client-branding-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ios-import-client-branding-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ios-import-client-branding-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo))
      (common-lisp:list
       (common-lisp:cons "Logo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo2x))
      (common-lisp:list
       (common-lisp:cons "Logo2x"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo3x))
      (common-lisp:list
       (common-lisp:cons "Logo3x"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-email))
      (common-lisp:list
       (common-lisp:cons "SupportEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-link))
      (common-lisp:list
       (common-lisp:cons "SupportLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forgot-password-link))
      (common-lisp:list
       (common-lisp:cons "ForgotPasswordLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-message))
      (common-lisp:list
       (common-lisp:cons "LoginMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ios-import-client-branding-attributes))
   common-lisp:nil))
(common-lisp:deftype ios-logo ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-group-desc () 'common-lisp:string)
(common-lisp:deftype ip-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-group-id-list ()
   '(trivial-types:proper-list ip-group-id))
 (common-lisp:defun |make-ip-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ip-revoked-rule-list ()
   '(trivial-types:proper-list ip-rule))
 (common-lisp:defun |make-ip-revoked-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-rule () 'common-lisp:string)
(common-lisp:deftype ip-rule-desc () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ip-rule-item common-lisp:nil
                       ((rule-desc :initarg :|ruleDesc| :type
                         (common-lisp:or ip-rule-desc common-lisp:null)
                         :accessor %ip-rule-item-rule-desc :initform
                         common-lisp:nil)
                        (ip-rule :initarg :|ipRule| :type
                         (common-lisp:or ip-rule common-lisp:null) :accessor
                         %ip-rule-item-ip-rule :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ip-rule-item 'make-ip-rule-item))
 (common-lisp:defun make-ip-rule-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-desc ip-rule)
   (common-lisp:apply #'common-lisp:make-instance 'ip-rule-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-rule-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-rule-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-rule))
      (common-lisp:list
       (common-lisp:cons "ipRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-desc))
      (common-lisp:list
       (common-lisp:cons "ruleDesc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-rule-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-rule-list ()
   '(trivial-types:proper-list ip-rule-item))
 (common-lisp:defun |make-ip-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-rule-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-available-management-cidr-ranges-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-available-management-cidr-ranges-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or management-cidr-range-max-results
                                         common-lisp:null)
                         :accessor
                         %list-available-management-cidr-ranges-request-max-results
                         :initform common-lisp:nil)
                        (management-cidr-range-constraint :initarg
                         :management-cidr-range-constraint :type
                         (common-lisp:or management-cidr-range-constraint
                                         common-lisp:null)
                         :accessor
                         %list-available-management-cidr-ranges-request-management-cidr-range-constraint
                         :initform
                         (common-lisp:error
                          ":management-cidr-range-constraint is required"))))
 (common-lisp:export
  (common-lisp:list 'list-available-management-cidr-ranges-request
                    'make-list-available-management-cidr-ranges-request))
 (common-lisp:defun make-list-available-management-cidr-ranges-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     management-cidr-range-constraint)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-management-cidr-ranges-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-cidr-range-constraint))
      (common-lisp:list
       (common-lisp:cons "ManagementCidrRangeConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-available-management-cidr-ranges-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-available-management-cidr-ranges-result-next-token
                         :initform common-lisp:nil)
                        (management-cidr-ranges :initarg
                         :management-cidr-ranges :type
                         (common-lisp:or dedicated-tenancy-cidr-range-list
                                         common-lisp:null)
                         :accessor
                         %list-available-management-cidr-ranges-result-management-cidr-ranges
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-available-management-cidr-ranges-result
                    'make-list-available-management-cidr-ranges-result))
 (common-lisp:defun make-list-available-management-cidr-ranges-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token management-cidr-ranges)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-available-management-cidr-ranges-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-cidr-ranges))
      (common-lisp:list
       (common-lisp:cons "ManagementCidrRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-available-management-cidr-ranges-result))
   common-lisp:nil))
(common-lisp:deftype log-upload-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype login-message () 'common-lisp:hash-table)
 (common-lisp:defun |make-login-message| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype management-cidr-range-constraint () 'common-lisp:string)
(common-lisp:deftype management-cidr-range-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass migrate-workspace-request common-lisp:nil
                       ((bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %migrate-workspace-request-bundle-id :initform
                         (common-lisp:error ":bundle-id is required"))
                        (source-workspace-id :initarg :source-workspace-id
                         :type (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %migrate-workspace-request-source-workspace-id
                         :initform
                         (common-lisp:error
                          ":source-workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'migrate-workspace-request
                    'make-migrate-workspace-request))
 (common-lisp:defun make-migrate-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bundle-id source-workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'migrate-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-workspace-id))
      (common-lisp:list
       (common-lisp:cons "SourceWorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass migrate-workspace-result common-lisp:nil
                       ((target-workspace-id :initarg :target-workspace-id
                         :type (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %migrate-workspace-result-target-workspace-id
                         :initform common-lisp:nil)
                        (source-workspace-id :initarg :source-workspace-id
                         :type (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %migrate-workspace-result-source-workspace-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'migrate-workspace-result 'make-migrate-workspace-result))
 (common-lisp:defun make-migrate-workspace-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-workspace-id source-workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'migrate-workspace-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-workspace-id))
      (common-lisp:list
       (common-lisp:cons "SourceWorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-workspace-id))
      (common-lisp:list
       (common-lisp:cons "TargetWorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          migrate-workspace-result))
   common-lisp:nil))
(common-lisp:deftype modification-resource-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modification-state common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or modification-state-enum
                                         common-lisp:null)
                         :accessor %modification-state-state :initform
                         common-lisp:nil)
                        (resource :initarg :resource :type
                         (common-lisp:or modification-resource-enum
                                         common-lisp:null)
                         :accessor %modification-state-resource :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modification-state 'make-modification-state))
 (common-lisp:defun make-modification-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state resource)
   (common-lisp:apply #'common-lisp:make-instance 'modification-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modification-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modification-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modification-state))
   common-lisp:nil))
(common-lisp:deftype modification-state-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype modification-state-list ()
   '(trivial-types:proper-list modification-state))
 (common-lisp:defun |make-modification-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list modification-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass modify-account-request common-lisp:nil
                       ((dedicated-tenancy-management-cidr-range :initarg
                         :dedicated-tenancy-management-cidr-range :type
                         (common-lisp:or
                          dedicated-tenancy-management-cidr-range
                          common-lisp:null)
                         :accessor
                         %modify-account-request-dedicated-tenancy-management-cidr-range
                         :initform common-lisp:nil)
                        (dedicated-tenancy-support :initarg
                         :dedicated-tenancy-support :type
                         (common-lisp:or dedicated-tenancy-support-enum
                                         common-lisp:null)
                         :accessor
                         %modify-account-request-dedicated-tenancy-support
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-account-request 'make-modify-account-request))
 (common-lisp:defun make-modify-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dedicated-tenancy-management-cidr-range
                     dedicated-tenancy-support)
   (common-lisp:apply #'common-lisp:make-instance 'modify-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-support))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancySupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-tenancy-management-cidr-range))
      (common-lisp:list
       (common-lisp:cons "DedicatedTenancyManagementCidrRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-account-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-account-result 'make-modify-account-result))
 (common-lisp:defun make-modify-account-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'modify-account-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-account-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-certificate-based-auth-properties-request
                       common-lisp:nil
                       ((properties-to-delete :initarg :properties-to-delete
                         :type
                         (common-lisp:or
                          deletable-certificate-based-auth-properties-list
                          common-lisp:null)
                         :accessor
                         %modify-certificate-based-auth-properties-request-properties-to-delete
                         :initform common-lisp:nil)
                        (certificate-based-auth-properties :initarg
                         :certificate-based-auth-properties :type
                         (common-lisp:or certificate-based-auth-properties
                                         common-lisp:null)
                         :accessor
                         %modify-certificate-based-auth-properties-request-certificate-based-auth-properties
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %modify-certificate-based-auth-properties-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-certificate-based-auth-properties-request
                    'make-modify-certificate-based-auth-properties-request))
 (common-lisp:defun make-modify-certificate-based-auth-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key properties-to-delete
                     certificate-based-auth-properties resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-certificate-based-auth-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-based-auth-properties))
      (common-lisp:list
       (common-lisp:cons "CertificateBasedAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-to-delete))
      (common-lisp:list
       (common-lisp:cons "PropertiesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-certificate-based-auth-properties-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-certificate-based-auth-properties-result
                    'make-modify-certificate-based-auth-properties-result))
 (common-lisp:defun make-modify-certificate-based-auth-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-certificate-based-auth-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificate-based-auth-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-client-properties-request common-lisp:nil
                       ((client-properties :initarg :client-properties :type
                         (common-lisp:or client-properties common-lisp:null)
                         :accessor
                         %modify-client-properties-request-client-properties
                         :initform
                         (common-lisp:error ":client-properties is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor
                         %modify-client-properties-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-client-properties-request
                    'make-modify-client-properties-request))
 (common-lisp:defun make-modify-client-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-properties resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-client-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-properties))
      (common-lisp:list
       (common-lisp:cons "ClientProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-client-properties-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-client-properties-result
                    'make-modify-client-properties-result))
 (common-lisp:defun make-modify-client-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-client-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-client-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-saml-properties-request common-lisp:nil
                       ((properties-to-delete :initarg :properties-to-delete
                         :type
                         (common-lisp:or deletable-saml-properties-list
                                         common-lisp:null)
                         :accessor
                         %modify-saml-properties-request-properties-to-delete
                         :initform common-lisp:nil)
                        (saml-properties :initarg :saml-properties :type
                         (common-lisp:or saml-properties common-lisp:null)
                         :accessor
                         %modify-saml-properties-request-saml-properties
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %modify-saml-properties-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-saml-properties-request
                    'make-modify-saml-properties-request))
 (common-lisp:defun make-modify-saml-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key properties-to-delete saml-properties
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-saml-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-properties))
      (common-lisp:list
       (common-lisp:cons "SamlProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-to-delete))
      (common-lisp:list
       (common-lisp:cons "PropertiesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-saml-properties-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-saml-properties-result
                    'make-modify-saml-properties-result))
 (common-lisp:defun make-modify-saml-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-saml-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-saml-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-selfservice-permissions-request common-lisp:nil
                       ((selfservice-permissions :initarg
                         :selfservice-permissions :type
                         (common-lisp:or selfservice-permissions
                                         common-lisp:null)
                         :accessor
                         %modify-selfservice-permissions-request-selfservice-permissions
                         :initform
                         (common-lisp:error
                          ":selfservice-permissions is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %modify-selfservice-permissions-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-selfservice-permissions-request
                    'make-modify-selfservice-permissions-request))
 (common-lisp:defun make-modify-selfservice-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selfservice-permissions resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-selfservice-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selfservice-permissions))
      (common-lisp:list
       (common-lisp:cons "SelfservicePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-selfservice-permissions-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-selfservice-permissions-result
                    'make-modify-selfservice-permissions-result))
 (common-lisp:defun make-modify-selfservice-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-selfservice-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-selfservice-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-access-properties-request
                       common-lisp:nil
                       ((workspace-access-properties :initarg
                         :workspace-access-properties :type
                         (common-lisp:or workspace-access-properties
                                         common-lisp:null)
                         :accessor
                         %modify-workspace-access-properties-request-workspace-access-properties
                         :initform
                         (common-lisp:error
                          ":workspace-access-properties is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %modify-workspace-access-properties-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-access-properties-request
                    'make-modify-workspace-access-properties-request))
 (common-lisp:defun make-modify-workspace-access-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-access-properties resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-access-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-access-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceAccessProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-access-properties-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-workspace-access-properties-result
                    'make-modify-workspace-access-properties-result))
 (common-lisp:defun make-modify-workspace-access-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-access-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-access-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-creation-properties-request
                       common-lisp:nil
                       ((workspace-creation-properties :initarg
                         :workspace-creation-properties :type
                         (common-lisp:or workspace-creation-properties
                                         common-lisp:null)
                         :accessor
                         %modify-workspace-creation-properties-request-workspace-creation-properties
                         :initform
                         (common-lisp:error
                          ":workspace-creation-properties is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %modify-workspace-creation-properties-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-creation-properties-request
                    'make-modify-workspace-creation-properties-request))
 (common-lisp:defun make-modify-workspace-creation-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-creation-properties
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-creation-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-creation-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceCreationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-creation-properties-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-workspace-creation-properties-result
                    'make-modify-workspace-creation-properties-result))
 (common-lisp:defun make-modify-workspace-creation-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-creation-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-creation-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-properties-request common-lisp:nil
                       ((workspace-properties :initarg :workspace-properties
                         :type
                         (common-lisp:or workspace-properties common-lisp:null)
                         :accessor
                         %modify-workspace-properties-request-workspace-properties
                         :initform
                         (common-lisp:error
                          ":workspace-properties is required"))
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %modify-workspace-properties-request-workspace-id
                         :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-properties-request
                    'make-modify-workspace-properties-request))
 (common-lisp:defun make-modify-workspace-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-properties workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-properties-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-workspace-properties-result
                    'make-modify-workspace-properties-result))
 (common-lisp:defun make-modify-workspace-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-state-request common-lisp:nil
                       ((workspace-state :initarg :workspace-state :type
                         (common-lisp:or target-workspace-state
                                         common-lisp:null)
                         :accessor
                         %modify-workspace-state-request-workspace-state
                         :initform
                         (common-lisp:error ":workspace-state is required"))
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %modify-workspace-state-request-workspace-id
                         :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-workspace-state-request
                    'make-modify-workspace-state-request))
 (common-lisp:defun make-modify-workspace-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-state workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-state))
      (common-lisp:list
       (common-lisp:cons "WorkspaceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-workspace-state-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-workspace-state-result
                    'make-modify-workspace-state-result))
 (common-lisp:defun make-modify-workspace-state-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-workspace-state-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-workspace-state-result))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass operating-system common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or operating-system-type
                                         common-lisp:null)
                         :accessor %operating-system-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'operating-system 'make-operating-system))
 (common-lisp:defun make-operating-system
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'operating-system
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operating-system))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operating-system))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operating-system))
   common-lisp:nil))
(common-lisp:deftype operating-system-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       operation-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-in-progress-exception
                    'operation-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition operation-not-supported-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       operation-not-supported-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       operation-not-supported-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'operation-not-supported-exception
                    'operation-not-supported-exception-message
                    'operation-not-supported-exception-reason)))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pending-create-standby-workspaces-request
                       common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor
                         %pending-create-standby-workspaces-request-workspace-id
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-state common-lisp:null)
                         :accessor
                         %pending-create-standby-workspaces-request-state
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %pending-create-standby-workspaces-request-directory-id
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %pending-create-standby-workspaces-request-user-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-create-standby-workspaces-request
                    'make-pending-create-standby-workspaces-request))
 (common-lisp:defun make-pending-create-standby-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id state directory-id
                     user-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-create-standby-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-create-standby-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-create-standby-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-create-standby-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-create-standby-workspaces-request-list ()
   '(trivial-types:proper-list pending-create-standby-workspaces-request))
 (common-lisp:defun |make-pending-create-standby-workspaces-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-create-standby-workspaces-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype protocol-list () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocol-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reboot-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %reboot-request-workspace-id :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export (common-lisp:list 'reboot-request 'make-reboot-request))
 (common-lisp:defun make-reboot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reboot-workspace-requests ()
   '(trivial-types:proper-list reboot-request))
 (common-lisp:defun |make-reboot-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reboot-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reboot-workspaces-request common-lisp:nil
                       ((reboot-workspace-requests :initarg
                         :reboot-workspace-requests :type
                         (common-lisp:or reboot-workspace-requests
                                         common-lisp:null)
                         :accessor
                         %reboot-workspaces-request-reboot-workspace-requests
                         :initform
                         (common-lisp:error
                          ":reboot-workspace-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'reboot-workspaces-request
                    'make-reboot-workspaces-request))
 (common-lisp:defun make-reboot-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reboot-workspace-requests)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reboot-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "RebootWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-workspaces-result common-lisp:nil
                       ((failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-reboot-workspace-requests
                                         common-lisp:null)
                         :accessor %reboot-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-workspaces-result 'make-reboot-workspaces-result))
 (common-lisp:defun make-reboot-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rebuild-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %rebuild-request-workspace-id :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export (common-lisp:list 'rebuild-request 'make-rebuild-request))
 (common-lisp:defun make-rebuild-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'rebuild-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rebuild-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rebuild-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rebuild-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rebuild-workspace-requests ()
   '(trivial-types:proper-list rebuild-request))
 (common-lisp:defun |make-rebuild-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rebuild-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rebuild-workspaces-request common-lisp:nil
                       ((rebuild-workspace-requests :initarg
                         :rebuild-workspace-requests :type
                         (common-lisp:or rebuild-workspace-requests
                                         common-lisp:null)
                         :accessor
                         %rebuild-workspaces-request-rebuild-workspace-requests
                         :initform
                         (common-lisp:error
                          ":rebuild-workspace-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'rebuild-workspaces-request
                    'make-rebuild-workspaces-request))
 (common-lisp:defun make-rebuild-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rebuild-workspace-requests)
   (common-lisp:apply #'common-lisp:make-instance 'rebuild-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rebuild-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "RebuildWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rebuild-workspaces-result common-lisp:nil
                       ((failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-rebuild-workspace-requests
                                         common-lisp:null)
                         :accessor %rebuild-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rebuild-workspaces-result
                    'make-rebuild-workspaces-result))
 (common-lisp:defun make-rebuild-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'rebuild-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rebuild-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype reconnect-enum () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-workspace-directory-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %register-workspace-directory-request-tags :initform
                         common-lisp:nil)
                        (tenancy :initarg :tenancy :type
                         (common-lisp:or tenancy common-lisp:null) :accessor
                         %register-workspace-directory-request-tenancy
                         :initform common-lisp:nil)
                        (enable-self-service :initarg :enable-self-service
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %register-workspace-directory-request-enable-self-service
                         :initform common-lisp:nil)
                        (enable-work-docs :initarg :enable-work-docs :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %register-workspace-directory-request-enable-work-docs
                         :initform
                         (common-lisp:error ":enable-work-docs is required"))
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %register-workspace-directory-request-subnet-ids
                         :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %register-workspace-directory-request-directory-id
                         :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-workspace-directory-request
                    'make-register-workspace-directory-request))
 (common-lisp:defun make-register-workspace-directory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags tenancy enable-self-service
                     enable-work-docs subnet-ids directory-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-workspace-directory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-work-docs))
      (common-lisp:list
       (common-lisp:cons "EnableWorkDocs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-self-service))
      (common-lisp:list
       (common-lisp:cons "EnableSelfService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-workspace-directory-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'register-workspace-directory-result
                    'make-register-workspace-directory-result))
 (common-lisp:defun make-register-workspace-directory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-workspace-directory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-workspace-directory-result))
   common-lisp:nil))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-workspace-properties common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or standby-workspace-relationship-type
                                         common-lisp:null)
                         :accessor %related-workspace-properties-type :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-state common-lisp:null)
                         :accessor %related-workspace-properties-state
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %related-workspace-properties-region :initform
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %related-workspace-properties-workspace-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'related-workspace-properties
                    'make-related-workspace-properties))
 (common-lisp:defun make-related-workspace-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type state region workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'related-workspace-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          related-workspace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          related-workspace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          related-workspace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-workspaces ()
   '(trivial-types:proper-list related-workspace-properties))
 (common-lisp:defun |make-related-workspaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            related-workspace-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-associated-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-associated-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-associated-exception
                    'resource-associated-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-creation-failed-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-creation-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-creation-failed-exception
                    'resource-creation-failed-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass restore-workspace-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %restore-workspace-request-workspace-id
                         :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-workspace-request
                    'make-restore-workspace-request))
 (common-lisp:defun make-restore-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'restore-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-workspace-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'restore-workspace-result 'make-restore-workspace-result))
 (common-lisp:defun make-restore-workspace-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'restore-workspace-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-workspace-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-ip-rules-request common-lisp:nil
                       ((user-rules :initarg :user-rules :type
                         (common-lisp:or ip-revoked-rule-list common-lisp:null)
                         :accessor %revoke-ip-rules-request-user-rules
                         :initform
                         (common-lisp:error ":user-rules is required"))
                        (group-id :initarg :group-id :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %revoke-ip-rules-request-group-id :initform
                         (common-lisp:error ":group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'revoke-ip-rules-request 'make-revoke-ip-rules-request))
 (common-lisp:defun make-revoke-ip-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-rules group-id)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-ip-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-rules))
      (common-lisp:list
       (common-lisp:cons "UserRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-ip-rules-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'revoke-ip-rules-result 'make-revoke-ip-rules-result))
 (common-lisp:defun make-revoke-ip-rules-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-ip-rules-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-ip-rules-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass root-storage common-lisp:nil
                       ((capacity :initarg :capacity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %root-storage-capacity :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'root-storage 'make-root-storage))
 (common-lisp:defun make-root-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity)
   (common-lisp:apply #'common-lisp:make-instance 'root-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root-storage))
   common-lisp:nil))
(common-lisp:deftype root-volume-size-gib () 'common-lisp:integer)
(common-lisp:deftype running-mode () 'common-lisp:string)
(common-lisp:deftype running-mode-auto-stop-timeout-in-minutes ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass saml-properties common-lisp:nil
                       ((relay-state-parameter-name :initarg
                         :relay-state-parameter-name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %saml-properties-relay-state-parameter-name
                         :initform common-lisp:nil)
                        (user-access-url :initarg :user-access-url :type
                         (common-lisp:or saml-user-access-url common-lisp:null)
                         :accessor %saml-properties-user-access-url :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or saml-status-enum common-lisp:null)
                         :accessor %saml-properties-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'saml-properties 'make-saml-properties))
 (common-lisp:defun make-saml-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relay-state-parameter-name
                     user-access-url status)
   (common-lisp:apply #'common-lisp:make-instance 'saml-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saml-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saml-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-access-url))
      (common-lisp:list
       (common-lisp:cons "UserAccessUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relay-state-parameter-name))
      (common-lisp:list
       (common-lisp:cons "RelayStateParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saml-properties))
   common-lisp:nil))
(common-lisp:deftype saml-status-enum () 'common-lisp:string)
(common-lisp:deftype saml-user-access-url () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass selfservice-permissions common-lisp:nil
                       ((rebuild-workspace :initarg :rebuild-workspace :type
                         (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor %selfservice-permissions-rebuild-workspace
                         :initform common-lisp:nil)
                        (switch-running-mode :initarg :switch-running-mode
                         :type (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor %selfservice-permissions-switch-running-mode
                         :initform common-lisp:nil)
                        (change-compute-type :initarg :change-compute-type
                         :type (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor %selfservice-permissions-change-compute-type
                         :initform common-lisp:nil)
                        (increase-volume-size :initarg :increase-volume-size
                         :type (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor
                         %selfservice-permissions-increase-volume-size
                         :initform common-lisp:nil)
                        (restart-workspace :initarg :restart-workspace :type
                         (common-lisp:or reconnect-enum common-lisp:null)
                         :accessor %selfservice-permissions-restart-workspace
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'selfservice-permissions 'make-selfservice-permissions))
 (common-lisp:defun make-selfservice-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rebuild-workspace switch-running-mode
                     change-compute-type increase-volume-size
                     restart-workspace)
   (common-lisp:apply #'common-lisp:make-instance 'selfservice-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          selfservice-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          selfservice-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-workspace))
      (common-lisp:list
       (common-lisp:cons "RestartWorkspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'increase-volume-size))
      (common-lisp:list
       (common-lisp:cons "IncreaseVolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-compute-type))
      (common-lisp:list
       (common-lisp:cons "ChangeComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switch-running-mode))
      (common-lisp:list
       (common-lisp:cons "SwitchRunningMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rebuild-workspace))
      (common-lisp:list
       (common-lisp:cons "RebuildWorkspace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          selfservice-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot common-lisp:nil
                       ((snapshot-time :initarg :snapshot-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %snapshot-snapshot-time :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defun make-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-time)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun |make-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass standby-workspace common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %standby-workspace-tags :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %standby-workspace-directory-id :initform
                         (common-lisp:error ":directory-id is required"))
                        (volume-encryption-key :initarg :volume-encryption-key
                         :type
                         (common-lisp:or volume-encryption-key
                                         common-lisp:null)
                         :accessor %standby-workspace-volume-encryption-key
                         :initform common-lisp:nil)
                        (primary-workspace-id :initarg :primary-workspace-id
                         :type (common-lisp:or workspace-id common-lisp:null)
                         :accessor %standby-workspace-primary-workspace-id
                         :initform
                         (common-lisp:error
                          ":primary-workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'standby-workspace 'make-standby-workspace))
 (common-lisp:defun make-standby-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags directory-id volume-encryption-key
                     primary-workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'standby-workspace
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input standby-workspace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input standby-workspace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-workspace-id))
      (common-lisp:list
       (common-lisp:cons "PrimaryWorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-key))
      (common-lisp:list
       (common-lisp:cons "VolumeEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input standby-workspace))
   common-lisp:nil))
(common-lisp:deftype standby-workspace-relationship-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype standby-workspaces-list ()
   '(trivial-types:proper-list standby-workspace))
 (common-lisp:defun |make-standby-workspaces-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list standby-workspace))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %start-request-workspace-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'start-request 'make-start-request))
 (common-lisp:defun make-start-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-workspace-requests ()
   '(trivial-types:proper-list start-request))
 (common-lisp:defun |make-start-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list start-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-workspaces-request common-lisp:nil
                       ((start-workspace-requests :initarg
                         :start-workspace-requests :type
                         (common-lisp:or start-workspace-requests
                                         common-lisp:null)
                         :accessor
                         %start-workspaces-request-start-workspace-requests
                         :initform
                         (common-lisp:error
                          ":start-workspace-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'start-workspaces-request 'make-start-workspaces-request))
 (common-lisp:defun make-start-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-workspace-requests)
   (common-lisp:apply #'common-lisp:make-instance 'start-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "StartWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-workspaces-result common-lisp:nil
                       ((failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-start-workspace-requests
                                         common-lisp:null)
                         :accessor %start-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-workspaces-result 'make-start-workspaces-result))
 (common-lisp:defun make-start-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'start-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workspaces-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %stop-request-workspace-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stop-request 'make-stop-request))
 (common-lisp:defun make-stop-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stop-workspace-requests ()
   '(trivial-types:proper-list stop-request))
 (common-lisp:defun |make-stop-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stop-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stop-workspaces-request common-lisp:nil
                       ((stop-workspace-requests :initarg
                         :stop-workspace-requests :type
                         (common-lisp:or stop-workspace-requests
                                         common-lisp:null)
                         :accessor
                         %stop-workspaces-request-stop-workspace-requests
                         :initform
                         (common-lisp:error
                          ":stop-workspace-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-workspaces-request 'make-stop-workspaces-request))
 (common-lisp:defun make-stop-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stop-workspace-requests)
   (common-lisp:apply #'common-lisp:make-instance 'stop-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "StopWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-workspaces-result common-lisp:nil
                       ((failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-stop-workspace-requests
                                         common-lisp:null)
                         :accessor %stop-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-workspaces-result 'make-stop-workspaces-result))
 (common-lisp:defun make-stop-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'stop-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-workspace-state () 'common-lisp:string)
(common-lisp:deftype tenancy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminate-request common-lisp:nil
                       ((workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %terminate-request-workspace-id :initform
                         (common-lisp:error ":workspace-id is required"))))
 (common-lisp:export
  (common-lisp:list 'terminate-request 'make-terminate-request))
 (common-lisp:defun make-terminate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input terminate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input terminate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input terminate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terminate-workspace-requests ()
   '(trivial-types:proper-list terminate-request))
 (common-lisp:defun |make-terminate-workspace-requests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list terminate-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass terminate-workspaces-request common-lisp:nil
                       ((terminate-workspace-requests :initarg
                         :terminate-workspace-requests :type
                         (common-lisp:or terminate-workspace-requests
                                         common-lisp:null)
                         :accessor
                         %terminate-workspaces-request-terminate-workspace-requests
                         :initform
                         (common-lisp:error
                          ":terminate-workspace-requests is required"))))
 (common-lisp:export
  (common-lisp:list 'terminate-workspaces-request
                    'make-terminate-workspaces-request))
 (common-lisp:defun make-terminate-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminate-workspace-requests)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-workspace-requests))
      (common-lisp:list
       (common-lisp:cons "TerminateWorkspaceRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-workspaces-result common-lisp:nil
                       ((failed-requests :initarg :failed-requests :type
                         (common-lisp:or failed-terminate-workspace-requests
                                         common-lisp:null)
                         :accessor %terminate-workspaces-result-failed-requests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-workspaces-result
                    'make-terminate-workspaces-result))
 (common-lisp:defun make-terminate-workspaces-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-requests)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-workspaces-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "FailedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-workspaces-result))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-network-configuration-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-network-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-network-configuration-exception
                    'unsupported-network-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-workspace-configuration-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-workspace-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-workspace-configuration-exception
                    'unsupported-workspace-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-connect-client-add-in-request common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or add-in-url common-lisp:null) :accessor
                         %update-connect-client-add-in-request-url :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or add-in-name common-lisp:null)
                         :accessor %update-connect-client-add-in-request-name
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor
                         %update-connect-client-add-in-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (add-in-id :initarg :add-in-id :type
                         (common-lisp:or amazon-uuid common-lisp:null)
                         :accessor
                         %update-connect-client-add-in-request-add-in-id
                         :initform
                         (common-lisp:error ":add-in-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connect-client-add-in-request
                    'make-update-connect-client-add-in-request))
 (common-lisp:defun make-update-connect-client-add-in-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name resource-id add-in-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connect-client-add-in-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-in-id))
      (common-lisp:list
       (common-lisp:cons "AddInId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "URL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connect-client-add-in-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-connect-client-add-in-result
                    'make-update-connect-client-add-in-result))
 (common-lisp:defun make-update-connect-client-add-in-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connect-client-add-in-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connect-client-add-in-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-alias-permission-request
                       common-lisp:nil
                       ((connection-alias-permission :initarg
                         :connection-alias-permission :type
                         (common-lisp:or connection-alias-permission
                                         common-lisp:null)
                         :accessor
                         %update-connection-alias-permission-request-connection-alias-permission
                         :initform
                         (common-lisp:error
                          ":connection-alias-permission is required"))
                        (alias-id :initarg :alias-id :type
                         (common-lisp:or connection-alias-id common-lisp:null)
                         :accessor
                         %update-connection-alias-permission-request-alias-id
                         :initform
                         (common-lisp:error ":alias-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connection-alias-permission-request
                    'make-update-connection-alias-permission-request))
 (common-lisp:defun make-update-connection-alias-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-alias-permission alias-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-alias-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-id))
      (common-lisp:list
       (common-lisp:cons "AliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-alias-permission))
      (common-lisp:list
       (common-lisp:cons "ConnectionAliasPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-alias-permission-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-connection-alias-permission-result
                    'make-update-connection-alias-permission-result))
 (common-lisp:defun make-update-connection-alias-permission-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-connection-alias-permission-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-alias-permission-result))
   common-lisp:nil))
(common-lisp:deftype update-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-result common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or update-description common-lisp:null)
                         :accessor %update-result-description :initform
                         common-lisp:nil)
                        (update-available :initarg :update-available :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor %update-result-update-available :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-result 'make-update-result))
 (common-lisp:defun make-update-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description update-available)
   (common-lisp:apply #'common-lisp:make-instance 'update-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rules-of-ip-group-request common-lisp:nil
                       ((user-rules :initarg :user-rules :type
                         (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor %update-rules-of-ip-group-request-user-rules
                         :initform
                         (common-lisp:error ":user-rules is required"))
                        (group-id :initarg :group-id :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %update-rules-of-ip-group-request-group-id
                         :initform
                         (common-lisp:error ":group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-rules-of-ip-group-request
                    'make-update-rules-of-ip-group-request))
 (common-lisp:defun make-update-rules-of-ip-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-rules group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-rules-of-ip-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-rules))
      (common-lisp:list
       (common-lisp:cons "UserRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rules-of-ip-group-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-rules-of-ip-group-result
                    'make-update-rules-of-ip-group-result))
 (common-lisp:defun make-update-rules-of-ip-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-rules-of-ip-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rules-of-ip-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-bundle-request common-lisp:nil
                       ((image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %update-workspace-bundle-request-image-id
                         :initform common-lisp:nil)
                        (bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %update-workspace-bundle-request-bundle-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-workspace-bundle-request
                    'make-update-workspace-bundle-request))
 (common-lisp:defun make-update-workspace-bundle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-id bundle-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-bundle-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-workspace-bundle-result
                    'make-update-workspace-bundle-result))
 (common-lisp:defun make-update-workspace-bundle-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-image-permission-request
                       common-lisp:nil
                       ((shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor
                         %update-workspace-image-permission-request-shared-account-id
                         :initform
                         (common-lisp:error ":shared-account-id is required"))
                        (allow-copy-image :initarg :allow-copy-image :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %update-workspace-image-permission-request-allow-copy-image
                         :initform
                         (common-lisp:error ":allow-copy-image is required"))
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor
                         %update-workspace-image-permission-request-image-id
                         :initform
                         (common-lisp:error ":image-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-workspace-image-permission-request
                    'make-update-workspace-image-permission-request))
 (common-lisp:defun make-update-workspace-image-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-account-id allow-copy-image
                     image-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-image-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-copy-image))
      (common-lisp:list
       (common-lisp:cons "AllowCopyImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-image-permission-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-workspace-image-permission-result
                    'make-update-workspace-image-permission-result))
 (common-lisp:defun make-update-workspace-image-permission-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workspace-image-permission-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-image-permission-result))
   common-lisp:nil))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-storage common-lisp:nil
                       ((capacity :initarg :capacity :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %user-storage-capacity :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-storage 'make-user-storage))
 (common-lisp:defun make-user-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key capacity)
   (common-lisp:apply #'common-lisp:make-instance 'user-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-storage))
   common-lisp:nil))
(common-lisp:deftype user-volume-size-gib () 'common-lisp:integer)
(common-lisp:deftype volume-encryption-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace common-lisp:nil
                       ((related-workspaces :initarg :related-workspaces :type
                         (common-lisp:or related-workspaces common-lisp:null)
                         :accessor %workspace-related-workspaces :initform
                         common-lisp:nil)
                        (modification-states :initarg :modification-states
                         :type
                         (common-lisp:or modification-state-list
                                         common-lisp:null)
                         :accessor %workspace-modification-states :initform
                         common-lisp:nil)
                        (workspace-properties :initarg :workspace-properties
                         :type
                         (common-lisp:or workspace-properties common-lisp:null)
                         :accessor %workspace-workspace-properties :initform
                         common-lisp:nil)
                        (root-volume-encryption-enabled :initarg
                         :root-volume-encryption-enabled :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor %workspace-root-volume-encryption-enabled
                         :initform common-lisp:nil)
                        (user-volume-encryption-enabled :initarg
                         :user-volume-encryption-enabled :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor %workspace-user-volume-encryption-enabled
                         :initform common-lisp:nil)
                        (volume-encryption-key :initarg :volume-encryption-key
                         :type
                         (common-lisp:or volume-encryption-key
                                         common-lisp:null)
                         :accessor %workspace-volume-encryption-key :initform
                         common-lisp:nil)
                        (computer-name :initarg :computer-name :type
                         (common-lisp:or computer-name common-lisp:null)
                         :accessor %workspace-computer-name :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or workspace-error-code common-lisp:null)
                         :accessor %workspace-error-code :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %workspace-error-message :initform
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :type
                         (common-lisp:or subnet-id common-lisp:null) :accessor
                         %workspace-subnet-id :initform common-lisp:nil)
                        (bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %workspace-bundle-id :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-state common-lisp:null)
                         :accessor %workspace-state :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %workspace-ip-address :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %workspace-user-name :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %workspace-directory-id :initform
                         common-lisp:nil)
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %workspace-workspace-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'workspace 'make-workspace))
 (common-lisp:defun make-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key related-workspaces modification-states
                     workspace-properties root-volume-encryption-enabled
                     user-volume-encryption-enabled volume-encryption-key
                     computer-name error-code error-message subnet-id bundle-id
                     state ip-address user-name directory-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-key))
      (common-lisp:list
       (common-lisp:cons "VolumeEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "UserVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "RootVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-states))
      (common-lisp:list
       (common-lisp:cons "ModificationStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-workspaces))
      (common-lisp:list
       (common-lisp:cons "RelatedWorkspaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workspace-access-properties common-lisp:nil
                       ((device-type-linux :initarg :device-type-linux :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor
                         %workspace-access-properties-device-type-linux
                         :initform common-lisp:nil)
                        (device-type-zero-client :initarg
                         :device-type-zero-client :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor
                         %workspace-access-properties-device-type-zero-client
                         :initform common-lisp:nil)
                        (device-type-chrome-os :initarg :device-type-chrome-os
                         :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor
                         %workspace-access-properties-device-type-chrome-os
                         :initform common-lisp:nil)
                        (device-type-android :initarg :device-type-android
                         :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor
                         %workspace-access-properties-device-type-android
                         :initform common-lisp:nil)
                        (device-type-ios :initarg :device-type-ios :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor %workspace-access-properties-device-type-ios
                         :initform common-lisp:nil)
                        (device-type-web :initarg :device-type-web :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor %workspace-access-properties-device-type-web
                         :initform common-lisp:nil)
                        (device-type-osx :initarg :device-type-osx :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor %workspace-access-properties-device-type-osx
                         :initform common-lisp:nil)
                        (device-type-windows :initarg :device-type-windows
                         :type
                         (common-lisp:or access-property-value
                                         common-lisp:null)
                         :accessor
                         %workspace-access-properties-device-type-windows
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-access-properties
                    'make-workspace-access-properties))
 (common-lisp:defun make-workspace-access-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type-linux device-type-zero-client
                     device-type-chrome-os device-type-android device-type-ios
                     device-type-web device-type-osx device-type-windows)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-access-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-access-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-access-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-windows))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWindows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-osx))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeOsx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-web))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeWeb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-ios))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeIos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-android))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeAndroid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-type-chrome-os))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeChromeOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-type-zero-client))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeZeroClient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-linux))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeLinux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-access-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workspace-bundle common-lisp:nil
                       ((bundle-type :initarg :bundle-type :type
                         (common-lisp:or bundle-type common-lisp:null)
                         :accessor %workspace-bundle-bundle-type :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-bundle-state
                                         common-lisp:null)
                         :accessor %workspace-bundle-state :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-bundle-creation-time :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-bundle-last-updated-time :initform
                         common-lisp:nil)
                        (compute-type :initarg :compute-type :type
                         (common-lisp:or compute-type common-lisp:null)
                         :accessor %workspace-bundle-compute-type :initform
                         common-lisp:nil)
                        (user-storage :initarg :user-storage :type
                         (common-lisp:or user-storage common-lisp:null)
                         :accessor %workspace-bundle-user-storage :initform
                         common-lisp:nil)
                        (root-storage :initarg :root-storage :type
                         (common-lisp:or root-storage common-lisp:null)
                         :accessor %workspace-bundle-root-storage :initform
                         common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %workspace-bundle-image-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %workspace-bundle-description :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or bundle-owner common-lisp:null)
                         :accessor %workspace-bundle-owner :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %workspace-bundle-name :initform
                         common-lisp:nil)
                        (bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %workspace-bundle-bundle-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-bundle 'make-workspace-bundle))
 (common-lisp:defun make-workspace-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bundle-type state creation-time
                     last-updated-time compute-type user-storage root-storage
                     image-id description owner name bundle-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-bundle
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-storage))
      (common-lisp:list
       (common-lisp:cons "RootStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-storage))
      (common-lisp:list
       (common-lisp:cons "UserStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type))
      (common-lisp:list
       (common-lisp:cons "ComputeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-type))
      (common-lisp:list
       (common-lisp:cons "BundleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-bundle))
   common-lisp:nil))
(common-lisp:deftype workspace-bundle-description () 'common-lisp:string)
(common-lisp:deftype workspace-bundle-name () 'common-lisp:string)
(common-lisp:deftype workspace-bundle-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workspace-connection-status common-lisp:nil
                       ((last-known-user-connection-timestamp :initarg
                         :last-known-user-connection-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-connection-status-last-known-user-connection-timestamp
                         :initform common-lisp:nil)
                        (connection-state-check-timestamp :initarg
                         :connection-state-check-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-connection-status-connection-state-check-timestamp
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor
                         %workspace-connection-status-connection-state
                         :initform common-lisp:nil)
                        (workspace-id :initarg :workspace-id :type
                         (common-lisp:or workspace-id common-lisp:null)
                         :accessor %workspace-connection-status-workspace-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-connection-status
                    'make-workspace-connection-status))
 (common-lisp:defun make-workspace-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-known-user-connection-timestamp
                     connection-state-check-timestamp connection-state
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-state-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "ConnectionStateCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-known-user-connection-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastKnownUserConnectionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-connection-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspace-connection-status-list ()
   '(trivial-types:proper-list workspace-connection-status))
 (common-lisp:defun |make-workspace-connection-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workspace-connection-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-creation-properties common-lisp:nil
                       ((enable-maintenance-mode :initarg
                         :enable-maintenance-mode :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-creation-properties-enable-maintenance-mode
                         :initform common-lisp:nil)
                        (user-enabled-as-local-administrator :initarg
                         :user-enabled-as-local-administrator :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-creation-properties-user-enabled-as-local-administrator
                         :initform common-lisp:nil)
                        (custom-security-group-id :initarg
                         :custom-security-group-id :type
                         (common-lisp:or security-group-id common-lisp:null)
                         :accessor
                         %workspace-creation-properties-custom-security-group-id
                         :initform common-lisp:nil)
                        (default-ou :initarg :default-ou :type
                         (common-lisp:or default-ou common-lisp:null) :accessor
                         %workspace-creation-properties-default-ou :initform
                         common-lisp:nil)
                        (enable-internet-access :initarg
                         :enable-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-creation-properties-enable-internet-access
                         :initform common-lisp:nil)
                        (enable-work-docs :initarg :enable-work-docs :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-creation-properties-enable-work-docs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-creation-properties
                    'make-workspace-creation-properties))
 (common-lisp:defun make-workspace-creation-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-maintenance-mode
                     user-enabled-as-local-administrator
                     custom-security-group-id default-ou enable-internet-access
                     enable-work-docs)
   (common-lisp:apply #'common-lisp:make-instance
                      'workspace-creation-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workspace-creation-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workspace-creation-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-work-docs))
      (common-lisp:list
       (common-lisp:cons "EnableWorkDocs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ou))
      (common-lisp:list
       (common-lisp:cons "DefaultOu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-id))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-enabled-as-local-administrator))
      (common-lisp:list
       (common-lisp:cons "UserEnabledAsLocalAdministrator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-maintenance-mode))
      (common-lisp:list
       (common-lisp:cons "EnableMaintenanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workspace-creation-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workspace-directory common-lisp:nil
                       ((certificate-based-auth-properties :initarg
                         :certificate-based-auth-properties :type
                         (common-lisp:or certificate-based-auth-properties
                                         common-lisp:null)
                         :accessor
                         %workspace-directory-certificate-based-auth-properties
                         :initform common-lisp:nil)
                        (saml-properties :initarg :saml-properties :type
                         (common-lisp:or saml-properties common-lisp:null)
                         :accessor %workspace-directory-saml-properties
                         :initform common-lisp:nil)
                        (selfservice-permissions :initarg
                         :selfservice-permissions :type
                         (common-lisp:or selfservice-permissions
                                         common-lisp:null)
                         :accessor %workspace-directory-selfservice-permissions
                         :initform common-lisp:nil)
                        (tenancy :initarg :tenancy :type
                         (common-lisp:or tenancy common-lisp:null) :accessor
                         %workspace-directory-tenancy :initform
                         common-lisp:nil)
                        (workspace-access-properties :initarg
                         :workspace-access-properties :type
                         (common-lisp:or workspace-access-properties
                                         common-lisp:null)
                         :accessor
                         %workspace-directory-workspace-access-properties
                         :initform common-lisp:nil)
                        (ip-group-ids :initarg :|ipGroupIds| :type
                         (common-lisp:or ip-group-id-list common-lisp:null)
                         :accessor %workspace-directory-ip-group-ids :initform
                         common-lisp:nil)
                        (workspace-creation-properties :initarg
                         :workspace-creation-properties :type
                         (common-lisp:or default-workspace-creation-properties
                                         common-lisp:null)
                         :accessor
                         %workspace-directory-workspace-creation-properties
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-directory-state
                                         common-lisp:null)
                         :accessor %workspace-directory-state :initform
                         common-lisp:nil)
                        (workspace-security-group-id :initarg
                         :workspace-security-group-id :type
                         (common-lisp:or security-group-id common-lisp:null)
                         :accessor
                         %workspace-directory-workspace-security-group-id
                         :initform common-lisp:nil)
                        (directory-type :initarg :directory-type :type
                         (common-lisp:or workspace-directory-type
                                         common-lisp:null)
                         :accessor %workspace-directory-directory-type
                         :initform common-lisp:nil)
                        (iam-role-id :initarg :iam-role-id :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %workspace-directory-iam-role-id :initform
                         common-lisp:nil)
                        (customer-user-name :initarg :customer-user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %workspace-directory-customer-user-name :initform
                         common-lisp:nil)
                        (dns-ip-addresses :initarg :dns-ip-addresses :type
                         (common-lisp:or dns-ip-addresses common-lisp:null)
                         :accessor %workspace-directory-dns-ip-addresses
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %workspace-directory-subnet-ids :initform
                         common-lisp:nil)
                        (registration-code :initarg :registration-code :type
                         (common-lisp:or registration-code common-lisp:null)
                         :accessor %workspace-directory-registration-code
                         :initform common-lisp:nil)
                        (directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %workspace-directory-directory-name
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or alias common-lisp:null) :accessor
                         %workspace-directory-alias :initform common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %workspace-directory-directory-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-directory 'make-workspace-directory))
 (common-lisp:defun make-workspace-directory
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-based-auth-properties
                     saml-properties selfservice-permissions tenancy
                     workspace-access-properties ip-group-ids
                     workspace-creation-properties state
                     workspace-security-group-id directory-type iam-role-id
                     customer-user-name dns-ip-addresses subnet-ids
                     registration-code directory-name alias directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-directory
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-code))
      (common-lisp:list
       (common-lisp:cons "RegistrationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "DnsIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-user-name))
      (common-lisp:list
       (common-lisp:cons "CustomerUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-id))
      (common-lisp:list
       (common-lisp:cons "IamRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-type))
      (common-lisp:list
       (common-lisp:cons "DirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-security-group-id))
      (common-lisp:list
       (common-lisp:cons "WorkspaceSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-creation-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceCreationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-group-ids))
      (common-lisp:list
       (common-lisp:cons "ipGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-access-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceAccessProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selfservice-permissions))
      (common-lisp:list
       (common-lisp:cons "SelfservicePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-properties))
      (common-lisp:list
       (common-lisp:cons "SamlProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-based-auth-properties))
      (common-lisp:list
       (common-lisp:cons "CertificateBasedAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-directory))
   common-lisp:nil))
(common-lisp:deftype workspace-directory-state () 'common-lisp:string)
(common-lisp:deftype workspace-directory-type () 'common-lisp:string)
(common-lisp:deftype workspace-error-code () 'common-lisp:string)
(common-lisp:deftype workspace-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-id-list ()
   '(trivial-types:proper-list workspace-id))
 (common-lisp:defun |make-workspace-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-image common-lisp:nil
                       ((updates :initarg :updates :type
                         (common-lisp:or update-result common-lisp:null)
                         :accessor %workspace-image-updates :initform
                         common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :type
                         (common-lisp:or aws-account common-lisp:null)
                         :accessor %workspace-image-owner-account-id :initform
                         common-lisp:nil)
                        (created :initarg :created :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-image-created :initform common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %workspace-image-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or workspace-image-error-code
                                         common-lisp:null)
                         :accessor %workspace-image-error-code :initform
                         common-lisp:nil)
                        (required-tenancy :initarg :required-tenancy :type
                         (common-lisp:or workspace-image-required-tenancy
                                         common-lisp:null)
                         :accessor %workspace-image-required-tenancy :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or workspace-image-state
                                         common-lisp:null)
                         :accessor %workspace-image-state :initform
                         common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %workspace-image-operating-system :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or workspace-image-description
                                         common-lisp:null)
                         :accessor %workspace-image-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workspace-image-name common-lisp:null)
                         :accessor %workspace-image-name :initform
                         common-lisp:nil)
                        (image-id :initarg :image-id :type
                         (common-lisp:or workspace-image-id common-lisp:null)
                         :accessor %workspace-image-image-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'workspace-image 'make-workspace-image))
 (common-lisp:defun make-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updates owner-account-id created
                     error-message error-code required-tenancy state
                     operating-system description name image-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-tenancy))
      (common-lisp:list
       (common-lisp:cons "RequiredTenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-image))
   common-lisp:nil))
(common-lisp:deftype workspace-image-description () 'common-lisp:string)
(common-lisp:deftype workspace-image-error-code () 'common-lisp:string)
(common-lisp:deftype workspace-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-image-id-list ()
   '(trivial-types:proper-list workspace-image-id))
 (common-lisp:defun |make-workspace-image-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-image-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-image-ingestion-process () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-image-list ()
   '(trivial-types:proper-list workspace-image))
 (common-lisp:defun |make-workspace-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-image-name () 'common-lisp:string)
(common-lisp:deftype workspace-image-required-tenancy () 'common-lisp:string)
(common-lisp:deftype workspace-image-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workspace-list () '(trivial-types:proper-list workspace))
 (common-lisp:defun |make-workspace-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-properties common-lisp:nil
                       ((protocols :initarg :protocols :type
                         (common-lisp:or protocol-list common-lisp:null)
                         :accessor %workspace-properties-protocols :initform
                         common-lisp:nil)
                        (compute-type-name :initarg :compute-type-name :type
                         (common-lisp:or compute common-lisp:null) :accessor
                         %workspace-properties-compute-type-name :initform
                         common-lisp:nil)
                        (user-volume-size-gib :initarg :user-volume-size-gib
                         :type
                         (common-lisp:or user-volume-size-gib common-lisp:null)
                         :accessor %workspace-properties-user-volume-size-gib
                         :initform common-lisp:nil)
                        (root-volume-size-gib :initarg :root-volume-size-gib
                         :type
                         (common-lisp:or root-volume-size-gib common-lisp:null)
                         :accessor %workspace-properties-root-volume-size-gib
                         :initform common-lisp:nil)
                        (running-mode-auto-stop-timeout-in-minutes :initarg
                         :running-mode-auto-stop-timeout-in-minutes :type
                         (common-lisp:or
                          running-mode-auto-stop-timeout-in-minutes
                          common-lisp:null)
                         :accessor
                         %workspace-properties-running-mode-auto-stop-timeout-in-minutes
                         :initform common-lisp:nil)
                        (running-mode :initarg :running-mode :type
                         (common-lisp:or running-mode common-lisp:null)
                         :accessor %workspace-properties-running-mode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspace-properties 'make-workspace-properties))
 (common-lisp:defun make-workspace-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocols compute-type-name
                     user-volume-size-gib root-volume-size-gib
                     running-mode-auto-stop-timeout-in-minutes running-mode)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-mode))
      (common-lisp:list
       (common-lisp:cons "RunningMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'running-mode-auto-stop-timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "RunningModeAutoStopTimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-size-gib))
      (common-lisp:list
       (common-lisp:cons "RootVolumeSizeGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-volume-size-gib))
      (common-lisp:list
       (common-lisp:cons "UserVolumeSizeGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-type-name))
      (common-lisp:list
       (common-lisp:cons "ComputeTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workspace-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %workspace-request-tags :initform common-lisp:nil)
                        (workspace-properties :initarg :workspace-properties
                         :type
                         (common-lisp:or workspace-properties common-lisp:null)
                         :accessor %workspace-request-workspace-properties
                         :initform common-lisp:nil)
                        (root-volume-encryption-enabled :initarg
                         :root-volume-encryption-enabled :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-request-root-volume-encryption-enabled
                         :initform common-lisp:nil)
                        (user-volume-encryption-enabled :initarg
                         :user-volume-encryption-enabled :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %workspace-request-user-volume-encryption-enabled
                         :initform common-lisp:nil)
                        (volume-encryption-key :initarg :volume-encryption-key
                         :type
                         (common-lisp:or volume-encryption-key
                                         common-lisp:null)
                         :accessor %workspace-request-volume-encryption-key
                         :initform common-lisp:nil)
                        (bundle-id :initarg :bundle-id :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %workspace-request-bundle-id :initform
                         (common-lisp:error ":bundle-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %workspace-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %workspace-request-directory-id :initform
                         (common-lisp:error ":directory-id is required"))))
 (common-lisp:export
  (common-lisp:list 'workspace-request 'make-workspace-request))
 (common-lisp:defun make-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags workspace-properties
                     root-volume-encryption-enabled
                     user-volume-encryption-enabled volume-encryption-key
                     bundle-id user-name directory-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "BundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-encryption-key))
      (common-lisp:list
       (common-lisp:cons "VolumeEncryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "UserVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-volume-encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "RootVolumeEncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workspace-properties))
      (common-lisp:list
       (common-lisp:cons "WorkspaceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspace-request-list ()
   '(trivial-types:proper-list workspace-request))
 (common-lisp:defun |make-workspace-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workspace-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition workspaces-default-role-not-found-exception
     (workspaces-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       workspaces-default-role-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'workspaces-default-role-not-found-exception
                    'workspaces-default-role-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass workspaces-ip-group common-lisp:nil
                       ((user-rules :initarg :|userRules| :type
                         (common-lisp:or ip-rule-list common-lisp:null)
                         :accessor %workspaces-ip-group-user-rules :initform
                         common-lisp:nil)
                        (group-desc :initarg :|groupDesc| :type
                         (common-lisp:or ip-group-desc common-lisp:null)
                         :accessor %workspaces-ip-group-group-desc :initform
                         common-lisp:nil)
                        (group-name :initarg :|groupName| :type
                         (common-lisp:or ip-group-name common-lisp:null)
                         :accessor %workspaces-ip-group-group-name :initform
                         common-lisp:nil)
                        (group-id :initarg :|groupId| :type
                         (common-lisp:or ip-group-id common-lisp:null)
                         :accessor %workspaces-ip-group-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workspaces-ip-group 'make-workspaces-ip-group))
 (common-lisp:defun make-workspaces-ip-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-rules group-desc group-name
                     group-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspaces-ip-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspaces-ip-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspaces-ip-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-desc))
      (common-lisp:list
       (common-lisp:cons "groupDesc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-rules))
      (common-lisp:list
       (common-lisp:cons "userRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspaces-ip-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workspaces-ip-groups-list ()
   '(trivial-types:proper-list workspaces-ip-group))
 (common-lisp:defun |make-workspaces-ip-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspaces-ip-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-connection-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id resource-id)
   (common-lisp:declare (common-lisp:ignorable alias-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-connection-alias-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateConnectionAlias"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-connection-alias))
(common-lisp:progn
 (common-lisp:defun associate-ip-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id group-ids)
   (common-lisp:declare (common-lisp:ignorable directory-id group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-ip-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateIpGroups"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-ip-groups))
(common-lisp:progn
 (common-lisp:defun authorize-ip-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id user-rules)
   (common-lisp:declare (common-lisp:ignorable group-id user-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-authorize-ip-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AuthorizeIpRules"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'authorize-ip-rules))
(common-lisp:progn
 (common-lisp:defun copy-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description source-image-id
                     source-region tags)
   (common-lisp:declare
    (common-lisp:ignorable name description source-image-id source-region
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-workspace-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CopyWorkspaceImage"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-workspace-image))
(common-lisp:progn
 (common-lisp:defun create-connect-client-add-in
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id name url)
   (common-lisp:declare (common-lisp:ignorable resource-id name url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-connect-client-add-in-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConnectClientAddIn"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connect-client-add-in))
(common-lisp:progn
 (common-lisp:defun create-connection-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-string tags)
   (common-lisp:declare (common-lisp:ignorable connection-string tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConnectionAlias"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection-alias))
(common-lisp:progn
 (common-lisp:defun create-ip-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name group-desc user-rules tags)
   (common-lisp:declare
    (common-lisp:ignorable group-name group-desc user-rules tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ip-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateIpGroup"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ip-group))
(common-lisp:progn
 (common-lisp:defun create-standby-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key primary-region standby-workspaces)
   (common-lisp:declare
    (common-lisp:ignorable primary-region standby-workspaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-standby-workspaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateStandbyWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-standby-workspaces))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun create-updated-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description source-image-id tags)
   (common-lisp:declare
    (common-lisp:ignorable name description source-image-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-updated-workspace-image-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUpdatedWorkspaceImage"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-updated-workspace-image))
(common-lisp:progn
 (common-lisp:defun create-workspace-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-name bundle-description image-id
                     compute-type user-storage root-storage tags)
   (common-lisp:declare
    (common-lisp:ignorable bundle-name bundle-description image-id compute-type
     user-storage root-storage tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWorkspaceBundle"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workspace-bundle))
(common-lisp:progn
 (common-lisp:defun create-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description workspace-id tags)
   (common-lisp:declare
    (common-lisp:ignorable name description workspace-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWorkspaceImage"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workspace-image))
(common-lisp:progn
 (common-lisp:defun create-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspaces)
   (common-lisp:declare (common-lisp:ignorable workspaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workspaces))
(common-lisp:progn
 (common-lisp:defun delete-client-branding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id platforms)
   (common-lisp:declare (common-lisp:ignorable resource-id platforms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-client-branding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteClientBranding"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-client-branding))
(common-lisp:progn
 (common-lisp:defun delete-connect-client-add-in
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-in-id resource-id)
   (common-lisp:declare (common-lisp:ignorable add-in-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-connect-client-add-in-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConnectClientAddIn"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connect-client-add-in))
(common-lisp:progn
 (common-lisp:defun delete-connection-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id)
   (common-lisp:declare (common-lisp:ignorable alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConnectionAlias"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection-alias))
(common-lisp:progn
 (common-lisp:defun delete-ip-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id)
   (common-lisp:declare (common-lisp:ignorable group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ip-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteIpGroup"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ip-group))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-workspace-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-id)
   (common-lisp:declare (common-lisp:ignorable bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteWorkspaceBundle"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workspace-bundle))
(common-lisp:progn
 (common-lisp:defun delete-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-id)
   (common-lisp:declare (common-lisp:ignorable image-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteWorkspaceImage"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workspace-image))
(common-lisp:progn
 (common-lisp:defun deregister-workspace-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id)
   (common-lisp:declare (common-lisp:ignorable directory-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-workspace-directory-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterWorkspaceDirectory"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-workspace-directory))
(common-lisp:progn
 (common-lisp:defun describe-account ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'workspaces-request :method "POST" :path "/"
                                :protocol :json :operation "DescribeAccount"
                                :params
                                `(("Action" ,@"DescribeAccount")
                                  ("Version" ,@"2015-04-08"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account))
(common-lisp:progn
 (common-lisp:defun describe-account-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-account-modifications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAccountModifications"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-account-modifications))
(common-lisp:progn
 (common-lisp:defun describe-client-branding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-client-branding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClientBranding"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-client-branding))
(common-lisp:progn
 (common-lisp:defun describe-client-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-ids)
   (common-lisp:declare (common-lisp:ignorable resource-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-client-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeClientProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-client-properties))
(common-lisp:progn
 (common-lisp:defun describe-connect-client-add-ins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connect-client-add-ins-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConnectClientAddIns"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connect-client-add-ins))
(common-lisp:progn
 (common-lisp:defun describe-connection-alias-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable alias-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connection-alias-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConnectionAliasPermissions"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connection-alias-permissions))
(common-lisp:progn
 (common-lisp:defun describe-connection-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-ids resource-id limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable alias-ids resource-id limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connection-aliases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConnectionAliases"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connection-aliases))
(common-lisp:progn
 (common-lisp:defun describe-ip-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-ids next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable group-ids next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ip-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeIpGroups"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ip-groups))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTags"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-workspace-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-ids owner next-token)
   (common-lisp:declare (common-lisp:ignorable bundle-ids owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-bundles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaceBundles"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-bundles))
(common-lisp:progn
 (common-lisp:defun describe-workspace-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-ids limit next-token)
   (common-lisp:declare (common-lisp:ignorable directory-ids limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-directories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaceDirectories"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-directories))
(common-lisp:progn
 (common-lisp:defun describe-workspace-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable image-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-image-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaceImagePermissions"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-image-permissions))
(common-lisp:progn
 (common-lisp:defun describe-workspace-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-ids image-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable image-ids image-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-images-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaceImages"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-images))
(common-lisp:progn
 (common-lisp:defun describe-workspace-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspace-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaceSnapshots"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspace-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-ids directory-id user-name
                     bundle-id limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-ids directory-id user-name bundle-id limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspaces))
(common-lisp:progn
 (common-lisp:defun describe-workspaces-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-ids next-token)
   (common-lisp:declare (common-lisp:ignorable workspace-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-workspaces-connection-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkspacesConnectionStatus"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workspaces-connection-status))
(common-lisp:progn
 (common-lisp:defun disassociate-connection-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id)
   (common-lisp:declare (common-lisp:ignorable alias-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-connection-alias-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateConnectionAlias"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-connection-alias))
(common-lisp:progn
 (common-lisp:defun disassociate-ip-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id group-ids)
   (common-lisp:declare (common-lisp:ignorable directory-id group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-ip-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateIpGroups"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-ip-groups))
(common-lisp:progn
 (common-lisp:defun import-client-branding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id device-type-windows
                     device-type-osx device-type-android device-type-ios
                     device-type-linux device-type-web)
   (common-lisp:declare
    (common-lisp:ignorable resource-id device-type-windows device-type-osx
     device-type-android device-type-ios device-type-linux device-type-web))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-client-branding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportClientBranding"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-client-branding))
(common-lisp:progn
 (common-lisp:defun import-workspace-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ec2image-id ingestion-process image-name
                     image-description tags applications)
   (common-lisp:declare
    (common-lisp:ignorable ec2image-id ingestion-process image-name
     image-description tags applications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-workspace-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportWorkspaceImage"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-workspace-image))
(common-lisp:progn
 (common-lisp:defun list-available-management-cidr-ranges
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key management-cidr-range-constraint
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable management-cidr-range-constraint max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-available-management-cidr-ranges-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAvailableManagementCidrRanges"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-available-management-cidr-ranges))
(common-lisp:progn
 (common-lisp:defun migrate-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-workspace-id bundle-id)
   (common-lisp:declare (common-lisp:ignorable source-workspace-id bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-migrate-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "MigrateWorkspace"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'migrate-workspace))
(common-lisp:progn
 (common-lisp:defun modify-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dedicated-tenancy-support
                     dedicated-tenancy-management-cidr-range)
   (common-lisp:declare
    (common-lisp:ignorable dedicated-tenancy-support
     dedicated-tenancy-management-cidr-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyAccount"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-account))
(common-lisp:progn
 (common-lisp:defun modify-certificate-based-auth-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id
                     certificate-based-auth-properties properties-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable resource-id certificate-based-auth-properties
     properties-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-certificate-based-auth-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyCertificateBasedAuthProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-certificate-based-auth-properties))
(common-lisp:progn
 (common-lisp:defun modify-client-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id client-properties)
   (common-lisp:declare (common-lisp:ignorable resource-id client-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-client-properties-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyClientProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-client-properties))
(common-lisp:progn
 (common-lisp:defun modify-saml-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id saml-properties
                     properties-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable resource-id saml-properties properties-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-saml-properties-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifySamlProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-saml-properties))
(common-lisp:progn
 (common-lisp:defun modify-selfservice-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id selfservice-permissions)
   (common-lisp:declare
    (common-lisp:ignorable resource-id selfservice-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-selfservice-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifySelfservicePermissions"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-selfservice-permissions))
(common-lisp:progn
 (common-lisp:defun modify-workspace-access-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id workspace-access-properties)
   (common-lisp:declare
    (common-lisp:ignorable resource-id workspace-access-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-workspace-access-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyWorkspaceAccessProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-workspace-access-properties))
(common-lisp:progn
 (common-lisp:defun modify-workspace-creation-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id
                     workspace-creation-properties)
   (common-lisp:declare
    (common-lisp:ignorable resource-id workspace-creation-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-workspace-creation-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyWorkspaceCreationProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-workspace-creation-properties))
(common-lisp:progn
 (common-lisp:defun modify-workspace-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id workspace-properties)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id workspace-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-workspace-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyWorkspaceProperties"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-workspace-properties))
(common-lisp:progn
 (common-lisp:defun modify-workspace-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id workspace-state)
   (common-lisp:declare (common-lisp:ignorable workspace-id workspace-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-workspace-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyWorkspaceState"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-workspace-state))
(common-lisp:progn
 (common-lisp:defun reboot-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reboot-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable reboot-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RebootWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-workspaces))
(common-lisp:progn
 (common-lisp:defun rebuild-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rebuild-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable rebuild-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rebuild-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RebuildWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'rebuild-workspaces))
(common-lisp:progn
 (common-lisp:defun register-workspace-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-id subnet-ids enable-work-docs
                     enable-self-service tenancy tags)
   (common-lisp:declare
    (common-lisp:ignorable directory-id subnet-ids enable-work-docs
     enable-self-service tenancy tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-workspace-directory-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterWorkspaceDirectory"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-workspace-directory))
(common-lisp:progn
 (common-lisp:defun restore-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RestoreWorkspace"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-workspace))
(common-lisp:progn
 (common-lisp:defun revoke-ip-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id user-rules)
   (common-lisp:declare (common-lisp:ignorable group-id user-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-ip-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RevokeIpRules"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-ip-rules))
(common-lisp:progn
 (common-lisp:defun start-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable start-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-workspaces))
(common-lisp:progn
 (common-lisp:defun stop-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stop-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable stop-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-workspaces))
(common-lisp:progn
 (common-lisp:defun terminate-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key terminate-workspace-requests)
   (common-lisp:declare (common-lisp:ignorable terminate-workspace-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TerminateWorkspaces"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-workspaces))
(common-lisp:progn
 (common-lisp:defun update-connect-client-add-in
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-in-id resource-id name url)
   (common-lisp:declare (common-lisp:ignorable add-in-id resource-id name url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-connect-client-add-in-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConnectClientAddIn"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connect-client-add-in))
(common-lisp:progn
 (common-lisp:defun update-connection-alias-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-id connection-alias-permission)
   (common-lisp:declare
    (common-lisp:ignorable alias-id connection-alias-permission))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-connection-alias-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConnectionAliasPermission"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connection-alias-permission))
(common-lisp:progn
 (common-lisp:defun update-rules-of-ip-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-id user-rules)
   (common-lisp:declare (common-lisp:ignorable group-id user-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rules-of-ip-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateRulesOfIpGroup"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rules-of-ip-group))
(common-lisp:progn
 (common-lisp:defun update-workspace-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-id image-id)
   (common-lisp:declare (common-lisp:ignorable bundle-id image-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workspace-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateWorkspaceBundle"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workspace-bundle))
(common-lisp:progn
 (common-lisp:defun update-workspace-image-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-id allow-copy-image
                     shared-account-id)
   (common-lisp:declare
    (common-lisp:ignorable image-id allow-copy-image shared-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-workspace-image-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'workspaces-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateWorkspaceImagePermission"
                                                        "2015-04-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workspace-image-permission))
