;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sms/api
  (:use)
  (:nicknames #:aws/sms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sms/api)
(common-lisp:progn
 (common-lisp:defclass sms-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "sms" :protocol :json))
 (common-lisp:export 'sms-request))
(common-lisp:progn
 (common-lisp:define-condition sms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sms-error))
(common-lisp:defvar *error-map*
  '(("DryRunOperationException" . dry-run-operation-exception)
    ("InternalError" . internal-error)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("MissingRequiredParameterException"
     . missing-required-parameter-exception)
    ("NoConnectorsAvailableException" . no-connectors-available-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("ReplicationJobAlreadyExistsException"
     . replication-job-already-exists-exception)
    ("ReplicationJobNotFoundException" . replication-job-not-found-exception)
    ("ReplicationRunLimitExceededException"
     . replication-run-limit-exceeded-exception)
    ("ServerCannotBeReplicatedException"
     . server-cannot-be-replicated-exception)
    ("TemporarilyUnavailableException" . temporarily-unavailable-exception)
    ("UnauthorizedOperationException" . unauthorized-operation-exception)))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype app-description () 'common-lisp:string)
(common-lisp:deftype app-id () 'common-lisp:string)
(common-lisp:deftype app-id-with-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype app-ids () '(trivial-types:proper-list app-id))
 (common-lisp:defun |make-app-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-launch-configuration-status () 'common-lisp:string)
(common-lisp:deftype app-launch-status () 'common-lisp:string)
(common-lisp:deftype app-launch-status-message () 'common-lisp:string)
(common-lisp:deftype app-name () 'common-lisp:string)
(common-lisp:deftype app-replication-configuration-status ()
  'common-lisp:string)
(common-lisp:deftype app-replication-status () 'common-lisp:string)
(common-lisp:deftype app-replication-status-message () 'common-lisp:string)
(common-lisp:deftype app-status () 'common-lisp:string)
(common-lisp:deftype app-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass app-summary common-lisp:nil
                       ((total-servers :initarg :|totalServers| :type
                         (common-lisp:or total-servers common-lisp:null)
                         :accessor %app-summary-total-servers :initform
                         common-lisp:nil)
                        (total-server-groups :initarg :|totalServerGroups|
                         :type
                         (common-lisp:or total-server-groups common-lisp:null)
                         :accessor %app-summary-total-server-groups :initform
                         common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %app-summary-role-name :initform common-lisp:nil)
                        (last-modified :initarg :|lastModified| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %app-summary-last-modified :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %app-summary-creation-time :initform common-lisp:nil)
                        (launch-details :initarg :|launchDetails| :type
                         (common-lisp:or launch-details common-lisp:null)
                         :accessor %app-summary-launch-details :initform
                         common-lisp:nil)
                        (launch-status-message :initarg :|launchStatusMessage|
                         :type
                         (common-lisp:or app-launch-status-message
                                         common-lisp:null)
                         :accessor %app-summary-launch-status-message :initform
                         common-lisp:nil)
                        (launch-status :initarg :|launchStatus| :type
                         (common-lisp:or app-launch-status common-lisp:null)
                         :accessor %app-summary-launch-status :initform
                         common-lisp:nil)
                        (launch-configuration-status :initarg
                         :|launchConfigurationStatus| :type
                         (common-lisp:or app-launch-configuration-status
                                         common-lisp:null)
                         :accessor %app-summary-launch-configuration-status
                         :initform common-lisp:nil)
                        (latest-replication-time :initarg
                         :|latestReplicationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %app-summary-latest-replication-time :initform
                         common-lisp:nil)
                        (replication-status-message :initarg
                         :|replicationStatusMessage| :type
                         (common-lisp:or app-replication-status-message
                                         common-lisp:null)
                         :accessor %app-summary-replication-status-message
                         :initform common-lisp:nil)
                        (replication-status :initarg :|replicationStatus| :type
                         (common-lisp:or app-replication-status
                                         common-lisp:null)
                         :accessor %app-summary-replication-status :initform
                         common-lisp:nil)
                        (replication-configuration-status :initarg
                         :|replicationConfigurationStatus| :type
                         (common-lisp:or app-replication-configuration-status
                                         common-lisp:null)
                         :accessor
                         %app-summary-replication-configuration-status
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or app-status-message common-lisp:null)
                         :accessor %app-summary-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or app-status common-lisp:null) :accessor
                         %app-summary-status :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or app-description common-lisp:null)
                         :accessor %app-summary-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or app-name common-lisp:null) :accessor
                         %app-summary-name :initform common-lisp:nil)
                        (imported-app-id :initarg :|importedAppId| :type
                         (common-lisp:or imported-app-id common-lisp:null)
                         :accessor %app-summary-imported-app-id :initform
                         common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %app-summary-app-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'app-summary 'make-app-summary))
 (common-lisp:defun make-app-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-servers total-server-groups
                     role-name last-modified creation-time launch-details
                     launch-status-message launch-status
                     launch-configuration-status latest-replication-time
                     replication-status-message replication-status
                     replication-configuration-status status-message status
                     description name imported-app-id app-id)
   (common-lisp:apply #'common-lisp:make-instance 'app-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-app-id))
      (common-lisp:list
       (common-lisp:cons "importedAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-status))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:list
       (common-lisp:cons "replicationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-status-message))
      (common-lisp:list
       (common-lisp:cons "replicationStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-replication-time))
      (common-lisp:list
       (common-lisp:cons "latestReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-status))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-status))
      (common-lisp:list
       (common-lisp:cons "launchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-status-message))
      (common-lisp:list
       (common-lisp:cons "launchStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-details))
      (common-lisp:list
       (common-lisp:cons "launchDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "lastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-server-groups))
      (common-lisp:list
       (common-lisp:cons "totalServerGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-servers))
      (common-lisp:list
       (common-lisp:cons "totalServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass app-validation-configuration common-lisp:nil
                       ((ssm-validation-parameters :initarg
                         :|ssmValidationParameters| :type
                         (common-lisp:or ssmvalidation-parameters
                                         common-lisp:null)
                         :accessor
                         %app-validation-configuration-ssm-validation-parameters
                         :initform common-lisp:nil)
                        (app-validation-strategy :initarg
                         :|appValidationStrategy| :type
                         (common-lisp:or app-validation-strategy
                                         common-lisp:null)
                         :accessor
                         %app-validation-configuration-app-validation-strategy
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string-with-max-len255
                                         common-lisp:null)
                         :accessor %app-validation-configuration-name :initform
                         common-lisp:nil)
                        (validation-id :initarg :|validationId| :type
                         (common-lisp:or validation-id common-lisp:null)
                         :accessor %app-validation-configuration-validation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-validation-configuration
                    'make-app-validation-configuration))
 (common-lisp:defun make-app-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssm-validation-parameters
                     app-validation-strategy name validation-id)
   (common-lisp:apply #'common-lisp:make-instance 'app-validation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-id))
      (common-lisp:list
       (common-lisp:cons "validationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-validation-strategy))
      (common-lisp:list
       (common-lisp:cons "appValidationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssm-validation-parameters))
      (common-lisp:list
       (common-lisp:cons "ssmValidationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-validation-configurations ()
   '(trivial-types:proper-list app-validation-configuration))
 (common-lisp:defun |make-app-validation-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            app-validation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass app-validation-output common-lisp:nil
                       ((ssm-output :initarg :|ssmOutput| :type
                         (common-lisp:or ssmoutput common-lisp:null) :accessor
                         %app-validation-output-ssm-output :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-validation-output 'make-app-validation-output))
 (common-lisp:defun make-app-validation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssm-output)
   (common-lisp:apply #'common-lisp:make-instance 'app-validation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-output))
      (common-lisp:list
       (common-lisp:cons "ssmOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-validation-output))
   common-lisp:nil))
(common-lisp:deftype app-validation-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype apps () '(trivial-types:proper-list app-summary))
 (common-lisp:defun |make-apps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype associate-public-ip-address () 'common-lisp:boolean)
(common-lisp:deftype auto-launch () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector common-lisp:nil
                       ((associated-on :initarg :|associatedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connector-associated-on :initform common-lisp:nil)
                        (mac-address :initarg :|macAddress| :type
                         (common-lisp:or mac-address common-lisp:null)
                         :accessor %connector-mac-address :initform
                         common-lisp:nil)
                        (ip-address :initarg :|ipAddress| :type
                         (common-lisp:or ip-address common-lisp:null) :accessor
                         %connector-ip-address :initform common-lisp:nil)
                        (vm-manager-id :initarg :|vmManagerId| :type
                         (common-lisp:or vm-manager-id common-lisp:null)
                         :accessor %connector-vm-manager-id :initform
                         common-lisp:nil)
                        (vm-manager-type :initarg :|vmManagerType| :type
                         (common-lisp:or vm-manager-type common-lisp:null)
                         :accessor %connector-vm-manager-type :initform
                         common-lisp:nil)
                        (vm-manager-name :initarg :|vmManagerName| :type
                         (common-lisp:or vm-manager-name common-lisp:null)
                         :accessor %connector-vm-manager-name :initform
                         common-lisp:nil)
                        (capability-list :initarg :|capabilityList| :type
                         (common-lisp:or connector-capability-list
                                         common-lisp:null)
                         :accessor %connector-capability-list :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or connector-status common-lisp:null)
                         :accessor %connector-status :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or connector-version common-lisp:null)
                         :accessor %connector-version :initform
                         common-lisp:nil)
                        (connector-id :initarg :|connectorId| :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %connector-connector-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'connector 'make-connector))
 (common-lisp:defun make-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key associated-on mac-address ip-address
                     vm-manager-id vm-manager-type vm-manager-name
                     capability-list status version connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-list))
      (common-lisp:list
       (common-lisp:cons "capabilityList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-name))
      (common-lisp:list
       (common-lisp:cons "vmManagerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-type))
      (common-lisp:list
       (common-lisp:cons "vmManagerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-id))
      (common-lisp:list
       (common-lisp:cons "vmManagerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-on))
      (common-lisp:list
       (common-lisp:cons "associatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector))
   common-lisp:nil))
(common-lisp:deftype connector-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-capability-list ()
   '(trivial-types:proper-list connector-capability))
 (common-lisp:defun |make-connector-capability-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-list () '(trivial-types:proper-list connector))
 (common-lisp:defun |make-connector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-status () 'common-lisp:string)
(common-lisp:deftype connector-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-app-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-app-request-tags :initform common-lisp:nil)
                        (server-groups :initarg :|serverGroups| :type
                         (common-lisp:or server-groups common-lisp:null)
                         :accessor %create-app-request-server-groups :initform
                         common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-app-request-client-token :initform
                         common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %create-app-request-role-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or app-description common-lisp:null)
                         :accessor %create-app-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or app-name common-lisp:null) :accessor
                         %create-app-request-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defun make-create-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-groups client-token role-name
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-groups))
      (common-lisp:list
       (common-lisp:cons "serverGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-app-response-tags :initform common-lisp:nil)
                        (server-groups :initarg :|serverGroups| :type
                         (common-lisp:or server-groups common-lisp:null)
                         :accessor %create-app-response-server-groups :initform
                         common-lisp:nil)
                        (app-summary :initarg :|appSummary| :type
                         (common-lisp:or app-summary common-lisp:null)
                         :accessor %create-app-response-app-summary :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-app-response 'make-create-app-response))
 (common-lisp:defun make-create-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-groups app-summary)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-summary))
      (common-lisp:list
       (common-lisp:cons "appSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-groups))
      (common-lisp:list
       (common-lisp:cons "serverGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-job-request common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %create-replication-job-request-kms-key-id :initform
                         common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %create-replication-job-request-encrypted :initform
                         common-lisp:nil)
                        (number-of-recent-amis-to-keep :initarg
                         :|numberOfRecentAmisToKeep| :type
                         (common-lisp:or number-of-recent-amis-to-keep
                                         common-lisp:null)
                         :accessor
                         %create-replication-job-request-number-of-recent-amis-to-keep
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-replication-job-request-description
                         :initform common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %create-replication-job-request-role-name :initform
                         common-lisp:nil)
                        (license-type :initarg :|licenseType| :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor %create-replication-job-request-license-type
                         :initform common-lisp:nil)
                        (run-once :initarg :|runOnce| :type
                         (common-lisp:or run-once common-lisp:null) :accessor
                         %create-replication-job-request-run-once :initform
                         common-lisp:nil)
                        (frequency :initarg :|frequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %create-replication-job-request-frequency :initform
                         common-lisp:nil)
                        (seed-replication-time :initarg :|seedReplicationTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %create-replication-job-request-seed-replication-time
                         :initform
                         (common-lisp:error
                          ":seedreplicationtime is required"))
                        (server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-replication-job-request-server-id :initform
                         (common-lisp:error ":serverid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-replication-job-request
                    'make-create-replication-job-request))
 (common-lisp:defun make-create-replication-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id encrypted
                     number-of-recent-amis-to-keep description role-name
                     license-type run-once frequency seed-replication-time
                     server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seed-replication-time))
      (common-lisp:list
       (common-lisp:cons "seedReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-once))
      (common-lisp:list
       (common-lisp:cons "runOnce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recent-amis-to-keep))
      (common-lisp:list
       (common-lisp:cons "numberOfRecentAmisToKeep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-job-response common-lisp:nil
                       ((replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %create-replication-job-response-replication-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-replication-job-response
                    'make-create-replication-job-response))
 (common-lisp:defun make-create-replication-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-launch-configuration-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %delete-app-launch-configuration-request-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-app-launch-configuration-request
                    'make-delete-app-launch-configuration-request))
 (common-lisp:defun make-delete-app-launch-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-launch-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-launch-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-launch-configuration-response
                    'make-delete-app-launch-configuration-response))
 (common-lisp:defun make-delete-app-launch-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-launch-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-launch-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-replication-configuration-request
                       common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %delete-app-replication-configuration-request-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-app-replication-configuration-request
                    'make-delete-app-replication-configuration-request))
 (common-lisp:defun make-delete-app-replication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-replication-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-replication-configuration-response
                    'make-delete-app-replication-configuration-response))
 (common-lisp:defun make-delete-app-replication-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-replication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-replication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-request common-lisp:nil
                       ((force-terminate-app :initarg :|forceTerminateApp|
                         :type
                         (common-lisp:or force-terminate-app common-lisp:null)
                         :accessor %delete-app-request-force-terminate-app
                         :initform common-lisp:nil)
                        (force-stop-app-replication :initarg
                         :|forceStopAppReplication| :type
                         (common-lisp:or force-stop-app-replication
                                         common-lisp:null)
                         :accessor
                         %delete-app-request-force-stop-app-replication
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %delete-app-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defun make-delete-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-terminate-app
                     force-stop-app-replication app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-stop-app-replication))
      (common-lisp:list
       (common-lisp:cons "forceStopAppReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-terminate-app))
      (common-lisp:list
       (common-lisp:cons "forceTerminateApp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-response 'make-delete-app-response))
 (common-lisp:defun make-delete-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-validation-configuration-request
                       common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id-with-validation
                                         common-lisp:null)
                         :accessor
                         %delete-app-validation-configuration-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-app-validation-configuration-request
                    'make-delete-app-validation-configuration-request))
 (common-lisp:defun make-delete-app-validation-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-validation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-validation-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-validation-configuration-response
                    'make-delete-app-validation-configuration-response))
 (common-lisp:defun make-delete-app-validation-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-app-validation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-validation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-job-request common-lisp:nil
                       ((replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %delete-replication-job-request-replication-job-id
                         :initform
                         (common-lisp:error ":replicationjobid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-replication-job-request
                    'make-delete-replication-job-request))
 (common-lisp:defun make-delete-replication-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-replication-job-response
                    'make-delete-replication-job-response))
 (common-lisp:defun make-delete-replication-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-server-catalog-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-server-catalog-request
                    'make-delete-server-catalog-request))
 (common-lisp:defun make-delete-server-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-server-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-server-catalog-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-server-catalog-response
                    'make-delete-server-catalog-response))
 (common-lisp:defun make-delete-server-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-server-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-catalog-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-connector-request common-lisp:nil
                       ((connector-id :initarg :|connectorId| :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %disassociate-connector-request-connector-id
                         :initform
                         (common-lisp:error ":connectorid is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-connector-request
                    'make-disassociate-connector-request))
 (common-lisp:defun make-disassociate-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-connector-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-connector-response
                    'make-disassociate-connector-response))
 (common-lisp:defun make-disassociate-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dry-run-operation-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       dry-run-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dry-run-operation-exception
                    'dry-run-operation-exception-message)))
(common-lisp:deftype ec2key-name () 'common-lisp:string)
(common-lisp:deftype encrypted () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype execution-timeout-seconds () 'common-lisp:integer)
(common-lisp:deftype force-stop-app-replication () 'common-lisp:boolean)
(common-lisp:deftype force-terminate-app () 'common-lisp:boolean)
(common-lisp:deftype frequency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass generate-change-set-request common-lisp:nil
                       ((changeset-format :initarg :|changesetFormat| :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         %generate-change-set-request-changeset-format
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %generate-change-set-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generate-change-set-request
                    'make-generate-change-set-request))
 (common-lisp:defun make-generate-change-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key changeset-format app-id)
   (common-lisp:apply #'common-lisp:make-instance 'generate-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-format))
      (common-lisp:list
       (common-lisp:cons "changesetFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-change-set-response common-lisp:nil
                       ((s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %generate-change-set-response-s3location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generate-change-set-response
                    'make-generate-change-set-response))
 (common-lisp:defun make-generate-change-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'generate-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-template-request common-lisp:nil
                       ((template-format :initarg :|templateFormat| :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor %generate-template-request-template-format
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %generate-template-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generate-template-request
                    'make-generate-template-request))
 (common-lisp:defun make-generate-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-format app-id)
   (common-lisp:apply #'common-lisp:make-instance 'generate-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-format))
      (common-lisp:list
       (common-lisp:cons "templateFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-template-response common-lisp:nil
                       ((s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %generate-template-response-s3location :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generate-template-response
                    'make-generate-template-response))
 (common-lisp:defun make-generate-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'generate-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-launch-configuration-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %get-app-launch-configuration-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-launch-configuration-request
                    'make-get-app-launch-configuration-request))
 (common-lisp:defun make-get-app-launch-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-launch-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-launch-configuration-response common-lisp:nil
                       ((server-group-launch-configurations :initarg
                         :|serverGroupLaunchConfigurations| :type
                         (common-lisp:or server-group-launch-configurations
                                         common-lisp:null)
                         :accessor
                         %get-app-launch-configuration-response-server-group-launch-configurations
                         :initform common-lisp:nil)
                        (auto-launch :initarg :|autoLaunch| :type
                         (common-lisp:or auto-launch common-lisp:null)
                         :accessor
                         %get-app-launch-configuration-response-auto-launch
                         :initform common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %get-app-launch-configuration-response-role-name
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %get-app-launch-configuration-response-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-launch-configuration-response
                    'make-get-app-launch-configuration-response))
 (common-lisp:defun make-get-app-launch-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-launch-configurations
                     auto-launch role-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-launch-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-launch))
      (common-lisp:list
       (common-lisp:cons "autoLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-launch-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-replication-configuration-request
                       common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %get-app-replication-configuration-request-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-replication-configuration-request
                    'make-get-app-replication-configuration-request))
 (common-lisp:defun make-get-app-replication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-replication-configuration-response
                       common-lisp:nil
                       ((server-group-replication-configurations :initarg
                         :|serverGroupReplicationConfigurations| :type
                         (common-lisp:or
                          server-group-replication-configurations
                          common-lisp:null)
                         :accessor
                         %get-app-replication-configuration-response-server-group-replication-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-replication-configuration-response
                    'make-get-app-replication-configuration-response))
 (common-lisp:defun make-get-app-replication-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-replication-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-replication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-replication-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupReplicationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-replication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %get-app-request-app-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'get-app-request 'make-get-app-request))
 (common-lisp:defun make-get-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %get-app-response-tags :initform common-lisp:nil)
                        (server-groups :initarg :|serverGroups| :type
                         (common-lisp:or server-groups common-lisp:null)
                         :accessor %get-app-response-server-groups :initform
                         common-lisp:nil)
                        (app-summary :initarg :|appSummary| :type
                         (common-lisp:or app-summary common-lisp:null)
                         :accessor %get-app-response-app-summary :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-response 'make-get-app-response))
 (common-lisp:defun make-get-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-groups app-summary)
   (common-lisp:apply #'common-lisp:make-instance 'get-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-summary))
      (common-lisp:list
       (common-lisp:cons "appSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-groups))
      (common-lisp:list
       (common-lisp:cons "serverGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-validation-configuration-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id-with-validation
                                         common-lisp:null)
                         :accessor
                         %get-app-validation-configuration-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-app-validation-configuration-request
                    'make-get-app-validation-configuration-request))
 (common-lisp:defun make-get-app-validation-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-validation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-validation-configuration-response
                       common-lisp:nil
                       ((server-group-validation-configurations :initarg
                         :|serverGroupValidationConfigurations| :type
                         (common-lisp:or server-group-validation-configurations
                                         common-lisp:null)
                         :accessor
                         %get-app-validation-configuration-response-server-group-validation-configurations
                         :initform common-lisp:nil)
                        (app-validation-configurations :initarg
                         :|appValidationConfigurations| :type
                         (common-lisp:or app-validation-configurations
                                         common-lisp:null)
                         :accessor
                         %get-app-validation-configuration-response-app-validation-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-validation-configuration-response
                    'make-get-app-validation-configuration-response))
 (common-lisp:defun make-get-app-validation-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-validation-configurations
                     app-validation-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-validation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-validation-configurations))
      (common-lisp:list
       (common-lisp:cons "appValidationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-validation-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupValidationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-validation-output-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id-with-validation
                                         common-lisp:null)
                         :accessor %get-app-validation-output-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-app-validation-output-request
                    'make-get-app-validation-output-request))
 (common-lisp:defun make-get-app-validation-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-validation-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-validation-output-response common-lisp:nil
                       ((validation-output-list :initarg
                         :|validationOutputList| :type
                         (common-lisp:or validation-output-list
                                         common-lisp:null)
                         :accessor
                         %get-app-validation-output-response-validation-output-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-validation-output-response
                    'make-get-app-validation-output-response))
 (common-lisp:defun make-get-app-validation-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-output-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-validation-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-output-list))
      (common-lisp:list
       (common-lisp:cons "validationOutputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-validation-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connectors-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-connectors-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-connectors-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-connectors-request 'make-get-connectors-request))
 (common-lisp:defun make-get-connectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-connectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connectors-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-connectors-response-next-token :initform
                         common-lisp:nil)
                        (connector-list :initarg :|connectorList| :type
                         (common-lisp:or connector-list common-lisp:null)
                         :accessor %get-connectors-response-connector-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-connectors-response 'make-get-connectors-response))
 (common-lisp:defun make-get-connectors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connector-list)
   (common-lisp:apply #'common-lisp:make-instance 'get-connectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-list))
      (common-lisp:list
       (common-lisp:cons "connectorList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-jobs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-replication-jobs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-replication-jobs-request-next-token :initform
                         common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %get-replication-jobs-request-replication-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-replication-jobs-request
                    'make-get-replication-jobs-request))
 (common-lisp:defun make-get-replication-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-replication-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-replication-jobs-response-next-token :initform
                         common-lisp:nil)
                        (replication-job-list :initarg :|replicationJobList|
                         :type
                         (common-lisp:or replication-job-list common-lisp:null)
                         :accessor
                         %get-replication-jobs-response-replication-job-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-replication-jobs-response
                    'make-get-replication-jobs-response))
 (common-lisp:defun make-get-replication-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token replication-job-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-replication-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-job-list))
      (common-lisp:list
       (common-lisp:cons "replicationJobList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-runs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-replication-runs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-replication-runs-request-next-token :initform
                         common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %get-replication-runs-request-replication-job-id
                         :initform
                         (common-lisp:error ":replicationjobid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-replication-runs-request
                    'make-get-replication-runs-request))
 (common-lisp:defun make-get-replication-runs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-replication-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-runs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-replication-runs-response-next-token :initform
                         common-lisp:nil)
                        (replication-run-list :initarg :|replicationRunList|
                         :type
                         (common-lisp:or replication-run-list common-lisp:null)
                         :accessor
                         %get-replication-runs-response-replication-run-list
                         :initform common-lisp:nil)
                        (replication-job :initarg :|replicationJob| :type
                         (common-lisp:or replication-job common-lisp:null)
                         :accessor
                         %get-replication-runs-response-replication-job
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-replication-runs-response
                    'make-get-replication-runs-response))
 (common-lisp:defun make-get-replication-runs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token replication-run-list
                     replication-job)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-replication-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job))
      (common-lisp:list
       (common-lisp:cons "replicationJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-run-list))
      (common-lisp:list
       (common-lisp:cons "replicationRunList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-servers-request common-lisp:nil
                       ((vm-server-address-list :initarg :|vmServerAddressList|
                         :type
                         (common-lisp:or vm-server-address-list
                                         common-lisp:null)
                         :accessor %get-servers-request-vm-server-address-list
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-servers-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-servers-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-servers-request 'make-get-servers-request))
 (common-lisp:defun make-get-servers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vm-server-address-list max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vm-server-address-list))
      (common-lisp:list
       (common-lisp:cons "vmServerAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-servers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-servers-response-next-token :initform
                         common-lisp:nil)
                        (server-list :initarg :|serverList| :type
                         (common-lisp:or server-list common-lisp:null)
                         :accessor %get-servers-response-server-list :initform
                         common-lisp:nil)
                        (server-catalog-status :initarg :|serverCatalogStatus|
                         :type
                         (common-lisp:or server-catalog-status
                                         common-lisp:null)
                         :accessor %get-servers-response-server-catalog-status
                         :initform common-lisp:nil)
                        (last-modified-on :initarg :|lastModifiedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-servers-response-last-modified-on :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-servers-response 'make-get-servers-response))
 (common-lisp:defun make-get-servers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token server-list
                     server-catalog-status last-modified-on)
   (common-lisp:apply #'common-lisp:make-instance 'get-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "lastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-catalog-status))
      (common-lisp:list
       (common-lisp:cons "serverCatalogStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-list))
      (common-lisp:list
       (common-lisp:cons "serverList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-app-catalog-request common-lisp:nil
                       ((role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %import-app-catalog-request-role-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-app-catalog-request
                    'make-import-app-catalog-request))
 (common-lisp:defun make-import-app-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-name)
   (common-lisp:apply #'common-lisp:make-instance 'import-app-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-app-catalog-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'import-app-catalog-response
                    'make-import-app-catalog-response))
 (common-lisp:defun make-import-app-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'import-app-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-app-catalog-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-server-catalog-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'import-server-catalog-request
                    'make-import-server-catalog-request))
 (common-lisp:defun make-import-server-catalog-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-server-catalog-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-server-catalog-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'import-server-catalog-response
                    'make-import-server-catalog-response))
 (common-lisp:defun make-import-server-catalog-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-server-catalog-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-server-catalog-response))
   common-lisp:nil))
(common-lisp:deftype imported-app-id () 'common-lisp:string)
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-error
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error 'internal-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-app-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %launch-app-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-app-request 'make-launch-app-request))
 (common-lisp:defun make-launch-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance 'launch-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-app-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'launch-app-response 'make-launch-app-response))
 (common-lisp:defun make-launch-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'launch-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-details common-lisp:nil
                       ((stack-id :initarg :|stackId| :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %launch-details-stack-id :initform common-lisp:nil)
                        (stack-name :initarg :|stackName| :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %launch-details-stack-name :initform common-lisp:nil)
                        (latest-launch-time :initarg :|latestLaunchTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %launch-details-latest-launch-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'launch-details 'make-launch-details))
 (common-lisp:defun make-launch-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id stack-name latest-launch-time)
   (common-lisp:apply #'common-lisp:make-instance 'launch-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-launch-time))
      (common-lisp:list
       (common-lisp:cons "latestLaunchTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "stackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "stackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-details))
   common-lisp:nil))
(common-lisp:deftype launch-order () 'common-lisp:integer)
(common-lisp:deftype license-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-apps-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-apps-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-apps-request-next-token :initform
                         common-lisp:nil)
                        (app-ids :initarg :|appIds| :type
                         (common-lisp:or app-ids common-lisp:null) :accessor
                         %list-apps-request-app-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-apps-request 'make-list-apps-request))
 (common-lisp:defun make-list-apps-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token app-ids)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-ids))
      (common-lisp:list
       (common-lisp:cons "appIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-apps-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-apps-response-next-token :initform
                         common-lisp:nil)
                        (apps :initarg :|apps| :type
                         (common-lisp:or apps common-lisp:null) :accessor
                         %list-apps-response-apps :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-apps-response 'make-list-apps-response))
 (common-lisp:defun make-list-apps-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token apps)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps))
      (common-lisp:list
       (common-lisp:cons "apps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-response))
   common-lisp:nil))
(common-lisp:deftype logical-id () 'common-lisp:string)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-required-parameter-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       missing-required-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-required-parameter-exception
                    'missing-required-parameter-exception-message)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-connectors-available-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       no-connectors-available-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-connectors-available-exception
                    'no-connectors-available-exception-message)))
(common-lisp:deftype non-empty-string-with-max-len255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-context common-lisp:nil
                       ((status-message :initarg :|statusMessage| :type
                         (common-lisp:or validation-status-message
                                         common-lisp:null)
                         :accessor %notification-context-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or validation-status common-lisp:null)
                         :accessor %notification-context-status :initform
                         common-lisp:nil)
                        (validation-id :initarg :|validationId| :type
                         (common-lisp:or validation-id common-lisp:null)
                         :accessor %notification-context-validation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-context 'make-notification-context))
 (common-lisp:defun make-notification-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-message status validation-id)
   (common-lisp:apply #'common-lisp:make-instance 'notification-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-id))
      (common-lisp:list
       (common-lisp:cons "validationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-app-validation-output-request common-lisp:nil
                       ((notification-context :initarg :|notificationContext|
                         :type
                         (common-lisp:or notification-context common-lisp:null)
                         :accessor
                         %notify-app-validation-output-request-notification-context
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id-with-validation
                                         common-lisp:null)
                         :accessor %notify-app-validation-output-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'notify-app-validation-output-request
                    'make-notify-app-validation-output-request))
 (common-lisp:defun make-notify-app-validation-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-context app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-app-validation-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-context))
      (common-lisp:list
       (common-lisp:cons "notificationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notify-app-validation-output-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'notify-app-validation-output-response
                    'make-notify-app-validation-output-response))
 (common-lisp:defun make-notify-app-validation-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-app-validation-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-app-validation-output-response))
   common-lisp:nil))
(common-lisp:deftype number-of-recent-amis-to-keep () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       operation-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-exception
                    'operation-not-permitted-exception-message)))
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-app-launch-configuration-request common-lisp:nil
                       ((server-group-launch-configurations :initarg
                         :|serverGroupLaunchConfigurations| :type
                         (common-lisp:or server-group-launch-configurations
                                         common-lisp:null)
                         :accessor
                         %put-app-launch-configuration-request-server-group-launch-configurations
                         :initform common-lisp:nil)
                        (auto-launch :initarg :|autoLaunch| :type
                         (common-lisp:or auto-launch common-lisp:null)
                         :accessor
                         %put-app-launch-configuration-request-auto-launch
                         :initform common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %put-app-launch-configuration-request-role-name
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %put-app-launch-configuration-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-app-launch-configuration-request
                    'make-put-app-launch-configuration-request))
 (common-lisp:defun make-put-app-launch-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-launch-configurations
                     auto-launch role-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-launch-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-launch))
      (common-lisp:list
       (common-lisp:cons "autoLaunch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-app-launch-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-app-launch-configuration-response
                    'make-put-app-launch-configuration-response))
 (common-lisp:defun make-put-app-launch-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-launch-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-launch-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-app-replication-configuration-request
                       common-lisp:nil
                       ((server-group-replication-configurations :initarg
                         :|serverGroupReplicationConfigurations| :type
                         (common-lisp:or
                          server-group-replication-configurations
                          common-lisp:null)
                         :accessor
                         %put-app-replication-configuration-request-server-group-replication-configurations
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %put-app-replication-configuration-request-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-app-replication-configuration-request
                    'make-put-app-replication-configuration-request))
 (common-lisp:defun make-put-app-replication-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-replication-configurations
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-replication-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupReplicationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-app-replication-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-app-replication-configuration-response
                    'make-put-app-replication-configuration-response))
 (common-lisp:defun make-put-app-replication-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-replication-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-replication-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-app-validation-configuration-request common-lisp:nil
                       ((server-group-validation-configurations :initarg
                         :|serverGroupValidationConfigurations| :type
                         (common-lisp:or server-group-validation-configurations
                                         common-lisp:null)
                         :accessor
                         %put-app-validation-configuration-request-server-group-validation-configurations
                         :initform common-lisp:nil)
                        (app-validation-configurations :initarg
                         :|appValidationConfigurations| :type
                         (common-lisp:or app-validation-configurations
                                         common-lisp:null)
                         :accessor
                         %put-app-validation-configuration-request-app-validation-configurations
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id-with-validation
                                         common-lisp:null)
                         :accessor
                         %put-app-validation-configuration-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'put-app-validation-configuration-request
                    'make-put-app-validation-configuration-request))
 (common-lisp:defun make-put-app-validation-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-group-validation-configurations
                     app-validation-configurations app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-validation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-validation-configurations))
      (common-lisp:list
       (common-lisp:cons "appValidationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-group-validation-configurations))
      (common-lisp:list
       (common-lisp:cons "serverGroupValidationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-app-validation-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-app-validation-configuration-response
                    'make-put-app-validation-configuration-response))
 (common-lisp:defun make-put-app-validation-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-app-validation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-app-validation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-job common-lisp:nil
                       ((replication-run-list :initarg :|replicationRunList|
                         :type
                         (common-lisp:or replication-run-list common-lisp:null)
                         :accessor %replication-job-replication-run-list
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %replication-job-kms-key-id :initform common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %replication-job-encrypted :initform common-lisp:nil)
                        (number-of-recent-amis-to-keep :initarg
                         :|numberOfRecentAmisToKeep| :type
                         (common-lisp:or number-of-recent-amis-to-keep
                                         common-lisp:null)
                         :accessor
                         %replication-job-number-of-recent-amis-to-keep
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %replication-job-description :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or replication-job-status-message
                                         common-lisp:null)
                         :accessor %replication-job-status-message :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or replication-job-state
                                         common-lisp:null)
                         :accessor %replication-job-state :initform
                         common-lisp:nil)
                        (latest-ami-id :initarg :|latestAmiId| :type
                         (common-lisp:or ami-id common-lisp:null) :accessor
                         %replication-job-latest-ami-id :initform
                         common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %replication-job-role-name :initform common-lisp:nil)
                        (license-type :initarg :|licenseType| :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor %replication-job-license-type :initform
                         common-lisp:nil)
                        (next-replication-run-start-time :initarg
                         :|nextReplicationRunStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replication-job-next-replication-run-start-time
                         :initform common-lisp:nil)
                        (run-once :initarg :|runOnce| :type
                         (common-lisp:or run-once common-lisp:null) :accessor
                         %replication-job-run-once :initform common-lisp:nil)
                        (frequency :initarg :|frequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %replication-job-frequency :initform common-lisp:nil)
                        (seed-replication-time :initarg :|seedReplicationTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %replication-job-seed-replication-time
                         :initform common-lisp:nil)
                        (vm-server :initarg :|vmServer| :type
                         (common-lisp:or vm-server common-lisp:null) :accessor
                         %replication-job-vm-server :initform common-lisp:nil)
                        (server-type :initarg :|serverType| :type
                         (common-lisp:or server-type common-lisp:null)
                         :accessor %replication-job-server-type :initform
                         common-lisp:nil)
                        (server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %replication-job-server-id :initform common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor %replication-job-replication-job-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'replication-job 'make-replication-job))
 (common-lisp:defun make-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-run-list kms-key-id encrypted
                     number-of-recent-amis-to-keep description status-message
                     state latest-ami-id role-name license-type
                     next-replication-run-start-time run-once frequency
                     seed-replication-time vm-server server-type server-id
                     replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance 'replication-job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server))
      (common-lisp:list
       (common-lisp:cons "vmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seed-replication-time))
      (common-lisp:list
       (common-lisp:cons "seedReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-once))
      (common-lisp:list
       (common-lisp:cons "runOnce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-replication-run-start-time))
      (common-lisp:list
       (common-lisp:cons "nextReplicationRunStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-ami-id))
      (common-lisp:list
       (common-lisp:cons "latestAmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recent-amis-to-keep))
      (common-lisp:list
       (common-lisp:cons "numberOfRecentAmisToKeep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-run-list))
      (common-lisp:list
       (common-lisp:cons "replicationRunList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-job-already-exists-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       replication-job-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-job-already-exists-exception
                    'replication-job-already-exists-exception-message)))
(common-lisp:deftype replication-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-job-list ()
   '(trivial-types:proper-list replication-job))
 (common-lisp:defun |make-replication-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition replication-job-not-found-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       replication-job-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-job-not-found-exception
                    'replication-job-not-found-exception-message)))
(common-lisp:deftype replication-job-state () 'common-lisp:string)
(common-lisp:deftype replication-job-status-message () 'common-lisp:string)
(common-lisp:deftype replication-job-terminated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass replication-run common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %replication-run-kms-key-id :initform common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %replication-run-encrypted :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %replication-run-description :initform
                         common-lisp:nil)
                        (completed-time :initarg :|completedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %replication-run-completed-time :initform
                         common-lisp:nil)
                        (scheduled-start-time :initarg :|scheduledStartTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %replication-run-scheduled-start-time
                         :initform common-lisp:nil)
                        (ami-id :initarg :|amiId| :type
                         (common-lisp:or ami-id common-lisp:null) :accessor
                         %replication-run-ami-id :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or replication-run-status-message
                                         common-lisp:null)
                         :accessor %replication-run-status-message :initform
                         common-lisp:nil)
                        (stage-details :initarg :|stageDetails| :type
                         (common-lisp:or replication-run-stage-details
                                         common-lisp:null)
                         :accessor %replication-run-stage-details :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or replication-run-type common-lisp:null)
                         :accessor %replication-run-type :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or replication-run-state
                                         common-lisp:null)
                         :accessor %replication-run-state :initform
                         common-lisp:nil)
                        (replication-run-id :initarg :|replicationRunId| :type
                         (common-lisp:or replication-run-id common-lisp:null)
                         :accessor %replication-run-replication-run-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'replication-run 'make-replication-run))
 (common-lisp:defun make-replication-run
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id encrypted description
                     completed-time scheduled-start-time ami-id status-message
                     stage-details type state replication-run-id)
   (common-lisp:apply #'common-lisp:make-instance 'replication-run
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-run-id))
      (common-lisp:list
       (common-lisp:cons "replicationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-details))
      (common-lisp:list
       (common-lisp:cons "stageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "amiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-start-time))
      (common-lisp:list
       (common-lisp:cons "scheduledStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-time))
      (common-lisp:list
       (common-lisp:cons "completedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-run))
   common-lisp:nil))
(common-lisp:deftype replication-run-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition replication-run-limit-exceeded-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       replication-run-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'replication-run-limit-exceeded-exception
                    'replication-run-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype replication-run-list ()
   '(trivial-types:proper-list replication-run))
 (common-lisp:defun |make-replication-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-run-stage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-run-stage-details common-lisp:nil
                       ((stage-progress :initarg :|stageProgress| :type
                         (common-lisp:or replication-run-stage-progress
                                         common-lisp:null)
                         :accessor
                         %replication-run-stage-details-stage-progress
                         :initform common-lisp:nil)
                        (stage :initarg :|stage| :type
                         (common-lisp:or replication-run-stage
                                         common-lisp:null)
                         :accessor %replication-run-stage-details-stage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'replication-run-stage-details
                    'make-replication-run-stage-details))
 (common-lisp:defun make-replication-run-stage-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stage-progress stage)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-run-stage-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-run-stage-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-run-stage-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-progress))
      (common-lisp:list
       (common-lisp:cons "stageProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-run-stage-details))
   common-lisp:nil))
(common-lisp:deftype replication-run-stage-progress () 'common-lisp:string)
(common-lisp:deftype replication-run-state () 'common-lisp:string)
(common-lisp:deftype replication-run-status-message () 'common-lisp:string)
(common-lisp:deftype replication-run-type () 'common-lisp:string)
(common-lisp:deftype role-name () 'common-lisp:string)
(common-lisp:deftype run-once () 'common-lisp:boolean)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((key :initarg :|key| :type
                         (common-lisp:or s3key-name common-lisp:null) :accessor
                         %s3location-key :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3location-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ssmoutput common-lisp:nil
                       ((s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %ssmoutput-s3location :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ssmoutput 'make-ssmoutput))
 (common-lisp:defun make-ssmoutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'ssmoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssmoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssmoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssmoutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ssmvalidation-parameters common-lisp:nil
                       ((output-s3bucket-name :initarg :|outputS3BucketName|
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         %ssmvalidation-parameters-output-s3bucket-name
                         :initform common-lisp:nil)
                        (execution-timeout-seconds :initarg
                         :|executionTimeoutSeconds| :type
                         (common-lisp:or execution-timeout-seconds
                                         common-lisp:null)
                         :accessor
                         %ssmvalidation-parameters-execution-timeout-seconds
                         :initform common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %ssmvalidation-parameters-command :initform
                         common-lisp:nil)
                        (script-type :initarg :|scriptType| :type
                         (common-lisp:or script-type common-lisp:null)
                         :accessor %ssmvalidation-parameters-script-type
                         :initform common-lisp:nil)
                        (instance-id :initarg :|instanceId| :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %ssmvalidation-parameters-instance-id
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or source common-lisp:null) :accessor
                         %ssmvalidation-parameters-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ssmvalidation-parameters 'make-ssmvalidation-parameters))
 (common-lisp:defun make-ssmvalidation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-s3bucket-name
                     execution-timeout-seconds command script-type instance-id
                     source)
   (common-lisp:apply #'common-lisp:make-instance 'ssmvalidation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ssmvalidation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ssmvalidation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-type))
      (common-lisp:list
       (common-lisp:cons "scriptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "executionTimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "outputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ssmvalidation-parameters))
   common-lisp:nil))
(common-lisp:deftype script-type () 'common-lisp:string)
(common-lisp:deftype security-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server common-lisp:nil
                       ((replication-job-terminated :initarg
                         :|replicationJobTerminated| :type
                         (common-lisp:or replication-job-terminated
                                         common-lisp:null)
                         :accessor %server-replication-job-terminated :initform
                         common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor %server-replication-job-id :initform
                         common-lisp:nil)
                        (vm-server :initarg :|vmServer| :type
                         (common-lisp:or vm-server common-lisp:null) :accessor
                         %server-vm-server :initform common-lisp:nil)
                        (server-type :initarg :|serverType| :type
                         (common-lisp:or server-type common-lisp:null)
                         :accessor %server-server-type :initform
                         common-lisp:nil)
                        (server-id :initarg :|serverId| :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %server-server-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server 'make-server))
 (common-lisp:defun make-server
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-job-terminated
                     replication-job-id vm-server server-type server-id)
   (common-lisp:apply #'common-lisp:make-instance 'server
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "serverId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-type))
      (common-lisp:list
       (common-lisp:cons "serverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server))
      (common-lisp:list
       (common-lisp:cons "vmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-job-terminated))
      (common-lisp:list
       (common-lisp:cons "replicationJobTerminated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition server-cannot-be-replicated-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       server-cannot-be-replicated-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-cannot-be-replicated-exception
                    'server-cannot-be-replicated-exception-message)))
(common-lisp:deftype server-catalog-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-group common-lisp:nil
                       ((server-list :initarg :|serverList| :type
                         (common-lisp:or server-list common-lisp:null)
                         :accessor %server-group-server-list :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or server-group-name common-lisp:null)
                         :accessor %server-group-name :initform
                         common-lisp:nil)
                        (server-group-id :initarg :|serverGroupId| :type
                         (common-lisp:or server-group-id common-lisp:null)
                         :accessor %server-group-server-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'server-group 'make-server-group))
 (common-lisp:defun make-server-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-list name server-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'server-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-group-id))
      (common-lisp:list
       (common-lisp:cons "serverGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-list))
      (common-lisp:list
       (common-lisp:cons "serverList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-group))
   common-lisp:nil))
(common-lisp:deftype server-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-group-launch-configuration common-lisp:nil
                       ((server-launch-configurations :initarg
                         :|serverLaunchConfigurations| :type
                         (common-lisp:or server-launch-configurations
                                         common-lisp:null)
                         :accessor
                         %server-group-launch-configuration-server-launch-configurations
                         :initform common-lisp:nil)
                        (launch-order :initarg :|launchOrder| :type
                         (common-lisp:or launch-order common-lisp:null)
                         :accessor
                         %server-group-launch-configuration-launch-order
                         :initform common-lisp:nil)
                        (server-group-id :initarg :|serverGroupId| :type
                         (common-lisp:or server-group-id common-lisp:null)
                         :accessor
                         %server-group-launch-configuration-server-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-group-launch-configuration
                    'make-server-group-launch-configuration))
 (common-lisp:defun make-server-group-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-launch-configurations launch-order
                     server-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-group-launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-group-launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-group-launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-group-id))
      (common-lisp:list
       (common-lisp:cons "serverGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-order))
      (common-lisp:list
       (common-lisp:cons "launchOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-launch-configurations))
      (common-lisp:list
       (common-lisp:cons "serverLaunchConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-group-launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-group-launch-configurations ()
   '(trivial-types:proper-list server-group-launch-configuration))
 (common-lisp:defun |make-server-group-launch-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-group-launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-group-replication-configuration common-lisp:nil
                       ((server-replication-configurations :initarg
                         :|serverReplicationConfigurations| :type
                         (common-lisp:or server-replication-configurations
                                         common-lisp:null)
                         :accessor
                         %server-group-replication-configuration-server-replication-configurations
                         :initform common-lisp:nil)
                        (server-group-id :initarg :|serverGroupId| :type
                         (common-lisp:or server-group-id common-lisp:null)
                         :accessor
                         %server-group-replication-configuration-server-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-group-replication-configuration
                    'make-server-group-replication-configuration))
 (common-lisp:defun make-server-group-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-replication-configurations
                     server-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-group-replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-group-replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-group-replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-group-id))
      (common-lisp:list
       (common-lisp:cons "serverGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-replication-configurations))
      (common-lisp:list
       (common-lisp:cons "serverReplicationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-group-replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-group-replication-configurations ()
   '(trivial-types:proper-list server-group-replication-configuration))
 (common-lisp:defun |make-server-group-replication-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-group-replication-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-group-validation-configuration common-lisp:nil
                       ((server-validation-configurations :initarg
                         :|serverValidationConfigurations| :type
                         (common-lisp:or server-validation-configurations
                                         common-lisp:null)
                         :accessor
                         %server-group-validation-configuration-server-validation-configurations
                         :initform common-lisp:nil)
                        (server-group-id :initarg :|serverGroupId| :type
                         (common-lisp:or server-group-id common-lisp:null)
                         :accessor
                         %server-group-validation-configuration-server-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-group-validation-configuration
                    'make-server-group-validation-configuration))
 (common-lisp:defun make-server-group-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-validation-configurations
                     server-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-group-validation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-group-validation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-group-validation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-group-id))
      (common-lisp:list
       (common-lisp:cons "serverGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-validation-configurations))
      (common-lisp:list
       (common-lisp:cons "serverValidationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-group-validation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-group-validation-configurations ()
   '(trivial-types:proper-list server-group-validation-configuration))
 (common-lisp:defun |make-server-group-validation-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-group-validation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype server-groups ()
   '(trivial-types:proper-list server-group))
 (common-lisp:defun |make-server-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-launch-configuration common-lisp:nil
                       ((configure-script-type :initarg :|configureScriptType|
                         :type (common-lisp:or script-type common-lisp:null)
                         :accessor
                         %server-launch-configuration-configure-script-type
                         :initform common-lisp:nil)
                        (configure-script :initarg :|configureScript| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %server-launch-configuration-configure-script
                         :initform common-lisp:nil)
                        (iam-instance-profile-name :initarg
                         :|iamInstanceProfileName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %server-launch-configuration-iam-instance-profile-name
                         :initform common-lisp:nil)
                        (associate-public-ip-address :initarg
                         :|associatePublicIpAddress| :type
                         (common-lisp:or associate-public-ip-address
                                         common-lisp:null)
                         :accessor
                         %server-launch-configuration-associate-public-ip-address
                         :initform common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %server-launch-configuration-instance-type
                         :initform common-lisp:nil)
                        (user-data :initarg :|userData| :type
                         (common-lisp:or user-data common-lisp:null) :accessor
                         %server-launch-configuration-user-data :initform
                         common-lisp:nil)
                        (ec2key-name :initarg :|ec2KeyName| :type
                         (common-lisp:or ec2key-name common-lisp:null)
                         :accessor %server-launch-configuration-ec2key-name
                         :initform common-lisp:nil)
                        (security-group :initarg :|securityGroup| :type
                         (common-lisp:or security-group common-lisp:null)
                         :accessor %server-launch-configuration-security-group
                         :initform common-lisp:nil)
                        (subnet :initarg :|subnet| :type
                         (common-lisp:or subnet common-lisp:null) :accessor
                         %server-launch-configuration-subnet :initform
                         common-lisp:nil)
                        (vpc :initarg :|vpc| :type
                         (common-lisp:or vpc common-lisp:null) :accessor
                         %server-launch-configuration-vpc :initform
                         common-lisp:nil)
                        (logical-id :initarg :|logicalId| :type
                         (common-lisp:or logical-id common-lisp:null) :accessor
                         %server-launch-configuration-logical-id :initform
                         common-lisp:nil)
                        (server :initarg :|server| :type
                         (common-lisp:or server common-lisp:null) :accessor
                         %server-launch-configuration-server :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-launch-configuration
                    'make-server-launch-configuration))
 (common-lisp:defun make-server-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configure-script-type configure-script
                     iam-instance-profile-name associate-public-ip-address
                     instance-type user-data ec2key-name security-group subnet
                     vpc logical-id server)
   (common-lisp:apply #'common-lisp:make-instance 'server-launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-id))
      (common-lisp:list
       (common-lisp:cons "logicalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet))
      (common-lisp:list
       (common-lisp:cons "subnet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "securityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2key-name))
      (common-lisp:list
       (common-lisp:cons "ec2KeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "associatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "iamInstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configure-script))
      (common-lisp:list
       (common-lisp:cons "configureScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configure-script-type))
      (common-lisp:list
       (common-lisp:cons "configureScriptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-launch-configurations ()
   '(trivial-types:proper-list server-launch-configuration))
 (common-lisp:defun |make-server-launch-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-launch-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype server-list () '(trivial-types:proper-list server))
 (common-lisp:defun |make-server-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-replication-configuration common-lisp:nil
                       ((server-replication-parameters :initarg
                         :|serverReplicationParameters| :type
                         (common-lisp:or server-replication-parameters
                                         common-lisp:null)
                         :accessor
                         %server-replication-configuration-server-replication-parameters
                         :initform common-lisp:nil)
                        (server :initarg :|server| :type
                         (common-lisp:or server common-lisp:null) :accessor
                         %server-replication-configuration-server :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-replication-configuration
                    'make-server-replication-configuration))
 (common-lisp:defun make-server-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-replication-parameters server)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-replication-parameters))
      (common-lisp:list
       (common-lisp:cons "serverReplicationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-replication-configurations ()
   '(trivial-types:proper-list server-replication-configuration))
 (common-lisp:defun |make-server-replication-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-replication-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-replication-parameters common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %server-replication-parameters-kms-key-id :initform
                         common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %server-replication-parameters-encrypted :initform
                         common-lisp:nil)
                        (number-of-recent-amis-to-keep :initarg
                         :|numberOfRecentAmisToKeep| :type
                         (common-lisp:or number-of-recent-amis-to-keep
                                         common-lisp:null)
                         :accessor
                         %server-replication-parameters-number-of-recent-amis-to-keep
                         :initform common-lisp:nil)
                        (license-type :initarg :|licenseType| :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor %server-replication-parameters-license-type
                         :initform common-lisp:nil)
                        (run-once :initarg :|runOnce| :type
                         (common-lisp:or run-once common-lisp:null) :accessor
                         %server-replication-parameters-run-once :initform
                         common-lisp:nil)
                        (frequency :initarg :|frequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %server-replication-parameters-frequency :initform
                         common-lisp:nil)
                        (seed-time :initarg :|seedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %server-replication-parameters-seed-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-replication-parameters
                    'make-server-replication-parameters))
 (common-lisp:defun make-server-replication-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id encrypted
                     number-of-recent-amis-to-keep license-type run-once
                     frequency seed-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-replication-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seed-time))
      (common-lisp:list
       (common-lisp:cons "seedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-once))
      (common-lisp:list
       (common-lisp:cons "runOnce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recent-amis-to-keep))
      (common-lisp:list
       (common-lisp:cons "numberOfRecentAmisToKeep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-replication-parameters))
   common-lisp:nil))
(common-lisp:deftype server-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-validation-configuration common-lisp:nil
                       ((user-data-validation-parameters :initarg
                         :|userDataValidationParameters| :type
                         (common-lisp:or user-data-validation-parameters
                                         common-lisp:null)
                         :accessor
                         %server-validation-configuration-user-data-validation-parameters
                         :initform common-lisp:nil)
                        (server-validation-strategy :initarg
                         :|serverValidationStrategy| :type
                         (common-lisp:or server-validation-strategy
                                         common-lisp:null)
                         :accessor
                         %server-validation-configuration-server-validation-strategy
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string-with-max-len255
                                         common-lisp:null)
                         :accessor %server-validation-configuration-name
                         :initform common-lisp:nil)
                        (validation-id :initarg :|validationId| :type
                         (common-lisp:or validation-id common-lisp:null)
                         :accessor
                         %server-validation-configuration-validation-id
                         :initform common-lisp:nil)
                        (server :initarg :|server| :type
                         (common-lisp:or server common-lisp:null) :accessor
                         %server-validation-configuration-server :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-validation-configuration
                    'make-server-validation-configuration))
 (common-lisp:defun make-server-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-data-validation-parameters
                     server-validation-strategy name validation-id server)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-validation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-id))
      (common-lisp:list
       (common-lisp:cons "validationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-validation-strategy))
      (common-lisp:list
       (common-lisp:cons "serverValidationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-data-validation-parameters))
      (common-lisp:list
       (common-lisp:cons "userDataValidationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-validation-configurations ()
   '(trivial-types:proper-list server-validation-configuration))
 (common-lisp:defun |make-server-validation-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-validation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass server-validation-output common-lisp:nil
                       ((server :initarg :|server| :type
                         (common-lisp:or server common-lisp:null) :accessor
                         %server-validation-output-server :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'server-validation-output 'make-server-validation-output))
 (common-lisp:defun make-server-validation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server)
   (common-lisp:apply #'common-lisp:make-instance 'server-validation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-validation-output))
   common-lisp:nil))
(common-lisp:deftype server-validation-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %source-s3location :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defun make-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:deftype stack-id () 'common-lisp:string)
(common-lisp:deftype stack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-app-replication-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %start-app-replication-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-app-replication-request
                    'make-start-app-replication-request))
 (common-lisp:defun make-start-app-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-app-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-app-replication-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-app-replication-response
                    'make-start-app-replication-response))
 (common-lisp:defun make-start-app-replication-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-app-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-app-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-app-replication-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %start-on-demand-app-replication-request-description
                         :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %start-on-demand-app-replication-request-app-id
                         :initform (common-lisp:error ":appid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-app-replication-request
                    'make-start-on-demand-app-replication-request))
 (common-lisp:defun make-start-on-demand-app-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-app-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-app-replication-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-on-demand-app-replication-response
                    'make-start-on-demand-app-replication-response))
 (common-lisp:defun make-start-on-demand-app-replication-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-app-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-app-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-replication-run-request common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %start-on-demand-replication-run-request-description
                         :initform common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %start-on-demand-replication-run-request-replication-job-id
                         :initform
                         (common-lisp:error ":replicationjobid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-replication-run-request
                    'make-start-on-demand-replication-run-request))
 (common-lisp:defun make-start-on-demand-replication-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-replication-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-on-demand-replication-run-response common-lisp:nil
                       ((replication-run-id :initarg :|replicationRunId| :type
                         (common-lisp:or replication-run-id common-lisp:null)
                         :accessor
                         %start-on-demand-replication-run-response-replication-run-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-on-demand-replication-run-response
                    'make-start-on-demand-replication-run-response))
 (common-lisp:defun make-start-on-demand-replication-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replication-run-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-on-demand-replication-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-run-id))
      (common-lisp:list
       (common-lisp:cons "replicationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-on-demand-replication-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-app-replication-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %stop-app-replication-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-app-replication-request
                    'make-stop-app-replication-request))
 (common-lisp:defun make-stop-app-replication-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-app-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-app-replication-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-app-replication-response
                    'make-stop-app-replication-response))
 (common-lisp:defun make-stop-app-replication-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-app-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-app-replication-response))
   common-lisp:nil))
(common-lisp:deftype subnet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition temporarily-unavailable-exception
     (sms-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'temporarily-unavailable-exception)))
(common-lisp:progn
 (common-lisp:defclass terminate-app-request common-lisp:nil
                       ((app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %terminate-app-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-app-request 'make-terminate-app-request))
 (common-lisp:defun make-terminate-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-app-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'terminate-app-response 'make-terminate-app-response))
 (common-lisp:defun make-terminate-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-app-response))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype total-server-groups () 'common-lisp:integer)
(common-lisp:deftype total-servers () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-operation-exception
     (sms-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unauthorized-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-operation-exception
                    'unauthorized-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-app-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-app-request-tags :initform common-lisp:nil)
                        (server-groups :initarg :|serverGroups| :type
                         (common-lisp:or server-groups common-lisp:null)
                         :accessor %update-app-request-server-groups :initform
                         common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %update-app-request-role-name :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or app-description common-lisp:null)
                         :accessor %update-app-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or app-name common-lisp:null) :accessor
                         %update-app-request-name :initform common-lisp:nil)
                        (app-id :initarg :|appId| :type
                         (common-lisp:or app-id common-lisp:null) :accessor
                         %update-app-request-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-app-request 'make-update-app-request))
 (common-lisp:defun make-update-app-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-groups role-name description
                     name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-groups))
      (common-lisp:list
       (common-lisp:cons "serverGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-app-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-app-response-tags :initform common-lisp:nil)
                        (server-groups :initarg :|serverGroups| :type
                         (common-lisp:or server-groups common-lisp:null)
                         :accessor %update-app-response-server-groups :initform
                         common-lisp:nil)
                        (app-summary :initarg :|appSummary| :type
                         (common-lisp:or app-summary common-lisp:null)
                         :accessor %update-app-response-app-summary :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-app-response 'make-update-app-response))
 (common-lisp:defun make-update-app-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags server-groups app-summary)
   (common-lisp:apply #'common-lisp:make-instance 'update-app-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-summary))
      (common-lisp:list
       (common-lisp:cons "appSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-groups))
      (common-lisp:list
       (common-lisp:cons "serverGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-job-request common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %update-replication-job-request-kms-key-id :initform
                         common-lisp:nil)
                        (encrypted :initarg :|encrypted| :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %update-replication-job-request-encrypted :initform
                         common-lisp:nil)
                        (number-of-recent-amis-to-keep :initarg
                         :|numberOfRecentAmisToKeep| :type
                         (common-lisp:or number-of-recent-amis-to-keep
                                         common-lisp:null)
                         :accessor
                         %update-replication-job-request-number-of-recent-amis-to-keep
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-replication-job-request-description
                         :initform common-lisp:nil)
                        (role-name :initarg :|roleName| :type
                         (common-lisp:or role-name common-lisp:null) :accessor
                         %update-replication-job-request-role-name :initform
                         common-lisp:nil)
                        (license-type :initarg :|licenseType| :type
                         (common-lisp:or license-type common-lisp:null)
                         :accessor %update-replication-job-request-license-type
                         :initform common-lisp:nil)
                        (next-replication-run-start-time :initarg
                         :|nextReplicationRunStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-replication-job-request-next-replication-run-start-time
                         :initform common-lisp:nil)
                        (frequency :initarg :|frequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %update-replication-job-request-frequency :initform
                         common-lisp:nil)
                        (replication-job-id :initarg :|replicationJobId| :type
                         (common-lisp:or replication-job-id common-lisp:null)
                         :accessor
                         %update-replication-job-request-replication-job-id
                         :initform
                         (common-lisp:error ":replicationjobid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-replication-job-request
                    'make-update-replication-job-request))
 (common-lisp:defun make-update-replication-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id encrypted
                     number-of-recent-amis-to-keep description role-name
                     license-type next-replication-run-start-time frequency
                     replication-job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-job-id))
      (common-lisp:list
       (common-lisp:cons "replicationJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-replication-run-start-time))
      (common-lisp:list
       (common-lisp:cons "nextReplicationRunStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-type))
      (common-lisp:list
       (common-lisp:cons "licenseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "roleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-recent-amis-to-keep))
      (common-lisp:list
       (common-lisp:cons "numberOfRecentAmisToKeep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-job-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-replication-job-response
                    'make-update-replication-job-response))
 (common-lisp:defun make-update-replication-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-data common-lisp:nil
                       ((s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %user-data-s3location :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-data 'make-user-data))
 (common-lisp:defun make-user-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance 'user-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-data-validation-parameters common-lisp:nil
                       ((script-type :initarg :|scriptType| :type
                         (common-lisp:or script-type common-lisp:null)
                         :accessor %user-data-validation-parameters-script-type
                         :initform common-lisp:nil)
                        (source :initarg :|source| :type
                         (common-lisp:or source common-lisp:null) :accessor
                         %user-data-validation-parameters-source :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-data-validation-parameters
                    'make-user-data-validation-parameters))
 (common-lisp:defun make-user-data-validation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script-type source)
   (common-lisp:apply #'common-lisp:make-instance
                      'user-data-validation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-data-validation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-data-validation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-type))
      (common-lisp:list
       (common-lisp:cons "scriptType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-data-validation-parameters))
   common-lisp:nil))
(common-lisp:deftype vpc () 'common-lisp:string)
(common-lisp:deftype validation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validation-output common-lisp:nil
                       ((server-validation-output :initarg
                         :|serverValidationOutput| :type
                         (common-lisp:or server-validation-output
                                         common-lisp:null)
                         :accessor %validation-output-server-validation-output
                         :initform common-lisp:nil)
                        (app-validation-output :initarg :|appValidationOutput|
                         :type
                         (common-lisp:or app-validation-output
                                         common-lisp:null)
                         :accessor %validation-output-app-validation-output
                         :initform common-lisp:nil)
                        (latest-validation-time :initarg
                         :|latestValidationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %validation-output-latest-validation-time :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or validation-status-message
                                         common-lisp:null)
                         :accessor %validation-output-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or validation-status common-lisp:null)
                         :accessor %validation-output-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or non-empty-string-with-max-len255
                                         common-lisp:null)
                         :accessor %validation-output-name :initform
                         common-lisp:nil)
                        (validation-id :initarg :|validationId| :type
                         (common-lisp:or validation-id common-lisp:null)
                         :accessor %validation-output-validation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-output 'make-validation-output))
 (common-lisp:defun make-validation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-validation-output
                     app-validation-output latest-validation-time
                     status-message status name validation-id)
   (common-lisp:apply #'common-lisp:make-instance 'validation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-id))
      (common-lisp:list
       (common-lisp:cons "validationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-validation-time))
      (common-lisp:list
       (common-lisp:cons "latestValidationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-validation-output))
      (common-lisp:list
       (common-lisp:cons "appValidationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-validation-output))
      (common-lisp:list
       (common-lisp:cons "serverValidationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-output-list ()
   '(trivial-types:proper-list validation-output))
 (common-lisp:defun |make-validation-output-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-status () 'common-lisp:string)
(common-lisp:deftype validation-status-message () 'common-lisp:string)
(common-lisp:deftype vm-id () 'common-lisp:string)
(common-lisp:deftype vm-manager-id () 'common-lisp:string)
(common-lisp:deftype vm-manager-name () 'common-lisp:string)
(common-lisp:deftype vm-manager-type () 'common-lisp:string)
(common-lisp:deftype vm-name () 'common-lisp:string)
(common-lisp:deftype vm-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vm-server common-lisp:nil
                       ((vm-path :initarg :|vmPath| :type
                         (common-lisp:or vm-path common-lisp:null) :accessor
                         %vm-server-vm-path :initform common-lisp:nil)
                        (vm-manager-type :initarg :|vmManagerType| :type
                         (common-lisp:or vm-manager-type common-lisp:null)
                         :accessor %vm-server-vm-manager-type :initform
                         common-lisp:nil)
                        (vm-manager-name :initarg :|vmManagerName| :type
                         (common-lisp:or vm-manager-name common-lisp:null)
                         :accessor %vm-server-vm-manager-name :initform
                         common-lisp:nil)
                        (vm-name :initarg :|vmName| :type
                         (common-lisp:or vm-name common-lisp:null) :accessor
                         %vm-server-vm-name :initform common-lisp:nil)
                        (vm-server-address :initarg :|vmServerAddress| :type
                         (common-lisp:or vm-server-address common-lisp:null)
                         :accessor %vm-server-vm-server-address :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vm-server 'make-vm-server))
 (common-lisp:defun make-vm-server
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vm-path vm-manager-type vm-manager-name
                     vm-name vm-server-address)
   (common-lisp:apply #'common-lisp:make-instance 'vm-server
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vm-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vm-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-server-address))
      (common-lisp:list
       (common-lisp:cons "vmServerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-name))
      (common-lisp:list
       (common-lisp:cons "vmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-name))
      (common-lisp:list
       (common-lisp:cons "vmManagerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-type))
      (common-lisp:list
       (common-lisp:cons "vmManagerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-path))
      (common-lisp:list
       (common-lisp:cons "vmPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vm-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vm-server-address common-lisp:nil
                       ((vm-id :initarg :|vmId| :type
                         (common-lisp:or vm-id common-lisp:null) :accessor
                         %vm-server-address-vm-id :initform common-lisp:nil)
                        (vm-manager-id :initarg :|vmManagerId| :type
                         (common-lisp:or vm-manager-id common-lisp:null)
                         :accessor %vm-server-address-vm-manager-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vm-server-address 'make-vm-server-address))
 (common-lisp:defun make-vm-server-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vm-id vm-manager-id)
   (common-lisp:apply #'common-lisp:make-instance 'vm-server-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vm-server-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vm-server-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-manager-id))
      (common-lisp:list
       (common-lisp:cons "vmManagerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-id))
      (common-lisp:list
       (common-lisp:cons "vmId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vm-server-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vm-server-address-list ()
   '(trivial-types:proper-list vm-server-address))
 (common-lisp:defun |make-vm-server-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vm-server-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description role-name client-token
                     server-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable name description role-name client-token
     server-groups tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApp"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id seed-replication-time frequency
                     run-once license-type role-name description
                     number-of-recent-amis-to-keep encrypted kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable server-id seed-replication-time frequency run-once
     license-type role-name description number-of-recent-amis-to-keep encrypted
     kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-replication-job))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id force-stop-app-replication
                     force-terminate-app)
   (common-lisp:declare
    (common-lisp:ignorable app-id force-stop-app-replication
     force-terminate-app))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApp"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-app-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-app-launch-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAppLaunchConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-launch-configuration))
(common-lisp:progn
 (common-lisp:defun delete-app-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-app-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAppReplicationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-replication-configuration))
(common-lisp:progn
 (common-lisp:defun delete-app-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-app-validation-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAppValidationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-validation-configuration))
(common-lisp:progn
 (common-lisp:defun delete-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id)
   (common-lisp:declare (common-lisp:ignorable replication-job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-replication-job))
(common-lisp:progn
 (common-lisp:defun delete-server-catalog ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sms-request :method "POST" :path "/" :protocol
                                :json :operation "DeleteServerCatalog" :params
                                `(("Action" ,@"DeleteServerCatalog")
                                  ("Version" ,@"2016-10-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-server-catalog))
(common-lisp:progn
 (common-lisp:defun disassociate-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateConnector"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-connector))
(common-lisp:progn
 (common-lisp:defun generate-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id changeset-format)
   (common-lisp:declare (common-lisp:ignorable app-id changeset-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GenerateChangeSet"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-change-set))
(common-lisp:progn
 (common-lisp:defun generate-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id template-format)
   (common-lisp:declare (common-lisp:ignorable app-id template-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GenerateTemplate"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-template))
(common-lisp:progn
 (common-lisp:defun get-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetApp" "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app))
(common-lisp:progn
 (common-lisp:defun get-app-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-app-launch-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAppLaunchConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-launch-configuration))
(common-lisp:progn
 (common-lisp:defun get-app-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-app-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAppReplicationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-replication-configuration))
(common-lisp:progn
 (common-lisp:defun get-app-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-app-validation-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAppValidationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-validation-configuration))
(common-lisp:progn
 (common-lisp:defun get-app-validation-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-app-validation-output-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAppValidationOutput"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-validation-output))
(common-lisp:progn
 (common-lisp:defun get-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetConnectors"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connectors))
(common-lisp:progn
 (common-lisp:defun get-replication-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-replication-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetReplicationJobs"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-replication-jobs))
(common-lisp:progn
 (common-lisp:defun get-replication-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-replication-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetReplicationRuns"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-replication-runs))
(common-lisp:progn
 (common-lisp:defun get-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     vm-server-address-list)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results vm-server-address-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetServers"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-servers))
(common-lisp:progn
 (common-lisp:defun import-app-catalog
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-app-catalog-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportAppCatalog"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-app-catalog))
(common-lisp:progn
 (common-lisp:defun import-server-catalog ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sms-request :method "POST" :path "/" :protocol
                                :json :operation "ImportServerCatalog" :params
                                `(("Action" ,@"ImportServerCatalog")
                                  ("Version" ,@"2016-10-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'import-server-catalog))
(common-lisp:progn
 (common-lisp:defun launch-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-launch-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "LaunchApp"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'launch-app))
(common-lisp:progn
 (common-lisp:defun list-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-ids next-token max-results)
   (common-lisp:declare (common-lisp:ignorable app-ids next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListApps"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps))
(common-lisp:progn
 (common-lisp:defun notify-app-validation-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id notification-context)
   (common-lisp:declare (common-lisp:ignorable app-id notification-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-app-validation-output-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "NotifyAppValidationOutput"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'notify-app-validation-output))
(common-lisp:progn
 (common-lisp:defun put-app-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id role-name auto-launch
                     server-group-launch-configurations)
   (common-lisp:declare
    (common-lisp:ignorable app-id role-name auto-launch
     server-group-launch-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-app-launch-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAppLaunchConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-app-launch-configuration))
(common-lisp:progn
 (common-lisp:defun put-app-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id
                     server-group-replication-configurations)
   (common-lisp:declare
    (common-lisp:ignorable app-id server-group-replication-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-app-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAppReplicationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-app-replication-configuration))
(common-lisp:progn
 (common-lisp:defun put-app-validation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id app-validation-configurations
                     server-group-validation-configurations)
   (common-lisp:declare
    (common-lisp:ignorable app-id app-validation-configurations
     server-group-validation-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-app-validation-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutAppValidationConfiguration"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-app-validation-configuration))
(common-lisp:progn
 (common-lisp:defun start-app-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-app-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartAppReplication"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-app-replication))
(common-lisp:progn
 (common-lisp:defun start-on-demand-app-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id description)
   (common-lisp:declare (common-lisp:ignorable app-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-on-demand-app-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartOnDemandAppReplication"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-on-demand-app-replication))
(common-lisp:progn
 (common-lisp:defun start-on-demand-replication-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id description)
   (common-lisp:declare (common-lisp:ignorable replication-job-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-on-demand-replication-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartOnDemandReplicationRun"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-on-demand-replication-run))
(common-lisp:progn
 (common-lisp:defun stop-app-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-app-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopAppReplication"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-app-replication))
(common-lisp:progn
 (common-lisp:defun terminate-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TerminateApp"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-app))
(common-lisp:progn
 (common-lisp:defun update-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id name description role-name
                     server-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable app-id name description role-name server-groups
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApp"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app))
(common-lisp:progn
 (common-lisp:defun update-replication-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-job-id frequency
                     next-replication-run-start-time license-type role-name
                     description number-of-recent-amis-to-keep encrypted
                     kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable replication-job-id frequency
     next-replication-run-start-time license-type role-name description
     number-of-recent-amis-to-keep encrypted kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-replication-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateReplicationJob"
                                                        "2016-10-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-replication-job))
